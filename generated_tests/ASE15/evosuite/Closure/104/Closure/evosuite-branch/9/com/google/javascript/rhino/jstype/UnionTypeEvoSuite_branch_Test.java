/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:49:36 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertNotNull(recordType0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(true, recordType0.isObject());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      
      unionType1.setResolvedTypeInternal(recordType0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(true, recordType0.isObject());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertNotSame(unionType1, unionType0);
      
      UnionType unionType2 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertTrue(unionType2.equals((Object)unionType1));
      assertTrue(unionType0.equals((Object)unionType1));
      assertNotNull(unionType2);
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(false, unionType2.isNamedType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isEmptyType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isNoType());
      assertEquals(true, unionType2.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertSame(unionType2, unionType0);
      assertNotSame(unionType2, unionType1);
      assertSame(unionType0, unionType2);
      assertNotSame(unionType0, unionType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      
      EmptyScope emptyScope0 = new EmptyScope();
      //  // Unstable assertion: assertNotNull(emptyScope0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertTrue(boolean0);
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      //  // Unstable assertion: assertNotNull(unionType1);
      //  // Unstable assertion: assertEquals(true, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNoType());
      //  // Unstable assertion: assertEquals(true, unionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType1.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(true, unionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertSame(unionType0, unionType1);
      //  // Unstable assertion: assertSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      //  // Unstable assertion: assertNotNull(enumType0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, enumType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, enumType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNullType());
      //  // Unstable assertion: assertEquals(false, enumType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, enumType0.isAllType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, enumType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, enumType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNoType());
      //  // Unstable assertion: assertEquals(false, enumType0.isResolved());
      //  // Unstable assertion: assertEquals(true, enumType0.isObject());
      //  // Unstable assertion: assertEquals(false, enumType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, enumType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, enumType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, enumType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, enumType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, enumType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, enumType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) enumType0);
      //  // Unstable assertion: assertNotNull(jSType_TypePair0);
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, enumType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, enumType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNullType());
      //  // Unstable assertion: assertEquals(false, enumType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, enumType0.isAllType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, enumType0.matchesNumberContext());
      //  // Unstable assertion: assertEquals(false, enumType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNoType());
      //  // Unstable assertion: assertEquals(false, enumType0.isResolved());
      //  // Unstable assertion: assertEquals(true, enumType0.isObject());
      //  // Unstable assertion: assertEquals(false, enumType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, enumType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(true, enumType0.matchesObjectContext());
      //  // Unstable assertion: assertEquals(false, enumType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, enumType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, enumType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, enumType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, enumType0.matchesStringContext());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(hashSet1);
      assertEquals(true, hashSet1.isEmpty());
      assertEquals("[]", hashSet1.toString());
      assertEquals(0, hashSet1.size());
      assertNotSame(hashSet1, hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet1);
      assertTrue(unionType1.equals((Object)unionType0));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, hashSet1.isEmpty());
      assertEquals("[]", hashSet1.toString());
      assertEquals(0, hashSet1.size());
      assertNotSame(unionType1, unionType0);
      assertNotSame(hashSet1, hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, hashSet1.isEmpty());
      assertEquals("[]", hashSet1.toString());
      assertEquals(0, hashSet1.size());
      assertNotSame(unionType1, unionType0);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(0, booleanLiteralSet0.ordinal());
      assertEquals("EMPTY", booleanLiteralSet0.toString());
      assertEquals("EMPTY", booleanLiteralSet0.name());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(unionType0, unionType1);
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      
      boolean boolean0 = unionType0.matchesInt32Context();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = unionType0.isString();
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertTrue(boolean1);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      
      boolean boolean2 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertTrue(boolean2);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      
      String string0 = unionType0.toString();
      assertNotNull(string0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("(?|undefined)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
      assertNotNull(enumType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isObject());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)unionType0.getRestrictedUnion((JSType) enumType0);
      assertNotNull(errorFunctionType1);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.isObject());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(true, errorFunctionType1.isObject());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isEmptyType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isNoType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isNamedType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      assertSame(errorFunctionType1, errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotNull(noType0);
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertNotSame(unionType0, unionType1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      
      UnknownType unknownType1 = (UnknownType)unionType0.getRestrictedUnion((JSType) unionType0);
      assertFalse(unknownType1.equals((Object)unknownType0));
      assertNotNull(unknownType1);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals("??", unknownType1.toString());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isEmptyType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isNamedType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(true, unknownType1.isObject());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertNotSame(unknownType1, unknownType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      
      boolean boolean1 = unionType0.contains((JSType) voidType0);
      assertTrue(boolean1 == boolean0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      boolean boolean0 = unionType0.differsFrom((JSType) unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      
      boolean boolean0 = unionType0.equals((Object) linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      
      NoType noType0 = (NoType)unionType0.meet(voidType0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      NoType noType1 = (NoType)unionType0.meet(noType0);
      assertNotNull(noType1);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(true, noType1.isNullable());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(true, noType1.isEmptyType());
      assertEquals(false, noType1.isRecordType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isAllType());
      assertEquals(true, noType1.isNoType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals("None", noType1.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isNamedType());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(true, noType1.hasInstanceType());
      assertNull(noType1.getReferenceName());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isVoidType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isResolved());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isResolved());
      assertTrue(boolean0);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isResolved());
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, JSType>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(true, recordType0.isObject());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isVoidType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      
      RecordType recordType1 = (RecordType)unionType0.getLeastSupertype((JSType) recordType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotNull(recordType1);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isEmptyType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNamedType());
      assertEquals(true, recordType1.isObject());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(true, recordType0.isObject());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotSame(unionType0, unionType1);
      assertSame(recordType1, recordType0);
      assertSame(recordType0, recordType1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      UnknownType unknownType1 = (UnknownType)unionType0.getLeastSupertype((JSType) allType0);
      assertFalse(unknownType1.equals((Object)unknownType0));
      assertNotNull(unknownType1);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isNamedType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isEmptyType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isNullType());
      assertEquals("?", unknownType1.toString());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(true, unknownType1.isObject());
      assertNotSame(unknownType1, unknownType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getLeastSupertype((JSType) unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      VoidType voidType1 = (VoidType)unionType0.meet(unionType0);
      assertNotNull(voidType1);
      assertEquals(false, voidType1.isUnionType());
      assertEquals(false, voidType1.isTemplateType());
      assertEquals(false, voidType1.isNoObjectType());
      assertEquals(false, voidType1.isNamedType());
      assertEquals(false, voidType1.isNoType());
      assertEquals(true, voidType1.matchesStringContext());
      assertEquals(false, voidType1.isStringValueType());
      assertEquals(false, voidType1.isRecordType());
      assertEquals(false, voidType1.matchesObjectContext());
      assertEquals(false, voidType1.isAllType());
      assertEquals(false, voidType1.isFunctionType());
      assertEquals(false, voidType1.isBooleanValueType());
      assertEquals(false, voidType1.isNumberValueType());
      assertEquals(true, voidType1.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType1.toString());
      assertEquals(false, voidType1.isObject());
      assertEquals(false, voidType1.isNullType());
      assertEquals(false, voidType1.matchesNumberContext());
      assertEquals(false, voidType1.isEmptyType());
      assertEquals(false, voidType1.isResolved());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertSame(voidType1, voidType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.hasReferenceName());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      
      boolean boolean2 = unionType0.isNullable();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(hashSet1);
      assertEquals(true, hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertEquals("[]", hashSet1.toString());
      assertNotSame(hashSet1, hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet1);
      assertTrue(unionType1.equals((Object)unionType0));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(unionType1);
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertEquals("[]", hashSet1.toString());
      assertNotSame(unionType1, unionType0);
      assertNotSame(hashSet1, hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertEquals("[]", hashSet1.toString());
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.isNullable();
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertNotSame(unionType0, unionType1);
      assertNotSame(hashSet0, hashSet1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isEmptyType());
      
      boolean boolean2 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertTrue(boolean2);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      
      boolean boolean3 = unionType0.canTestForEqualityWith((JSType) unknownType0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isAllType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isAllType());
      assertTrue(boolean1);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNamedType());
      
      boolean boolean2 = linkedHashSet0.add((JSType) voidType0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean2);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      
      TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) voidType0);
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals("[?, undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNamedType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      NoType noType0 = (NoType)unionType0.restrictByNotNullOrUndefined();
      assertNotNull(noType0);
      assertEquals(false, noType0.isTemplateType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[undefined]", linkedHashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      
      boolean boolean1 = unionType0.canBeCalled();
      assertFalse(boolean1 == boolean0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.toString());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.canBeCalled());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.toString());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      boolean boolean2 = unionType0.canBeCalled();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertTrue(boolean0);
      
      boolean boolean1 = unionType0.canAssignTo((JSType) unionType0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isAllType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean2 = unionType0.canAssignTo((JSType) unknownType0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertTrue(boolean0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[null, ??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[null, ??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      
      String string0 = "HJn!_&,OT>bE?80e";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNamedType());
      
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      assertNotNull(functionPrototypeType0);
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNamedType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(true, functionPrototypeType0.isObject());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      
      boolean boolean2 = false;
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      NoType noType0 = (NoType)functionPrototypeType0.getRestrictedTypeGivenToBooleanOutcome(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(noType0);
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNamedType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(true, functionPrototypeType0.isObject());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      
      boolean boolean3 = linkedHashSet0.add((JSType) noType0);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(3, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null, ??, None]", linkedHashSet0.toString());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNamedType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(true, functionPrototypeType0.isObject());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertTrue(boolean3);
      
      UnknownType unknownType1 = (UnknownType)unionType0.findPropertyType(string0);
      assertNotNull(unknownType1);
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals("??", unknownType1.toString());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isEmptyType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isNamedType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(true, unknownType1.isNullable());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(true, unknownType1.isObject());
      assertEquals(3, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null, ??, None]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertSame(unknownType1, unknownType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertTrue(boolean0);
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      //  // Unstable assertion: assertNull(jSType0);
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNamedType());
      assertTrue(boolean0);
      
      String string0 = "r3tlIhQL'u|AU|[1$);";
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNumberValueType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      
      boolean boolean2 = unionType0.matchesObjectContext();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(hashSet1);
      assertEquals("[]", hashSet1.toString());
      assertEquals(true, hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertNotSame(hashSet1, hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet1);
      assertTrue(unionType1.equals((Object)unionType0));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(unionType1);
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals("[]", hashSet1.toString());
      assertEquals(true, hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertNotSame(unionType1, unionType0);
      assertNotSame(hashSet1, hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals("[]", hashSet1.toString());
      assertEquals(true, hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(unionType0, unionType1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEmptyType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertTrue(boolean1 == boolean0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertNotSame(unionType0, unionType1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isAllType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean2 = unionType0.matchesNumberContext();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.matchesStringContext());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((JSType) voidType0);
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.matchesInt32Context();
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[undefined]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try {
        unionType0.forgiveUnknownNames();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      
      unionType0.forgiveUnknownNames();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
  }

  //@Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(noObjectType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
  }

  //@Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertNotNull(noObjectType0);
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NoObjectType noObjectType1 = (NoObjectType)unionType0.getGreatestSubtype((JSType) noObjectType0);
      assertNotNull(noObjectType1);
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, noObjectType1.isEmptyType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertNull(noObjectType1.getReferenceName());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(true, noObjectType1.isObject());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isNamedType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = unionType0.isUnionType();
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
  }
}
