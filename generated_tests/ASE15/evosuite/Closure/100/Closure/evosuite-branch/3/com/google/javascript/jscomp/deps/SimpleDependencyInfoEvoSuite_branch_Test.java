/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 05:48:27 GMT 2014
 */

package com.google.javascript.jscomp.deps;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.deps.SimpleDependencyInfo;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SimpleDependencyInfoEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerFirst(string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)]", linkedList0.toString());
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals("[DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)]", linkedList0.toString());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList1, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo1);
      assertEquals(1, linkedList0.size());
      assertEquals("[DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)]", linkedList0.toString());
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo1.getName());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      
      boolean boolean1 = simpleDependencyInfo0.equals((Object) simpleDependencyInfo1);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals("[DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)]", linkedList0.toString());
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo1.getName());
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      List<String> list0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, list0, list0);
      assertNotNull(simpleDependencyInfo0);
      assertNull(simpleDependencyInfo0.getName());
      assertNull(simpleDependencyInfo0.getPathRelativeToClosureBase());
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string0, string0, list0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNull(simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertNull(simpleDependencyInfo1.getName());
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      
      boolean boolean0 = simpleDependencyInfo0.equals((Object) simpleDependencyInfo1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNull(simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertNull(simpleDependencyInfo1.getName());
      assertNull(simpleDependencyInfo0.getName());
      assertNull(simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string1, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertNull(simpleDependencyInfo0.getName());
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      
      boolean boolean0 = simpleDependencyInfo0.equals((Object) simpleDependencyInfo1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertNull(simpleDependencyInfo0.getName());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      List<String> list0 = null;
      String string1 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string1, (List<String>) linkedList0, list0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("", simpleDependencyInfo0.getName());
      assertNull(simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string1, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo1);
      assertNull(simpleDependencyInfo1.getName());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      
      boolean boolean0 = simpleDependencyInfo0.equals((Object) simpleDependencyInfo1);
      assertEquals("", simpleDependencyInfo0.getName());
      assertNull(simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertNull(simpleDependencyInfo1.getName());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      
      int int0 = 1135;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1135, (int)integer0);
      
      boolean boolean0 = simpleDependencyInfo0.equals((Object) integer0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = simpleDependencyInfo0.equals((Object) simpleDependencyInfo0);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "\\";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("\\", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("\\", simpleDependencyInfo0.getName());
      
      Collection<String> collection0 = simpleDependencyInfo0.getRequires();
      assertNotNull(collection0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("\\", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("\\", simpleDependencyInfo0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Collection<String> collection0 = simpleDependencyInfo0.getProvides();
      assertNotNull(collection0);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      List<String> list0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, list0);
      assertNotNull(simpleDependencyInfo0);
      assertNull(simpleDependencyInfo0.getName());
      assertNull(simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = simpleDependencyInfo0.getPathRelativeToClosureBase();
      assertNull(string1);
      assertNull(simpleDependencyInfo0.getName());
      assertNull(simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = simpleDependencyInfo0.getName();
      assertNotNull(string1);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      
      String string1 = simpleDependencyInfo0.toString();
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getName());
      assertEquals("DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("DependencyInfo(relativePath='DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)', path='DependencyInfo(relativePath='%1$s', path='%2$s', provides=%3$s, requires=%4$s)', provides=[], requires=[])", string1);
  }
}
