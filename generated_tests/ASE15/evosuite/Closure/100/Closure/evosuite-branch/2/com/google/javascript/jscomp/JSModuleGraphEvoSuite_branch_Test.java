/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 03:10:31 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class JSModuleGraphEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<JSModule> stack0 = new Stack<JSModule>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      
      String string0 = "\r";
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertEquals("\r", jSModule0.getName());
      assertEquals("\r", jSModule0.toString());
      
      boolean boolean0 = stack0.add(jSModule0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[\r]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("\r", jSModule0.getName());
      assertEquals("\r", jSModule0.toString());
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
      assertNotNull(jSSourceFile0);
      assertEquals("\r", jSSourceFile0.getName());
      assertEquals("\r", jSSourceFile0.getOriginalPath());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) stack0);
      assertNotNull(jSModuleGraph0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[\r]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, boolean0);
      assertNotNull(compilerInput0);
      assertEquals("\r", jSSourceFile0.getName());
      assertEquals("\r", jSSourceFile0.getOriginalPath());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[\r]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("\r", compilerInput0.getName());
      assertEquals(true, compilerInput0.isExtern());
      assertEquals("\r", jSModule0.getName());
      assertEquals("\r", jSModule0.toString());
      
      jSModule0.add(compilerInput0);
      assertEquals("\r", jSSourceFile0.getName());
      assertEquals("\r", jSSourceFile0.getOriginalPath());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[\r]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
      assertEquals("\r", compilerInput0.getName());
      assertEquals(true, compilerInput0.isExtern());
      assertEquals("\r", jSModule0.getName());
      assertEquals("\r", jSModule0.toString());
      
      jSModuleGraph0.coalesceDuplicateFiles();
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[\r]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(false, stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      
      JSModule[] jSModuleArray0 = new JSModule[7];
      jSModuleArray0[0] = jSModule0;
      assertNotNull(jSModuleArray0[0]);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertNull(jSModuleArray0[0].getName());
      assertNull(jSModuleArray0[0].toString());
      
      jSModuleArray0[1] = jSModule0;
      assertNotNull(jSModuleArray0[1]);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertNull(jSModuleArray0[1].getName());
      assertNull(jSModuleArray0[1].toString());
      
      JSModule jSModule1 = new JSModule(string0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertNotNull(jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertNull(jSModule1.getName());
      assertNull(jSModule1.toString());
      
      jSModuleArray0[2] = jSModule1;
      assertNotNull(jSModuleArray0[2]);
      assertNull(jSModuleArray0[2].toString());
      assertNull(jSModuleArray0[2].getName());
      assertNull(jSModule1.getName());
      assertNull(jSModule1.toString());
      
      jSModuleArray0[3] = jSModule0;
      assertNotNull(jSModuleArray0[3]);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertNull(jSModuleArray0[3].toString());
      assertNull(jSModuleArray0[3].getName());
      
      jSModuleArray0[4] = jSModule1;
      assertNotNull(jSModuleArray0[4]);
      assertNull(jSModule1.getName());
      assertNull(jSModule1.toString());
      assertNull(jSModuleArray0[4].toString());
      assertNull(jSModuleArray0[4].getName());
      
      jSModuleArray0[5] = jSModuleArray0[2];
      assertNotNull(jSModuleArray0[5]);
      assertNull(jSModuleArray0[5].getName());
      assertNull(jSModuleArray0[5].toString());
      
      jSModuleArray0[6] = jSModule0;
      assertNotNull(jSModuleArray0[6]);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertNull(jSModuleArray0[6].toString());
      assertNull(jSModuleArray0[6].getName());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      assertNotNull(jSModuleGraph0);
      
      JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModuleArray0[2]);
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertNull(jSModule2);
      assertNotSame(jSModule0, jSModule1);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      
      Set<JSModule> set0 = jSModuleGraph0.getTransitiveDepsDeepestFirst(jSModuleArray0[6]);
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      JSModule[] jSModuleArray0 = new JSModule[7];
      jSModuleArray0[0] = jSModule0;
      assertNotNull(jSModuleArray0[0]);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModuleArray0[0].getName());
      assertNull(jSModuleArray0[0].toString());
      
      jSModuleArray0[1] = jSModuleArray0[0];
      assertNotNull(jSModuleArray0[1]);
      assertNull(jSModuleArray0[1].toString());
      assertNull(jSModuleArray0[1].getName());
      
      JSModule jSModule1 = new JSModule(string0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertNotNull(jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      
      jSModule1.addDependency(jSModule0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertNotSame(jSModule1, jSModule0);
      assertNotSame(jSModule0, jSModule1);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      jSModuleArray0[2] = jSModuleArray0[1];
      assertNotNull(jSModuleArray0[2]);
      assertNull(jSModuleArray0[2].getName());
      assertNull(jSModuleArray0[2].toString());
      
      jSModuleArray0[3] = jSModuleArray0[2];
      assertNotNull(jSModuleArray0[3]);
      assertNull(jSModuleArray0[3].getName());
      assertNull(jSModuleArray0[3].toString());
      
      jSModuleArray0[4] = jSModuleArray0[1];
      assertNotNull(jSModuleArray0[4]);
      assertNull(jSModuleArray0[4].toString());
      assertNull(jSModuleArray0[4].getName());
      
      jSModuleArray0[5] = jSModule1;
      assertNotNull(jSModuleArray0[5]);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      assertNull(jSModuleArray0[5].getName());
      assertNull(jSModuleArray0[5].toString());
      
      jSModuleArray0[6] = jSModuleArray0[4];
      assertNotNull(jSModuleArray0[6]);
      assertNull(jSModuleArray0[6].getName());
      assertNull(jSModuleArray0[6].toString());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      assertNotNull(jSModuleGraph0);
      
      JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModuleArray0[5], jSModuleArray0[2]);
      assertFalse(jSModule2.equals((Object)jSModule1));
      assertNotNull(jSModule2);
      assertNotSame(jSModule2, jSModule1);
      assertSame(jSModule2, jSModule0);
      assertNull(jSModule2.getName());
      assertNull(jSModule2.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<JSModule> stack0 = new Stack<JSModule>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String string0 = "\r";
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertEquals("\r", jSModule0.toString());
      assertEquals("\r", jSModule0.getName());
      
      boolean boolean0 = stack0.add(jSModule0);
      assertTrue(boolean0);
      assertEquals("[\r]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("\r", jSModule0.toString());
      assertEquals("\r", jSModule0.getName());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) stack0);
      assertNotNull(jSModuleGraph0);
      assertEquals("[\r]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add(jSModule0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[\r, \r]", stack0.toString());
      assertEquals("\r", jSModule0.toString());
      assertEquals("\r", jSModule0.getName());
      
      JSModule jSModule1 = jSModuleGraph0.getDeepestCommonDependencyInclusive((Collection<JSModule>) stack0);
      assertNotNull(jSModule1);
      assertSame(jSModule1, jSModule0);
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[\r, \r]", stack0.toString());
      assertEquals("\r", jSModule1.toString());
      assertEquals("\r", jSModule1.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      JSModule[] jSModuleArray0 = new JSModule[7];
      jSModuleArray0[0] = jSModule0;
      assertNotNull(jSModuleArray0[0]);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModuleArray0[0].getName());
      assertNull(jSModuleArray0[0].toString());
      
      jSModuleArray0[1] = jSModule0;
      assertNotNull(jSModuleArray0[1]);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModuleArray0[1].toString());
      assertNull(jSModuleArray0[1].getName());
      
      JSModule jSModule1 = new JSModule(string0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertNotNull(jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      
      jSModule1.addDependency(jSModule0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertNotSame(jSModule1, jSModule0);
      assertNotSame(jSModule0, jSModule1);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      jSModuleArray0[2] = jSModule1;
      assertNotNull(jSModuleArray0[2]);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      assertNull(jSModuleArray0[2].toString());
      assertNull(jSModuleArray0[2].getName());
      
      jSModuleArray0[3] = jSModuleArray0[2];
      assertNotNull(jSModuleArray0[3]);
      assertNull(jSModuleArray0[3].getName());
      assertNull(jSModuleArray0[3].toString());
      
      jSModuleArray0[4] = jSModuleArray0[0];
      assertNotNull(jSModuleArray0[4]);
      assertNull(jSModuleArray0[4].getName());
      assertNull(jSModuleArray0[4].toString());
      
      jSModuleArray0[5] = jSModuleArray0[0];
      assertNotNull(jSModuleArray0[5]);
      assertNull(jSModuleArray0[5].getName());
      assertNull(jSModuleArray0[5].toString());
      
      jSModuleArray0[6] = jSModule0;
      assertNotNull(jSModuleArray0[6]);
      assertNull(jSModuleArray0[6].toString());
      assertNull(jSModuleArray0[6].getName());
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      assertNotNull(jSModuleGraph0);
      
      JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModuleArray0[2]);
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertFalse(jSModule2.equals((Object)jSModule1));
      assertNotNull(jSModule2);
      assertSame(jSModule0, jSModule2);
      assertNotSame(jSModule0, jSModule1);
      assertNotSame(jSModule2, jSModule1);
      assertSame(jSModule2, jSModule0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModule2.getName());
      assertNull(jSModule2.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      JSModule[] jSModuleArray0 = new JSModule[7];
      jSModuleArray0[0] = jSModule0;
      assertNotNull(jSModuleArray0[0]);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModuleArray0[0].getName());
      assertNull(jSModuleArray0[0].toString());
      
      jSModuleArray0[1] = jSModule0;
      assertNotNull(jSModuleArray0[1]);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModuleArray0[1].toString());
      assertNull(jSModuleArray0[1].getName());
      
      JSModule jSModule1 = new JSModule(string0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertNotNull(jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      
      jSModuleArray0[2] = jSModule1;
      assertNotNull(jSModuleArray0[2]);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      assertNull(jSModuleArray0[2].toString());
      assertNull(jSModuleArray0[2].getName());
      
      jSModuleArray0[3] = jSModuleArray0[2];
      assertNotNull(jSModuleArray0[3]);
      assertNull(jSModuleArray0[3].toString());
      assertNull(jSModuleArray0[3].getName());
      
      jSModuleArray0[4] = jSModuleArray0[0];
      assertNotNull(jSModuleArray0[4]);
      assertNull(jSModuleArray0[4].toString());
      assertNull(jSModuleArray0[4].getName());
      
      jSModuleArray0[5] = jSModuleArray0[0];
      assertNotNull(jSModuleArray0[5]);
      assertNull(jSModuleArray0[5].getName());
      assertNull(jSModuleArray0[5].toString());
      
      jSModuleArray0[6] = jSModule0;
      assertNotNull(jSModuleArray0[6]);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModuleArray0[6].toString());
      assertNull(jSModuleArray0[6].getName());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      assertNotNull(jSModuleGraph0);
      
      boolean boolean0 = jSModuleGraph0.dependsOn(jSModule0, jSModule0);
      assertFalse(boolean0);
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertNotSame(jSModule0, jSModule1);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      JSModule jSModule2 = jSModuleGraph0.getDeepestCommonDependencyInclusive(jSModule0, jSModuleArray0[2]);
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertNull(jSModule2);
      assertNotSame(jSModule0, jSModule1);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      
      JSModule[] jSModuleArray0 = new JSModule[18];
      jSModuleArray0[0] = jSModule0;
      assertNotNull(jSModuleArray0[0]);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModuleArray0[0].toString());
      assertNull(jSModuleArray0[0].getName());
      
      JSModule jSModule1 = new JSModule(string0);
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertNotNull(jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      
      jSModule1.addDependency(jSModule0);
      assertFalse(jSModule0.equals((Object)jSModule1));
      assertFalse(jSModule1.equals((Object)jSModule0));
      assertNotSame(jSModule0, jSModule1);
      assertNotSame(jSModule1, jSModule0);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      
      jSModuleArray0[2] = jSModule1;
      assertNotNull(jSModuleArray0[2]);
      assertNull(jSModuleArray0[2].getName());
      assertNull(jSModuleArray0[2].toString());
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
      
      jSModuleArray0[0] = jSModuleArray0[2];
      JSModuleGraph jSModuleGraph0 = null;
      try {
        jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Modules not in dependency order: null preceded null
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      
      JSModuleGraph.ModuleDependenceException jSModuleGraph_ModuleDependenceException0 = new JSModuleGraph.ModuleDependenceException(string0, jSModule0, jSModule0);
      assertNotNull(jSModuleGraph_ModuleDependenceException0);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      
      JSModule jSModule1 = jSModuleGraph_ModuleDependenceException0.getModule();
      assertNotNull(jSModule1);
      assertSame(jSModule0, jSModule1);
      assertSame(jSModule1, jSModule0);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertNull(jSModule1.toString());
      assertNull(jSModule1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "\r";
      JSModule jSModule0 = new JSModule(string0);
      assertNotNull(jSModule0);
      assertEquals("\r", jSModule0.toString());
      assertEquals("\r", jSModule0.getName());
      
      JSModuleGraph.ModuleDependenceException jSModuleGraph_ModuleDependenceException0 = new JSModuleGraph.ModuleDependenceException(string0, jSModule0, jSModule0);
      assertNotNull(jSModuleGraph_ModuleDependenceException0);
      assertEquals("\r", jSModule0.toString());
      assertEquals("\r", jSModule0.getName());
      
      JSModule jSModule1 = jSModuleGraph_ModuleDependenceException0.getDependentModule();
      assertNotNull(jSModule1);
      assertSame(jSModule1, jSModule0);
      assertSame(jSModule0, jSModule1);
      assertEquals("\r", jSModule1.getName());
      assertEquals("\r", jSModule1.toString());
      assertEquals("\r", jSModule0.toString());
      assertEquals("\r", jSModule0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) arrayList0);
      assertNotNull(jSModuleGraph0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      Iterable<JSModule> iterable0 = jSModuleGraph0.getAllModules();
      assertNotNull(iterable0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) arrayList0);
      assertNotNull(jSModuleGraph0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = jSModuleGraph0.getModuleCount();
      assertEquals(0, int0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<JSModule> stack0 = new Stack<JSModule>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph((List<JSModule>) stack0);
      assertNotNull(jSModuleGraph0);
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try {
        JSModule jSModule0 = jSModuleGraph0.getRootModule();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }
}
