/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 03:31:11 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.ParserRunner;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ParserRunnerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "!+W,,Q'^)*;9;ob?";
      boolean boolean0 = true;
      Config config0 = ParserRunner.createConfig(boolean0);
      //  // Unstable assertion: assertNotNull(config0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(150, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(150, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertNotNull(errorReporter0);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      
      Logger logger0 = Logger.getLogger(string0);
      //  // Unstable assertion: assertEquals("!+W,,Q'^)*;9;ob?", logger0.getName());
      //  // Unstable assertion: assertEquals(true, logger0.getUseParentHandlers());
      //  // Unstable assertion: assertNull(logger0.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(logger0);
      
      Node node0 = ParserRunner.parse(string0, string0, config0, errorReporter0, logger0);
      //  // Unstable assertion: assertEquals("!+W,,Q'^)*;9;ob?", logger0.getName());
      //  // Unstable assertion: assertEquals(true, logger0.getUseParentHandlers());
      //  // Unstable assertion: assertNull(logger0.getResourceBundleName());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(150, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertNull(node0);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "vXM";
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      
      Logger logger0 = Logger.global;
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertNotNull(logger0);
      
      Node node0 = ParserRunner.parse(string0, string0, config0, errorReporter0, logger0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertEquals("global", logger0.getName());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(node0);
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = false;
      Config config0 = ParserRunner.createConfig(boolean0);
      //  // Unstable assertion: assertNotNull(config0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(150, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      
      Config config1 = ParserRunner.createConfig(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(150, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertFalse(config1.equals((Object)config0));
      //  // Unstable assertion: assertNotNull(config1);
      //  // Unstable assertion: assertNotSame(config1, config0);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
  }
}
