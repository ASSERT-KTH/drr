/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:30:03 GMT 2014
 */

package com.google.javascript.jscomp.deps;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.deps.DependencyInfo;
import com.google.javascript.jscomp.deps.DepsFileParser;
import java.io.PrintStream;
import java.util.List;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

 
public class DepsFileParserEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Logger logger0 = Logger.getAnonymousLogger();
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(depsFileParser0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      
      depsFileParser0.shortcutMode = boolean0;
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      
      String string0 = "";
      boolean boolean1 = depsFileParser0.parseLine(string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Logger logger0 = Logger.getAnonymousLogger();
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(depsFileParser0);
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      depsFileParser0.shortcutMode = boolean0;
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      String string0 = ";U{hT6{TEzJ";
      boolean boolean1 = depsFileParser0.parseLine(string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(logger0.getResourceBundleName());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getName());
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Logger logger0 = null;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      //  // Unstable assertion: assertNotNull(loggerErrorManager0);
      //  // Unstable assertion: assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(0, loggerErrorManager0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, loggerErrorManager0.getErrorCount());
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) loggerErrorManager0);
      //  // Unstable assertion: assertNotNull(depsFileParser0);
      //  // Unstable assertion: assertEquals(false, depsFileParser0.didParseSucceed());
      //  // Unstable assertion: assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(0, loggerErrorManager0.getWarningCount());
      //  // Unstable assertion: assertEquals(0, loggerErrorManager0.getErrorCount());
      
      String string0 = "goog\u0000addDependency()";
      // Undeclared exception!
      try {
        List<DependencyInfo> list0 = depsFileParser0.parseFile(string0, string0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      assertNotNull(logger0);
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) loggerErrorManager0);
      assertNotNull(depsFileParser0);
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
      
      String string0 = ";U{hT6{TEzJ";
      boolean boolean0 = depsFileParser0.parseLine(string0);
      assertTrue(boolean0);
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(true, logger0.getUseParentHandlers());
      assertNull(logger0.getResourceBundleName());
      assertNull(logger0.getName());
  }

  //@Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "@|";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) lightweightMessageFormatter0, (PrintStream) mockPrintStream0);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      
      DepsFileParser depsFileParser0 = new DepsFileParser((ErrorManager) printStreamErrorManager0);
      assertNotNull(depsFileParser0);
      assertEquals(false, depsFileParser0.didParseSucceed());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      
      List<DependencyInfo> list0 = depsFileParser0.parseFile(string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(true, depsFileParser0.didParseSucceed());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ErrorManager errorManager0 = null;
      DepsFileParser depsFileParser0 = new DepsFileParser(errorManager0);
      assertNotNull(depsFileParser0);
      assertEquals(false, depsFileParser0.didParseSucceed());
      
      String string0 = "addDependency";
      List<DependencyInfo> list0 = depsFileParser0.parseFile(string0, string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(true, depsFileParser0.didParseSucceed());
  }
}
