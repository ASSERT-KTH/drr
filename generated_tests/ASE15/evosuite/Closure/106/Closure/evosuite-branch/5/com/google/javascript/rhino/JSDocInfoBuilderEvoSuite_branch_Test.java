/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:58:50 GMT 2014
 */

package com.google.javascript.rhino;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSDocInfoBuilder;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class JSDocInfoBuilderEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "Ol~V)Q";
      int int0 = 147;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(147, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(147, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(147, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(147, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      
      boolean boolean1 = jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(147, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(147, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(147, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(147, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "n";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean1 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      double double0 = 0.2177695114927022;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      
      String string0 = "com.gogl.javascript.rhino.jstype.TernaryVlu3";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      
      boolean boolean1 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordImplementedInterface(jSTypeExpression0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordImplementedInterface(jSTypeExpression0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoSideEffects();
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoSideEffects();
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordImplicitCast();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordImplicitCast();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoShadow();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoShadow();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      boolean boolean1 = jSDocInfoBuilder0.recordExport();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordExport();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordInterface();
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      boolean boolean1 = jSDocInfoBuilder0.recordConstructor();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordInterface();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      int int0 = 0;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      
      String string0 = "The existing child node of the parent should not be null.";
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordInterface();
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordDeprecated();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDeprecated();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoAlias();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoAlias();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      boolean boolean1 = jSDocInfoBuilder0.recordOverride();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordOverride();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordPreserveTry();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordPreserveTry();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstructor();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      boolean boolean1 = jSDocInfoBuilder0.recordConstructor();
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstructor();
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      double double0 = (-589.7352544925122);
      int int0 = 68;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(68, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      
      String string0 = "j";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(68, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      
      boolean boolean1 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(68, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstructor();
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      boolean boolean1 = jSDocInfoBuilder0.recordNoTypeCheck();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordNoTypeCheck();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordHiddenness();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordHiddenness();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordFileOverview(string0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordFileOverview(string0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordDescription(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDescription(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordDescription(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      double double0 = (-589.7352544925122);
      int int0 = 68;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(68, node0.getCharno());
      
      String string0 = "j";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(68, node0.getCharno());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      
      boolean boolean1 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(68, node0.getCharno());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordConstancy();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      double double0 = 0.2177695114927022;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      
      String string0 = "com.gogl.javascript.rhino.jstype.TernaryVlu3";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      
      boolean boolean1 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(-1, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      int int0 = 0;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      
      String string0 = "The existing child node of the parent should not be null.";
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getThisType();
      assertNull(jSTypeExpression0);
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      
      boolean boolean1 = jSDocInfoBuilder0.recordBaseType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      double double0 = 0.2177695114927022;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      String string0 = "com.gogl.javascript.rhino.jstype.TernaryVlu3";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      boolean boolean1 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      double double0 = (-589.7352544925122);
      int int0 = 68;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(68, node0.getCharno());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      
      String string0 = "j";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(68, node0.getCharno());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      
      boolean boolean1 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(68, node0.getCharno());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(68, node0.getCharno());
      assertEquals(68, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      double double0 = 0.2177695114927022;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      
      String string0 = "com.gogl.javascript.rhino.jstype.TernaryVlu3";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      
      boolean boolean1 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      int int0 = 3;
      String string0 = "[Y]*OT|-6 ";
      boolean boolean1 = jSDocInfoBuilder0.recordConstructor();
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(3, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(3, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(3, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(3, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      
      boolean boolean2 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(3, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(3, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordConstancy();
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      
      String string0 = "isnumber";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      
      boolean boolean2 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      String string0 = "Array";
      boolean boolean1 = jSDocInfoBuilder0.recordReturnDescription(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordReturnDescription(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      int int0 = 0;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      
      String string0 = "The existing child node of the parent should not be null.";
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      double double0 = 0.2177695114927022;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      
      String string0 = "com.gogl.javascript.rhino.jstype.TernaryVlu3";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      
      boolean boolean1 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordReturnType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      double double0 = 11.776518938312122;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      String string0 = "n&";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      
      boolean boolean1 = jSDocInfoBuilder0.recordThisType(jSTypeExpression0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordTypedef(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, node0.isQuotedString());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      
      String string0 = "";
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      
      boolean boolean2 = jSDocInfoBuilder0.recordType(jSTypeExpression0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, node0.isQuotedString());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "O";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("O", locale0.getVariant());
      assertEquals("o", locale0.getLanguage());
      assertEquals("O", locale0.getCountry());
      assertEquals("o_O_O", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("O", locale0.getVariant());
      assertEquals("o", locale0.getLanguage());
      assertEquals("O", locale0.getCountry());
      assertEquals("o_O_O", locale0.toString());
      
      boolean boolean1 = jSDocInfoBuilder0.recordSuppressions(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals("O", locale0.getVariant());
      assertEquals("o", locale0.getLanguage());
      assertEquals("O", locale0.getCountry());
      assertEquals("o_O_O", locale0.toString());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordSuppressions(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals("O", locale0.getVariant());
      assertEquals("o", locale0.getLanguage());
      assertEquals("O", locale0.getCountry());
      assertEquals("o_O_O", locale0.toString());
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordDeprecationReason(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordDeprecationReason(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      String string0 = "B";
      boolean boolean1 = jSDocInfoBuilder0.recordVersion(string0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordVersion(string0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.addReference(string0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "Ol~V)Q";
      boolean boolean1 = jSDocInfoBuilder0.addAuthor(string0);
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "$=@OO5B&";
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConstant());
      
      JSTypeExpression jSTypeExpression0 = jSDocInfo0.getThisType();
      assertNull(jSTypeExpression0);
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConstant());
      
      boolean boolean1 = jSDocInfoBuilder0.recordThrowDescription(jSTypeExpression0, string0);
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThrowDescription(jSTypeExpression0, string0);
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordThrowType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      int int0 = 0;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      String string0 = "The existing child node of the parent should not be null.";
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordThrowType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordTemplateTypeName(string0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordTemplateTypeName(string0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordParameterDescription(string0, string0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordParameterDescription(string0, string0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      JSTypeExpression jSTypeExpression0 = null;
      String string0 = "$=@OO5B&";
      boolean boolean1 = jSDocInfoBuilder0.recordParameter(string0, jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      
      JSTypeExpression jSTypeExpression1 = jSDocInfo0.getThisType();
      assertNull(jSTypeExpression1);
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      
      boolean boolean2 = jSDocInfoBuilder0.recordParameter(string0, jSTypeExpression1);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      int int0 = 0;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      
      String string0 = "The existing child node of the parent should not be null.";
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, string0, jSTypeRegistry0);
      assertNotNull(jSTypeExpression0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      
      boolean boolean1 = jSDocInfoBuilder0.recordEnumParameterType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordParameter(string0, jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, jSTypeExpression0.isOptionalArg());
      assertEquals(false, jSTypeExpression0.isVarArgs());
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.PRIVATE;
      boolean boolean1 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "TOP_LEVEL_P:OT'TYPE";
      int int0 = 1343;
      jSDocInfoBuilder0.markAnnotation(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      jSDocInfoBuilder0.markName(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "O";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("o_O_O", locale0.toString());
      assertEquals("O", locale0.getVariant());
      assertEquals("o", locale0.getLanguage());
      assertEquals("O", locale0.getCountry());
      
      String string1 = locale0.getDisplayName();
      assertNotNull(string1);
      assertEquals("o_O_O", locale0.toString());
      assertEquals("O", locale0.getVariant());
      assertEquals("o", locale0.getLanguage());
      assertEquals("O", locale0.getCountry());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("o (O,O)", string1);
      
      int int0 = (-2720);
      jSDocInfoBuilder0.markName(string1, int0, int0);
      assertEquals("o_O_O", locale0.toString());
      assertEquals("O", locale0.getVariant());
      assertEquals("o", locale0.getLanguage());
      assertEquals("O", locale0.getCountry());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "Ya ?,=Y{P  vvkN>2e";
      int int0 = 60;
      jSDocInfoBuilder0.markAnnotation(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(60, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      
      jSDocInfoBuilder0.markTypeNode(node0, int0, int0, int0, boolean0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(60, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      double double0 = (-24.60973678469197);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      
      int int0 = (-2);
      jSDocInfoBuilder0.markTypeNode(node0, int0, int0, int0, boolean0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      String string0 = "kN/bcX8";
      int int0 = (-2772);
      jSDocInfoBuilder0.markAnnotation(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      jSDocInfoBuilder0.markText(string0, int0, int0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      String string0 = "";
      int int0 = (-608);
      jSDocInfoBuilder0.markText(string0, int0, int0, int0, int0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "Array";
      JSTypeExpression jSTypeExpression0 = null;
      boolean boolean1 = jSDocInfoBuilder0.recordDefineType(jSTypeExpression0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      
      JSDocInfoBuilder jSDocInfoBuilder1 = new JSDocInfoBuilder(boolean1);
      assertNotNull(jSDocInfoBuilder1);
      assertEquals(false, jSDocInfoBuilder1.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder1.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder1.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder1.isPopulated());
      assertEquals(false, jSDocInfoBuilder1.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfoBuilder1.equals((Object)jSDocInfoBuilder0));
      assertFalse(jSDocInfoBuilder0.equals((Object)jSDocInfoBuilder1));
      assertFalse(boolean0 == boolean1);
      assertNotSame(jSDocInfoBuilder1, jSDocInfoBuilder0);
      assertNotSame(jSDocInfoBuilder0, jSDocInfoBuilder1);
      
      int int0 = (-1150);
      jSDocInfoBuilder1.markAnnotation(string0, int0, int0);
      assertEquals(false, jSDocInfoBuilder1.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder1.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder1.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder1.isPopulated());
      assertEquals(false, jSDocInfoBuilder1.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(jSDocInfoBuilder1.equals((Object)jSDocInfoBuilder0));
      assertFalse(jSDocInfoBuilder0.equals((Object)jSDocInfoBuilder1));
      assertFalse(boolean0 == boolean1);
      assertNotSame(jSDocInfoBuilder1, jSDocInfoBuilder0);
      assertNotSame(jSDocInfoBuilder0, jSDocInfoBuilder1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.recordInterface();
      assertEquals(true, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = "";
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(true, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals("", jSDocInfo0.getSourceName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isHidden());
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "";
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.INHERITED;
      boolean boolean1 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals("", jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "kN/bcX8";
      JSDocInfo jSDocInfo0 = jSDocInfoBuilder0.build(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      
      String string0 = "$=@OO5B&";
      boolean boolean1 = jSDocInfoBuilder0.recordDescription(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.isDescriptionRecorded();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(true, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.isDescriptionRecorded();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      
      String string0 = "";
      boolean boolean1 = jSDocInfoBuilder0.recordFileOverview(string0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      JSDocInfo.Visibility jSDocInfo_Visibility0 = JSDocInfo.Visibility.INHERITED;
      boolean boolean1 = jSDocInfoBuilder0.recordVisibility(jSDocInfo_Visibility0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      
      String string0 = "isnumber";
      boolean boolean1 = jSDocInfoBuilder0.hasParameter(string0);
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.isConstructorRecorded();
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      boolean boolean1 = jSDocInfoBuilder0.isPopulatedWithFileOverview();
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = false;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      
      String string0 = "j";
      boolean boolean1 = jSDocInfoBuilder0.recordBlockDescription(string0);
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(true, jSDocInfoBuilder0.isPopulated());
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = true;
      JSDocInfoBuilder jSDocInfoBuilder0 = new JSDocInfoBuilder(boolean0);
      assertNotNull(jSDocInfoBuilder0);
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      
      boolean boolean1 = jSDocInfoBuilder0.isInterfaceRecorded();
      assertEquals(false, jSDocInfoBuilder0.isConstructorRecorded());
      assertEquals(false, jSDocInfoBuilder0.isDescriptionRecorded());
      assertEquals(false, jSDocInfoBuilder0.isInterfaceRecorded());
      assertEquals(false, jSDocInfoBuilder0.isPopulatedWithFileOverview());
      assertEquals(false, jSDocInfoBuilder0.isPopulated());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }
}
