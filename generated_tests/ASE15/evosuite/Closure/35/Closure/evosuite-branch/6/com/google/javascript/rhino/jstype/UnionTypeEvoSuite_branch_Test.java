/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:10:00 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.ArrayDeque;
import java.util.HashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) unionType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "P2";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      
      // Undeclared exception!
      try {
        unionType0.matchConstraint((ObjectType) errorFunctionType0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      String string0 = "P2";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      
      unionType0.matchConstraint((ObjectType) errorFunctionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) noType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[None]", arrayDeque0.toString());
      
      boolean boolean2 = arrayDeque0.add((JSType) noType0);
      assertTrue(boolean2);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[None, None]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[None, None]", arrayDeque0.toString());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      
      NoType noType1 = (NoType)unionType0.collapseUnion();
      assertSame(noType1, noType0);
      assertNotNull(noType1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(true, noType1.isObject());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isFunctionType());
      assertNull(noType1.getReferenceName());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isResolved());
      assertEquals(true, noType1.isNoType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[None, None]", arrayDeque0.toString());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       JSTypeRegistry jSTypeRegistry0 = null;
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertNotNull(hashSet0);
//       assertEquals(0, hashSet0.size());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(true, hashSet0.isEmpty());
//       
//       AllType allType0 = new AllType(jSTypeRegistry0);
//       assertNotNull(allType0);
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isNullType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isNominalConstructor());
//       assertEquals(false, allType0.isObject());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNoObjectType());
//       
//       boolean boolean0 = hashSet0.add((JSType) allType0);
//       assertTrue(boolean0);
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isResolved());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isInterface());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isNullType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isNominalConstructor());
//       assertEquals(false, allType0.isObject());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[*]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       
//       BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
//       assertNotNull(booleanType0);
//       assertEquals(false, booleanType0.isObject());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(false, booleanType0.isNumberValueType());
//       
//       boolean boolean1 = hashSet0.add((JSType) booleanType0);
//       assertTrue(boolean1);
//       assertTrue(boolean1 == boolean0);
//       assertEquals(false, booleanType0.isObject());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[*, boolean]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertNotNull(unionType0);
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[*, boolean]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       
//       // Undeclared exception!
//       try {
//         JSType jSType0 = unionType0.collapseUnion();
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.collapseUnion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
//       assertNotNull(arrayDeque0);
//       assertEquals(0, arrayDeque0.size());
//       assertEquals("[]", arrayDeque0.toString());
//       assertEquals(true, arrayDeque0.isEmpty());
//       
//       NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
//       assertNotNull(noResolvedType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isNominalConstructor());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.isObject());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(true, noResolvedType0.isConstructor());
//       
//       boolean boolean1 = arrayDeque0.add((JSType) noResolvedType0);
//       assertTrue(boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.isNominalConstructor());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(true, noResolvedType0.isObject());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, arrayDeque0.isEmpty());
//       assertEquals(1, arrayDeque0.size());
//       assertEquals("[NoResolvedType]", arrayDeque0.toString());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
//       assertNotNull(unionType0);
//       assertFalse(boolean0 == boolean1);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, arrayDeque0.isEmpty());
//       assertEquals(1, arrayDeque0.size());
//       assertEquals("[NoResolvedType]", arrayDeque0.toString());
//       
//       String string0 = unionType0.toDebugHashCodeString();
//       assertEquals("{(function (this:me, {9}): me)}", string0);
//       assertNotNull(string0);
//       assertFalse(boolean0 == boolean1);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, arrayDeque0.isEmpty());
//       assertEquals(1, arrayDeque0.size());
//       assertEquals("[NoResolvedType]", arrayDeque0.toString());
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{()}", string0);
      assertNotNull(string0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      errorFunctionType0.setResolvedTypeInternal(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) errorFunctionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{()}", string0);
      assertNotNull(string0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) unionType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) errorFunctionType0);
      assertNotNull(unionType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      
      String string0 = unionType0.toDebugHashCodeString();
      //  // Unstable assertion: assertEquals("{()}", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(false, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      
      UnionType unionType1 = (UnionType)unionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) errorFunctionType0);
      //  // Unstable assertion: assertSame(unionType1, unionType0);
      //  // Unstable assertion: assertSame(unionType0, unionType1);
      //  // Unstable assertion: assertNotNull(unionType1);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertEquals(false, unionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(true, unionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType1.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType1.isInterface());
      //  // Unstable assertion: assertEquals(true, unionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType1.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType1.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType1.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType1.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType1.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType1.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(false, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isObject());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      
      String string0 = ";WUg/N$XdBPJ<\\Vh0df";
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isObject());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) errorFunctionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isResolved());
      
      boolean boolean1 = arrayDeque0.offer((JSType) prototypeObjectType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[{}]", arrayDeque0.toString());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isResolved());
      
      String string0 = "tDi";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) errorFunctionType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[{}]", arrayDeque0.toString());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{()}", string0);
      assertNotNull(string0);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{()}", string0);
      assertNotNull(string0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("TRUE", booleanLiteralSet0.toString());
      assertEquals("TRUE", booleanLiteralSet0.name());
      assertEquals(1, booleanLiteralSet0.ordinal());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      
      boolean boolean0 = hashSet0.add((JSType) booleanType0);
      assertTrue(boolean0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[boolean]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals("BOTH", booleanLiteralSet0.name());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertNotNull(noType0);
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-15);
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      boolean boolean1 = arrayDeque0.add((JSType) functionType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean2 = unionType0.isString();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      
      String string0 = unionType0.toDebugHashCodeString();
      //  // Unstable assertion: assertEquals("{()}", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      boolean boolean2 = unionType0.isSubtype((JSType) unionType0);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertTrue(boolean0 == boolean2);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      
      boolean boolean0 = hashSet0.add((JSType) allType0);
      assertTrue(boolean0);
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[*]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      
      boolean boolean1 = unionType0.isSubtype((JSType) unknownType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-15);
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isObject());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isInterface());
      
      boolean boolean1 = arrayDeque0.add((JSType) functionType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isObject());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isInterface());
      
      boolean boolean2 = arrayDeque0.add((JSType) noType0);
      assertTrue(boolean2);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals("[function (...[?]): None, None]", arrayDeque0.toString());
      assertEquals(2, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals("[function (...[?]): None, None]", arrayDeque0.toString());
      assertEquals(2, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      
      String string0 = unionType0.toString();
      assertEquals("(None|function (...[?]): None)", string0);
      assertNotNull(string0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals("[function (...[?]): None, None]", arrayDeque0.toString());
      assertEquals(2, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      
      int int0 = (-1317);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      
      boolean boolean1 = arrayDeque0.add((JSType) functionType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals("[function (...[?]): NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[function (...[?]): NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      FunctionType functionType1 = (FunctionType)unionType0.getRestrictedUnion((JSType) noResolvedType0);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(true, functionType1.isObject());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isTemplateType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[function (...[?]): NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      
      String string0 = ";WUg/N$XdBPJ<\\Vh0df";
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      
      arrayDeque0.push((JSType) unknownType0);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType1 = (UnknownType)unionType0.getRestrictedUnion((JSType) noResolvedType0);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(true, unknownType1.isObject());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) noResolvedType0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      
      boolean boolean1 = unionType0.contains((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isVoidType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      
      NoType noType0 = (NoType)unionType0.restrictByNotNullOrUndefined();
      assertNotNull(noType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      
      boolean boolean1 = arrayDeque0.offer((JSType) noType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[None]", arrayDeque0.toString());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isObject());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType1 = (NoType)unionType0.meet(stringType0);
      assertSame(noType1, noType0);
      assertNotNull(noType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isObject());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(true, noType1.isObject());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.isConstructor());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isAllType());
      assertEquals(true, noType1.isNullable());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(false, noType1.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[None]", arrayDeque0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-15);
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) functionType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean2 = arrayDeque0.add((JSType) noType0);
      assertTrue(boolean2);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("[function (...[?]): None, None]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals("[function (...[?]): None, None]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean3 = JSType.isSubtypeHelper(unionType0, unionType0);
      assertTrue(boolean3);
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals("[function (...[?]): None, None]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{()}", string0);
      assertNotNull(string0);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) unionType0);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      
      EnumType enumType0 = unionType0.toMaybeEnumType();
      assertNull(enumType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      
      boolean boolean1 = unionType0.contains((JSType) enumType0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isNullType());
      
      String string0 = ";WUg/N$XdBPJ<\\Vh0df";
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isNullType());
      
      arrayDeque0.push((JSType) unknownType0);
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isNullType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType1 = (UnknownType)unionType0.meet(errorFunctionType0);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(true, unknownType1.isObject());
      assertEquals(true, unknownType1.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string0 = "tDi";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isObject());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) stringType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, stringType0.isObject());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[string]", arrayDeque0.toString());
      
      NoType noType0 = (NoType)unionType0.meet(errorFunctionType0);
      assertNotNull(noType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[string]", arrayDeque0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      
      NoType noType0 = (NoType)unionType0.restrictByNotNullOrUndefined();
      assertNotNull(noType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      boolean boolean1 = arrayDeque0.offer((JSType) noType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      
      PrototypeObjectType prototypeObjectType1 = (PrototypeObjectType)unionType0.getLeastSupertype((JSType) prototypeObjectType0);
      assertSame(prototypeObjectType0, prototypeObjectType1);
      assertSame(prototypeObjectType1, prototypeObjectType0);
      assertNotNull(prototypeObjectType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType1.isInterface());
      assertEquals(false, prototypeObjectType1.isNoResolvedType());
      assertEquals(false, prototypeObjectType1.isTemplateType());
      assertEquals(false, prototypeObjectType1.isNullType());
      assertEquals(false, prototypeObjectType1.isNominalType());
      assertEquals(false, prototypeObjectType1.isNumberValueType());
      assertEquals(false, prototypeObjectType1.isBooleanValueType());
      assertEquals(false, prototypeObjectType1.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType1.isNoObjectType());
      assertEquals(false, prototypeObjectType1.isFunctionType());
      assertEquals(false, prototypeObjectType1.isResolved());
      assertEquals(false, prototypeObjectType1.isNominalConstructor());
      assertEquals(true, prototypeObjectType1.isObject());
      assertEquals(false, prototypeObjectType1.isConstructor());
      assertEquals(false, prototypeObjectType1.isRecordType());
      assertEquals(false, prototypeObjectType1.isEnumElementType());
      assertEquals(false, prototypeObjectType1.isEnumType());
      assertEquals(false, prototypeObjectType1.isVoidType());
      assertEquals(false, prototypeObjectType1.isStringValueType());
      assertEquals(false, prototypeObjectType1.isUnionType());
      assertEquals(false, prototypeObjectType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType1.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType1.isNoType());
      assertEquals(false, prototypeObjectType1.isCheckedUnknownType());
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      
      String string0 = ";WUg/N$XdBPJ<\\Vh0df";
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      
      arrayDeque0.push((JSType) unknownType0);
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isObject());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType1 = (UnknownType)unionType0.getLeastSupertype((JSType) noResolvedType0);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(true, unknownType1.isObject());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) noResolvedType0);
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertNotNull(unionType1);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ";WUg/N$XdBPJ<\\Vh0df";
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      
      arrayDeque0.push((JSType) unknownType0);
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      
      boolean boolean1 = arrayDeque0.add((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[??, NoResolvedType]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[??, NoResolvedType]", arrayDeque0.toString());
      
      UnknownType unknownType1 = (UnknownType)unionType0.meet(unionType0);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(true, unknownType1.isObject());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isNominalConstructor());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[??, NoResolvedType]", arrayDeque0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-15);
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isObject());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      
      boolean boolean1 = arrayDeque0.add((JSType) functionType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isObject());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean2 = unionType0.isNullable();
      assertFalse(boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = unionType0.isNullable();
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.offer((JSType) prototypeObjectType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[{}]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "tDi";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isObject());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean2 = arrayDeque0.add((JSType) stringType0);
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isObject());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[{}, string]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean3 = unionType0.canTestForEqualityWith((JSType) errorFunctionType0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(2, arrayDeque0.size());
      assertEquals("[{}, string]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test36() {}
//   @Test(timeout = 4000)
//   public void test36()  throws Throwable  {
//       JSTypeRegistry jSTypeRegistry0 = null;
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertNotNull(hashSet0);
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       
//       boolean boolean0 = false;
//       UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
//       assertNotNull(unknownType0);
//       assertEquals(false, unknownType0.isEnumElementType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(false, unknownType0.isCheckedUnknownType());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isOrdinaryFunction());
//       assertEquals(true, unknownType0.isObject());
//       assertEquals(true, unknownType0.hasDisplayName());
//       assertEquals(false, unknownType0.isFunctionPrototypeType());
//       assertEquals("?", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.isConstructor());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(false, unknownType0.isNominalType());
//       assertEquals(false, unknownType0.isEnumType());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(false, unknownType0.isInterface());
//       assertEquals("Unknown", unknownType0.getDisplayName());
//       assertEquals(false, unknownType0.isNominalConstructor());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(false, unknownType0.isNoResolvedType());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isFunctionType());
//       
//       boolean boolean1 = hashSet0.add((JSType) unknownType0);
//       assertTrue(boolean1);
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertEquals(false, unknownType0.isEnumElementType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(false, unknownType0.isCheckedUnknownType());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isOrdinaryFunction());
//       assertEquals(true, unknownType0.isObject());
//       assertEquals(true, unknownType0.hasDisplayName());
//       assertEquals(false, unknownType0.isFunctionPrototypeType());
//       assertEquals("?", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.isConstructor());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(false, unknownType0.isNominalType());
//       assertEquals(false, unknownType0.isEnumType());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(false, unknownType0.isInterface());
//       assertEquals("Unknown", unknownType0.getDisplayName());
//       assertEquals(false, unknownType0.isNominalConstructor());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(false, unknownType0.isNoResolvedType());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[?]", hashSet0.toString());
//       assertEquals(1, hashSet0.size());
//       
//       AllType allType0 = new AllType(jSTypeRegistry0);
//       assertNotNull(allType0);
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isObject());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(false, allType0.isNominalConstructor());
//       assertEquals(false, allType0.isNullType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(false, allType0.isResolved());
//       
//       boolean boolean2 = hashSet0.add((JSType) allType0);
//       assertTrue(boolean2);
//       assertTrue(boolean2 == boolean1);
//       assertFalse(boolean2 == boolean0);
//       assertEquals("[?, *]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals(false, allType0.isUnionType());
//       assertEquals(false, allType0.isStringValueType());
//       assertEquals(false, allType0.isRecordType());
//       assertEquals(true, allType0.hasDisplayName());
//       assertEquals(false, allType0.isObject());
//       assertEquals("<Any Type>", allType0.getDisplayName());
//       assertEquals(false, allType0.isFunctionPrototypeType());
//       assertEquals(true, allType0.isAllType());
//       assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, allType0.isCheckedUnknownType());
//       assertEquals(false, allType0.isNoObjectType());
//       assertEquals(false, allType0.isFunctionType());
//       assertEquals(false, allType0.isVoidType());
//       assertEquals(false, allType0.isNumberValueType());
//       assertEquals(false, allType0.isConstructor());
//       assertEquals(false, allType0.isNoType());
//       assertEquals(false, allType0.isEnumElementType());
//       assertEquals(false, allType0.isEnumType());
//       assertEquals(false, allType0.canBeCalled());
//       assertEquals(false, allType0.isNominalType());
//       assertEquals(true, allType0.matchesObjectContext());
//       assertEquals(false, allType0.isTemplateType());
//       assertEquals(true, allType0.matchesStringContext());
//       assertEquals(false, allType0.isNominalConstructor());
//       assertEquals(false, allType0.isNullType());
//       assertEquals(false, allType0.isBooleanValueType());
//       assertEquals(false, allType0.isNoResolvedType());
//       assertEquals(false, allType0.isOrdinaryFunction());
//       assertEquals(false, allType0.isInterface());
//       assertEquals(false, allType0.isResolved());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertNotNull(unionType0);
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals("[?, *]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       
//       EnumType enumType0 = unionType0.toMaybeEnumType();
//       assertNull(enumType0);
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals("[?, *]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       
//       TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) enumType0);
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals("[?, *]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
//       assertEquals("UNKNOWN", ternaryValue0.name());
//       assertEquals(2, ternaryValue0.ordinal());
//       assertEquals("unknown", ternaryValue0.toString());
//   }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{()}", string0);
      assertNotNull(string0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)unionType0.restrictByNotNullOrUndefined();
      assertSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(true, errorFunctionType1.isNominalConstructor());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(true, errorFunctionType1.isObject());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      
      boolean boolean1 = arrayDeque0.add((JSType) noType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      
      NoType noType1 = (NoType)unionType0.autobox();
      assertNotSame(noType1, noType0);
      assertNotNull(noType1);
      assertFalse(noType1.equals((Object)noType0));
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isInterface());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isEnumType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.isResolved());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(true, noType1.isNoType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(true, noType1.isObject());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertNull(noType1.getReferenceName());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      
      boolean boolean0 = hashSet0.add((JSType) allType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      
      boolean boolean1 = unionType0.canBeCalled();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      
      boolean boolean2 = unionType0.canBeCalled();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ";WUg/N$XdBPJ<\\Vh0df";
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      arrayDeque0.push((JSType) unknownType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      
      boolean boolean1 = unionType0.canAssignTo((JSType) unknownType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[??]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean1 = unionType0.canAssignTo((JSType) noResolvedType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      
      NoType noType0 = (NoType)unionType0.restrictByNotNullOrUndefined();
      assertNotNull(noType0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      
      boolean boolean1 = arrayDeque0.add((JSType) noType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      
      String string0 = "P2";
      boolean boolean2 = arrayDeque0.offer((JSType) noType0);
      assertTrue(boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayDeque0.size());
      assertEquals("[None, None]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      
      NoType noType1 = (NoType)unionType0.findPropertyType(string0);
      assertSame(noType1, noType0);
      assertNotNull(noType1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals(2, arrayDeque0.size());
      assertEquals("[None, None]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType1.isNominalType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isInterface());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.isNoType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isResolved());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(true, noType1.matchesNumberContext());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(true, noType1.isNullable());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = (-1263);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      
      boolean boolean1 = arrayDeque0.add((JSType) functionType0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
      
      String string0 = "";
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertNull(jSType0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      
      boolean boolean0 = hashSet0.add((JSType) allType0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(1, hashSet0.size());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      NoType noType0 = (NoType)unionType0.restrictByNotNullOrUndefined();
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(true, arrayDeque0.isEmpty());
      
      boolean boolean1 = arrayDeque0.offer((JSType) noType0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
      
      boolean boolean2 = unionType0.matchesStringContext();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[None]", arrayDeque0.toString());
      assertEquals(1, arrayDeque0.size());
      assertEquals(false, arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      //  // Unstable assertion: assertNotNull(arrayDeque0);
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      
      String string0 = unionType0.toDebugHashCodeString();
      //  // Unstable assertion: assertEquals("{()}", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals("[]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(true, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals(0, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      
      boolean boolean1 = arrayDeque0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(false, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isObject());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoResolvedType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNominalType());
      //  // Unstable assertion: assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      
      boolean boolean2 = unionType0.matchesStringContext();
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(boolean0 == boolean2);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertEquals(1, arrayDeque0.size());
      //  // Unstable assertion: assertEquals(false, arrayDeque0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (new:{()}, *=, *=, *=): {()}]", arrayDeque0.toString());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-15);
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", arrayDeque0.toString());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      
      FunctionType functionType0 = noType0.getBindReturnType(int0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      
      boolean boolean1 = arrayDeque0.add((JSType) functionType0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
      
      boolean boolean2 = unionType0.matchesUint32Context();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[function (...[?]): None]", arrayDeque0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      
      arrayDeque0.push((JSType) noResolvedType0);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isObject());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      
      boolean boolean1 = unionType0.matchesUint32Context();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("[NoResolvedType]", arrayDeque0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertNotNull(arrayDeque0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertNotNull(unionType0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertNotNull(noObjectType0);
      assertEquals(true, arrayDeque0.isEmpty());
      assertEquals("[]", arrayDeque0.toString());
      assertEquals(0, arrayDeque0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
  }
}
