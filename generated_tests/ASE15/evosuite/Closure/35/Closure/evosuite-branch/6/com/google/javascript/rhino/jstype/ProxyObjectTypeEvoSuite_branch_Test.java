/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:41:44 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ProxyObjectTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNominalConstructor());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNominalConstructor());
      
      ProxyObjectType proxyObjectType1 = (ProxyObjectType)proxyObjectType0.collapseUnion();
      assertNotNull(proxyObjectType1);
      assertEquals(false, proxyObjectType1.isRecordType());
      assertEquals(false, proxyObjectType1.isNumberValueType());
      assertEquals(false, proxyObjectType1.isNullType());
      assertEquals(false, proxyObjectType1.isEnumElementType());
      assertEquals(false, proxyObjectType1.isFunctionType());
      assertEquals(false, proxyObjectType1.isStringValueType());
      assertEquals(false, proxyObjectType1.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType1.isUnionType());
      assertEquals(false, proxyObjectType1.hasCachedValues());
      assertEquals(false, proxyObjectType1.isNominalConstructor());
      assertEquals(false, proxyObjectType1.isBooleanValueType());
      assertEquals(false, proxyObjectType1.isVoidType());
      assertEquals(false, proxyObjectType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType1.isTemplateType());
      assertEquals(false, proxyObjectType1.isEnumType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertSame(proxyObjectType1, proxyObjectType0);
      assertSame(proxyObjectType0, proxyObjectType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)booleanType0.autoboxesTo();
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, instanceObjectType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      
      ObjectType objectType0 = proxyObjectType0.getTypeOfThis();
      assertNull(objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      
      ObjectType objectType1 = indexedType0.getTypeOfThis();
      assertNull(objectType1);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      
      JSType jSType0 = parameterizedType0.getIndexType();
      assertNull(jSType0);
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "'";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("'", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = templateType0.getIndexType();
      assertNull(jSType0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("'", templateType0.getReferenceName());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      
      FunctionType functionType0 = booleanType0.toMaybeFunctionType();
      assertNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertNotNull(indexedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      
      JSType jSType0 = indexedType0.getParameterType();
      assertNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "+F;Qn\"PZ|~T";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      
      JSType jSType0 = templateType0.getParameterType();
      assertNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = booleanType0.toMaybeFunctionType();
      assertNull(functionType0);
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) functionType0, (JSType) functionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      
      FunctionType functionType1 = parameterizedType0.getConstructor();
      assertNull(functionType1);
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.rhino.jstype.ProxyObjectType";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("com.google.javascript.rhino.jstype.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = templateType0.getConstructor();
      assertNull(functionType0);
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("com.google.javascript.rhino.jstype.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      
      FunctionType functionType0 = voidType0.toMaybeFunctionType();
      assertNull(functionType0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, functionType0);
      assertNotNull(proxyObjectType0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      
      Set<String> set0 = proxyObjectType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "0W=2bI";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertNotNull(parameterizedType0);
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      
      Set<String> set0 = parameterizedType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      String string0 = "b7A^:l}";
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EnumElementType enumElementType0 = unknownType0.toMaybeEnumElementType();
      assertNull(enumElementType0);
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumElementType0, enumElementType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = parameterizedType0.hasOwnDeclaredProperty(string0);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = booleanType0.toMaybeFunctionType();
      assertNull(functionType0);
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) functionType0, (JSType) functionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      
      String string0 = "";
      boolean boolean0 = parameterizedType0.hasProperty(string0);
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "b7A^:l}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals("b7A^:l}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = templateType0.hasProperty(string0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals("b7A^:l}", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "0W=2bI";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      
      JSDocInfo jSDocInfo0 = numberType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      
      parameterizedType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      
      String string0 = "{\\";
      boolean boolean0 = indexedType0.isPropertyInExterns(string0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      assertFalse(boolean0);
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      
      JSDocInfo jSDocInfo0 = unknownType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
      
      indexedType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      
      String string0 = "$P\"n5X`q$I";
      JSDocInfo jSDocInfo0 = indexedType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "+F;Qn\"PZ|~T";
      int int0 = 1;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = namedType0.toMaybeUnionType();
      assertNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, unionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      JSDocInfo jSDocInfo0 = parameterizedType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "LAZY_EXPRESSIONS";
      int int0 = (-2152);
      Node node0 = Node.newString(int0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-2152, node0.getType());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isNominalConstructor());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-2152, node0.getType());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = unresolvedTypeExpression0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isNominalConstructor());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-2152, node0.getType());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      namedType0.setJSDocInfo(jSDocInfo0);
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isNominalConstructor());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-2152, node0.getType());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = booleanType0.toMaybeFunctionType();
      assertNull(functionType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertNotNull(indexedType0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSDocInfo jSDocInfo0 = noResolvedType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo0);
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      indexedType0.setJSDocInfo(jSDocInfo0);
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "LAZY_EXPRESSIONS";
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)proxyObjectType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "0W=2bI";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
      
      UnknownType unknownType0 = (UnknownType)parameterizedType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      assertNotNull(parameterizedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, parameterizedType0);
      assertNotNull(indexedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
      
      Set<String> set0 = indexedType0.getPropertyNames();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      
      Set<String> set0 = indexedType0.getPropertyNames();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      
      int int0 = indexedType0.getPropertiesCount();
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "b7A^:l}";
      int int0 = 0;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      
      int int1 = namedType0.getPropertiesCount();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Zn";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("Zn", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNominalConstructor());
      
      boolean boolean0 = templateType0.isPropertyInExterns(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("Zn", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNominalConstructor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      
      String string0 = "{\\";
      boolean boolean0 = indexedType0.isPropertyTypeInferred(string0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28() {}
//   @Test(timeout = 4000)
//   public void test28()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = true;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
//       assertNotNull(booleanType0);
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
//       assertNotNull(linkedList0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       
//       FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, (List<JSType>) linkedList0);
//       assertNotNull(functionType0);
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string0 = parameterizedType0.toDebugHashCodeString();
//       assertNotNull(string0);
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("{proxy:function (): {259}}", string0);
//       
//       boolean boolean1 = parameterizedType0.isPropertyTypeInferred(string0);
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertFalse(boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//   }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ":%cU)";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      
      Node node0 = parameterizedType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "LAZY_EXPRESSIONS";
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = proxyObjectType0.isPropertyTypeDeclared(string0);
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "+F;Qn\"PZ|~T";
      int int0 = 1;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = namedType0.toMaybeUnionType();
      assertNull(unionType0);
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, unionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = parameterizedType0.hasOwnDeclaredProperty(string0);
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      
      String string0 = "$P\"n5X`q$I";
      boolean boolean0 = indexedType0.removeProperty(string0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ":%cU)";
      int int0 = 536870924;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      
      boolean boolean0 = namedType0.removeProperty(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "LAZY_EXPRESSIONS";
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = proxyObjectType0.getPropertyNode(string0);
      assertNull(node0);
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      boolean boolean1 = proxyObjectType0.defineProperty(string0, jSType0, boolean0, node0);
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      
      FunctionType functionType0 = booleanType0.toMaybeFunctionType();
      assertNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) functionType0, (JSType) functionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      
      ObjectType objectType0 = parameterizedType0.getParentScope();
      assertNull(objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = false;
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = booleanType0.toMaybeFunctionType();
      assertNull(functionType0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) functionType0, (JSType) functionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        boolean boolean1 = JSType.isEquivalent((JSType) unknownType0, (JSType) parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      
      Iterable<ObjectType> iterable0 = indexedType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "0W=2bI";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      
      Iterable<ObjectType> iterable0 = parameterizedType0.getCtorImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      
      FunctionType functionType0 = indexedType0.getOwnerFunction();
      assertNull(functionType0);
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "LAZY_EXPRESSIONS";
      int int0 = (-2152);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = namedType0.getOwnerFunction();
      assertNull(functionType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      
      boolean boolean0 = indexedType0.isNativeObjectType();
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isStringValueType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, parameterizedType0);
      assertNotNull(indexedType0);
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = indexedType0.isNativeObjectType();
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      EnumElementType enumElementType0 = unknownType0.toMaybeEnumElementType();
      assertNull(enumElementType0);
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumElementType0, enumElementType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        boolean boolean1 = parameterizedType0.hasReferenceName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      
      String string0 = indexedType0.getDisplayName();
      assertNotNull(string0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)booleanType0.autoboxesTo();
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, instanceObjectType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      
      String string0 = "NUMBER_VA(UE_R_OBJECT_YPE";
      double double0 = 1.0;
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      
      boolean boolean1 = proxyObjectType0.defineDeclaredProperty(string0, (JSType) booleanType0, node0);
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
      
      String string0 = "{\\";
      ObjectType.Property objectType_Property0 = indexedType0.getSlot(string0);
      assertNull(objectType_Property0);
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ":%cU)";
      int int0 = 536870924;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      
      boolean boolean0 = namedType0.isOrdinaryFunction();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      
      JSDocInfo jSDocInfo0 = proxyObjectType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "LAZY_EXPRESSIONS";
      JSType jSType0 = null;
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = (-2152);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = proxyObjectType0.getTypesUnderInequality((JSType) namedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isNullType());
      
      // Undeclared exception!
      try {
        String string0 = indexedType0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51() {}
//   @Test(timeout = 4000)
//   public void test51()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = true;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
//       assertNotNull(booleanType0);
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
//       assertNotNull(linkedList0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       
//       FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, (List<JSType>) linkedList0);
//       assertNotNull(functionType0);
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isAllType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       
//       ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
//       assertNotNull(parameterizedType0);
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isAllType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       
//       IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, parameterizedType0);
//       assertNotNull(indexedType0);
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isAllType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, indexedType0.isEnumElementType());
//       assertEquals(true, indexedType0.isFunctionType());
//       assertEquals(false, indexedType0.isStringValueType());
//       assertEquals(false, indexedType0.isResolved());
//       assertEquals(false, indexedType0.hasCachedValues());
//       assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, indexedType0.isBooleanValueType());
//       assertEquals(false, indexedType0.isRecordType());
//       assertEquals(false, indexedType0.isNumberValueType());
//       assertEquals(false, indexedType0.isNullType());
//       assertEquals(false, indexedType0.isVoidType());
//       assertEquals(false, indexedType0.isEnumType());
//       assertEquals(false, indexedType0.isFunctionPrototypeType());
//       assertEquals(false, indexedType0.isUnionType());
//       assertEquals(false, indexedType0.isNominalConstructor());
//       assertEquals(false, indexedType0.isTemplateType());
//       
//       int int0 = indexedType0.hashCode();
//       assertEquals(false, booleanType0.isNoType());
//       assertEquals(false, booleanType0.isStringValueType());
//       assertEquals(false, booleanType0.isNullable());
//       assertEquals(false, booleanType0.isVoidType());
//       assertEquals(false, booleanType0.isNominalType());
//       assertEquals(false, booleanType0.isUnionType());
//       assertEquals(false, booleanType0.isFunctionPrototypeType());
//       assertEquals(false, booleanType0.isConstructor());
//       assertEquals(true, booleanType0.matchesNumberContext());
//       assertEquals(false, booleanType0.isTemplateType());
//       assertEquals(false, booleanType0.isRecordType());
//       assertEquals(false, booleanType0.isCheckedUnknownType());
//       assertEquals(false, booleanType0.isNullType());
//       assertEquals(false, booleanType0.isFunctionType());
//       assertEquals(false, booleanType0.isInterface());
//       assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, booleanType0.isNumberValueType());
//       assertEquals(true, booleanType0.isBooleanValueType());
//       assertEquals(false, booleanType0.isEnumElementType());
//       assertEquals(false, booleanType0.isResolved());
//       assertEquals(false, booleanType0.isEnumType());
//       assertEquals(false, booleanType0.isNoObjectType());
//       assertEquals(false, booleanType0.isOrdinaryFunction());
//       assertEquals("boolean", booleanType0.getDisplayName());
//       assertEquals(false, booleanType0.isNoResolvedType());
//       assertEquals(false, booleanType0.isNominalConstructor());
//       assertEquals(true, booleanType0.matchesObjectContext());
//       assertEquals(true, booleanType0.matchesStringContext());
//       assertEquals(false, booleanType0.isAllType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isAllType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, parameterizedType0.isFunctionType());
//       assertEquals(false, parameterizedType0.isNullType());
//       assertEquals(false, parameterizedType0.isEnumType());
//       assertEquals(false, parameterizedType0.isUnionType());
//       assertEquals(false, parameterizedType0.hasCachedValues());
//       assertEquals(false, parameterizedType0.isRecordType());
//       assertEquals(false, parameterizedType0.isFunctionPrototypeType());
//       assertEquals(false, parameterizedType0.isResolved());
//       assertEquals(false, parameterizedType0.isNominalConstructor());
//       assertEquals(false, parameterizedType0.isStringValueType());
//       assertEquals(false, parameterizedType0.isTemplateType());
//       assertEquals(false, parameterizedType0.isEnumElementType());
//       assertEquals(false, parameterizedType0.isNumberValueType());
//       assertEquals(false, parameterizedType0.isVoidType());
//       assertEquals(false, parameterizedType0.isBooleanValueType());
//       assertEquals(false, indexedType0.isEnumElementType());
//       assertEquals(true, indexedType0.isFunctionType());
//       assertEquals(false, indexedType0.isStringValueType());
//       assertEquals(false, indexedType0.isResolved());
//       assertEquals(false, indexedType0.hasCachedValues());
//       assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, indexedType0.isBooleanValueType());
//       assertEquals(false, indexedType0.isRecordType());
//       assertEquals(false, indexedType0.isNumberValueType());
//       assertEquals(false, indexedType0.isNullType());
//       assertEquals(false, indexedType0.isVoidType());
//       assertEquals(false, indexedType0.isEnumType());
//       assertEquals(false, indexedType0.isFunctionPrototypeType());
//       assertEquals(false, indexedType0.isUnionType());
//       assertEquals(false, indexedType0.isNominalConstructor());
//       assertEquals(false, indexedType0.isTemplateType());
//       assertEquals(259, int0);
//   }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "b7A^:l}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("b7A^:l}", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      
      boolean boolean0 = templateType0.canAssignTo((JSType) templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("b7A^:l}", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "LAZY_EXPRESSIONS";
      int int0 = (-2152);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.matchesNumberContext();
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ":%cU)";
      int int0 = 536870924;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = namedType0.matchesStringContext();
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Zn";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("Zn", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      
      boolean boolean0 = templateType0.isEnumElementType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals("Zn", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = proxyObjectType0.isEnumType();
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      assertNotNull(parameterizedType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, parameterizedType0);
      assertNotNull(indexedType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      
      boolean boolean1 = indexedType0.canBeCalled();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Zn";
      int int0 = (-730);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      
      boolean boolean0 = namedType0.isInstanceType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = proxyObjectType0.isNullable();
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEnumType());
      assertEquals(false, proxyObjectType0.isEnumElementType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isNominalConstructor());
      assertEquals(false, proxyObjectType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "+F;Qn\"PZ|~T";
      int int0 = 1;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = namedType0.toMaybeUnionType();
      assertNull(unionType0);
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, unionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      
      boolean boolean0 = parameterizedType0.isSubtype((JSType) noType0);
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("+F;Qn\"PZ|~T", templateType0.getReferenceName());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "+F;Qn\"PZ|~T";
      int int0 = 1;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      
      boolean boolean0 = namedType0.isCheckedUnknownType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "9zzX1<cxrmG}";
      int int0 = (-3545);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = namedType0.matchesObjectContext();
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "b7A^:l}";
      int int0 = 0;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)namedType0.findPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) booleanType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, functionType0);
      assertNotNull(parameterizedType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, parameterizedType0);
      assertNotNull(indexedType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      
      boolean boolean1 = indexedType0.isNominalType();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Zn";
      int int0 = (-730);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      
      RecordType recordType0 = namedType0.toMaybeRecordType();
      assertNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
      
      parameterizedType0.matchConstraint((ObjectType) noType0);
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.rhino.jstype.ProxyObjectType";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("com.google.javascript.rhino.jstype.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = templateType0.isNominalConstructor();
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("com.google.javascript.rhino.jstype.ProxyObjectType", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "'";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("'", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 1887;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      
      UnknownType unknownType0 = (UnknownType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) templateType0);
      assertNotNull(unknownType0);
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("'", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "b7A^:l}";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("b7A^:l}", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = templateType0.isEmptyType();
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("b7A^:l}", templateType0.getReferenceName());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Zn";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals("Zn", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createNullableType((JSType) templateType0);
      assertNotNull(unionType0);
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals("Zn", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
  }
}
