/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:30:27 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.ArrayComprehensionLoop;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.EmptyStatement;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.Label;
import com.google.javascript.rhino.head.ast.LabeledStatement;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.ThrowStatement;
import com.google.javascript.rhino.head.ast.XmlDotQuery;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      
      int int0 = (-60);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-60, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-60, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      
      int int1 = 47;
      XmlDotQuery xmlDotQuery1 = (XmlDotQuery)xmlDotQuery0.setType(int1);
      assertNotNull(xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(47, xmlDotQuery0.getType());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-60, xmlDotQuery0.getAbsolutePosition());
      assertEquals("47", xmlDotQuery0.toString());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-60, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(47, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals("47", xmlDotQuery1.toString());
      assertEquals(-60, xmlDotQuery1.getPosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-60, xmlDotQuery1.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery1.getLineno());
      
      astRoot0.addChildrenToBack((Node) xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(47, xmlDotQuery0.getType());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-60, xmlDotQuery0.getAbsolutePosition());
      assertEquals("47", xmlDotQuery0.toString());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-60, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(47, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals("47", xmlDotQuery1.toString());
      assertEquals(-60, xmlDotQuery1.getPosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-60, xmlDotQuery1.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery1.getLineno());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.toString());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      
      int int0 = (-54);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-54, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-54, xmlDotQuery0.getPosition());
      assertEquals(146, xmlDotQuery0.getType());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getRp());
      
      int int1 = 24;
      XmlDotQuery xmlDotQuery1 = (XmlDotQuery)xmlDotQuery0.setType(int1);
      assertNotNull(xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(24, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(-54, xmlDotQuery1.getPosition());
      assertEquals("24", xmlDotQuery1.toString());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(-54, xmlDotQuery1.getAbsolutePosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-54, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-54, xmlDotQuery0.getPosition());
      assertEquals(24, xmlDotQuery0.getType());
      assertEquals("24", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getRp());
      
      astRoot0.addChildrenToBack((Node) xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(24, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(-54, xmlDotQuery1.getPosition());
      assertEquals("24", xmlDotQuery1.toString());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(-54, xmlDotQuery1.getAbsolutePosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-54, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-54, xmlDotQuery0.getPosition());
      assertEquals(24, xmlDotQuery0.getType());
      assertEquals("24", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.getName());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      
      int int0 = (-42);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(146, xmlDotQuery0.getType());
      
      int int1 = 23;
      XmlDotQuery xmlDotQuery1 = (XmlDotQuery)xmlDotQuery0.setType(int1);
      assertNotNull(xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(23, xmlDotQuery0.getType());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals("23", xmlDotQuery0.toString());
      assertEquals("23", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(23, xmlDotQuery1.getType());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      
      astRoot0.addChildrenToBack((Node) xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(23, xmlDotQuery0.getType());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals("23", xmlDotQuery0.toString());
      assertEquals("23", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(23, xmlDotQuery1.getType());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("", simpleSourceFile0.getName());
      assertEquals("", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      
      int int0 = (-42);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(146, xmlDotQuery0.getType());
      
      int int1 = 16;
      XmlDotQuery xmlDotQuery1 = (XmlDotQuery)xmlDotQuery0.setType(int1);
      assertNotNull(xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals("16", xmlDotQuery0.toString());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(16, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertEquals("16", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(16, xmlDotQuery1.getType());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      
      astRoot0.addChildrenToBack((Node) xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals("16", xmlDotQuery0.toString());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(16, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertEquals("16", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(16, xmlDotQuery1.getType());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.getName());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      
      int int0 = 0;
      StringLiteral stringLiteral0 = new StringLiteral(int0);
      assertNotNull(stringLiteral0);
      assertEquals("41", stringLiteral0.toString());
      assertEquals(0, stringLiteral0.getPosition());
      assertEquals(0, stringLiteral0.getAbsolutePosition());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(41, stringLiteral0.getType());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(0, stringLiteral0.depth());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(1, stringLiteral0.getLength());
      assertNull(stringLiteral0.getValue());
      
      astRoot0.addChildrenToBack((Node) stringLiteral0);
      assertEquals("41", stringLiteral0.toString());
      assertEquals(0, stringLiteral0.getPosition());
      assertEquals(0, stringLiteral0.getAbsolutePosition());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(41, stringLiteral0.getType());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(0, stringLiteral0.depth());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(1, stringLiteral0.getLength());
      assertNull(stringLiteral0.getValue());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      stringLiteral0.setValue(string0);
      assertEquals("41", stringLiteral0.toString());
      assertEquals(0, stringLiteral0.getPosition());
      assertEquals(0, stringLiteral0.getAbsolutePosition());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(41, stringLiteral0.getType());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(0, stringLiteral0.depth());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals("QaI", stringLiteral0.getValue());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals("QaI", node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      assertNotNull(arrayComprehensionLoop0);
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      
      astRoot0.addChild((AstNode) arrayComprehensionLoop0);
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(1, arrayComprehensionLoop0.depth());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(0, arrayComprehensionLoop0.getPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      
      int int0 = (-42);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals("QaI", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(-42, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(-42, comment0.getPosition());
      assertEquals(-42, comment0.getAbsolutePosition());
      
      astRoot0.addComment(comment0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals("QaI", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.depth());
      assertEquals(-42, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(-41, comment0.getPosition());
      assertEquals(-42, comment0.getAbsolutePosition());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      
      astRoot0.setJsDocNode(comment0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals("QaI", astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals("QaI", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.depth());
      assertEquals(-42, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, comment0.getLineno());
      assertEquals(-41, comment0.getPosition());
      assertEquals(-42, comment0.getAbsolutePosition());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals("QaI", astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals("QaI", node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isContinue());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      
      int int0 = (-42);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(-1, comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(-42, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("QaI", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(-42, comment0.getPosition());
      assertEquals(-42, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      
      astRoot0.addComment(comment0);
      assertEquals(-1, comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(-42, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("QaI", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.depth());
      assertEquals(-42, comment0.getAbsolutePosition());
      assertEquals(-41, comment0.getPosition());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("QaI", node0.getSourceFileName());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      
      int int0 = 34;
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(34, comment0.getAbsolutePosition());
      assertEquals("QaI", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(34, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(34, comment0.getPosition());
      
      astRoot0.addComment(comment0);
      assertEquals(false, comment0.hasChildren());
      assertEquals(1, comment0.depth());
      assertEquals(34, comment0.getAbsolutePosition());
      assertEquals("QaI", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals(34, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertEquals(35, comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals("QaI", simpleSourceFile0.getName());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.hasChildren());
      assertEquals("QaI", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      
      int int0 = 2652;
      EmptyStatement emptyStatement0 = new EmptyStatement(int0);
      assertNotNull(emptyStatement0);
      assertNull(emptyStatement0.getJsDoc());
      assertEquals(1, emptyStatement0.getLength());
      assertEquals(2652, emptyStatement0.getPosition());
      assertEquals(-1, emptyStatement0.getLineno());
      assertEquals(false, emptyStatement0.hasChildren());
      assertEquals("128", emptyStatement0.toString());
      assertEquals(0, emptyStatement0.depth());
      assertEquals(2652, emptyStatement0.getAbsolutePosition());
      assertEquals(128, emptyStatement0.getType());
      
      astRoot0.addChildToBack((Node) emptyStatement0);
      assertNull(emptyStatement0.getJsDoc());
      assertEquals(1, emptyStatement0.getLength());
      assertEquals(2652, emptyStatement0.getPosition());
      assertEquals(-1, emptyStatement0.getLineno());
      assertEquals(false, emptyStatement0.hasChildren());
      assertEquals("128", emptyStatement0.toString());
      assertEquals(0, emptyStatement0.depth());
      assertEquals(2652, emptyStatement0.getAbsolutePosition());
      assertEquals(128, emptyStatement0.getType());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNot());
      assertEquals("QaI", node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(1, node0.getLength());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      
      int int0 = 0;
      LabeledStatement labeledStatement0 = new LabeledStatement();
      assertNotNull(labeledStatement0);
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(true, labeledStatement0.hasSideEffects());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.depth());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      
      astRoot0.addChild((AstNode) labeledStatement0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(true, labeledStatement0.hasSideEffects());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.getPosition());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(1, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getLineno());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Label label0 = new Label(int0, int0, string0);
      assertNotNull(label0);
      assertEquals(130, label0.getType());
      assertNull(label0.getJsDoc());
      assertEquals(0, label0.getPosition());
      assertEquals("130", label0.toString());
      assertEquals(0, label0.depth());
      assertEquals("QaI", label0.getName());
      assertEquals(0, label0.getAbsolutePosition());
      assertEquals(0, label0.getLength());
      assertEquals(false, label0.hasChildren());
      assertEquals(-1, label0.getLineno());
      
      labeledStatement0.addLabel(label0);
      assertEquals(133, labeledStatement0.getType());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(true, labeledStatement0.hasSideEffects());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(0, labeledStatement0.getPosition());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(1, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals(130, label0.getType());
      assertNull(label0.getJsDoc());
      assertEquals(0, label0.getPosition());
      assertEquals(2, label0.depth());
      assertEquals("130", label0.toString());
      assertEquals("QaI", label0.getName());
      assertEquals(0, label0.getLength());
      assertEquals(false, label0.hasChildren());
      assertEquals(-1, label0.getLineno());
      assertEquals(-1, label0.getAbsolutePosition());
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      
      int int0 = (-42);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      
      int int1 = 9;
      XmlDotQuery xmlDotQuery1 = (XmlDotQuery)xmlDotQuery0.setType(int1);
      assertNotNull(xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(9, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals("9", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertEquals(9, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals("9", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      
      astRoot0.addChildrenToBack((Node) xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(9, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals("9", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(9, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals("9", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.getName());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      assertNotNull(expressionStatement0);
      assertEquals(0, expressionStatement0.depth());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(1, expressionStatement0.getLength());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getPosition());
      
      xmlDotQuery0.setLeft((AstNode) expressionStatement0);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertFalse(int0 == int1);
      assertEquals(41, expressionStatement0.getPosition());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getAbsolutePosition());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(1, expressionStatement0.getLength());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(1, expressionStatement0.depth());
      assertEquals(9, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals("9", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      String string1 = astRoot0.getEncodedSource();
      assertNull(string1);
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string1, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      
      int int0 = (-42);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(146, xmlDotQuery0.getType());
      
      XmlDotQuery xmlDotQuery1 = (XmlDotQuery)xmlDotQuery0.setType(int0);
      assertNotNull(xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertEquals("-42", xmlDotQuery1.toString());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-42, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals("-42", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-42, xmlDotQuery0.getType());
      
      astRoot0.addChildrenToBack((Node) xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals("-42", xmlDotQuery1.toString());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-42, xmlDotQuery1.getType());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals("-42", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(-42, xmlDotQuery0.getType());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -42
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      
      String string0 = "";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      double double0 = 3523.470337055;
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber(double0);
      assertNotNull(numberLiteral0);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(3523.470337055, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(3523.470337055, numberLiteral0.getNumber(), 0.01D);
      
      astRoot0.addChildToFront((Node) numberLiteral0);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(3523.470337055, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getPosition());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(3523.470337055, numberLiteral0.getNumber(), 0.01D);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isContinue());
      assertEquals("", node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      ThrowStatement throwStatement0 = new ThrowStatement((AstNode) astRoot0);
      assertNotNull(throwStatement0);
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals(-1, throwStatement0.getLineno());
      assertEquals(1, throwStatement0.getLength());
      assertNull(throwStatement0.getJsDoc());
      assertEquals(50, throwStatement0.getType());
      assertEquals(0, throwStatement0.depth());
      assertEquals(-1, throwStatement0.getPosition());
      assertEquals(-1, throwStatement0.getAbsolutePosition());
      assertEquals("50", throwStatement0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.depth());
      
      astRoot0.addChildToBack((Node) throwStatement0);
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals(-1, throwStatement0.getLineno());
      assertEquals(1, throwStatement0.getLength());
      assertNull(throwStatement0.getJsDoc());
      assertEquals(50, throwStatement0.getType());
      assertEquals(0, throwStatement0.depth());
      assertEquals(-1, throwStatement0.getPosition());
      assertEquals(-1, throwStatement0.getAbsolutePosition());
      assertEquals("50", throwStatement0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.depth());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("QaI", simpleSourceFile0.toString());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "QaI";
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      
      int int0 = (-42);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      assertNotNull(xmlDotQuery0);
      assertEquals("146", xmlDotQuery0.toString());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      
      int int1 = 13;
      XmlDotQuery xmlDotQuery1 = (XmlDotQuery)xmlDotQuery0.setType(int1);
      assertNotNull(xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals("13", xmlDotQuery0.toString());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(13, xmlDotQuery0.getType());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(13, xmlDotQuery1.getType());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals("13", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      
      astRoot0.addChildrenToBack((Node) xmlDotQuery1);
      assertSame(xmlDotQuery0, xmlDotQuery1);
      assertSame(xmlDotQuery1, xmlDotQuery0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals("13", xmlDotQuery0.toString());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(-42, xmlDotQuery0.getPosition());
      assertEquals(1, xmlDotQuery0.getLength());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(13, xmlDotQuery0.getType());
      assertEquals(-42, xmlDotQuery0.getAbsolutePosition());
      assertEquals(false, xmlDotQuery1.hasChildren());
      assertEquals(0, xmlDotQuery1.depth());
      assertEquals(-42, xmlDotQuery1.getAbsolutePosition());
      assertEquals(-1, xmlDotQuery1.getRp());
      assertEquals(13, xmlDotQuery1.getType());
      assertEquals(-42, xmlDotQuery1.getPosition());
      assertNull(xmlDotQuery1.getJsDoc());
      assertEquals(1, xmlDotQuery1.getLength());
      assertEquals(-1, xmlDotQuery1.getLineno());
      assertEquals("13", xmlDotQuery1.toString());
      assertEquals(-1, xmlDotQuery1.getOperatorPosition());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("QaI", simpleSourceFile0.getName());
      assertEquals("QaI", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
