/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:24:47 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.GeneratorExpressionLoop;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "9  y";
      int int0 = 963;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(963, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(963, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("9  y", simpleSourceFile0.toString());
      assertEquals("9  y", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      assertEquals(-1, generatorExpressionLoop0.getRp());
      assertEquals(119, generatorExpressionLoop0.getType());
      assertEquals(-1, generatorExpressionLoop0.getLineno());
      assertEquals(false, generatorExpressionLoop0.isForEach());
      assertEquals(1, generatorExpressionLoop0.getLength());
      assertEquals("119", generatorExpressionLoop0.toString());
      assertEquals(-1, generatorExpressionLoop0.getAbsolutePosition());
      assertEquals(-1, generatorExpressionLoop0.getInPosition());
      assertEquals(-1, generatorExpressionLoop0.getLp());
      assertEquals(-1, generatorExpressionLoop0.getEachPosition());
      assertNull(generatorExpressionLoop0.getJsDoc());
      assertEquals(false, generatorExpressionLoop0.hasChildren());
      assertEquals(0, generatorExpressionLoop0.depth());
      assertEquals(-1, generatorExpressionLoop0.getPosition());
      assertNotNull(generatorExpressionLoop0);
      
      astRoot0.addChildrenToFront((Node) generatorExpressionLoop0);
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(963, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(963, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, generatorExpressionLoop0.getRp());
      assertEquals(119, generatorExpressionLoop0.getType());
      assertEquals(-1, generatorExpressionLoop0.getLineno());
      assertEquals(false, generatorExpressionLoop0.isForEach());
      assertEquals(1, generatorExpressionLoop0.getLength());
      assertEquals("119", generatorExpressionLoop0.toString());
      assertEquals(-1, generatorExpressionLoop0.getAbsolutePosition());
      assertEquals(-1, generatorExpressionLoop0.getInPosition());
      assertEquals(-1, generatorExpressionLoop0.getLp());
      assertEquals(-1, generatorExpressionLoop0.getEachPosition());
      assertNull(generatorExpressionLoop0.getJsDoc());
      assertEquals(false, generatorExpressionLoop0.hasChildren());
      assertEquals(0, generatorExpressionLoop0.depth());
      assertEquals(-1, generatorExpressionLoop0.getPosition());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "92na";
      int int0 = 980;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(980, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(980, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertNotNull(astRoot0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("92na", simpleSourceFile0.toString());
      assertEquals("92na", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      GeneratorExpressionLoop generatorExpressionLoop0 = new GeneratorExpressionLoop();
      assertEquals("119", generatorExpressionLoop0.toString());
      assertNull(generatorExpressionLoop0.getJsDoc());
      assertEquals(-1, generatorExpressionLoop0.getPosition());
      assertEquals(-1, generatorExpressionLoop0.getEachPosition());
      assertEquals(false, generatorExpressionLoop0.isForEach());
      assertEquals(1, generatorExpressionLoop0.getLength());
      assertEquals(-1, generatorExpressionLoop0.getInPosition());
      assertEquals(119, generatorExpressionLoop0.getType());
      assertEquals(-1, generatorExpressionLoop0.getRp());
      assertEquals(false, generatorExpressionLoop0.hasChildren());
      assertEquals(-1, generatorExpressionLoop0.getAbsolutePosition());
      assertEquals(-1, generatorExpressionLoop0.getLp());
      assertEquals(0, generatorExpressionLoop0.depth());
      assertEquals(-1, generatorExpressionLoop0.getLineno());
      assertNotNull(generatorExpressionLoop0);
      
      int int1 = 0;
      GeneratorExpressionLoop generatorExpressionLoop1 = (GeneratorExpressionLoop)generatorExpressionLoop0.setType(int1);
      assertFalse(int1 == int0);
      assertSame(generatorExpressionLoop0, generatorExpressionLoop1);
      assertSame(generatorExpressionLoop1, generatorExpressionLoop0);
      assertEquals(0, generatorExpressionLoop0.getType());
      assertNull(generatorExpressionLoop0.getJsDoc());
      assertEquals(-1, generatorExpressionLoop0.getPosition());
      assertEquals(-1, generatorExpressionLoop0.getEachPosition());
      assertEquals(false, generatorExpressionLoop0.isForEach());
      assertEquals(1, generatorExpressionLoop0.getLength());
      assertEquals(-1, generatorExpressionLoop0.getInPosition());
      assertEquals(-1, generatorExpressionLoop0.getRp());
      assertEquals(false, generatorExpressionLoop0.hasChildren());
      assertEquals(-1, generatorExpressionLoop0.getAbsolutePosition());
      assertEquals("0", generatorExpressionLoop0.toString());
      assertEquals(-1, generatorExpressionLoop0.getLp());
      assertEquals(0, generatorExpressionLoop0.depth());
      assertEquals(-1, generatorExpressionLoop0.getLineno());
      assertEquals(-1, generatorExpressionLoop1.getRp());
      assertEquals(false, generatorExpressionLoop1.hasChildren());
      assertEquals(-1, generatorExpressionLoop1.getPosition());
      assertEquals(-1, generatorExpressionLoop1.getAbsolutePosition());
      assertNull(generatorExpressionLoop1.getJsDoc());
      assertEquals(1, generatorExpressionLoop1.getLength());
      assertEquals("0", generatorExpressionLoop1.toString());
      assertEquals(0, generatorExpressionLoop1.depth());
      assertEquals(-1, generatorExpressionLoop1.getLineno());
      assertEquals(-1, generatorExpressionLoop1.getInPosition());
      assertEquals(-1, generatorExpressionLoop1.getEachPosition());
      assertEquals(0, generatorExpressionLoop1.getType());
      assertEquals(false, generatorExpressionLoop1.isForEach());
      assertEquals(-1, generatorExpressionLoop1.getLp());
      assertNotNull(generatorExpressionLoop1);
      
      astRoot0.addChildrenToFront((Node) generatorExpressionLoop1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(generatorExpressionLoop0, generatorExpressionLoop1);
      assertSame(generatorExpressionLoop1, generatorExpressionLoop0);
      assertEquals(0, generatorExpressionLoop0.getType());
      assertNull(generatorExpressionLoop0.getJsDoc());
      assertEquals(-1, generatorExpressionLoop0.getPosition());
      assertEquals(-1, generatorExpressionLoop0.getEachPosition());
      assertEquals(false, generatorExpressionLoop0.isForEach());
      assertEquals(1, generatorExpressionLoop0.getLength());
      assertEquals(-1, generatorExpressionLoop0.getInPosition());
      assertEquals(-1, generatorExpressionLoop0.getRp());
      assertEquals(false, generatorExpressionLoop0.hasChildren());
      assertEquals(-1, generatorExpressionLoop0.getAbsolutePosition());
      assertEquals("0", generatorExpressionLoop0.toString());
      assertEquals(-1, generatorExpressionLoop0.getLp());
      assertEquals(0, generatorExpressionLoop0.depth());
      assertEquals(-1, generatorExpressionLoop0.getLineno());
      assertEquals(-1, generatorExpressionLoop1.getRp());
      assertEquals(false, generatorExpressionLoop1.hasChildren());
      assertEquals(-1, generatorExpressionLoop1.getPosition());
      assertEquals(-1, generatorExpressionLoop1.getAbsolutePosition());
      assertNull(generatorExpressionLoop1.getJsDoc());
      assertEquals(1, generatorExpressionLoop1.getLength());
      assertEquals("0", generatorExpressionLoop1.toString());
      assertEquals(0, generatorExpressionLoop1.depth());
      assertEquals(-1, generatorExpressionLoop1.getLineno());
      assertEquals(-1, generatorExpressionLoop1.getInPosition());
      assertEquals(-1, generatorExpressionLoop1.getEachPosition());
      assertEquals(0, generatorExpressionLoop1.getType());
      assertEquals(false, generatorExpressionLoop1.isForEach());
      assertEquals(-1, generatorExpressionLoop1.getLp());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(980, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(980, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertFalse(int0 == int1);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("92na", simpleSourceFile0.toString());
      assertEquals("92na", simpleSourceFile0.getName());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals("92na", node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.isScript());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(980, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(980, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "92na";
      int int0 = 980;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(980, astRoot0.getPosition());
      assertEquals(980, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("92na", simpleSourceFile0.toString());
      assertEquals("92na", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = false;
      assertFalse(boolean1 == boolean0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean1, config_LanguageMode0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals("92na", node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabel());
      assertEquals("92na", simpleSourceFile0.toString());
      assertEquals("92na", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(980, astRoot0.getPosition());
      assertEquals(980, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "ms.invaid.date";
      int int0 = 993;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(993, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(993, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(astRoot0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("ms.invaid.date", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("ms.invaid.date", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(993, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(993, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals("ms.invaid.date", node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDelProp());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals("ms.invaid.date", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("ms.invaid.date", simpleSourceFile0.getName());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = (-2263);
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isSetter());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-2263, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(0, objectProperty0.depth());
      assertEquals(-2263, objectProperty0.getLength());
      assertEquals(-2263, objectProperty0.getPosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals("103", objectProperty0.toString());
      assertNotNull(objectProperty0);
      
      AstRoot astRoot0 = objectProperty0.getAstRoot();
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isSetter());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(-2263, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(0, objectProperty0.depth());
      assertEquals(-2263, objectProperty0.getLength());
      assertEquals(-2263, objectProperty0.getPosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals("103", objectProperty0.toString());
      assertNull(astRoot0);
      
      String string0 = "msg.end.annotation.expected";
      boolean boolean0 = true;
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      SimpleSourceFile simpleSourceFile0 = null;
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
