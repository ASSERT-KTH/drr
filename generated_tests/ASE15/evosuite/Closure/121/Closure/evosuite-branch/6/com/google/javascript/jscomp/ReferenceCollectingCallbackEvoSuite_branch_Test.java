/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:32:19 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.GlobalVarReferenceMap;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceAst;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class ReferenceCollectingCallbackEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = null;
      double double0 = (-550.2);
      int int0 = (-1822);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
      assertNotNull(referenceCollectingCallback_BasicBlock1);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      
      boolean boolean0 = referenceCollectingCallback_BasicBlock1.provablyExecutesBefore(referenceCollectingCallback_BasicBlock1);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = null;
      double double0 = (-550.2);
      int int0 = (-1822);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      
      node0.addChildToBack(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.hasChildren());
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
      assertNotNull(referenceCollectingCallback_BasicBlock1);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "8 x]% nHVE3";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertNotNull(compilerInput0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
      
      Node node0 = referenceCollectingCallback_Reference0.getGrandparent();
      assertNull(node0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
      assertNull(referenceCollectingCallback_Reference0);
      
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = null;
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
      assertNull(referenceCollectingCallback_Reference0);
      
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
      assertNull(referenceCollectingCallback_Reference0);
      
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
      assertNull(referenceCollectingCallback_Reference0);
      
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isEscaped();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      Iterator<ReferenceCollectingCallback.Reference> iterator0 = referenceCollectingCallback_ReferenceCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = null;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Scope.Var scope_Var0 = null;
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferences(scope_Var0);
      assertNull(referenceCollectingCallback_ReferenceCollection0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Scope.Var scope_Var0 = null;
      // Undeclared exception!
      try {
        Scope scope0 = referenceCollectingCallback0.getScope(scope_Var0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Iterable<Scope.Var> iterable0 = referenceCollectingCallback0.getAllSymbols();
      assertNotNull(iterable0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(83, node0.getType());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(true, stack0.empty());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try {
        referenceCollectingCallback0.hotSwapScript(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "8 x]% nHVE3";
      SourceAst sourceAst0 = null;
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      InputId inputId0 = syntheticAst0.getInputId();
      assertNotNull(inputId0);
      assertEquals("8 x]% nHVE3", inputId0.getIdName());
      
      boolean boolean0 = false;
      CompilerInput compilerInput0 = new CompilerInput(sourceAst0, inputId0, boolean0);
      assertNotNull(compilerInput0);
      assertEquals("8 x]% nHVE3", inputId0.getIdName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals("8 x]% nHVE3", inputId0.getIdName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      
      InputId inputId1 = referenceCollectingCallback_Reference0.getInputId();
      assertSame(inputId0, inputId1);
      assertSame(inputId1, inputId0);
      assertNotNull(inputId1);
      assertEquals("8 x]% nHVE3", inputId0.getIdName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      assertEquals("8 x]% nHVE3", inputId1.getIdName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "8 x]% nHVE3";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertNotNull(compilerInput0);
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = referenceCollectingCallback_Reference0.getBasicBlock();
      assertNull(referenceCollectingCallback_BasicBlock0);
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("8 x]% nHVE3", sourceFile_OnDisk0.toString());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "Related types should have been computed for type: ";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
      assertNotNull(jSSourceFile0);
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.toString());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getOriginalPath());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) jSSourceFile0);
      assertNotNull(compilerInput0);
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.toString());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getOriginalPath());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("Related types should have been computed for type: ", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("Related types should have been computed for type: ", compilerInput0.getName());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.toString());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getOriginalPath());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("Related types should have been computed for type: ", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("Related types should have been computed for type: ", compilerInput0.getName());
      
      Scope scope0 = referenceCollectingCallback_Reference0.getScope();
      assertNull(scope0);
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.toString());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getOriginalPath());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("Related types should have been computed for type: ", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("Related types should have been computed for type: ", compilerInput0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "ln>RC\\iLaY";
      SourceFile sourceFile0 = new SourceFile(string0);
      assertNotNull(sourceFile0);
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      assertNotNull(compilerInput0);
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      assertEquals("ln>RC\\iLaY", compilerInput0.toString());
      assertEquals("ln>RC\\iLaY", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      assertEquals("ln>RC\\iLaY", compilerInput0.toString());
      assertEquals("ln>RC\\iLaY", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      
      Scope scope0 = null;
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_Reference0.cloneWithNewScope(scope0);
      assertFalse(referenceCollectingCallback_Reference1.equals((Object)referenceCollectingCallback_Reference0));
      assertFalse(referenceCollectingCallback_Reference0.equals((Object)referenceCollectingCallback_Reference1));
      assertNotSame(referenceCollectingCallback_Reference1, referenceCollectingCallback_Reference0);
      assertNotSame(referenceCollectingCallback_Reference0, referenceCollectingCallback_Reference1);
      assertNotNull(referenceCollectingCallback_Reference1);
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      assertEquals("ln>RC\\iLaY", compilerInput0.toString());
      assertEquals("ln>RC\\iLaY", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "Related types should have been computed for type: ";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
      assertNotNull(jSSourceFile0);
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.toString());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getName());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getOriginalPath());
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) jSSourceFile0);
      assertNotNull(compilerInput0);
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.toString());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getName());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getOriginalPath());
      assertEquals("Related types should have been computed for type: ", compilerInput0.getName());
      assertEquals("Related types should have been computed for type: ", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.toString());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getName());
      assertEquals("Related types should have been computed for type: ", jSSourceFile0.getOriginalPath());
      assertEquals("Related types should have been computed for type: ", compilerInput0.getName());
      assertEquals("Related types should have been computed for type: ", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      
      // Undeclared exception!
      try {
        Scope.Var scope_Var0 = referenceCollectingCallback_Reference0.getSymbol();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "ln>RC\\iLaY";
      SourceFile sourceFile0 = new SourceFile(string0);
      assertNotNull(sourceFile0);
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      assertNotNull(compilerInput0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("ln>RC\\iLaY", compilerInput0.toString());
      assertEquals("ln>RC\\iLaY", compilerInput0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("ln>RC\\iLaY", compilerInput0.toString());
      assertEquals("ln>RC\\iLaY", compilerInput0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      
      StaticSourceFile staticSourceFile0 = referenceCollectingCallback_Reference0.getSourceFile();
      assertNull(staticSourceFile0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("ln>RC\\iLaY", compilerInput0.toString());
      assertEquals("ln>RC\\iLaY", compilerInput0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.getOriginalPath());
      assertEquals("ln>RC\\iLaY", sourceFile0.getName());
      assertEquals("ln>RC\\iLaY", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "8 x]% nHVE3";
      SourceAst sourceAst0 = null;
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      InputId inputId0 = syntheticAst0.getInputId();
      assertNotNull(inputId0);
      assertEquals("8 x]% nHVE3", inputId0.getIdName());
      
      boolean boolean0 = false;
      CompilerInput compilerInput0 = new CompilerInput(sourceAst0, inputId0, boolean0);
      assertNotNull(compilerInput0);
      assertEquals("8 x]% nHVE3", inputId0.getIdName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals("8 x]% nHVE3", inputId0.getIdName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("8 x]% nHVE3", compilerInput0.getName());
      assertEquals("8 x]% nHVE3", compilerInput0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = referenceCollectingCallback_Reference0.isHoistedFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "&&";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
      assertNotNull(jSSourceFile0);
      assertEquals("&&", jSSourceFile0.getName());
      assertEquals("&&", jSSourceFile0.toString());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("&&", jSSourceFile0.getOriginalPath());
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) jSSourceFile0);
      assertNotNull(compilerInput0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("&&", compilerInput0.toString());
      assertEquals("&&", compilerInput0.getName());
      assertEquals("&&", jSSourceFile0.getName());
      assertEquals("&&", jSSourceFile0.toString());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("&&", jSSourceFile0.getOriginalPath());
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertNotNull(referenceCollectingCallback_Reference0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("&&", compilerInput0.toString());
      assertEquals("&&", compilerInput0.getName());
      assertEquals("&&", jSSourceFile0.getName());
      assertEquals("&&", jSSourceFile0.toString());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("&&", jSSourceFile0.getOriginalPath());
      
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_Reference0.isVarDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = null;
      AbstractCompiler abstractCompiler0 = null;
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = null;
      // Undeclared exception!
      try {
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, referenceCollectingCallback_BasicBlock0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) referenceCollectingCallback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      GlobalVarReferenceMap globalVarReferenceMap0 = compiler0.getGlobalVarReferences();
      assertNull(globalVarReferenceMap0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      referenceCollectingCallback_Behavior0.afterExitScope(nodeTraversal0, (ReferenceCollectingCallback.ReferenceMap) globalVarReferenceMap0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = null;
      double double0 = (-550.2);
      int int0 = (-1822);
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getCharno());
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
      assertNotNull(referenceCollectingCallback_BasicBlock1);
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getCharno());
      
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_BasicBlock1.provablyExecutesBefore(referenceCollectingCallback_BasicBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
