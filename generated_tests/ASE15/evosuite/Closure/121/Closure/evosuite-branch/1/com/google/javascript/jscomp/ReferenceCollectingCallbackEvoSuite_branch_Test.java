/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:44:46 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GlobalVarReferenceMap;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceAst;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class ReferenceCollectingCallbackEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = null;
      int int0 = (-2087);
      Node node0 = new Node(int0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(-2087, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertNotNull(node0);
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(-2087, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertNotNull(referenceCollectingCallback_BasicBlock1);
      
      boolean boolean0 = referenceCollectingCallback_BasicBlock1.provablyExecutesBefore(referenceCollectingCallback_BasicBlock1);
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(-2087, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 77;
      String string0 = "Expected statement but was ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetProp());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(77, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(40, node0.getType());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetProp());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(77, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(40, node0.getType());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isInc());
      assertEquals(true, node1.isTry());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isNew());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isContinue());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isComma());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isCast());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(77, node1.getType());
      assertEquals(0, node1.getChangeTime());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isLabel());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isGetElem());
      assertNull(node1.getSourceFileName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isFunction());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isParamList());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isIn());
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = null;
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetProp());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(77, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(40, node0.getType());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertNotNull(referenceCollectingCallback_BasicBlock1);
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile((File) mockFile0);
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(sourceFile_OnDisk0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.toString());
      assertEquals("/", compilerInput0.getName());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.toString());
      assertEquals("/", compilerInput0.getName());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      Node node0 = referenceCollectingCallback_Reference0.getGrandparent();
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.toString());
      assertEquals("/", compilerInput0.getName());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
      assertNull(referenceCollectingCallback_Reference0);
      
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isOnlyAssignmentSameScopeAsDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
      assertNull(referenceCollectingCallback_Reference0);
      
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
      assertNull(referenceCollectingCallback_Reference0);
      
      referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0);
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isEscaped();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      GatherRawExports gatherRawExports0 = new GatherRawExports(abstractCompiler0);
      assertNotNull(gatherRawExports0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) gatherRawExports0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      int int0 = 77;
      String string0 = "Expected statement but was ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(77, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(77, node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertNotNull(node0);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = null;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(abstractCompiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      
      referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(77, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(77, node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      GatherRawExports gatherRawExports0 = new GatherRawExports(abstractCompiler0);
      assertNotNull(gatherRawExports0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) gatherRawExports0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      int int0 = 77;
      String string0 = "Expected statement but was ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(77, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isString());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(77, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isString());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isDo());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isLabel());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isCall());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isNot());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isWhile());
      assertEquals(77, node1.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isWith());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isBreak());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(true, node1.isTry());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isHook());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isFromExterns());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isArrayLit());
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = null;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(abstractCompiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      
      boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node1, node1);
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(77, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isString());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isDo());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isLabel());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isCall());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isNot());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isWhile());
      assertEquals(77, node1.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isWith());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isBreak());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(true, node1.isTry());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isHook());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isFromExterns());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isArrayLit());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertTrue(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      GatherRawExports gatherRawExports0 = new GatherRawExports(abstractCompiler0);
      assertNotNull(gatherRawExports0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(abstractCompiler0, (NodeTraversal.Callback) gatherRawExports0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      int int0 = 77;
      String string0 = "Expected statement but was ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(77, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetProp());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(0, node1.getChangeTime());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isScript());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isFromExterns());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isGetProp());
      assertEquals(77, node1.getType());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNull());
      assertEquals(0, node1.getLength());
      assertEquals(true, node1.isTry());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isOr());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isHook());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(77, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetProp());
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = null;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(abstractCompiler0, referenceCollectingCallback_Behavior0);
      assertNotNull(referenceCollectingCallback0);
      
      // Undeclared exception!
      try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      Iterator<ReferenceCollectingCallback.Reference> iterator0 = referenceCollectingCallback_ReferenceCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(referenceCollectingCallback0);
      
      Scope.Var scope_Var0 = null;
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferences(scope_Var0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(referenceCollectingCallback_ReferenceCollection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(referenceCollectingCallback0);
      
      Scope.Var scope_Var0 = null;
      // Undeclared exception!
      try {
        Scope scope0 = referenceCollectingCallback0.getScope(scope_Var0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(referenceCollectingCallback0);
      
      Node node0 = null;
      // Undeclared exception!
      try {
        referenceCollectingCallback0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = null;
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(referenceCollectingCallback0);
      
      Iterable<Scope.Var> iterable0 = referenceCollectingCallback0.getAllSymbols();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(referenceCollectingCallback0);
      
      int int0 = 102097;
      Node node0 = new Node(int0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(102097, node0.getType());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCast());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWhile());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        referenceCollectingCallback0.hotSwapScript(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(sourceFile_OnDisk0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      InputId inputId0 = referenceCollectingCallback_Reference0.getInputId();
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", inputId0.getIdName());
      assertNotNull(inputId0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile((File) mockFile0);
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(sourceFile_OnDisk0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.toString());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.toString());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = referenceCollectingCallback_Reference0.getBasicBlock();
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.toString());
      assertNull(referenceCollectingCallback_BasicBlock0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile((File) mockFile0);
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(sourceFile_OnDisk0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertEquals("/", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.getName());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals("/", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.getName());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      Scope scope0 = referenceCollectingCallback_Reference0.getScope();
      assertEquals("/", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("/", compilerInput0.getName());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNull(scope0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertNotNull(sourceFile_OnDisk0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      Scope scope0 = null;
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_Reference0.cloneWithNewScope(scope0);
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertNotNull(referenceCollectingCallback_Reference1);
      assertNotSame(referenceCollectingCallback_Reference1, referenceCollectingCallback_Reference0);
      assertNotSame(referenceCollectingCallback_Reference0, referenceCollectingCallback_Reference1);
      assertFalse(referenceCollectingCallback_Reference1.equals((Object)referenceCollectingCallback_Reference0));
      assertFalse(referenceCollectingCallback_Reference0.equals((Object)referenceCollectingCallback_Reference1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "TzZp,%";
      ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
      assertNotNull(referenceCollectingCallback_ReferenceCollection0);
      
      boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
      assertFalse(boolean0);
      
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      SourceFile sourceFile0 = syntheticAst0.getSourceFile();
      assertEquals("TzZp,%", sourceFile0.getName());
      assertEquals("TzZp,%", sourceFile0.getOriginalPath());
      assertEquals("TzZp,%", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      assertNotNull(sourceFile0);
      
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0, boolean0);
      assertEquals("TzZp,%", sourceFile0.getName());
      assertEquals("TzZp,%", sourceFile0.getOriginalPath());
      assertEquals("TzZp,%", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      assertEquals("TzZp,%", compilerInput0.getName());
      assertEquals("TzZp,%", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals("TzZp,%", sourceFile0.getName());
      assertEquals("TzZp,%", sourceFile0.getOriginalPath());
      assertEquals("TzZp,%", sourceFile0.toString());
      assertEquals(false, sourceFile0.isExtern());
      assertEquals("TzZp,%", compilerInput0.getName());
      assertEquals("TzZp,%", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      // Undeclared exception!
      try {
        Scope.Var scope_Var0 = referenceCollectingCallback_Reference0.getSymbol();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertNotNull(sourceFile_OnDisk0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceFile) sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      StaticSourceFile staticSourceFile0 = referenceCollectingCallback_Reference0.getSourceFile();
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", sourceFile_OnDisk0.toString());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.getName());
      assertEquals("coU.google.javascript.jscomp.CrossModuleMethod+otion$IdGenerator", compilerInput0.toString());
      assertEquals(false, compilerInput0.isExtern());
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "RD7;Mm9";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceAst) syntheticAst0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("RD7;Mm9", compilerInput0.toString());
      assertEquals("RD7;Mm9", compilerInput0.getName());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("RD7;Mm9", compilerInput0.toString());
      assertEquals("RD7;Mm9", compilerInput0.getName());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_Reference0.isHoistedFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "#";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      boolean boolean0 = false;
      CompilerInput compilerInput0 = new CompilerInput((SourceAst) syntheticAst0, string0, boolean0);
      assertEquals("#", compilerInput0.toString());
      assertEquals("#", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertNotNull(compilerInput0);
      
      ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
      assertEquals("#", compilerInput0.toString());
      assertEquals("#", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertNotNull(referenceCollectingCallback_Reference0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = referenceCollectingCallback_Reference0.isVarDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      assertNotNull(referenceCollectingCallback_Behavior0);
      
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(referenceCollectingCallback0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) referenceCollectingCallback0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      ArrayList<CompilerInput> arrayList0 = new ArrayList<CompilerInput>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      GlobalVarReferenceMap globalVarReferenceMap0 = new GlobalVarReferenceMap(arrayList0, arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertNotNull(globalVarReferenceMap0);
      
      referenceCollectingCallback_Behavior0.afterExitScope(nodeTraversal0, (ReferenceCollectingCallback.ReferenceMap) globalVarReferenceMap0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = null;
      int int0 = (-2809);
      Node node0 = new Node(int0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(-2809, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertNotNull(node0);
      
      ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(-2809, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertNotNull(referenceCollectingCallback_BasicBlock1);
      
      // Undeclared exception!
      try {
        boolean boolean0 = referenceCollectingCallback_BasicBlock1.provablyExecutesBefore(referenceCollectingCallback_BasicBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
