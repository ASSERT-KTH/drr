
import junit.framework.*;

public class RandoopTest3 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test1"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, 1.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var8, var13);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var18);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var8, var18);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var6, var24);
    org.jfree.chart.util.ShapeList var26 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 0.0d, 1.0d);
    var26.setShape(100, var32);
    var26.clear();
    java.lang.Object var35 = var26.clone();
    var26.clear();
    boolean var38 = var26.equals((java.lang.Object)0);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    boolean var42 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var26, (java.lang.Object)var41);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 1.0d, 100.0d);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var45);
    boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var6, var46);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 1.0f);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var46, var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test2"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    boolean var3 = var0.equals((java.lang.Object)100.0d);
    boolean var5 = var0.equals((java.lang.Object)(-1));
    int var6 = var0.size();
    var0.clear();
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test3"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 0.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 0.0d, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test4"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 100.0d, 1.0d);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 1.0d, 0.0d);
    boolean var40 = var0.equals((java.lang.Object)var39);
    org.jfree.chart.util.ShapeList var41 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var42 = var41.clone();
    var41.clear();
    java.awt.Shape var45 = var41.getShape(100);
    org.jfree.chart.util.ShapeList var46 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 0.0d, 1.0d);
    var46.setShape(100, var52);
    var46.clear();
    java.lang.Object var55 = var46.clone();
    var46.clear();
    boolean var58 = var46.equals((java.lang.Object)0);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.clone(var60);
    boolean var62 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var46, (java.lang.Object)var61);
    int var63 = var46.size();
    boolean var64 = var41.equals((java.lang.Object)var63);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.rotateShape(var66, 0.0d, 1.0f, 10.0f);
    boolean var71 = var41.equals((java.lang.Object)var70);
    boolean var72 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var40, (java.lang.Object)var70);
    org.jfree.chart.util.RectangleAnchor var73 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var70, var73, 10.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test5"); }
// 
// 
//     java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var4, var11);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, 1.0f, 10.0f);
//     boolean var20 = var13.equals((java.lang.Object)var15);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
//     boolean var27 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var15, (java.lang.Object)var22);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var30);
//     boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var22, var30);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 0.0d, 1.0d);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var34);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 100.0d);
//     boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var34, var44);
//     boolean var49 = org.jfree.chart.util.ShapeUtilities.equal(var30, var34);
//     java.awt.Shape var50 = null;
//     boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var34, var50);
//     boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var4, var34);
//     org.jfree.chart.util.ShapeList var53 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.rotateShape(var55, 0.0d, 1.0f, 10.0f);
//     boolean var60 = var53.equals((java.lang.Object)var55);
//     java.awt.Shape var62 = var53.getShape(100);
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var53.setShape(10, var66);
//     java.lang.Object var68 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var66);
//     boolean var69 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var34, (java.lang.Object)var66);
//     
//     // Checks the contract:  equals-hashcode on var13 and var53
//     assertTrue("Contract failed: equals-hashcode on var13 and var53", var13.equals(var53) ? var13.hashCode() == var53.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var53.", var13.equals(var53) == var53.equals(var13));
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test6"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
    boolean var43 = var0.equals((java.lang.Object)var39);
    java.lang.Object var44 = var0.clone();
    java.lang.Object var45 = var0.clone();
    java.lang.Object var46 = null;
    boolean var47 = var0.equals(var46);
    var0.clear();
    java.lang.Object var49 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test7"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var5 = null;
//     boolean var6 = var4.equals(var5);
//     java.lang.Object var7 = var4.clone();
//     var4.clear();
//     java.awt.Shape var10 = var4.getShape(100);
//     boolean var11 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var4);
//     org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     var12.setShape(100, var18);
//     var12.clear();
//     java.awt.Shape var22 = var12.getShape(100);
//     java.lang.Object var23 = var12.clone();
//     var12.clear();
//     boolean var25 = var0.equals((java.lang.Object)var12);
//     org.jfree.chart.util.ShapeList var26 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 0.0d, 1.0d);
//     var26.setShape(100, var32);
//     var26.clear();
//     int var35 = var26.size();
//     int var36 = var26.size();
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     var26.setShape(0, var40);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 100.0d);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 0.0d, 1.0d);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.clone(var49);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.rotateShape(var49, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var57, 100.0d, 1.0d);
//     java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var57, 1.0d, 0.0d);
//     java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.clone(var63);
//     boolean var65 = org.jfree.chart.util.ShapeUtilities.equal(var47, var63);
//     var26.setShape(10, var63);
//     java.awt.Shape var68 = var26.getShape(10);
//     boolean var69 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)10);
//     
//     // Checks the contract:  equals-hashcode on var0 and var26
//     assertTrue("Contract failed: equals-hashcode on var0 and var26", var0.equals(var26) ? var0.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var26
//     assertTrue("Contract failed: equals-hashcode on var4 and var26", var4.equals(var26) ? var4.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var12 and var26
//     assertTrue("Contract failed: equals-hashcode on var12 and var26", var12.equals(var26) ? var12.hashCode() == var26.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var26.", var0.equals(var26) == var26.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var4 and var26.", var4.equals(var26) == var26.equals(var4));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var12 and var26.", var12.equals(var26) == var26.equals(var12));
// 
//   }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test8"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    var6.setShape(100, var12);
    var6.clear();
    java.lang.Object var15 = var6.clone();
    int var16 = var6.size();
    java.awt.Shape var18 = var6.getShape(0);
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var20 = null;
    boolean var21 = var19.equals(var20);
    var19.clear();
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var24 = var23.clone();
    var23.clear();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 10.0d, (-1.0d));
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, 1.0d);
    boolean var35 = var23.equals((java.lang.Object)var31);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    boolean var37 = var19.equals((java.lang.Object)var31);
    boolean var38 = var6.equals((java.lang.Object)var31);
    boolean var39 = var0.equals((java.lang.Object)var38);
    int var40 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test9"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 100.0d, 0.0d);
    var0.setShape(101, var16);
    org.jfree.chart.util.RectangleAnchor var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, var18, 0.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test10"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.lang.Object var8 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var1);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 1.0d, 0.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var14);
    java.io.ObjectOutputStream var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var14, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test11"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var5 = var4.clone();
    var4.clear();
    java.awt.Shape var8 = var4.getShape(100);
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    var9.setShape(100, var15);
    var9.clear();
    java.lang.Object var18 = var9.clone();
    var9.clear();
    boolean var21 = var9.equals((java.lang.Object)0);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    boolean var25 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var24);
    int var26 = var9.size();
    boolean var27 = var4.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 0.0d, 1.0f, 10.0f);
    boolean var34 = var4.equals((java.lang.Object)var33);
    java.lang.Object var35 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var33);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, (-1.0d), 100.0d);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var37, var47);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.rotateShape(var47, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 0.0d, (-1.0d));
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.clone(var55);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.rotateShape(var64, 0.0d, 1.0f, (-1.0f));
    boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var62, var64);
    java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.rotateShape(var62, 1.0d, 10.0f, 0.0f);
    boolean var74 = org.jfree.chart.util.ShapeUtilities.equal(var59, var62);
    boolean var75 = org.jfree.chart.util.ShapeUtilities.equal(var33, var62);
    java.lang.Object var76 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var33);
    boolean var77 = var0.equals((java.lang.Object)var33);
    java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    boolean var83 = org.jfree.chart.util.ShapeUtilities.equal(var80, var82);
    java.awt.Shape var86 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var80, 0.0d, (-1.0d));
    boolean var87 = org.jfree.chart.util.ShapeUtilities.equal(var33, var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test12"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
    boolean var8 = var1.equals((java.lang.Object)var3);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var10, var18);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
    boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
    boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var18, var22);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var0, var18);
    java.lang.Object var39 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var18);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test13"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    int var3 = var0.size();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 10.0d, 1.0d);
    var0.setShape(100, var7);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var18);
    java.awt.Shape var20 = null;
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var13, var20);
    boolean var22 = var0.equals((java.lang.Object)var13);
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var24 = null;
    boolean var25 = var23.equals(var24);
    java.lang.Object var26 = var23.clone();
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var23.setShape(100, var29);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 100.0d, 10.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 100.0d, (-1.0d));
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    boolean var38 = var0.equals((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test14"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    java.awt.Shape var14 = var0.getShape(0);
    int var15 = var0.size();
    boolean var17 = var0.equals((java.lang.Object)(-1.0f));
    var0.clear();
    java.lang.Object var19 = var0.clone();
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var21 = var20.clone();
    java.lang.Object var22 = var20.clone();
    java.lang.Object var23 = var20.clone();
    boolean var24 = var0.equals((java.lang.Object)var20);
    var0.clear();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test15"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    int var5 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test16"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    var0.clear();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
    var0.setShape(0, var19);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 100.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test17"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    boolean var7 = var0.equals((java.lang.Object)var3);
    var3.clear();
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    var9.setShape(100, var15);
    var9.clear();
    java.lang.Object var18 = var9.clone();
    var9.clear();
    boolean var21 = var9.equals((java.lang.Object)0);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    boolean var25 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var24);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var9.setShape(0, var29);
    var9.clear();
    java.lang.Object var32 = var9.clone();
    java.lang.Object var33 = var9.clone();
    boolean var34 = var3.equals(var33);
    java.lang.Object var35 = var3.clone();
    java.lang.Object var36 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test18"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    java.lang.Object var20 = var1.clone();
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 10.0d, 1.0d);
    boolean var27 = var1.equals((java.lang.Object)10.0d);
    int var28 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test19"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test20"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.lang.Object var12 = var0.clone();
    int var13 = var0.size();
    java.lang.Object var14 = var0.clone();
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 0.0d, 1.0f, 10.0f);
    boolean var22 = var15.equals((java.lang.Object)var17);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)var24);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var24, var32);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, (-1.0d), 100.0d);
    boolean var50 = org.jfree.chart.util.ShapeUtilities.equal(var36, var46);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var32, var36);
    java.awt.Shape var52 = null;
    boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var36, var52);
    boolean var54 = var0.equals((java.lang.Object)var52);
    int var55 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test21"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    java.awt.Shape var11 = var0.getShape((-1));
    int var12 = var0.size();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test22"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 1.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var3.setShape(100, var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var13);
    var3.setShape(0, var13);
    java.awt.Shape var17 = var3.getShape(10);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var3.setShape(0, var20);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var2, var20);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test23"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 100.0d, (-1.0f), 1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, (-1.0d), 1.0f, 1.0f);
    java.lang.Object var21 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var20);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test24"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var10 = var9.clone();
    var9.clear();
    java.awt.Shape var13 = var9.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = var14.getShape(100);
    java.lang.Object var17 = var14.clone();
    var14.clear();
    boolean var19 = var9.equals((java.lang.Object)var14);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
    int var21 = var14.size();
    java.awt.Shape var23 = var14.getShape(100);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var25, var27);
    boolean var32 = var14.equals((java.lang.Object)var27);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal(var8, (java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test25"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var29 = var0.getShape(100);
    var0.clear();
    org.jfree.chart.util.ShapeList var31 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var32 = var31.clone();
    var31.clear();
    java.awt.Shape var35 = var31.getShape(100);
    org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, 1.0d);
    var36.setShape(100, var42);
    var36.clear();
    java.lang.Object var45 = var36.clone();
    var36.clear();
    boolean var48 = var36.equals((java.lang.Object)0);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    boolean var52 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var36, (java.lang.Object)var51);
    int var53 = var36.size();
    boolean var54 = var31.equals((java.lang.Object)var53);
    boolean var55 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var57 = var0.getShape(2);
    int var58 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test26"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    var0.clear();
    int var13 = var0.size();
    int var14 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test27"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var29 = var0.getShape(100);
    var0.clear();
    int var31 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test28"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, (-1.0d));
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 10.0d, 1.0d);
    java.lang.Object var9 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var5);
    java.lang.Object var10 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var5);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    int var21 = var11.size();
    java.awt.Shape var23 = var11.getShape(0);
    boolean var25 = var11.equals((java.lang.Object)(short)(-1));
    java.lang.Object var26 = var11.clone();
    int var27 = var11.size();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    boolean var38 = var11.equals((java.lang.Object)var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = var11.equals((java.lang.Object)var42);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 10.0d, 0.0d);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 1.0d, (-1.0f), (-1.0f));
    boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var5, var54);
    org.jfree.chart.util.RectangleAnchor var56 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var54, var56, 1.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test29"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    java.awt.Shape var12 = var0.getShape((-1));
    java.lang.Object var13 = var0.clone();
    java.lang.Object var14 = var0.clone();
    java.lang.Object var15 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test30"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 0.0d, 0.0f, (-1.0f));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, (-1.0d), 1.0f, 1.0f);
    java.lang.Object var24 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var19);
    java.lang.Object var25 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test31"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    java.lang.Object var3 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var2);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 1.0d);
    org.jfree.chart.util.RectangleAnchor var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, var8, 0.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test32"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var3 = var2.clone();
    var2.clear();
    java.awt.Shape var6 = var2.getShape(100);
    var2.clear();
    boolean var8 = var0.equals((java.lang.Object)var2);
    java.lang.Object var9 = var2.clone();
    java.lang.Object var10 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test33"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    java.lang.Object var6 = var0.clone();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 100.0d, 1.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 1.0d, 0.0d);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-1), var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test34"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    java.awt.Shape var14 = var0.getShape(0);
    int var15 = var0.size();
    boolean var17 = var0.equals((java.lang.Object)(-1.0f));
    var0.clear();
    java.lang.Object var19 = var0.clone();
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var21 = var20.clone();
    java.lang.Object var22 = var20.clone();
    java.lang.Object var23 = var20.clone();
    boolean var24 = var0.equals((java.lang.Object)var20);
    var0.clear();
    java.lang.Object var26 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test35() {}
//   public void test35() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test35"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var1 = null;
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var1, 1.0d, (-1.0f), (-1.0f));
// 
//   }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test36"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    java.lang.Object var7 = null;
    boolean var8 = var0.equals(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test37() {}
//   public void test37() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test37"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var15 = var0.clone();
//     java.lang.Object var16 = var0.clone();
//     org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     var18.setShape(100, var24);
//     var18.clear();
//     int var27 = var18.size();
//     int var28 = var18.size();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     var18.setShape(0, var32);
//     var0.setShape(11, var32);
//     var0.clear();
//     
//     // Checks the contract:  equals-hashcode on var0 and var18
//     assertTrue("Contract failed: equals-hashcode on var0 and var18", var0.equals(var18) ? var0.hashCode() == var18.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var18.", var0.equals(var18) == var18.equals(var0));
// 
//   }

  public void test38() {}
//   public void test38() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test38"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(100);
//     java.lang.Object var3 = var0.clone();
//     var0.clear();
//     var0.clear();
//     var0.clear();
//     java.lang.Object var7 = var0.clone();
//     java.awt.Shape var9 = null;
//     var0.setShape(2, var9);
//     java.lang.Object var11 = var0.clone();
//     
//     // Checks the contract:  equals-hashcode on var3 and var11
//     assertTrue("Contract failed: equals-hashcode on var3 and var11", var3.equals(var11) ? var3.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var11
//     assertTrue("Contract failed: equals-hashcode on var7 and var11", var7.equals(var11) ? var7.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var3
//     assertTrue("Contract failed: equals-hashcode on var11 and var3", var11.equals(var3) ? var11.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var7
//     assertTrue("Contract failed: equals-hashcode on var11 and var7", var11.equals(var7) ? var11.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test39"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, 1.0d);
    java.io.ObjectOutputStream var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var5, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test40"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
    var0.setShape(0, var27);
    var0.clear();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var32, var42);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 0.0d, (-1.0d));
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    var0.setShape(102, var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test41"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var17, var22);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    var0.setShape(0, var17);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 10.0d, (-1.0d));
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    java.awt.Shape var33 = null;
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var28, var33);
    var0.setShape(0, var28);
    java.awt.Shape var36 = null;
    boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var28, var36);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, 10.0d, 100.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test42"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    java.lang.Object var6 = var0.clone();
    int var7 = var0.size();
    int var8 = var0.size();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    var12.setShape(100, var18);
    var12.clear();
    java.lang.Object var21 = var12.clone();
    int var22 = var12.size();
    java.awt.Shape var24 = var12.getShape(0);
    boolean var26 = var12.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    java.lang.Object var37 = var28.clone();
    var28.clear();
    boolean var40 = var28.equals((java.lang.Object)0);
    boolean var41 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var28);
    java.lang.Object var42 = var28.clone();
    boolean var43 = var12.equals(var42);
    org.jfree.chart.util.ShapeList var44 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 0.0d, 1.0f, 10.0f);
    boolean var51 = var44.equals((java.lang.Object)var46);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var53);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var46, (java.lang.Object)var53);
    boolean var59 = var12.equals((java.lang.Object)var53);
    boolean var60 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var11, (java.lang.Object)var12);
    boolean var61 = var0.equals((java.lang.Object)var12);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, (-1.0d), 100.0d);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.rotateShape(var66, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var74 = org.jfree.chart.util.ShapeUtilities.equal(var66, var73);
    boolean var75 = var0.equals((java.lang.Object)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test43"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, 0.0d, 1.0f, (-1.0f));
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 1.0d, 10.0f, 0.0f);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var23, var26);
    java.lang.Object var39 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test44"); }


    java.lang.Object var0 = null;
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    java.lang.Object var13 = var4.clone();
    int var14 = var4.size();
    java.awt.Shape var16 = var4.getShape(0);
    boolean var18 = var4.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    var20.setShape(100, var26);
    var20.clear();
    java.lang.Object var29 = var20.clone();
    var20.clear();
    boolean var32 = var20.equals((java.lang.Object)0);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var20);
    java.lang.Object var34 = var20.clone();
    boolean var35 = var4.equals(var34);
    org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 0.0d, 1.0f, 10.0f);
    boolean var43 = var36.equals((java.lang.Object)var38);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.clone(var45);
    boolean var50 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var38, (java.lang.Object)var45);
    boolean var51 = var4.equals((java.lang.Object)var45);
    boolean var52 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var4);
    boolean var53 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var3);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var3);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 10.0d);
    org.jfree.chart.util.RectangleAnchor var58 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var57, var58, 1.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test45"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    int var20 = var0.size();
    java.lang.Object var21 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test46"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 10.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var5, (-1.0d), 100.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test47"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    var13.clear();
    java.lang.Object var19 = var13.clone();
    java.lang.Object var20 = var13.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test48"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test49"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, (-1.0d), 100.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, (-1.0d));
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.lang.Object var25 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var23);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, (-1.0d));
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 1.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var23, var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test50() {}
//   public void test50() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test50"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var1 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, (-1.0f));
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var1, 0.0d, 100.0f, 0.0f);
// 
//   }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test51"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 10.0d, 1.0d);
    org.jfree.chart.util.RectangleAnchor var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, var21, 10.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test52"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, (-1.0d));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var8, var10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var17, var20);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var1, var20);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 100.0d, 0.0f, (-1.0f));
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var32, var35);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var1, var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test53"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.lang.Object var28 = null;
    boolean var29 = var0.equals(var28);
    java.lang.Object var30 = var0.clone();
    org.jfree.chart.util.ShapeList var31 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var32 = null;
    boolean var33 = var31.equals(var32);
    java.lang.Object var34 = var31.clone();
    java.lang.Object var35 = var31.clone();
    java.lang.Object var36 = var31.clone();
    java.lang.Object var37 = var31.clone();
    java.lang.Object var38 = var31.clone();
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 100.0d, (-1.0d));
    org.jfree.chart.util.ShapeList var47 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 0.0d, 1.0d);
    var47.setShape(100, var53);
    var47.clear();
    java.lang.Object var56 = var47.clone();
    var47.clear();
    boolean var59 = var47.equals((java.lang.Object)0);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.clone(var61);
    boolean var63 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var47, (java.lang.Object)var62);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var62, 1.0d, 100.0d);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.clone(var66);
    boolean var68 = org.jfree.chart.util.ShapeUtilities.equal(var43, var66);
    org.jfree.chart.util.ShapeList var69 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var72, 0.0d, 1.0d);
    var69.setShape(100, var75);
    var69.clear();
    java.lang.Object var78 = var69.clone();
    int var79 = var69.size();
    java.awt.Shape var81 = var69.getShape(0);
    java.awt.Shape var83 = var69.getShape(0);
    int var84 = var69.size();
    boolean var86 = var69.equals((java.lang.Object)(-1.0f));
    var69.clear();
    java.lang.Object var88 = var69.clone();
    boolean var89 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var68, var88);
    boolean var90 = org.jfree.chart.util.ObjectUtilities.equal(var38, (java.lang.Object)var68);
    boolean var91 = var0.equals((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test54"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = null;
    boolean var15 = var13.equals(var14);
    var13.clear();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var18 = var17.clone();
    var17.clear();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 10.0d, (-1.0d));
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 10.0d, 1.0d);
    boolean var29 = var17.equals((java.lang.Object)var25);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var31 = var13.equals((java.lang.Object)var25);
    boolean var32 = var0.equals((java.lang.Object)var25);
    java.lang.Object var33 = var0.clone();
    java.lang.Object var34 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test55"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    int var8 = var0.size();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    boolean var14 = var0.equals((java.lang.Object)var11);
    java.io.ObjectOutputStream var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var11, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test56"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, (-1.0f));
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.awt.Shape var20 = var10.getShape((-1));
    java.awt.Shape var22 = var10.getShape((-1));
    java.lang.Object var23 = var10.clone();
    boolean var24 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var10);
    java.lang.Object var25 = var10.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, (-1.0d), 100.0d);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 0.0d, (-1.0f), 10.0f);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var27, var38);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, (-1.0d));
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 1.0d, 0.0d);
    boolean var50 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var10, (java.lang.Object)var38);
    java.awt.Shape var52 = var10.getShape(2);
    java.lang.Object var53 = var10.clone();
    java.lang.Object var54 = var10.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test57"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle((-1.0f));
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 1.0f);
    boolean var5 = org.jfree.chart.util.ShapeUtilities.equal(var1, var4);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test58"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.awt.Shape var12 = var0.getShape((-1));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var19);
    var0.setShape(0, var19);
    java.io.ObjectOutputStream var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var19, var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test59"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    var0.clear();
    java.lang.Object var2 = var0.clone();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test60"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    java.awt.Shape var14 = var0.getShape(10);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test61"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
//     boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     var0.setShape(0, var20);
//     var0.clear();
//     int var23 = var0.size();
//     org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var25 = null;
//     boolean var26 = var24.equals(var25);
//     java.lang.Object var27 = var24.clone();
//     java.lang.Object var28 = var24.clone();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 0.0d, 1.0f, 10.0f);
//     var24.setShape(1, var31);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), (-1.0d));
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var39);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var41, (-1.0d), 100.0f, 1.0f);
//     boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var23, (java.lang.Object)var45);
//     
//     // Checks the contract:  equals-hashcode on var0 and var24
//     assertTrue("Contract failed: equals-hashcode on var0 and var24", var0.equals(var24) ? var0.hashCode() == var24.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var24.", var0.equals(var24) == var24.equals(var0));
// 
//   }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test62"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 10.0f);
    org.jfree.chart.util.RectangleAnchor var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, var3, 100.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test63"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.awt.Shape var10 = var0.getShape(0);
    java.lang.Object var11 = null;
    boolean var12 = var0.equals(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test64"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var8, var10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var17, var20);
    boolean var22 = var0.equals((java.lang.Object)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test65"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, (-1.0d));
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 10.0d, 0.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var6, 10.0d, 100.0f, 10.0f);
// 
//   }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test66"); }


    java.lang.Class var0 = null;
    java.lang.ClassLoader var1 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var0);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test67"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 1.0f, 10.0f);
    boolean var11 = var4.equals((java.lang.Object)var6);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var14 = var4.equals((java.lang.Object)var13);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var17 = var15.getShape(100);
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var19 = null;
    boolean var20 = var18.equals(var19);
    java.lang.Object var21 = var18.clone();
    boolean var22 = var15.equals((java.lang.Object)var18);
    boolean var23 = var4.equals((java.lang.Object)var18);
    java.lang.Object var24 = var4.clone();
    java.lang.Object var25 = var4.clone();
    java.lang.Object var26 = null;
    boolean var27 = var4.equals(var26);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    java.lang.Object var37 = var28.clone();
    var28.clear();
    boolean var40 = var28.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var41 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
    var41.setShape(100, var47);
    var41.clear();
    java.lang.Object var50 = var41.clone();
    var41.clear();
    boolean var53 = var41.equals((java.lang.Object)0);
    java.lang.Object var54 = var41.clone();
    boolean var55 = var28.equals((java.lang.Object)var41);
    java.awt.Shape var57 = var28.getShape(100);
    var28.clear();
    org.jfree.chart.util.ShapeList var59 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var60 = var59.clone();
    var59.clear();
    java.awt.Shape var63 = var59.getShape(100);
    org.jfree.chart.util.ShapeList var64 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var67, 0.0d, 1.0d);
    var64.setShape(100, var70);
    var64.clear();
    java.lang.Object var73 = var64.clone();
    var64.clear();
    boolean var76 = var64.equals((java.lang.Object)0);
    java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.clone(var78);
    boolean var80 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var64, (java.lang.Object)var79);
    int var81 = var64.size();
    boolean var82 = var59.equals((java.lang.Object)var81);
    boolean var83 = var28.equals((java.lang.Object)var59);
    boolean var84 = var4.equals((java.lang.Object)var59);
    java.lang.Object var85 = null;
    boolean var86 = var59.equals(var85);
    java.awt.Shape var89 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    boolean var90 = var59.equals((java.lang.Object)var89);
    boolean var91 = org.jfree.chart.util.ShapeUtilities.equal(var3, var89);
    org.jfree.chart.util.RectangleAnchor var92 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var95 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var89, var92, (-1.0d), 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test68"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    java.awt.Shape var12 = var0.getShape(100);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var14, var19);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = var0.equals((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test69"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    boolean var7 = var0.equals((java.lang.Object)var3);
    java.lang.Object var8 = var0.clone();
    java.awt.Shape var10 = var0.getShape((-1));
    java.lang.Object var11 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test70"); }


    org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 0.0d, 1.0d);
    var2.setShape(100, var8);
    var2.clear();
    java.lang.Object var11 = var2.clone();
    var2.clear();
    boolean var14 = var2.equals((java.lang.Object)0);
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var2);
    java.lang.Object var16 = var2.clone();
    boolean var17 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var2);
    java.awt.Shape var19 = var2.getShape((-1));
    var2.clear();
    var2.clear();
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var23.setShape(100, var29);
    var23.clear();
    int var32 = var23.size();
    java.lang.Object var33 = null;
    boolean var34 = var23.equals(var33);
    java.lang.Object var35 = var23.clone();
    int var36 = var23.size();
    var23.clear();
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 1.0f);
    boolean var44 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var40, (java.lang.Object)1.0f);
    var23.setShape(101, var40);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, 1.0d, 100.0f, 1.0f);
    var2.setShape(0, var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test71"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 10.0d, 0.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 100.0d, 100.0f, 10.0f);
    java.io.ObjectOutputStream var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var7, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test72"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 0.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 100.0d, (-1.0f), 0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 100.0d, 0.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 10.0d, (-1.0f), 100.0f);
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var9, var19);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 100.0d, 1.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 1.0d, 0.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var19, var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test73"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = null;
    var0.setShape(0, var12);
    int var14 = var0.size();
    java.awt.Shape var16 = var0.getShape(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test74"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(10);
    var0.clear();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 10.0f);
    var0.setShape(1, var7);
    java.lang.Object var9 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(0);
    var11.clear();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var11.setShape(1, var17);
    java.lang.Object var25 = var11.clone();
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, (-1.0d), 100.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 1.0d, 10.0f, (-1.0f));
    var11.setShape(1, var34);
    java.lang.Object var40 = var11.clone();
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 0.0d, 1.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var47);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.rotateShape(var47, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 100.0d, 1.0d);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 1.0d, 0.0d);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.clone(var61);
    boolean var63 = org.jfree.chart.util.ShapeUtilities.equal(var45, var61);
    boolean var64 = var11.equals((java.lang.Object)var61);
    var0.setShape(0, var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test75"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var14 = var13.clone();
//     java.lang.Object var15 = var13.clone();
//     boolean var16 = var0.equals((java.lang.Object)var13);
//     java.lang.Object var17 = var13.clone();
//     var13.clear();
//     java.awt.Shape var20 = var13.getShape(2);
//     org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var23 = var21.getShape(0);
//     var21.clear();
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
//     var21.setShape(1, var27);
//     java.lang.Object var35 = var21.clone();
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var38);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, (-1.0d), 1.0f, 1.0f);
//     var21.setShape(0, var38);
//     java.lang.Object var48 = var21.clone();
//     boolean var49 = var13.equals(var48);
//     
//     // Checks the contract:  equals-hashcode on var0 and var21
//     assertTrue("Contract failed: equals-hashcode on var0 and var21", var0.equals(var21) ? var0.hashCode() == var21.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var21
//     assertTrue("Contract failed: equals-hashcode on var13 and var21", var13.equals(var21) ? var13.hashCode() == var21.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var21.", var0.equals(var21) == var21.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var21.", var13.equals(var21) == var21.equals(var13));
//     
//     // Checks the contract:  equals-hashcode on var9 and var35
//     assertTrue("Contract failed: equals-hashcode on var9 and var35", var9.equals(var35) ? var9.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var9 and var48
//     assertTrue("Contract failed: equals-hashcode on var9 and var48", var9.equals(var48) ? var9.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var35
//     assertTrue("Contract failed: equals-hashcode on var14 and var35", var14.equals(var35) ? var14.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var48
//     assertTrue("Contract failed: equals-hashcode on var14 and var48", var14.equals(var48) ? var14.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var35
//     assertTrue("Contract failed: equals-hashcode on var15 and var35", var15.equals(var35) ? var15.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var48
//     assertTrue("Contract failed: equals-hashcode on var15 and var48", var15.equals(var48) ? var15.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var35
//     assertTrue("Contract failed: equals-hashcode on var17 and var35", var17.equals(var35) ? var17.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var48
//     assertTrue("Contract failed: equals-hashcode on var17 and var48", var17.equals(var48) ? var17.hashCode() == var48.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var35.", var9.equals(var35) == var35.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var48.", var9.equals(var48) == var48.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var35.", var14.equals(var35) == var35.equals(var14));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var48.", var14.equals(var48) == var48.equals(var14));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var15 and var35.", var15.equals(var35) == var35.equals(var15));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var15 and var48.", var15.equals(var48) == var48.equals(var15));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var35.", var17.equals(var35) == var35.equals(var17));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var48.", var17.equals(var48) == var48.equals(var17));
// 
//   }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test76"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 10.0d);
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var7 = null;
    boolean var8 = var6.equals(var7);
    java.lang.Object var9 = var6.clone();
    java.lang.Object var10 = var6.clone();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, 0.0d, 1.0f, 10.0f);
    var6.setShape(1, var13);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, (-1.0d), (-1.0d));
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 10.0d, 1.0d);
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var5, var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test77"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    int var3 = var0.size();
    var0.clear();
    int var5 = var0.size();
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = var6.getShape(0);
    java.lang.Object var9 = var6.clone();
    boolean var10 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var9);
    java.lang.Object var11 = var0.clone();
    int var12 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test78"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, (-1.0d), 100.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, (-1.0f), 10.0f);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var7, var18);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 10.0d, 0.0f, 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    boolean var29 = org.jfree.chart.util.ObjectUtilities.equal(var5, (java.lang.Object)var18);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test79"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, (-1.0d), 100.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, (-1.0d));
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var26, var31);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, (-1.0d), 100.0d);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var34, var36);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var26, var36);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var9, var36);
    java.io.ObjectOutputStream var43 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var36, var43);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test80"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    java.awt.Shape var14 = var4.getShape(100);
    java.lang.Object var15 = var4.clone();
    boolean var16 = var0.equals(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test81"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    int var23 = var0.size();
    int var24 = var0.size();
    java.awt.Shape var26 = var0.getShape(102);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, (-1.0f));
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 10.0d);
    var0.setShape(0, var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test82"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    var0.setShape(100, var14);
    java.lang.Object var16 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test83() {}
//   public void test83() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test83"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = var1.getShape(0);
//     var1.clear();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), 100.0d);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     var1.setShape(1, var7);
//     java.lang.Object var15 = var1.clone();
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 1.0d, 10.0f, (-1.0f));
//     var1.setShape(1, var24);
//     java.lang.Object var30 = var1.clone();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 100.0d, 1.0d);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 1.0d, 0.0d);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var51);
//     boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var35, var51);
//     boolean var54 = var1.equals((java.lang.Object)var51);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var59, 0.0d, 1.0d);
//     boolean var63 = org.jfree.chart.util.ShapeUtilities.equal(var57, var62);
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var67, (-1.0d), 100.0d);
//     boolean var71 = org.jfree.chart.util.ShapeUtilities.equal(var65, var67);
//     boolean var72 = org.jfree.chart.util.ShapeUtilities.equal(var57, var67);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.clone(var67);
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.clone(var67);
//     java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.rotateShape(var67, (-1.0d), 1.0f, 1.0f);
//     java.lang.Object var79 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var78);
//     java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.clone(var78);
//     var1.setShape(101, var80);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var80, 10.0d, 100.0f, 1.0f);
// 
//   }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test84"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var9 = var7.getShape(0);
    java.lang.Object var10 = var7.clone();
    java.lang.Object var11 = var7.clone();
    var7.clear();
    java.lang.Object var13 = var7.clone();
    java.lang.Object var14 = null;
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal(var13, var14);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 1.0f, 10.0f);
    boolean var23 = var16.equals((java.lang.Object)var18);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var26 = var16.equals((java.lang.Object)var25);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var29 = var27.getShape(100);
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var31 = null;
    boolean var32 = var30.equals(var31);
    java.lang.Object var33 = var30.clone();
    boolean var34 = var27.equals((java.lang.Object)var30);
    boolean var35 = var16.equals((java.lang.Object)var30);
    java.lang.Object var36 = var16.clone();
    java.lang.Object var37 = var16.clone();
    boolean var38 = org.jfree.chart.util.ObjectUtilities.equal(var13, (java.lang.Object)var16);
    boolean var39 = var0.equals((java.lang.Object)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var39);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test85"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    java.awt.Shape var11 = var0.getShape((-1));
    java.awt.Shape var13 = var0.getShape(0);
    int var14 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test86"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    var0.setShape(100, var14);
    java.io.ObjectOutputStream var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var14, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test87"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 10.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 100.0f, 0.0f);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var15, var23);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 0.0d, 0.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 10.0d, (-1.0f), 100.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 1.0d);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var23, var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test88"); }


    java.lang.Object var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = var1.getShape(100);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var5 = null;
    boolean var6 = var4.equals(var5);
    java.lang.Object var7 = var4.clone();
    boolean var8 = var1.equals((java.lang.Object)var4);
    var4.clear();
    boolean var10 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var4);
    java.lang.Object var11 = var4.clone();
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    var12.setShape(100, var18);
    var12.clear();
    java.lang.Object var21 = var12.clone();
    var12.clear();
    int var23 = var12.size();
    java.lang.Object var24 = var12.clone();
    org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = var25.getShape(0);
    java.lang.Object var28 = var25.clone();
    java.lang.Object var29 = var25.clone();
    boolean var30 = var12.equals((java.lang.Object)var25);
    boolean var31 = var4.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test89"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    java.lang.Object var18 = var0.clone();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(100.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var20, var25);
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.lang.Object var28 = var0.clone();
    org.jfree.chart.util.ShapeList var29 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
    var29.setShape(100, var35);
    var29.clear();
    int var38 = var29.size();
    java.lang.Object var39 = null;
    boolean var40 = var29.equals(var39);
    int var41 = var29.size();
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var44 = var29.equals((java.lang.Object)var43);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, 0.0d, 1.0f, 1.0f);
    java.lang.Object var49 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var43);
    boolean var50 = org.jfree.chart.util.ObjectUtilities.equal(var28, (java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test90"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var11 = null;
    boolean var12 = var10.equals(var11);
    java.lang.Object var13 = var10.clone();
    var10.clear();
    java.lang.Object var15 = var10.clone();
    var10.clear();
    int var17 = var10.size();
    boolean var18 = var0.equals((java.lang.Object)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test91"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    var0.clear();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var14.setShape(100, var20);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    var14.setShape(0, var24);
    java.awt.Shape var28 = var14.getShape(10);
    var14.clear();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 100.0d, 1.0d);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 1.0d, 0.0d);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var45);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var45);
    boolean var48 = var14.equals((java.lang.Object)var45);
    boolean var49 = org.jfree.chart.util.ShapeUtilities.equal(var13, var45);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 1.0d, 0.0d);
    boolean var53 = var0.equals((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test92"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, (-1.0d));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var8, var10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var17, var20);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var1, var20);
    java.lang.Object var23 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var1);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    int var25 = var24.size();
    boolean var27 = var24.equals((java.lang.Object)100.0d);
    boolean var29 = var24.equals((java.lang.Object)(-1));
    int var30 = var24.size();
    var24.clear();
    java.lang.Object var32 = var24.clone();
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test93"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    boolean var3 = var0.equals((java.lang.Object)100.0d);
    java.lang.Object var4 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    int var5 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test94"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.io.ObjectOutputStream var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var11, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test95() {}
//   public void test95() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test95"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(100);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var6);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, (-1.0d));
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var6);
//     var0.setShape(1, var11);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.awt.Shape var23 = var13.getShape(100);
//     java.lang.Object var24 = var13.clone();
//     int var25 = var13.size();
//     java.lang.Object var26 = var13.clone();
//     boolean var27 = var0.equals(var26);
//     
//     // Checks the contract:  equals-hashcode on var13 and var0
//     assertTrue("Contract failed: equals-hashcode on var13 and var0", var13.equals(var0) ? var13.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var0.", var13.equals(var0) == var0.equals(var13));
// 
//   }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test96"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var0.setShape(10, var11);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var14);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var14, var24);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 100.0d, (-1.0d));
//     org.jfree.chart.util.ShapeList var29 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var31 = var29.getShape(0);
//     var29.clear();
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, (-1.0d), 100.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
//     var29.setShape(1, var35);
//     java.lang.Object var43 = var29.clone();
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.clone(var46);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, (-1.0d), 1.0f, 1.0f);
//     var29.setShape(0, var46);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 1.0d, 1.0f, 100.0f);
//     boolean var60 = org.jfree.chart.util.ShapeUtilities.equal(var28, var46);
//     boolean var61 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var46);
//     
//     // Checks the contract:  equals-hashcode on var3 and var43
//     assertTrue("Contract failed: equals-hashcode on var3 and var43", var3.equals(var43) ? var3.hashCode() == var43.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var43.", var3.equals(var43) == var43.equals(var3));
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test97"); }


    java.lang.Object var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 100.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 10.0d, 0.0d);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    boolean var19 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test98"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.lang.Object var13 = var0.clone();
    java.awt.Shape var15 = var0.getShape(100);
    java.lang.Object var16 = var0.clone();
    java.awt.Shape var18 = var0.getShape(0);
    int var19 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 101);

  }

  public void test99() {}
//   public void test99() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test99"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
//     var16.setShape(100, var22);
//     var16.clear();
//     java.lang.Object var25 = var16.clone();
//     var16.clear();
//     boolean var28 = var16.equals((java.lang.Object)0);
//     boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var16);
//     java.lang.Object var30 = var16.clone();
//     boolean var31 = var0.equals(var30);
//     org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 0.0d, 1.0f, 10.0f);
//     boolean var39 = var32.equals((java.lang.Object)var34);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 1.0d);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var41);
//     boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var34, (java.lang.Object)var41);
//     boolean var47 = var0.equals((java.lang.Object)var41);
//     org.jfree.chart.util.ShapeList var48 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var50 = var48.getShape(0);
//     var48.clear();
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var54, (-1.0d), 100.0d);
//     java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var54, 0.0d, 1.0d);
//     var48.setShape(1, var54);
//     java.lang.Object var62 = var48.clone();
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var65, 0.0d, 10.0d);
//     boolean var69 = var48.equals((java.lang.Object)var65);
//     boolean var70 = var0.equals((java.lang.Object)var69);
//     
//     // Checks the contract:  equals-hashcode on var0 and var48
//     assertTrue("Contract failed: equals-hashcode on var0 and var48", var0.equals(var48) ? var0.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var48
//     assertTrue("Contract failed: equals-hashcode on var16 and var48", var16.equals(var48) ? var16.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var48
//     assertTrue("Contract failed: equals-hashcode on var32 and var48", var32.equals(var48) ? var32.hashCode() == var48.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var48.", var0.equals(var48) == var48.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var16 and var48.", var16.equals(var48) == var48.equals(var16));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var32 and var48.", var32.equals(var48) == var48.equals(var32));
//     
//     // Checks the contract:  equals-hashcode on var9 and var62
//     assertTrue("Contract failed: equals-hashcode on var9 and var62", var9.equals(var62) ? var9.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var62
//     assertTrue("Contract failed: equals-hashcode on var25 and var62", var25.equals(var62) ? var25.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var62
//     assertTrue("Contract failed: equals-hashcode on var30 and var62", var30.equals(var62) ? var30.hashCode() == var62.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var62.", var9.equals(var62) == var62.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var25 and var62.", var25.equals(var62) == var62.equals(var25));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var30 and var62.", var30.equals(var62) == var62.equals(var30));
// 
//   }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test100"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var7);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 0.0d, 1.0f, (-1.0f));
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var27, var29);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    boolean var36 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var24, (java.lang.Object)var29);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var0, var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test101"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    java.lang.Object var3 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var2);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 0.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test102"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    int var11 = var0.size();
    java.lang.Object var12 = var0.clone();
    java.lang.Object var13 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test103() {}
//   public void test103() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test103"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = null;
//     var0.setShape(0, var12);
//     java.lang.Object var14 = var0.clone();
//     
//     // Checks the contract:  equals-hashcode on var9 and var14
//     assertTrue("Contract failed: equals-hashcode on var9 and var14", var9.equals(var14) ? var9.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var9
//     assertTrue("Contract failed: equals-hashcode on var14 and var9", var14.equals(var9) ? var14.hashCode() == var9.hashCode() : true);
// 
//   }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test104"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, (-1.0d), 1.0d);
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var10 = var9.clone();
    var9.clear();
    java.awt.Shape var13 = var9.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var14.setShape(100, var20);
    var14.clear();
    java.lang.Object var23 = var14.clone();
    var14.clear();
    boolean var26 = var14.equals((java.lang.Object)0);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var14, (java.lang.Object)var29);
    int var31 = var14.size();
    boolean var32 = var9.equals((java.lang.Object)var31);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 0.0d, 1.0f, 10.0f);
    boolean var39 = var9.equals((java.lang.Object)var38);
    java.lang.Object var40 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var38);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 0.0d, 1.0d);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var42);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var52, (-1.0d), 100.0d);
    boolean var56 = org.jfree.chart.util.ShapeUtilities.equal(var42, var52);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var60, 0.0d, (-1.0d));
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.clone(var60);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.rotateShape(var69, 0.0d, 1.0f, (-1.0f));
    boolean var74 = org.jfree.chart.util.ShapeUtilities.equal(var67, var69);
    java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.rotateShape(var67, 1.0d, 10.0f, 0.0f);
    boolean var79 = org.jfree.chart.util.ShapeUtilities.equal(var64, var67);
    boolean var80 = org.jfree.chart.util.ShapeUtilities.equal(var38, var67);
    java.lang.Object var81 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var38);
    boolean var82 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var8, (java.lang.Object)var38);
    java.io.ObjectOutputStream var83 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var8, var83);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test105"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    java.lang.Object var7 = var0.clone();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test106"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, (-1.0f));
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var3, 10.0d, (-1.0f), 1.0f);
// 
//   }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test107"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    var14.clear();
    org.jfree.chart.util.ShapeList var22 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
    var22.setShape(100, var28);
    var22.clear();
    java.lang.Object var31 = var22.clone();
    var22.clear();
    boolean var34 = var22.equals((java.lang.Object)0);
    boolean var35 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var22);
    java.lang.Object var36 = var22.clone();
    boolean var37 = var14.equals(var36);
    java.awt.Shape var39 = var14.getShape(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test108"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)(byte)10);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test109"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    org.jfree.chart.util.RectangleAnchor var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, var3, 10.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test110"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 100.0d, 1.0d);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var9, var19);
    boolean var24 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test111"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 100.0d, 1.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 1.0d, 0.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var34, var50);
    boolean var53 = var0.equals((java.lang.Object)var50);
    java.lang.Object var54 = var0.clone();
    org.jfree.chart.util.ShapeList var55 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 0.0d, 1.0d);
    var55.setShape(100, var61);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.clone(var65);
    var55.setShape(0, var65);
    java.awt.Shape var69 = var55.getShape(10);
    boolean var70 = var0.equals((java.lang.Object)var55);
    java.lang.Object var71 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test112() {}
//   public void test112() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test112"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, (-1.0d), 100.0d);
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 1.0d, 10.0f, (-1.0f));
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 100.0d, 100.0f, (-1.0f));
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 1.0d, (-1.0d));
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, (-1.0d), 0.0f, 100.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var23, 10.0d, 10.0f, 0.0f);
// 
//   }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test113"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 100.0d);
    java.io.ObjectOutputStream var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var6, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test114"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 0.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 100.0d, 10.0f, (-1.0f));
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 0.0d, (-1.0f), 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test115"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var0.setShape(10, var13);
    java.awt.Shape var16 = var0.getShape(10);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var16, var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test116() {}
//   public void test116() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test116"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     int var2 = var1.size();
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var4 = var3.clone();
//     var3.clear();
//     java.awt.Shape var7 = var3.getShape(100);
//     var3.clear();
//     boolean var9 = var1.equals((java.lang.Object)var3);
//     int var10 = var1.size();
//     java.lang.Object var11 = var1.clone();
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var21);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, (-1.0d), 100.0d);
//     boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var26);
//     boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var16, var26);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 100.0d, 0.0f, 0.0f);
//     boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var14, var37);
//     boolean var39 = org.jfree.chart.util.ObjectUtilities.equal(var11, (java.lang.Object)var14);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var14);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var14, 0.0d, 10.0f, 100.0f);
// 
//   }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test117"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    java.lang.Object var16 = var0.clone();
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    var18.setShape(100, var24);
    var18.clear();
    int var27 = var18.size();
    int var28 = var18.size();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var18.setShape(0, var32);
    var0.setShape(11, var32);
    int var35 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 12);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test118"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(1);
    int var5 = var0.size();
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    int var7 = var6.size();
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var9 = var8.clone();
    var8.clear();
    java.awt.Shape var12 = var8.getShape(100);
    var8.clear();
    boolean var14 = var6.equals((java.lang.Object)var8);
    java.lang.Object var15 = var8.clone();
    java.awt.Shape var17 = var8.getShape(1);
    java.lang.Object var18 = var8.clone();
    boolean var19 = var0.equals((java.lang.Object)var8);
    java.lang.Object var20 = var8.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test119"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     int var1 = var0.size();
//     boolean var3 = var0.equals((java.lang.Object)100.0d);
//     boolean var5 = var0.equals((java.lang.Object)(-1));
//     int var6 = var0.size();
//     var0.clear();
//     org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var10 = null;
//     boolean var11 = var9.equals(var10);
//     java.lang.Object var12 = var9.clone();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var9.setShape(100, var15);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 100.0d, 10.0d);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 100.0d, (-1.0d));
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     var0.setShape(1, var15);
//     org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
//     var25.setShape(100, var31);
//     var25.clear();
//     java.lang.Object var34 = var25.clone();
//     var25.clear();
//     boolean var37 = var25.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var38 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var39 = var38.clone();
//     java.lang.Object var40 = var38.clone();
//     boolean var41 = var25.equals((java.lang.Object)var38);
//     java.lang.Object var42 = var38.clone();
//     org.jfree.chart.util.ShapeList var43 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
//     var43.setShape(100, var49);
//     var43.clear();
//     java.lang.Object var52 = var43.clone();
//     int var53 = var43.size();
//     java.awt.Shape var55 = var43.getShape(0);
//     boolean var57 = var43.equals((java.lang.Object)(short)(-1));
//     org.jfree.chart.util.ShapeList var59 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var62, 0.0d, 1.0d);
//     var59.setShape(100, var65);
//     var59.clear();
//     java.lang.Object var68 = var59.clone();
//     var59.clear();
//     boolean var71 = var59.equals((java.lang.Object)0);
//     boolean var72 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var59);
//     java.lang.Object var73 = var59.clone();
//     boolean var74 = var43.equals(var73);
//     boolean var75 = var38.equals((java.lang.Object)var43);
//     boolean var76 = var0.equals((java.lang.Object)var75);
//     
//     // Checks the contract:  equals-hashcode on var25 and var0
//     assertTrue("Contract failed: equals-hashcode on var25 and var0", var25.equals(var0) ? var25.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var9
//     assertTrue("Contract failed: equals-hashcode on var25 and var9", var25.equals(var9) ? var25.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var0
//     assertTrue("Contract failed: equals-hashcode on var38 and var0", var38.equals(var0) ? var38.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var9
//     assertTrue("Contract failed: equals-hashcode on var38 and var9", var38.equals(var9) ? var38.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var43 and var0
//     assertTrue("Contract failed: equals-hashcode on var43 and var0", var43.equals(var0) ? var43.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var43 and var9
//     assertTrue("Contract failed: equals-hashcode on var43 and var9", var43.equals(var9) ? var43.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var0
//     assertTrue("Contract failed: equals-hashcode on var59 and var0", var59.equals(var0) ? var59.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var9
//     assertTrue("Contract failed: equals-hashcode on var59 and var9", var59.equals(var9) ? var59.hashCode() == var9.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var25 and var0.", var25.equals(var0) == var0.equals(var25));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var25 and var9.", var25.equals(var9) == var9.equals(var25));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var38 and var0.", var38.equals(var0) == var0.equals(var38));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var38 and var9.", var38.equals(var9) == var9.equals(var38));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var43 and var0.", var43.equals(var0) == var0.equals(var43));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var43 and var9.", var43.equals(var9) == var9.equals(var43));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var59 and var0.", var59.equals(var0) == var0.equals(var59));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var59 and var9.", var59.equals(var9) == var9.equals(var59));
// 
//   }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test120"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, (-1.0d), 100.0d);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var30, var40);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, (-1.0d));
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var48);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, 100.0d, 10.0f, 10.0f);
    boolean var57 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1, (java.lang.Object)100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test121"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 100.0d, 1.0d);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 10.0d, 0.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 10.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test122"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     var0.clear();
//     int var2 = var0.size();
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var3.setShape(100, var9);
//     var3.clear();
//     java.lang.Object var12 = var3.clone();
//     int var13 = var3.size();
//     java.awt.Shape var15 = var3.getShape(0);
//     boolean var17 = var3.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var18 = var3.clone();
//     int var19 = var3.size();
//     org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     var20.setShape(100, var26);
//     var20.clear();
//     int var29 = var20.size();
//     boolean var30 = var3.equals((java.lang.Object)var29);
//     java.lang.Object var31 = null;
//     boolean var32 = var3.equals(var31);
//     java.lang.Object var33 = var3.clone();
//     java.lang.Object var34 = var3.clone();
//     boolean var35 = var0.equals((java.lang.Object)var3);
//     org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var38 = var36.getShape(0);
//     java.lang.Object var39 = var36.clone();
//     java.lang.Object var40 = var36.clone();
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
//     boolean var43 = var36.equals((java.lang.Object)var42);
//     boolean var44 = var0.equals((java.lang.Object)var36);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, (-1.0d), 100.0d);
//     org.jfree.chart.util.ShapeList var51 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var54, 0.0d, 1.0d);
//     var51.setShape(100, var57);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.clone(var61);
//     var51.setShape(0, var61);
//     java.awt.Shape var65 = var51.getShape(10);
//     java.awt.Shape var67 = var51.getShape((-1));
//     int var68 = var51.size();
//     java.awt.Shape var70 = var51.getShape(0);
//     java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var74, 0.0d, 1.0d);
//     boolean var78 = org.jfree.chart.util.ShapeUtilities.equal(var72, var77);
//     java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var82, (-1.0d), 100.0d);
//     boolean var86 = org.jfree.chart.util.ShapeUtilities.equal(var80, var82);
//     boolean var87 = org.jfree.chart.util.ShapeUtilities.equal(var72, var82);
//     java.awt.Shape var88 = org.jfree.chart.util.ShapeUtilities.clone(var82);
//     java.awt.Shape var89 = org.jfree.chart.util.ShapeUtilities.clone(var82);
//     boolean var90 = org.jfree.chart.util.ShapeUtilities.equal(var70, var89);
//     boolean var91 = org.jfree.chart.util.ShapeUtilities.equal(var47, var89);
//     var0.setShape(102, var89);
//     
//     // Checks the contract:  equals-hashcode on var3 and var0
//     assertTrue("Contract failed: equals-hashcode on var3 and var0", var3.equals(var0) ? var3.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var51
//     assertTrue("Contract failed: equals-hashcode on var3 and var51", var3.equals(var51) ? var3.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var0
//     assertTrue("Contract failed: equals-hashcode on var20 and var0", var20.equals(var0) ? var20.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var51
//     assertTrue("Contract failed: equals-hashcode on var20 and var51", var20.equals(var51) ? var20.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var0
//     assertTrue("Contract failed: equals-hashcode on var36 and var0", var36.equals(var0) ? var36.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var51
//     assertTrue("Contract failed: equals-hashcode on var36 and var51", var36.equals(var51) ? var36.hashCode() == var51.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var0.", var3.equals(var0) == var0.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var51.", var3.equals(var51) == var51.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var0.", var20.equals(var0) == var0.equals(var20));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var51.", var20.equals(var51) == var51.equals(var20));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var36 and var0.", var36.equals(var0) == var0.equals(var36));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var36 and var51.", var36.equals(var51) == var51.equals(var36));
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test123"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 10.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var3, 10.0d, 1.0f, 0.0f);
// 
//   }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test124"); }


    java.awt.Shape var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var0, (-1.0d), 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test125"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(102);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test126"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    java.lang.Object var16 = var0.clone();
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    var18.setShape(100, var24);
    var18.clear();
    int var27 = var18.size();
    int var28 = var18.size();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var18.setShape(0, var32);
    var0.setShape(11, var32);
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    var35.setShape(100, var41);
    var35.clear();
    java.lang.Object var44 = var35.clone();
    int var45 = var35.size();
    java.awt.Shape var47 = var35.getShape(0);
    boolean var49 = var35.equals((java.lang.Object)(short)(-1));
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var54, 0.0d, 1.0d);
    boolean var58 = org.jfree.chart.util.ShapeUtilities.equal(var52, var57);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.clone(var52);
    var35.setShape(0, var52);
    boolean var61 = var0.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test127"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    java.lang.Object var10 = var0.clone();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var15, var22);
    boolean var24 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test128"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, (-1.0d));
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 10.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 10.0d, 10.0f, (-1.0f));
    org.jfree.chart.util.RectangleAnchor var35 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, var35, 100.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test129() {}
//   public void test129() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test129"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), 100.0d);
//     boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var12, var22);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 10.0d, 10.0f, 0.0f);
//     boolean var35 = var0.equals((java.lang.Object)10.0f);
//     java.lang.Object var36 = var0.clone();
//     org.jfree.chart.util.ShapeList var38 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, 0.0d, 1.0f, 10.0f);
//     boolean var45 = var38.equals((java.lang.Object)var40);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var48 = var38.equals((java.lang.Object)var47);
//     org.jfree.chart.util.ShapeList var49 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var52, 0.0d, 1.0d);
//     var49.setShape(100, var55);
//     var49.clear();
//     java.lang.Object var58 = var49.clone();
//     int var59 = var49.size();
//     java.awt.Shape var61 = var49.getShape(0);
//     org.jfree.chart.util.ShapeList var62 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var63 = null;
//     boolean var64 = var62.equals(var63);
//     var62.clear();
//     org.jfree.chart.util.ShapeList var66 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var67 = var66.clone();
//     var66.clear();
//     java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var70, 10.0d, (-1.0d));
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.clone(var70);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var74, 10.0d, 1.0d);
//     boolean var78 = var66.equals((java.lang.Object)var74);
//     java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.clone(var74);
//     boolean var80 = var62.equals((java.lang.Object)var74);
//     boolean var81 = var49.equals((java.lang.Object)var74);
//     java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.clone(var74);
//     boolean var83 = org.jfree.chart.util.ShapeUtilities.equal(var47, var74);
//     var0.setShape(0, var74);
//     
//     // Checks the contract:  equals-hashcode on var38 and var0
//     assertTrue("Contract failed: equals-hashcode on var38 and var0", var38.equals(var0) ? var38.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var49 and var0
//     assertTrue("Contract failed: equals-hashcode on var49 and var0", var49.equals(var0) ? var49.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var62 and var0
//     assertTrue("Contract failed: equals-hashcode on var62 and var0", var62.equals(var0) ? var62.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var0
//     assertTrue("Contract failed: equals-hashcode on var66 and var0", var66.equals(var0) ? var66.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var38 and var0.", var38.equals(var0) == var0.equals(var38));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var49 and var0.", var49.equals(var0) == var0.equals(var49));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var62 and var0.", var62.equals(var0) == var0.equals(var62));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var66 and var0.", var66.equals(var0) == var0.equals(var66));
// 
//   }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test130"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    java.lang.Object var20 = var1.clone();
    var1.clear();
    java.awt.Shape var23 = var1.getShape(1);
    int var24 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test131"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    var5.clear();
    java.lang.Object var14 = var5.clone();
    var5.clear();
    boolean var17 = var5.equals((java.lang.Object)0);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var20);
    int var22 = var5.size();
    boolean var23 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var25 = var0.getShape(0);
    int var26 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test132"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = null;
    boolean var15 = var13.equals(var14);
    var13.clear();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var18 = var17.clone();
    var17.clear();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 10.0d, (-1.0d));
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 10.0d, 1.0d);
    boolean var29 = var17.equals((java.lang.Object)var25);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var31 = var13.equals((java.lang.Object)var25);
    boolean var32 = var0.equals((java.lang.Object)var25);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, 0.0d, 0.0f, 0.0f);
    java.io.ObjectOutputStream var37 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var36, var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test133"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var11, var14);
    var0.setShape(2, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test134() {}
//   public void test134() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test134"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     java.lang.Object var26 = var13.clone();
//     boolean var27 = var0.equals((java.lang.Object)var13);
//     java.awt.Shape var29 = var0.getShape(100);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 10.0d, 0.0d);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 100.0d, (-1.0f), 0.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 100.0d, 0.0d);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, 10.0d, (-1.0f), 100.0f);
//     boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var40, var50);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 100.0d, (-1.0f), 0.0f);
//     var0.setShape(102, var50);
//     
//     // Checks the contract:  equals-hashcode on var13 and var0
//     assertTrue("Contract failed: equals-hashcode on var13 and var0", var13.equals(var0) ? var13.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var0.", var13.equals(var0) == var0.equals(var13));
// 
//   }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test135"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 0.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 100.0d, (-1.0f), 0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 10.0d, 10.0f, 1.0f);
    org.jfree.chart.util.RectangleAnchor var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, var14, 100.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test136"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 10.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    boolean var12 = var0.equals((java.lang.Object)var8);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var8);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var13);
    org.jfree.chart.util.RectangleAnchor var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, var15, 0.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test137"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    java.lang.Object var13 = var4.clone();
    var4.clear();
    int var15 = var4.size();
    java.lang.Object var16 = var4.clone();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = var17.getShape(0);
    java.lang.Object var20 = var17.clone();
    java.lang.Object var21 = var17.clone();
    boolean var22 = var4.equals((java.lang.Object)var17);
    boolean var23 = var0.equals((java.lang.Object)var17);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 0.0d, 1.0f, 10.0f);
    boolean var31 = var24.equals((java.lang.Object)var26);
    boolean var32 = var17.equals((java.lang.Object)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test138"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 10.0d, 0.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 10.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 1.0d, 0.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test139"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    var0.clear();
    var0.clear();
    java.lang.Object var14 = null;
    boolean var15 = var0.equals(var14);
    java.awt.Shape var17 = var0.getShape(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test140"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 100.0d, 0.0d);
    var0.setShape(101, var16);
    int var18 = var0.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var19 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var18);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 102);

  }

  public void test141() {}
//   public void test141() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test141"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.lang.Object var4 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var2);
//     java.awt.Shape var5 = null;
//     boolean var6 = org.jfree.chart.util.ShapeUtilities.equal(var2, var5);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var5, 10.0d, 0.0f, 100.0f);
// 
//   }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test142"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var5 = var0.getShape((-1));
    java.lang.Object var6 = var0.clone();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 100.0d, 100.0d);
    var0.setShape(1, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test143"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 0.0d);
    java.lang.Object var14 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var15.setShape(100, var21);
    var15.clear();
    java.lang.Object var24 = var15.clone();
    var15.clear();
    boolean var27 = var15.equals((java.lang.Object)0);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    boolean var31 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var15, (java.lang.Object)var30);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var15.setShape(0, var35);
    var15.clear();
    java.lang.Object var38 = var15.clone();
    var15.clear();
    boolean var40 = org.jfree.chart.util.ObjectUtilities.equal(var14, (java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test144"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    java.lang.Object var12 = var0.clone();
    java.lang.Object var13 = var0.clone();
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 0.0d, 1.0f, 10.0f);
    boolean var21 = var14.equals((java.lang.Object)var16);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    boolean var28 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var16, (java.lang.Object)var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), 100.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var33, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 1.0d, (-1.0d));
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var23, var37);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 10.0d);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var44, 10.0d, 10.0f, (-1.0f));
    boolean var49 = var0.equals((java.lang.Object)(-1.0f));
    java.lang.Object var50 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test145"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = null;
    boolean var15 = var13.equals(var14);
    var13.clear();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var18 = var17.clone();
    var17.clear();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 10.0d, (-1.0d));
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 10.0d, 1.0d);
    boolean var29 = var17.equals((java.lang.Object)var25);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var31 = var13.equals((java.lang.Object)var25);
    boolean var32 = var0.equals((java.lang.Object)var25);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, 0.0d, 0.0f, 0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 1.0d, 100.0d);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.rotateShape(var39, 100.0d, (-1.0f), 0.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 100.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test146"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var1 = null;
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var1, 0.0d, 10.0f, (-1.0f));
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test147"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = var4.getShape(0);
    var4.clear();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var4.setShape(1, var10);
    java.lang.Object var18 = var4.clone();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), 100.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 1.0d, 10.0f, (-1.0f));
    var4.setShape(1, var27);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var27);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 100.0d, 0.0f, 1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test148"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 0.0d, (-1.0f), 10.0f);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var1, var12);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.lang.Object var19 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var12);
    org.jfree.chart.util.RectangleAnchor var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, var20, 100.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test149"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 100.0d);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 100.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test150() {}
//   public void test150() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test150"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var2 = null;
//     boolean var3 = var1.equals(var2);
//     java.lang.Object var4 = var1.clone();
//     java.lang.Object var5 = var1.clone();
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 0.0d, 1.0f, 10.0f);
//     var1.setShape(1, var8);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, (-1.0d), (-1.0d));
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var16);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 100.0d, 0.0d);
//     boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var16, var24);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 10.0d, 100.0f, 100.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var29, 10.0d, 0.0f, 0.0f);
// 
//   }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test151"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, 0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), 100.0d);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var18, var23);
    boolean var25 = var0.equals((java.lang.Object)var23);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 1.0d, (-1.0f), (-1.0f));
    var0.setShape(1, var34);
    java.awt.Shape var37 = var0.getShape(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var38 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)10);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test152"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    org.jfree.chart.util.ShapeList var64 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var67, 0.0d, 1.0d);
    var64.setShape(100, var70);
    var64.clear();
    java.awt.Shape var74 = var64.getShape(0);
    boolean var75 = var37.equals((java.lang.Object)var64);
    java.lang.Object var76 = var37.clone();
    java.lang.Object var77 = var37.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test153"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    var0.clear();
    java.lang.Object var2 = null;
    boolean var3 = var0.equals(var2);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, (-1.0d), 100.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 0.0d, 1.0d);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 1.0d, 0.0f, 1.0f);
    boolean var20 = var0.equals((java.lang.Object)var15);
    org.jfree.chart.util.RectangleAnchor var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, var21, 10.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test154"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var17, var22);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    var0.setShape(0, var17);
    java.awt.Shape var27 = var0.getShape(1);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var34);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, (-1.0d), 100.0d);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var37, var39);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var29, var39);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var39, (-1.0d), 1.0f, 1.0f);
    java.lang.Object var51 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var50);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    boolean var53 = var0.equals((java.lang.Object)var52);
    java.awt.Shape var55 = var0.getShape(101);
    org.jfree.chart.util.ShapeList var57 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var60, 0.0d, 1.0d);
    var57.setShape(100, var63);
    var57.clear();
    java.lang.Object var66 = var57.clone();
    var57.clear();
    boolean var69 = var57.equals((java.lang.Object)0);
    var57.clear();
    java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var73, (-1.0d), 0.0d);
    var57.setShape(0, var76);
    java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var82, 0.0d, 1.0d);
    java.awt.Shape var86 = org.jfree.chart.util.ShapeUtilities.clone(var82);
    java.awt.Shape var90 = org.jfree.chart.util.ShapeUtilities.rotateShape(var82, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var93 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var90, 100.0d, 1.0d);
    boolean var94 = org.jfree.chart.util.ShapeUtilities.equal(var80, var90);
    boolean var95 = org.jfree.chart.util.ShapeUtilities.equal(var76, var80);
    var0.setShape(1, var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test155() {}
//   public void test155() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test155"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
//     boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     var0.setShape(0, var20);
//     var0.clear();
//     java.lang.Object var23 = var0.clone();
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
//     var0.setShape(0, var27);
//     org.jfree.chart.util.ShapeList var29 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 0.0d, 1.0f, 10.0f);
//     boolean var36 = var29.equals((java.lang.Object)var31);
//     java.lang.Object var37 = var29.clone();
//     java.lang.Object var38 = null;
//     boolean var39 = var29.equals(var38);
//     int var40 = var29.size();
//     var29.clear();
//     org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var44, 0.0d, 1.0f, 10.0f);
//     boolean var49 = var42.equals((java.lang.Object)var44);
//     java.lang.Object var50 = var42.clone();
//     java.lang.Object var51 = null;
//     boolean var52 = var42.equals(var51);
//     int var53 = var42.size();
//     boolean var54 = var29.equals((java.lang.Object)var42);
//     boolean var55 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var54);
//     
//     // Checks the contract:  equals-hashcode on var29 and var0
//     assertTrue("Contract failed: equals-hashcode on var29 and var0", var29.equals(var0) ? var29.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var42 and var0
//     assertTrue("Contract failed: equals-hashcode on var42 and var0", var42.equals(var0) ? var42.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var29 and var0.", var29.equals(var0) == var0.equals(var29));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var42 and var0.", var42.equals(var0) == var0.equals(var42));
// 
//   }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test156"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 10.0f, 1.0f);
    var0.setShape(1, var23);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test157"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    var1.clear();
    java.lang.Object var17 = var1.clone();
    var1.clear();
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var20 = var19.clone();
    var19.clear();
    java.awt.Shape var23 = var19.getShape(100);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    var24.setShape(100, var30);
    var24.clear();
    java.lang.Object var33 = var24.clone();
    var24.clear();
    boolean var36 = var24.equals((java.lang.Object)0);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    boolean var40 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var24, (java.lang.Object)var39);
    int var41 = var24.size();
    boolean var42 = var19.equals((java.lang.Object)var41);
    int var43 = var19.size();
    java.awt.Shape var45 = var19.getShape(101);
    boolean var46 = var1.equals((java.lang.Object)101);
    java.lang.Object var47 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test158"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var18 = var0.getShape(0);
    java.lang.Object var19 = var0.clone();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 10.0f);
    boolean var23 = var0.equals((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test159"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    int var21 = var11.size();
    java.awt.Shape var23 = var11.getShape(0);
    boolean var25 = var11.equals((java.lang.Object)(short)(-1));
    java.lang.Object var26 = var11.clone();
    int var27 = var11.size();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    boolean var38 = var11.equals((java.lang.Object)var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = var11.equals((java.lang.Object)var42);
    java.lang.Object var48 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var42);
    boolean var49 = var0.equals(var48);
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
    var50.setShape(100, var56);
    var50.clear();
    java.lang.Object var59 = var50.clone();
    var50.clear();
    boolean var62 = var50.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
    var63.setShape(100, var69);
    var63.clear();
    java.lang.Object var72 = var63.clone();
    var63.clear();
    boolean var75 = var63.equals((java.lang.Object)0);
    java.lang.Object var76 = var63.clone();
    boolean var77 = var50.equals((java.lang.Object)var63);
    java.awt.Shape var79 = var50.getShape(100);
    boolean var80 = var0.equals((java.lang.Object)var50);
    java.awt.Shape var82 = var50.getShape(101);
    java.lang.Object var83 = var50.clone();
    java.lang.Object var84 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test160"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var1 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 0.0d);
//     boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var3, 0.0d, 10.0f, 1.0f);
// 
//   }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test161"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    var0.clear();
    java.awt.Shape var3 = var0.getShape(1);
    int var4 = var0.size();
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    var5.clear();
    int var14 = var5.size();
    java.lang.Object var15 = null;
    boolean var16 = var5.equals(var15);
    java.lang.Object var17 = var5.clone();
    var5.clear();
    boolean var19 = var0.equals((java.lang.Object)var5);
    java.lang.Object var20 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test162"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    boolean var3 = var0.equals((java.lang.Object)100.0d);
    boolean var5 = var0.equals((java.lang.Object)(-1));
    int var6 = var0.size();
    var0.clear();
    java.awt.Shape var9 = var0.getShape(0);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test163"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 100.0d, 0.0f, 0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 0.0d, 10.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test164"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    var0.clear();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    var19.setShape(100, var25);
    var19.clear();
    java.lang.Object var28 = var19.clone();
    int var29 = var19.size();
    java.awt.Shape var31 = var19.getShape(0);
    boolean var33 = var19.equals((java.lang.Object)(short)(-1));
    java.lang.Object var34 = var19.clone();
    int var35 = var19.size();
    org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, 1.0d);
    var36.setShape(100, var42);
    var36.clear();
    int var45 = var36.size();
    boolean var46 = var19.equals((java.lang.Object)var45);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var48, var50);
    boolean var55 = var19.equals((java.lang.Object)var50);
    java.awt.Shape var57 = var19.getShape(0);
    var19.clear();
    var19.clear();
    var19.clear();
    boolean var61 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)var19);
    java.awt.Shape var63 = var19.getShape(0);
    java.lang.Object var64 = var19.clone();
    boolean var65 = var0.equals(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test165"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
//     boolean var7 = var0.equals((java.lang.Object)var2);
//     java.lang.Object var8 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
//     var0.clear();
//     java.lang.Object var10 = var0.clone();
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var13);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var13);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var13);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), 100.0d);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 0.0d, (-1.0f), 10.0f);
//     boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var13, var24);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, (-1.0d));
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var24);
//     var0.setShape(0, var33);
//     org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
//     var35.setShape(100, var41);
//     var35.clear();
//     java.awt.Shape var45 = var35.getShape((-1));
//     java.awt.Shape var47 = var35.getShape((-1));
//     java.lang.Object var48 = var35.clone();
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), (-1.0f));
//     boolean var52 = var35.equals((java.lang.Object)(-1.0f));
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, 0.0d, 1.0d);
//     boolean var60 = org.jfree.chart.util.ShapeUtilities.equal(var54, var59);
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var64, (-1.0d), 100.0d);
//     boolean var68 = org.jfree.chart.util.ShapeUtilities.equal(var62, var64);
//     boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var54, var64);
//     java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.clone(var64);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var64, 10.0d, 0.0d);
//     java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var64, 10.0d, 1.0d);
//     java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var76, (-1.0d), 10.0d);
//     boolean var80 = var35.equals((java.lang.Object)var76);
//     boolean var81 = var0.equals((java.lang.Object)var35);
//     
//     // Checks the contract:  equals-hashcode on var35 and var0
//     assertTrue("Contract failed: equals-hashcode on var35 and var0", var35.equals(var0) ? var35.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var35 and var0.", var35.equals(var0) == var0.equals(var35));
// 
//   }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test166"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var4, var11);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    var13.setShape(0, var23);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var4, var23);
    org.jfree.chart.util.RectangleAnchor var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, var28, 10.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test167"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var0.setShape(10, var13);
    java.lang.Object var15 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var13);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    boolean var25 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var22, (java.lang.Object)"");
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var13, var22);
    org.jfree.chart.util.RectangleAnchor var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, var27, 10.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test168() {}
//   public void test168() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test168"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(10);
//     var0.clear();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 10.0f);
//     var0.setShape(1, var7);
//     java.lang.Object var9 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
//     int var10 = var0.size();
//     org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     var12.setShape(100, var18);
//     var12.clear();
//     java.lang.Object var21 = var12.clone();
//     var12.clear();
//     boolean var24 = var12.equals((java.lang.Object)0);
//     boolean var25 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var12);
//     java.lang.Object var26 = var12.clone();
//     org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var28 = var27.clone();
//     var27.clear();
//     boolean var30 = var12.equals((java.lang.Object)var27);
//     java.lang.Object var31 = var12.clone();
//     org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
//     var32.setShape(100, var38);
//     var32.clear();
//     java.lang.Object var41 = var32.clone();
//     var32.clear();
//     int var43 = var32.size();
//     java.lang.Object var44 = var32.clone();
//     boolean var45 = var12.equals((java.lang.Object)var32);
//     org.jfree.chart.util.ShapeList var46 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var48 = var46.getShape(0);
//     java.lang.Object var49 = var46.clone();
//     int var50 = var46.size();
//     java.lang.Object var51 = var46.clone();
//     boolean var52 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var32, var51);
//     boolean var53 = var0.equals((java.lang.Object)var32);
//     
//     // Checks the contract:  equals-hashcode on var12 and var0
//     assertTrue("Contract failed: equals-hashcode on var12 and var0", var12.equals(var0) ? var12.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var0
//     assertTrue("Contract failed: equals-hashcode on var27 and var0", var27.equals(var0) ? var27.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var0
//     assertTrue("Contract failed: equals-hashcode on var32 and var0", var32.equals(var0) ? var32.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var46 and var0
//     assertTrue("Contract failed: equals-hashcode on var46 and var0", var46.equals(var0) ? var46.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var12 and var0.", var12.equals(var0) == var0.equals(var12));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var27 and var0.", var27.equals(var0) == var0.equals(var27));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var32 and var0.", var32.equals(var0) == var0.equals(var32));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var46 and var0.", var46.equals(var0) == var0.equals(var46));
//     
//     // Checks the contract:  equals-hashcode on var21 and var9
//     assertTrue("Contract failed: equals-hashcode on var21 and var9", var21.equals(var9) ? var21.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var9
//     assertTrue("Contract failed: equals-hashcode on var26 and var9", var26.equals(var9) ? var26.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var9
//     assertTrue("Contract failed: equals-hashcode on var28 and var9", var28.equals(var9) ? var28.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var9
//     assertTrue("Contract failed: equals-hashcode on var31 and var9", var31.equals(var9) ? var31.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var9
//     assertTrue("Contract failed: equals-hashcode on var41 and var9", var41.equals(var9) ? var41.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var9
//     assertTrue("Contract failed: equals-hashcode on var44 and var9", var44.equals(var9) ? var44.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var49 and var9
//     assertTrue("Contract failed: equals-hashcode on var49 and var9", var49.equals(var9) ? var49.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var9
//     assertTrue("Contract failed: equals-hashcode on var51 and var9", var51.equals(var9) ? var51.hashCode() == var9.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var21 and var9.", var21.equals(var9) == var9.equals(var21));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var26 and var9.", var26.equals(var9) == var9.equals(var26));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var9.", var28.equals(var9) == var9.equals(var28));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var31 and var9.", var31.equals(var9) == var9.equals(var31));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var41 and var9.", var41.equals(var9) == var9.equals(var41));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var44 and var9.", var44.equals(var9) == var9.equals(var44));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var49 and var9.", var49.equals(var9) == var9.equals(var49));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var51 and var9.", var51.equals(var9) == var9.equals(var51));
// 
//   }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test169"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    int var3 = var0.size();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 10.0d, 1.0d);
    var0.setShape(100, var7);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var18);
    java.awt.Shape var20 = null;
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var13, var20);
    boolean var22 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var29);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 1.0d, 100.0f, (-1.0f));
    boolean var36 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var13, (java.lang.Object)var35);
    java.awt.Shape var37 = null;
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var35, var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test170"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    java.lang.Object var7 = var3.clone();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 0.0d, 1.0f, 10.0f);
    var3.setShape(1, var10);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), (-1.0d));
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var2, var19);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, (-1.0d), 100.0d);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 0.0d, (-1.0f), 10.0f);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var19, var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test171"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 0.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.RectangleAnchor var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, var8, 10.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test172() {}
//   public void test172() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test172"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var5 = null;
//     boolean var6 = var4.equals(var5);
//     java.lang.Object var7 = var4.clone();
//     var4.clear();
//     java.awt.Shape var10 = var4.getShape(100);
//     boolean var11 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var4);
//     int var12 = var4.size();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, (-1.0d), 100.0d);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, 1.0d, 10.0f, (-1.0f));
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, 100.0d, 100.0f, (-1.0f));
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 1.0d, (-1.0d));
//     var4.setShape(11, var25);
//     
//     // Checks the contract:  equals-hashcode on var0 and var4
//     assertTrue("Contract failed: equals-hashcode on var0 and var4", var0.equals(var4) ? var0.hashCode() == var4.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var4.", var0.equals(var4) == var4.equals(var0));
// 
//   }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test173"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var8 = null;
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 0.0f, 0.0f);
    java.lang.Object var15 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test174"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    var0.clear();
    int var14 = var0.size();
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var15.setShape(100, var21);
    var15.clear();
    java.lang.Object var24 = var15.clone();
    var15.clear();
    boolean var27 = var15.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    java.lang.Object var37 = var28.clone();
    var28.clear();
    boolean var40 = var28.equals((java.lang.Object)0);
    java.lang.Object var41 = var28.clone();
    boolean var42 = var15.equals((java.lang.Object)var28);
    java.awt.Shape var44 = var15.getShape(100);
    var15.clear();
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 0.0d, 1.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var47);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var47);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var52, 100.0d, 100.0d);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, 100.0d, (-1.0f), 1.0f);
    boolean var60 = var15.equals((java.lang.Object)(-1.0f));
    boolean var61 = var0.equals((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test175"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    var0.setShape(100, var14);
    java.lang.Object var16 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
    java.lang.Object var17 = null;
    boolean var18 = org.jfree.chart.util.ObjectUtilities.equal(var16, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test176"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    java.awt.Shape var11 = var0.getShape((-1));
    int var12 = var0.size();
    java.lang.Object var13 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test177"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    var0.clear();
    int var7 = var0.size();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, (-1.0d));
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var18);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 10.0d, 1.0d);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var25, var28);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var9, var28);
    java.lang.Object var31 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    java.lang.Object var32 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test178() {}
//   public void test178() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test178"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     var0.clear();
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
//     boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var17, var22);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
//     boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var25, var27);
//     boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     var0.setShape(101, var27);
//     org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 0.0d, 1.0f, 10.0f);
//     boolean var43 = var36.equals((java.lang.Object)var38);
//     java.awt.Shape var45 = var36.getShape((-1));
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, 1.0d);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var48);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.clone(var48);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var48);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, (-1.0d), 100.0d);
//     java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.rotateShape(var59, 0.0d, (-1.0f), 10.0f);
//     boolean var64 = org.jfree.chart.util.ShapeUtilities.equal(var48, var59);
//     var36.setShape(101, var59);
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var59, 1.0d, 1.0d);
//     var0.setShape(2, var68);
//     org.jfree.chart.util.ShapeList var71 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var74, 0.0d, 1.0d);
//     var71.setShape(100, var77);
//     var71.clear();
//     java.lang.Object var80 = var71.clone();
//     var71.clear();
//     boolean var83 = var71.equals((java.lang.Object)0);
//     boolean var84 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var71);
//     java.lang.Object var85 = var71.clone();
//     org.jfree.chart.util.ShapeList var86 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var87 = var86.clone();
//     var86.clear();
//     boolean var89 = var71.equals((java.lang.Object)var86);
//     java.lang.Object var90 = var71.clone();
//     java.lang.Object var91 = var71.clone();
//     boolean var92 = var0.equals((java.lang.Object)var71);
//     
//     // Checks the contract:  equals-hashcode on var71 and var0
//     assertTrue("Contract failed: equals-hashcode on var71 and var0", var71.equals(var0) ? var71.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var71 and var36
//     assertTrue("Contract failed: equals-hashcode on var71 and var36", var71.equals(var36) ? var71.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var86 and var0
//     assertTrue("Contract failed: equals-hashcode on var86 and var0", var86.equals(var0) ? var86.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var86 and var36
//     assertTrue("Contract failed: equals-hashcode on var86 and var36", var86.equals(var36) ? var86.hashCode() == var36.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var71 and var0.", var71.equals(var0) == var0.equals(var71));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var71 and var36.", var71.equals(var36) == var36.equals(var71));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var86 and var0.", var86.equals(var0) == var0.equals(var86));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var86 and var36.", var86.equals(var36) == var36.equals(var86));
// 
//   }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test179"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 100.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = var3.clone();
    var3.clear();
    java.awt.Shape var7 = var3.getShape(1);
    boolean var8 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1.0f), (java.lang.Object)var3);
    java.awt.Shape var10 = var3.getShape(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test180"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 100.0d, 0.0f, (-1.0f));
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var12, var15);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var2, var21);
    java.io.ObjectOutputStream var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test181"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 100.0d, 100.0d);
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.lang.Object var19 = var10.clone();
    var10.clear();
    boolean var22 = var10.equals((java.lang.Object)0);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, (-1.0d), 100.0d);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var27, var37);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var25, var27);
    boolean var43 = var10.equals((java.lang.Object)var42);
    java.lang.Object var44 = var10.clone();
    org.jfree.chart.util.ShapeList var45 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, 1.0d);
    var45.setShape(100, var51);
    var45.clear();
    int var54 = var45.size();
    java.lang.Object var55 = null;
    boolean var56 = var45.equals(var55);
    boolean var57 = var10.equals((java.lang.Object)var45);
    java.lang.Object var58 = var10.clone();
    boolean var59 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, var58);
    java.io.ObjectOutputStream var60 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var9, var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test182() {}
//   public void test182() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test182"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     var1.clear();
//     int var10 = var1.size();
//     java.lang.Object var11 = null;
//     boolean var12 = var1.equals(var11);
//     java.lang.Object var13 = var1.clone();
//     int var14 = var1.size();
//     var1.clear();
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 1.0f);
//     boolean var22 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)1.0f);
//     var1.setShape(101, var18);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var18, 1.0d, 100.0f, 0.0f);
// 
//   }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test183"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 100.0d, 0.0f, (-1.0f));
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var12, var15);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var2, var21);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 10.0d, 100.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 0.0d, 100.0f, 100.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test184"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 10.0d, 0.0d);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, (-1.0d), (-1.0d));
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 0.0d, 1.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test185"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 100.0d, 0.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 0.0d, 100.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test186"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Class var8 = null;
    java.lang.ClassLoader var9 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var8);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.awt.Shape var21 = var11.getShape(0);
    java.lang.Object var22 = var11.clone();
    boolean var23 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, var22);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var9);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var9);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var9);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var9);
    org.jfree.chart.util.ShapeList var29 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
    var29.setShape(100, var35);
    var29.clear();
    java.lang.Object var38 = var29.clone();
    var29.clear();
    boolean var41 = var29.equals((java.lang.Object)0);
    boolean var42 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var29);
    org.jfree.chart.util.ShapeList var43 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
    var43.setShape(100, var49);
    var43.clear();
    java.lang.Object var52 = var43.clone();
    int var53 = var43.size();
    java.awt.Shape var55 = var43.getShape(0);
    boolean var57 = var43.equals((java.lang.Object)(short)(-1));
    java.lang.Object var58 = var43.clone();
    int var59 = var43.size();
    org.jfree.chart.util.ShapeList var60 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 0.0d, 1.0d);
    var60.setShape(100, var66);
    var60.clear();
    int var69 = var60.size();
    boolean var70 = var43.equals((java.lang.Object)var69);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var74, (-1.0d), 100.0d);
    boolean var78 = org.jfree.chart.util.ShapeUtilities.equal(var72, var74);
    boolean var79 = var43.equals((java.lang.Object)var74);
    java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var74, 10.0d, 0.0d);
    java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.clone(var82);
    java.awt.Shape var84 = org.jfree.chart.util.ShapeUtilities.clone(var82);
    boolean var85 = var29.equals((java.lang.Object)var84);
    boolean var86 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var29);
    boolean var87 = var0.equals((java.lang.Object)var86);
    java.lang.Object var88 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test187"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 100.0d, 10.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, 0.0f);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var11, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test188"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 1.0d, 0.0f, 1.0f);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 1.0f, 10.0f);
    boolean var23 = var16.equals((java.lang.Object)var18);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)var25);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test189"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.awt.Shape var10 = var0.getShape(100);
//     java.lang.Object var11 = var0.clone();
//     int var12 = var0.size();
//     java.lang.Object var13 = var0.clone();
//     org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
//     var14.setShape(100, var20);
//     var14.clear();
//     int var23 = var14.size();
//     java.lang.Object var24 = null;
//     boolean var25 = var14.equals(var24);
//     java.awt.Shape var27 = var14.getShape(1);
//     java.lang.Object var28 = var14.clone();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), (-1.0d));
//     var14.setShape(0, var31);
//     boolean var36 = var0.equals((java.lang.Object)var31);
//     
//     // Checks the contract:  equals-hashcode on var0 and var14
//     assertTrue("Contract failed: equals-hashcode on var0 and var14", var0.equals(var14) ? var0.hashCode() == var14.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var14.", var0.equals(var14) == var14.equals(var0));
// 
//   }

  public void test190() {}
//   public void test190() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test190"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     java.lang.Object var12 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var10);
//     boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var7, var10);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
//     boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var15, var17);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 10.0d, 1.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var24, var27);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 1.0d, 100.0f, 1.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
//     boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var10, var32);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, 100.0d, 0.0f, (-1.0f));
//     boolean var42 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var10, (java.lang.Object)var37);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var10, 0.0d, 0.0f, 1.0f);
// 
//   }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test191"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var15.setShape(100, var21);
    var15.clear();
    java.lang.Object var24 = var15.clone();
    var15.clear();
    boolean var27 = var15.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    java.lang.Object var37 = var28.clone();
    var28.clear();
    boolean var40 = var28.equals((java.lang.Object)0);
    java.lang.Object var41 = var28.clone();
    boolean var42 = var15.equals((java.lang.Object)var28);
    boolean var43 = var1.equals((java.lang.Object)var15);
    java.lang.Object var44 = var1.clone();
    int var45 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);

  }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test192"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var5 = var0.getShape((-1));
//     org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
//     var6.setShape(100, var12);
//     var6.clear();
//     java.lang.Object var15 = var6.clone();
//     java.awt.Shape var17 = var6.getShape(10);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var20);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var20);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 100.0d, 100.0d);
//     var6.setShape(1, var28);
//     boolean var30 = var0.equals((java.lang.Object)var28);
//     
//     // Checks the contract:  equals-hashcode on var0 and var6
//     assertTrue("Contract failed: equals-hashcode on var0 and var6", var0.equals(var6) ? var0.hashCode() == var6.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var6.", var0.equals(var6) == var6.equals(var0));
// 
//   }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test193"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var8 = null;
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 10.0d, 0.0d);
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var10, var20);
    org.jfree.chart.util.RectangleAnchor var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, var28, 100.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test194"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, (-1.0d));
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 10.0d, 1.0f, 0.0f);
//     org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
//     var28.setShape(100, var34);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
//     boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var34, var40);
//     boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var23, var34);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, (-1.0d), 10.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var45, 1.0d, 1.0f, (-1.0f));
// 
//   }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test195"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var4);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 10.0d, (-1.0d));
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 100.0d);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var28, var38);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 100.0f, 10.0f);
    boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var23, var28);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.rotateShape(var53, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var61 = org.jfree.chart.util.ShapeUtilities.equal(var53, var60);
    boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var23, var60);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var60, (-1.0d), 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test196"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    var5.setShape(0, var15);
    java.awt.Shape var19 = var5.getShape(10);
    java.awt.Shape var21 = var5.getShape((-1));
    int var22 = var5.size();
    java.awt.Shape var24 = var5.getShape(0);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var26, var31);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, (-1.0d), 100.0d);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var34, var36);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var26, var36);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var24, var43);
    boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var1, var43);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 100.0d, 10.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 10.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 101);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test197"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 10.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    boolean var12 = var0.equals((java.lang.Object)var8);
    java.awt.Shape var14 = var0.getShape(10);
    var0.clear();
    java.lang.Object var16 = var0.clone();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    java.lang.Object var26 = var17.clone();
    var17.clear();
    boolean var29 = var17.equals((java.lang.Object)0);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)var32);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var17.setShape(0, var37);
    var17.clear();
    java.lang.Object var40 = var17.clone();
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 0.0d, 1.0d);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var42);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 100.0d, 1.0d);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 1.0d, 0.0d);
    boolean var57 = var17.equals((java.lang.Object)var56);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var59 = org.jfree.chart.util.ObjectUtilities.equal(var16, (java.lang.Object)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test198"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var4);
    org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    var21.setShape(100, var27);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    var21.setShape(0, var31);
    java.awt.Shape var35 = var21.getShape(10);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    var21.setShape(0, var38);
    boolean var43 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var4, (java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test199"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    int var11 = var0.size();
    java.lang.Object var12 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test200"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    java.lang.Object var18 = var0.clone();
    java.lang.Object var19 = var0.clone();
    java.lang.Object var20 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test201() {}
//   public void test201() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test201"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
//     boolean var7 = var0.equals((java.lang.Object)var2);
//     java.lang.Object var8 = var0.clone();
//     java.lang.Object var9 = null;
//     boolean var10 = var0.equals(var9);
//     int var11 = var0.size();
//     var0.clear();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 100.0d);
//     boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, (-1.0d));
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, 10.0d, 1.0f, 0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var40);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 100.0d, 0.0d);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var44, 1.0d, 0.0f, (-1.0f));
//     var0.setShape(101, var44);
//     var0.clear();
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, 100.0d, (-1.0d));
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.clone(var61);
//     org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
//     var63.setShape(100, var69);
//     var63.clear();
//     int var72 = var63.size();
//     java.lang.Object var73 = null;
//     boolean var74 = var63.equals(var73);
//     java.awt.Shape var76 = var63.getShape(1);
//     boolean var77 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var62, (java.lang.Object)1);
//     java.awt.Shape var81 = org.jfree.chart.util.ShapeUtilities.rotateShape(var62, 0.0d, (-1.0f), 0.0f);
//     boolean var82 = org.jfree.chart.util.ShapeUtilities.equal(var56, var81);
//     var0.setShape(10, var81);
//     
//     // Checks the contract:  equals-hashcode on var63 and var0
//     assertTrue("Contract failed: equals-hashcode on var63 and var0", var63.equals(var0) ? var63.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var63 and var0.", var63.equals(var0) == var0.equals(var63));
// 
//   }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test202"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var8 = null;
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 1.0f, 1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test203"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 0.0d, 0.0f, 1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    org.jfree.chart.util.RectangleAnchor var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, var28, 100.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test204() {}
//   public void test204() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test204"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.lang.Object var4 = var0.clone();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
//     var0.setShape(1, var7);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.lang.Object var17 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var15);
//     org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
//     int var19 = var18.size();
//     org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var21 = var20.clone();
//     var20.clear();
//     java.awt.Shape var24 = var20.getShape(100);
//     var20.clear();
//     boolean var26 = var18.equals((java.lang.Object)var20);
//     int var27 = var18.size();
//     java.lang.Object var28 = var18.clone();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
//     boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var33, var38);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, (-1.0d), 100.0d);
//     boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var41, var43);
//     boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var33, var43);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.clone(var43);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.clone(var43);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, 100.0d, 0.0f, 0.0f);
//     boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var31, var54);
//     boolean var56 = org.jfree.chart.util.ObjectUtilities.equal(var28, (java.lang.Object)var31);
//     boolean var57 = org.jfree.chart.util.ShapeUtilities.equal(var15, var31);
//     
//     // Checks the contract:  equals-hashcode on var18 and var0
//     assertTrue("Contract failed: equals-hashcode on var18 and var0", var18.equals(var0) ? var18.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var0
//     assertTrue("Contract failed: equals-hashcode on var20 and var0", var20.equals(var0) ? var20.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var18 and var0.", var18.equals(var0) == var0.equals(var18));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var0.", var20.equals(var0) == var0.equals(var20));
// 
//   }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test205"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
    var0.setShape(0, var27);
    var0.clear();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, (-1.0d));
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 10.0d, 0.0d);
    boolean var39 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)0.0d);
    java.lang.Object var40 = null;
    boolean var41 = var0.equals(var40);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var55 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var56 = var55.clone();
    java.lang.Object var57 = var55.clone();
    boolean var58 = var42.equals((java.lang.Object)var55);
    java.awt.Shape var60 = var42.getShape(100);
    boolean var61 = var0.equals((java.lang.Object)var42);
    java.lang.Object var62 = var42.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test206"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    boolean var5 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 1.0d);
    org.jfree.chart.util.RectangleAnchor var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, var9, 0.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test207"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var29 = var28.clone();
    var28.clear();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 10.0d, (-1.0d));
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 10.0d, 1.0d);
    boolean var40 = var28.equals((java.lang.Object)var36);
    boolean var41 = var0.equals((java.lang.Object)var28);
    java.lang.Object var42 = var28.clone();
    org.jfree.chart.util.ShapeList var43 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
    var43.setShape(100, var49);
    var43.clear();
    int var52 = var43.size();
    int var53 = var43.size();
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var43.setShape(0, var57);
    boolean var60 = var43.equals((java.lang.Object)100);
    var43.clear();
    boolean var62 = org.jfree.chart.util.ObjectUtilities.equal(var42, (java.lang.Object)var43);
    java.lang.Object var63 = org.jfree.chart.util.ObjectUtilities.clone(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test208"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 100.0d, 1.0d);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var19, var29);
    boolean var34 = var0.equals((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test209"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test210"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var2 = var1.clone();
//     var1.clear();
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 10.0d, (-1.0d));
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var5);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 10.0d, 1.0d);
//     boolean var13 = var1.equals((java.lang.Object)var9);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
//     boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var15);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var9, 100.0d, 1.0f, 100.0f);
// 
//   }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test211"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     var0.clear();
//     int var2 = var0.size();
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var3.setShape(100, var9);
//     var3.clear();
//     java.lang.Object var12 = var3.clone();
//     int var13 = var3.size();
//     java.awt.Shape var15 = var3.getShape(0);
//     boolean var17 = var3.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var18 = var3.clone();
//     int var19 = var3.size();
//     org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     var20.setShape(100, var26);
//     var20.clear();
//     int var29 = var20.size();
//     boolean var30 = var3.equals((java.lang.Object)var29);
//     java.lang.Object var31 = null;
//     boolean var32 = var3.equals(var31);
//     java.lang.Object var33 = var3.clone();
//     java.lang.Object var34 = var3.clone();
//     boolean var35 = var0.equals((java.lang.Object)var3);
//     int var36 = var3.size();
//     java.awt.Shape var38 = null;
//     var3.setShape(1, var38);
//     
//     // Checks the contract:  equals-hashcode on var0 and var3
//     assertTrue("Contract failed: equals-hashcode on var0 and var3", var0.equals(var3) ? var0.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var0
//     assertTrue("Contract failed: equals-hashcode on var3 and var0", var3.equals(var0) ? var3.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var20
//     assertTrue("Contract failed: equals-hashcode on var3 and var20", var3.equals(var20) ? var3.hashCode() == var20.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var3
//     assertTrue("Contract failed: equals-hashcode on var20 and var3", var20.equals(var3) ? var20.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test212() {}
//   public void test212() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test212"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 10.0d, 0.0f, (-1.0f));
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 0.0d);
//     boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var7, var9);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var9, (-1.0d), 10.0f, 0.0f);
// 
//   }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test213"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    java.lang.Object var12 = var0.clone();
    int var13 = var0.size();
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var14.setShape(100, var20);
    var14.clear();
    java.lang.Object var23 = var14.clone();
    var14.clear();
    boolean var26 = var14.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
    var27.setShape(100, var33);
    var27.clear();
    java.lang.Object var36 = var27.clone();
    var27.clear();
    boolean var39 = var27.equals((java.lang.Object)0);
    java.lang.Object var40 = var27.clone();
    boolean var41 = var14.equals((java.lang.Object)var27);
    int var42 = var27.size();
    boolean var43 = var0.equals((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test214"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    boolean var3 = var0.equals((java.lang.Object)100.0d);
    int var4 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test215() {}
//   public void test215() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test215"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var14 = var13.clone();
//     java.lang.Object var15 = var13.clone();
//     boolean var16 = var0.equals((java.lang.Object)var13);
//     java.lang.Object var17 = var13.clone();
//     var13.clear();
//     org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     var20.setShape(100, var26);
//     var20.clear();
//     java.lang.Object var29 = var20.clone();
//     var20.clear();
//     boolean var32 = var20.equals((java.lang.Object)0);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var34);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, (-1.0d), 100.0d);
//     boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var37, var47);
//     boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var35, var37);
//     boolean var53 = var20.equals((java.lang.Object)var52);
//     java.awt.Shape var55 = var20.getShape(0);
//     java.awt.Shape var57 = var20.getShape((-1));
//     java.awt.Shape var59 = var20.getShape(101);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var61, 0.0d, 1.0d);
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.clone(var61);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.rotateShape(var61, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 100.0d, 1.0d);
//     java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 1.0d, 0.0d);
//     boolean var76 = var20.equals((java.lang.Object)var75);
//     var13.setShape(10, var75);
//     
//     // Checks the contract:  equals-hashcode on var0 and var13
//     assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var13
//     assertTrue("Contract failed: equals-hashcode on var20 and var13", var20.equals(var13) ? var20.hashCode() == var13.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var13.", var0.equals(var13) == var13.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var13.", var20.equals(var13) == var13.equals(var20));
// 
//   }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test216"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = var5.getShape(100);
    java.lang.Object var8 = var5.clone();
    var5.clear();
    boolean var10 = var0.equals((java.lang.Object)var5);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var5);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, 0.0f);
    boolean var15 = var5.equals((java.lang.Object)var14);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    var16.clear();
    java.awt.Shape var26 = var16.getShape(100);
    java.lang.Object var27 = var16.clone();
    var16.clear();
    var16.clear();
    java.lang.Object var30 = var16.clone();
    boolean var31 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var16);
    org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 0.0d, 1.0f, 10.0f);
    boolean var39 = var32.equals((java.lang.Object)var34);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 1.0d);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var34, (java.lang.Object)var41);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, (-1.0d), 100.0d);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.rotateShape(var51, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 1.0d, (-1.0d));
    boolean var59 = org.jfree.chart.util.ShapeUtilities.equal(var41, var55);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 10.0d);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.rotateShape(var62, 10.0d, 10.0f, (-1.0f));
    boolean var67 = var5.equals((java.lang.Object)(-1.0f));
    java.lang.Object var68 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test217"); }


    java.lang.Class var0 = null;
    java.lang.ClassLoader var1 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var0);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var3.setShape(100, var9);
    var3.clear();
    java.awt.Shape var13 = var3.getShape(0);
    java.lang.Object var14 = var3.clone();
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, var14);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    var21.setShape(100, var27);
    var21.clear();
    java.lang.Object var30 = var21.clone();
    var21.clear();
    boolean var33 = var21.equals((java.lang.Object)0);
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var21);
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    var35.setShape(100, var41);
    var35.clear();
    java.lang.Object var44 = var35.clone();
    int var45 = var35.size();
    java.awt.Shape var47 = var35.getShape(0);
    boolean var49 = var35.equals((java.lang.Object)(short)(-1));
    java.lang.Object var50 = var35.clone();
    int var51 = var35.size();
    org.jfree.chart.util.ShapeList var52 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 0.0d, 1.0d);
    var52.setShape(100, var58);
    var52.clear();
    int var61 = var52.size();
    boolean var62 = var35.equals((java.lang.Object)var61);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, (-1.0d), 100.0d);
    boolean var70 = org.jfree.chart.util.ShapeUtilities.equal(var64, var66);
    boolean var71 = var35.equals((java.lang.Object)var66);
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 10.0d, 0.0d);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.clone(var74);
    java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.clone(var74);
    boolean var77 = var21.equals((java.lang.Object)var76);
    boolean var78 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, (java.lang.Object)var21);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test218"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
    var0.setShape(0, var27);
    var0.clear();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, (-1.0d));
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 10.0d, 0.0d);
    boolean var39 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)0.0d);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test219"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, (-1.0d));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    var0.setShape(1, var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)1);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test220() {}
//   public void test220() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test220"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     int var1 = var0.size();
//     org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var3 = var2.clone();
//     var2.clear();
//     java.awt.Shape var6 = var2.getShape(100);
//     var2.clear();
//     boolean var8 = var0.equals((java.lang.Object)var2);
//     int var9 = var0.size();
//     java.lang.Object var10 = var0.clone();
//     org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
//     var11.setShape(100, var17);
//     java.lang.Object var19 = var11.clone();
//     java.lang.Object var20 = var11.clone();
//     boolean var21 = var0.equals(var20);
//     
//     // Checks the contract:  equals-hashcode on var0 and var11
//     assertTrue("Contract failed: equals-hashcode on var0 and var11", var0.equals(var11) ? var0.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var2 and var11
//     assertTrue("Contract failed: equals-hashcode on var2 and var11", var2.equals(var11) ? var2.hashCode() == var11.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var11.", var0.equals(var11) == var11.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var2 and var11.", var2.equals(var11) == var11.equals(var2));
//     
//     // Checks the contract:  equals-hashcode on var3 and var19
//     assertTrue("Contract failed: equals-hashcode on var3 and var19", var3.equals(var19) ? var3.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var20
//     assertTrue("Contract failed: equals-hashcode on var3 and var20", var3.equals(var20) ? var3.hashCode() == var20.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var10 and var19
//     assertTrue("Contract failed: equals-hashcode on var10 and var19", var10.equals(var19) ? var10.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var10 and var20
//     assertTrue("Contract failed: equals-hashcode on var10 and var20", var10.equals(var20) ? var10.hashCode() == var20.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var19.", var3.equals(var19) == var19.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var20.", var3.equals(var20) == var20.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var10 and var19.", var10.equals(var19) == var19.equals(var10));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var10 and var20.", var10.equals(var20) == var20.equals(var10));
// 
//   }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test221"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    var0.clear();
    java.lang.Object var2 = var0.clone();
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 10.0d, (-1.0d));
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var5);
    java.awt.Shape var10 = null;
    boolean var11 = org.jfree.chart.util.ShapeUtilities.equal(var5, var10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 10.0d, (-1.0d));
    var0.setShape(2, var14);
    java.lang.Object var16 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test222"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var15 = var0.clone();
//     int var16 = var0.size();
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     int var18 = var17.size();
//     boolean var19 = var0.equals((java.lang.Object)var18);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
//     boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
//     boolean var43 = var0.equals((java.lang.Object)var39);
//     java.lang.Object var44 = var0.clone();
//     java.lang.Object var45 = var0.clone();
//     org.jfree.chart.util.ShapeList var47 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 0.0d, 1.0d);
//     var47.setShape(100, var53);
//     var47.clear();
//     int var56 = var47.size();
//     int var57 = var47.size();
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     var47.setShape(0, var61);
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var65, (-1.0d), 100.0d);
//     java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var70, 0.0d, 1.0d);
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.clone(var70);
//     java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.rotateShape(var70, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var81 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var78, 100.0d, 1.0d);
//     java.awt.Shape var84 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var78, 1.0d, 0.0d);
//     java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.clone(var84);
//     boolean var86 = org.jfree.chart.util.ShapeUtilities.equal(var68, var84);
//     var47.setShape(10, var84);
//     java.awt.Shape var89 = var47.getShape(10);
//     var0.setShape(0, var89);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var47
//     assertTrue("Contract failed: equals-hashcode on var17 and var47", var17.equals(var47) ? var17.hashCode() == var47.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var0.", var17.equals(var0) == var0.equals(var17));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var47.", var17.equals(var47) == var47.equals(var17));
// 
//   }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test223"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    java.lang.Object var12 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    var13.clear();
    java.awt.Shape var17 = var13.getShape(100);
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    var18.setShape(100, var24);
    var18.clear();
    java.lang.Object var27 = var18.clone();
    var18.clear();
    boolean var30 = var18.equals((java.lang.Object)0);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)var33);
    int var35 = var18.size();
    boolean var36 = var13.equals((java.lang.Object)var35);
    var13.clear();
    var13.clear();
    boolean var39 = var0.equals((java.lang.Object)var13);
    java.lang.Object var40 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test224"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 0.0d, 1.0f, 10.0f);
    boolean var19 = var12.equals((java.lang.Object)var14);
    java.awt.Shape var21 = var12.getShape(100);
    var12.clear();
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var23.setShape(100, var29);
    var23.clear();
    java.lang.Object var32 = var23.clone();
    var23.clear();
    boolean var35 = var23.equals((java.lang.Object)0);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var40, var50);
    boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var38, var40);
    boolean var56 = var23.equals((java.lang.Object)var55);
    java.lang.Object var57 = var23.clone();
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var12, var57);
    boolean var59 = var0.equals(var57);
    var0.clear();
    org.jfree.chart.util.ShapeList var61 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var64, 0.0d, 1.0d);
    var61.setShape(100, var67);
    var61.clear();
    java.lang.Object var70 = var61.clone();
    int var71 = var61.size();
    java.awt.Shape var73 = var61.getShape(0);
    boolean var75 = var61.equals((java.lang.Object)(short)(-1));
    java.lang.Object var76 = var61.clone();
    int var77 = var61.size();
    org.jfree.chart.util.ShapeList var78 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var81 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var84 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var81, 0.0d, 1.0d);
    var78.setShape(100, var84);
    var78.clear();
    int var87 = var78.size();
    boolean var88 = var61.equals((java.lang.Object)var87);
    java.lang.Object var89 = null;
    boolean var90 = var61.equals(var89);
    java.lang.Object var91 = var61.clone();
    java.lang.Object var92 = var61.clone();
    boolean var93 = var0.equals(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test225"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 100.0d, 1.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 1.0d, 0.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var34, var50);
    boolean var53 = var0.equals((java.lang.Object)var50);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test226"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    var0.clear();
    int var2 = var0.size();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    java.lang.Object var13 = var4.clone();
    java.awt.Shape var15 = var4.getShape(10);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 100.0d, 100.0d);
    var4.setShape(1, var26);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, (-1.0d), 0.0f, 100.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 100.0d);
    var0.setShape(2, var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test227"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var3.setShape(100, var9);
    var3.clear();
    java.lang.Object var12 = var3.clone();
    int var13 = var3.size();
    java.awt.Shape var15 = var3.getShape(0);
    boolean var17 = var3.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    var19.setShape(100, var25);
    var19.clear();
    java.lang.Object var28 = var19.clone();
    var19.clear();
    boolean var31 = var19.equals((java.lang.Object)0);
    boolean var32 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var19);
    java.lang.Object var33 = var19.clone();
    boolean var34 = var3.equals(var33);
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, 0.0d, 1.0f, 10.0f);
    boolean var42 = var35.equals((java.lang.Object)var37);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.clone(var44);
    boolean var49 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var37, (java.lang.Object)var44);
    boolean var50 = var3.equals((java.lang.Object)var44);
    boolean var51 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var52 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test228"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    var6.setShape(100, var12);
    var6.clear();
    java.lang.Object var15 = var6.clone();
    var6.clear();
    boolean var18 = var6.equals((java.lang.Object)0);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    boolean var22 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var21);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 1.0d, 100.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var2, var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test229"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    var0.clear();
    java.awt.Shape var3 = var0.getShape(1);
    int var4 = var0.size();
    java.awt.Shape var6 = var0.getShape(0);
    java.lang.Object var7 = var0.clone();
    java.awt.Shape var9 = null;
    var0.setShape(1, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test230"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 100.0d, 0.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 1.0d, 1.0d);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var3, var15);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var0, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test231"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = var5.getShape(100);
    java.lang.Object var8 = var5.clone();
    var5.clear();
    boolean var10 = var0.equals((java.lang.Object)var5);
    java.awt.Shape var12 = var5.getShape(10);
    java.awt.Shape var14 = var5.getShape(0);
    java.lang.Object var15 = var5.clone();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var20, var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), 100.0d);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var28, var30);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var20, var30);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 10.0d, 0.0d);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.rotateShape(var39, 1.0d, 0.0f, 100.0f);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var18, var39);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 0.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 100.0d, (-1.0d));
    boolean var51 = var5.equals((java.lang.Object)(-1.0d));
    java.lang.Object var52 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test232"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    int var21 = var11.size();
    java.awt.Shape var23 = var11.getShape(0);
    boolean var25 = var11.equals((java.lang.Object)(short)(-1));
    java.lang.Object var26 = var11.clone();
    int var27 = var11.size();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    boolean var38 = var11.equals((java.lang.Object)var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = var11.equals((java.lang.Object)var42);
    java.lang.Object var48 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var42);
    boolean var49 = var0.equals(var48);
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
    var50.setShape(100, var56);
    var50.clear();
    java.lang.Object var59 = var50.clone();
    var50.clear();
    boolean var62 = var50.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
    var63.setShape(100, var69);
    var63.clear();
    java.lang.Object var72 = var63.clone();
    var63.clear();
    boolean var75 = var63.equals((java.lang.Object)0);
    java.lang.Object var76 = var63.clone();
    boolean var77 = var50.equals((java.lang.Object)var63);
    java.awt.Shape var79 = var50.getShape(100);
    boolean var80 = var0.equals((java.lang.Object)var50);
    org.jfree.chart.util.ShapeList var81 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var87 = org.jfree.chart.util.ShapeUtilities.rotateShape(var83, 0.0d, 1.0f, 10.0f);
    boolean var88 = var81.equals((java.lang.Object)var83);
    java.lang.Object var89 = var81.clone();
    boolean var90 = var0.equals(var89);
    org.jfree.chart.util.ShapeList var91 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var92 = var91.clone();
    java.awt.Shape var94 = var91.getShape(0);
    boolean var95 = var0.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test233"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, 0.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var41 = null;
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var39, var41);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test234"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 100.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test235"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var15, var17);
    boolean var33 = var0.equals((java.lang.Object)var32);
    java.awt.Shape var35 = var0.getShape(0);
    java.awt.Shape var37 = var0.getShape((-1));
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test236"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test237"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.lang.Object var23 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var22);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    java.io.ObjectOutputStream var25 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var24, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test238"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 100.0d, 100.0d);
    var0.setShape(1, var22);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 0.0f, 100.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 100.0d, (-1.0f), 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test239"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 10.0f, 10.0f);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    var28.clear();
    java.lang.Object var39 = var28.clone();
    boolean var41 = var28.equals((java.lang.Object)'#');
    java.lang.Object var42 = var28.clone();
    org.jfree.chart.util.ShapeList var43 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
    var43.setShape(100, var49);
    var43.clear();
    java.lang.Object var52 = var43.clone();
    var43.clear();
    int var54 = var43.size();
    java.lang.Object var55 = var43.clone();
    java.lang.Object var56 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var43);
    java.lang.Object var57 = org.jfree.chart.util.ObjectUtilities.clone(var56);
    boolean var58 = var28.equals(var57);
    boolean var59 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var27, var57);
    org.jfree.chart.util.ShapeList var60 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var61 = null;
    boolean var62 = var60.equals(var61);
    java.lang.Object var63 = var60.clone();
    var60.clear();
    var60.clear();
    boolean var66 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var27, (java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test240"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle((-1.0f));
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 0.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test241"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var15, var17);
    boolean var33 = var0.equals((java.lang.Object)var32);
    java.lang.Object var34 = var0.clone();
    java.lang.Object var35 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test242"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    var1.clear();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, (-1.0d), 100.0d);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var18, var28);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, (-1.0d));
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.rotateShape(var39, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    boolean var45 = var1.equals((java.lang.Object)var39);
    java.io.ObjectOutputStream var46 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var39, var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test243"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    var0.clear();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 100.0d);
    boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, (-1.0d));
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 100.0d, 0.0d);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var44, 1.0d, 0.0f, (-1.0f));
    var0.setShape(101, var44);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.clone(var52);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var52);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, 100.0d, 1.0f, 0.0f);
    boolean var59 = org.jfree.chart.util.ShapeUtilities.equal(var44, var52);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 100.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test244"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    var0.clear();
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var26 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var27 = var26.clone();
    java.lang.Object var28 = var26.clone();
    boolean var29 = var13.equals((java.lang.Object)var26);
    java.lang.Object var30 = var26.clone();
    org.jfree.chart.util.ShapeList var31 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 0.0d, 1.0d);
    var31.setShape(100, var37);
    var31.clear();
    java.lang.Object var40 = var31.clone();
    int var41 = var31.size();
    java.awt.Shape var43 = var31.getShape(0);
    boolean var45 = var31.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var47 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 0.0d, 1.0d);
    var47.setShape(100, var53);
    var47.clear();
    java.lang.Object var56 = var47.clone();
    var47.clear();
    boolean var59 = var47.equals((java.lang.Object)0);
    boolean var60 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var47);
    java.lang.Object var61 = var47.clone();
    boolean var62 = var31.equals(var61);
    boolean var63 = var26.equals((java.lang.Object)var31);
    var31.clear();
    java.lang.Object var65 = var31.clone();
    boolean var66 = var0.equals(var65);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, (-1.0f));
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 0.0d, 0.0d);
    boolean var73 = var0.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test245() {}
//   public void test245() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test245"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, (-1.0d));
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 10.0d, 1.0d);
//     java.lang.Object var10 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var6);
//     java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var6);
//     org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     var12.setShape(100, var18);
//     var12.clear();
//     java.lang.Object var21 = var12.clone();
//     int var22 = var12.size();
//     java.awt.Shape var24 = var12.getShape(0);
//     boolean var26 = var12.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var27 = var12.clone();
//     int var28 = var12.size();
//     org.jfree.chart.util.ShapeList var29 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
//     var29.setShape(100, var35);
//     var29.clear();
//     int var38 = var29.size();
//     boolean var39 = var12.equals((java.lang.Object)var38);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, (-1.0d), 100.0d);
//     boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var41, var43);
//     boolean var48 = var12.equals((java.lang.Object)var43);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 10.0d, 0.0d);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, 1.0d, (-1.0f), (-1.0f));
//     boolean var56 = org.jfree.chart.util.ShapeUtilities.equal(var6, var55);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var55, 100.0d, (-1.0f), 10.0f);
// 
//   }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test246"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 100.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test247"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.RectangleAnchor var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var0, var1, 0.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test248"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var3 = var2.clone();
    var2.clear();
    java.awt.Shape var6 = var2.getShape(100);
    var2.clear();
    boolean var8 = var0.equals((java.lang.Object)var2);
    int var9 = var0.size();
    java.lang.Object var10 = var0.clone();
    var0.clear();
    java.lang.Object var12 = var0.clone();
    java.lang.Object var13 = org.jfree.chart.util.ObjectUtilities.clone(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test249() {}
//   public void test249() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test249"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.awt.Shape var10 = var0.getShape((-1));
//     org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
//     var11.setShape(100, var17);
//     var11.clear();
//     java.lang.Object var20 = var11.clone();
//     int var21 = var11.size();
//     java.awt.Shape var23 = var11.getShape(0);
//     boolean var25 = var11.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var26 = var11.clone();
//     int var27 = var11.size();
//     org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
//     var28.setShape(100, var34);
//     var28.clear();
//     int var37 = var28.size();
//     boolean var38 = var11.equals((java.lang.Object)var37);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
//     boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
//     boolean var47 = var11.equals((java.lang.Object)var42);
//     java.lang.Object var48 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var42);
//     boolean var49 = var0.equals(var48);
//     org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
//     var50.setShape(100, var56);
//     var50.clear();
//     java.lang.Object var59 = var50.clone();
//     var50.clear();
//     boolean var62 = var50.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
//     var63.setShape(100, var69);
//     var63.clear();
//     java.lang.Object var72 = var63.clone();
//     var63.clear();
//     boolean var75 = var63.equals((java.lang.Object)0);
//     java.lang.Object var76 = var63.clone();
//     boolean var77 = var50.equals((java.lang.Object)var63);
//     java.awt.Shape var79 = var50.getShape(100);
//     boolean var80 = var0.equals((java.lang.Object)var50);
//     java.awt.Shape var82 = null;
//     var0.setShape(100, var82);
//     
//     // Checks the contract:  equals-hashcode on var0 and var11
//     assertTrue("Contract failed: equals-hashcode on var0 and var11", var0.equals(var11) ? var0.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var28
//     assertTrue("Contract failed: equals-hashcode on var0 and var28", var0.equals(var28) ? var0.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var50
//     assertTrue("Contract failed: equals-hashcode on var0 and var50", var0.equals(var50) ? var0.hashCode() == var50.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var63
//     assertTrue("Contract failed: equals-hashcode on var0 and var63", var0.equals(var63) ? var0.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var0
//     assertTrue("Contract failed: equals-hashcode on var11 and var0", var11.equals(var0) ? var11.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var0
//     assertTrue("Contract failed: equals-hashcode on var28 and var0", var28.equals(var0) ? var28.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var50 and var0
//     assertTrue("Contract failed: equals-hashcode on var50 and var0", var50.equals(var0) ? var50.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var0
//     assertTrue("Contract failed: equals-hashcode on var63 and var0", var63.equals(var0) ? var63.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test250"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.awt.Shape var6 = var0.getShape(100);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 100.0d);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 1.0d, 0.0f, 1.0f);
    var0.setShape(101, var23);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, (-1.0d), 100.0d);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var27, var37);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, (-1.0d));
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, (-1.0d), 10.0d);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, (-1.0d), (-1.0d));
    var0.setShape(102, var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test251"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    java.awt.Shape var65 = var0.getShape(2);
    java.lang.Object var66 = var0.clone();
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, (-1.0d), 100.0d);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 0.0d, 1.0d);
    java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.rotateShape(var75, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.rotateShape(var79, 100.0d, 100.0f, (-1.0f));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-1), var79);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test252"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    java.awt.Shape var3 = var0.getShape(0);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    var0.setShape(100, var6);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 100.0d, 0.0f, 0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 0.0f, 0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 100.0d);
    org.jfree.chart.util.RectangleAnchor var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, var20, (-1.0d), 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test253"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    org.jfree.chart.util.ShapeList var29 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
    var29.setShape(100, var35);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    var29.setShape(0, var39);
    java.lang.Object var42 = var29.clone();
    boolean var44 = var29.equals((java.lang.Object)0.0d);
    java.lang.Object var45 = var29.clone();
    java.awt.Shape var47 = var29.getShape((-1));
    boolean var48 = var0.equals((java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test254"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
    boolean var43 = var0.equals((java.lang.Object)var39);
    java.lang.Object var44 = var0.clone();
    java.lang.Object var45 = var0.clone();
    java.lang.Object var46 = null;
    boolean var47 = var0.equals(var46);
    var0.clear();
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    org.jfree.chart.util.ShapeList var52 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.rotateShape(var54, 0.0d, 1.0f, 10.0f);
    boolean var59 = var52.equals((java.lang.Object)var54);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var61, 0.0d, 1.0d);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.clone(var61);
    boolean var66 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var54, (java.lang.Object)var61);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.rotateShape(var54, 100.0d, 100.0f, 1.0f);
    boolean var71 = org.jfree.chart.util.ShapeUtilities.equal(var51, var54);
    boolean var72 = var0.equals((java.lang.Object)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test255"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.lang.Object var12 = var0.clone();
    int var13 = var0.size();
    var0.clear();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, (-1.0d), 100.0d);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var17, var19);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 10.0f, 0.0f);
    var0.setShape(102, var27);
    java.awt.Shape var30 = null;
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 0.0d, 1.0f, (-1.0f));
    boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var30, var32);
    var0.setShape(2, var30);
    org.jfree.chart.util.ShapeList var39 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 0.0d, 1.0d);
    var39.setShape(100, var45);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.clone(var48);
    java.lang.Object var50 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var48);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var45, var48);
    org.jfree.chart.util.ShapeList var52 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var53 = null;
    boolean var54 = var52.equals(var53);
    java.lang.Object var55 = var52.clone();
    java.lang.Object var56 = var52.clone();
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.rotateShape(var59, 0.0d, 1.0f, 10.0f);
    var52.setShape(1, var59);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var59, (-1.0d), (-1.0d));
    java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.clone(var67);
    boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var48, var67);
    boolean var70 = var0.equals((java.lang.Object)var69);
    java.lang.Object var71 = null;
    boolean var72 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var69, var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test256"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(10);
    var0.clear();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 10.0f);
    var0.setShape(1, var7);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test257"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    int var12 = var0.size();
    java.lang.Object var13 = var0.clone();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 1.0f, (-1.0f));
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var16, var18);
    boolean var24 = var0.equals((java.lang.Object)var16);
    java.lang.Object var25 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test258"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    java.lang.Object var18 = var13.clone();
    java.lang.Object var19 = var13.clone();
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var13);
    java.lang.Object var21 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test259"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    java.lang.Object var18 = var0.clone();
    java.awt.Shape var20 = var0.getShape(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test260"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 0.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 100.0d, (-1.0f), 0.0f);
    java.io.ObjectOutputStream var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var1, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test261"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 1.0d, 0.0f, 1.0f);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 1.0f, 10.0f);
    boolean var23 = var16.equals((java.lang.Object)var18);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)var25);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
    org.jfree.chart.util.RectangleAnchor var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, var32, 0.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test262"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(0);
//     var0.clear();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var0.setShape(1, var6);
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
//     var0.setShape(0, var17);
//     org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
//     var27.setShape(100, var33);
//     var27.clear();
//     java.lang.Object var36 = var27.clone();
//     int var37 = var27.size();
//     java.awt.Shape var39 = var27.getShape(0);
//     boolean var41 = var27.equals((java.lang.Object)(short)(-1));
//     org.jfree.chart.util.ShapeList var43 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
//     var43.setShape(100, var49);
//     var43.clear();
//     java.lang.Object var52 = var43.clone();
//     var43.clear();
//     boolean var55 = var43.equals((java.lang.Object)0);
//     boolean var56 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var43);
//     java.lang.Object var57 = var43.clone();
//     boolean var58 = var27.equals(var57);
//     java.lang.Object var59 = var27.clone();
//     var27.clear();
//     boolean var61 = var0.equals((java.lang.Object)var27);
//     
//     // Checks the contract:  equals-hashcode on var27 and var0
//     assertTrue("Contract failed: equals-hashcode on var27 and var0", var27.equals(var0) ? var27.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var43 and var0
//     assertTrue("Contract failed: equals-hashcode on var43 and var0", var43.equals(var0) ? var43.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var27 and var0.", var27.equals(var0) == var0.equals(var27));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var43 and var0.", var43.equals(var0) == var0.equals(var43));
//     
//     // Checks the contract:  equals-hashcode on var36 and var14
//     assertTrue("Contract failed: equals-hashcode on var36 and var14", var36.equals(var14) ? var36.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var52 and var14
//     assertTrue("Contract failed: equals-hashcode on var52 and var14", var52.equals(var14) ? var52.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var14
//     assertTrue("Contract failed: equals-hashcode on var57 and var14", var57.equals(var14) ? var57.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var14
//     assertTrue("Contract failed: equals-hashcode on var59 and var14", var59.equals(var14) ? var59.hashCode() == var14.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var36 and var14.", var36.equals(var14) == var14.equals(var36));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var52 and var14.", var52.equals(var14) == var14.equals(var52));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var57 and var14.", var57.equals(var14) == var14.equals(var57));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var59 and var14.", var59.equals(var14) == var14.equals(var59));
// 
//   }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test263"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.lang.Object var17 = null;
    boolean var18 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var11, var17);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test264"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    java.lang.Object var7 = var0.clone();
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    java.awt.Shape var11 = var0.getShape(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test265"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var6, var9);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), (-1.0d));
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, 10.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test266"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.RectangleAnchor var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var0, var1, (-1.0d), 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test267"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var9, var17);
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = var20.getShape(100);
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var24 = null;
    boolean var25 = var23.equals(var24);
    java.lang.Object var26 = var23.clone();
    boolean var27 = var20.equals((java.lang.Object)var23);
    int var28 = var23.size();
    boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.lang.Object var34 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var33);
    boolean var35 = var23.equals((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test268"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    java.lang.Object var10 = var0.clone();
    boolean var12 = var0.equals((java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var12);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test269() {}
//   public void test269() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test269"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = var1.getShape(100);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var1.setShape(10, var14);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 100.0d, (-1.0d));
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, 1.0d, 0.0f, 100.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, (-1.0d));
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 10.0d, 0.0d);
//     var1.setShape(100, var28);
//     org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
//     var37.setShape(100, var43);
//     var37.clear();
//     int var46 = var37.size();
//     int var47 = var37.size();
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     var37.setShape(0, var51);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var51, 0.0d, 0.0f, (-1.0f));
//     java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.rotateShape(var56, (-1.0d), 1.0f, 1.0f);
//     var1.setShape(10, var60);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var60, 10.0d, 10.0f, 10.0f);
// 
//   }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test270"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
    var0.setShape(10, var37);
    java.awt.Shape var42 = var0.getShape(10);
    var0.clear();
    java.lang.Object var44 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test271"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    int var12 = var11.size();
    var11.clear();
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    java.lang.Object var18 = var14.clone();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, 0.0d, 1.0f, 10.0f);
    var14.setShape(1, var21);
    var14.clear();
    int var28 = var14.size();
    boolean var29 = var11.equals((java.lang.Object)var14);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test272"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var33);
    java.lang.Object var35 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var34);
    var0.setShape(101, var34);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    var37.setShape(100, var43);
    var37.clear();
    int var46 = var37.size();
    int var47 = var37.size();
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var37.setShape(0, var51);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var51, 0.0d, 0.0f, (-1.0f));
    boolean var57 = org.jfree.chart.util.ShapeUtilities.equal(var34, var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test273"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    org.jfree.chart.util.RectangleAnchor var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, var16, 10.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test274"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    var37.clear();
    java.awt.Shape var66 = var37.getShape(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test275"); }
// 
// 
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     var1.clear();
//     java.lang.Object var10 = var1.clone();
//     var1.clear();
//     boolean var13 = var1.equals((java.lang.Object)0);
//     boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
//     java.lang.Object var15 = var1.clone();
//     org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var17 = var16.clone();
//     var16.clear();
//     boolean var19 = var1.equals((java.lang.Object)var16);
//     org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
//     var21.setShape(100, var27);
//     var21.clear();
//     java.lang.Object var30 = var21.clone();
//     int var31 = var21.size();
//     java.awt.Shape var33 = var21.getShape(0);
//     boolean var35 = var21.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var36 = var21.clone();
//     int var37 = var21.size();
//     org.jfree.chart.util.ShapeList var38 = new org.jfree.chart.util.ShapeList();
//     int var39 = var38.size();
//     boolean var40 = var21.equals((java.lang.Object)var39);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 0.0d, 1.0d);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var42);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var52, (-1.0d), 100.0d);
//     boolean var56 = org.jfree.chart.util.ShapeUtilities.equal(var42, var52);
//     java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var60, 0.0d, (-1.0d));
//     boolean var64 = var21.equals((java.lang.Object)var60);
//     org.jfree.chart.util.ShapeList var65 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.rotateShape(var67, 0.0d, 1.0f, 10.0f);
//     boolean var72 = var65.equals((java.lang.Object)var67);
//     java.awt.Shape var73 = null;
//     boolean var74 = org.jfree.chart.util.ShapeUtilities.equal(var67, var73);
//     java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.clone(var67);
//     boolean var76 = var21.equals((java.lang.Object)var75);
//     java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var75, (-1.0d), (-1.0d));
//     var16.setShape(0, var79);
//     
//     // Checks the contract:  equals-hashcode on var1 and var16
//     assertTrue("Contract failed: equals-hashcode on var1 and var16", var1.equals(var16) ? var1.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var21 and var16
//     assertTrue("Contract failed: equals-hashcode on var21 and var16", var21.equals(var16) ? var21.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var16
//     assertTrue("Contract failed: equals-hashcode on var38 and var16", var38.equals(var16) ? var38.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var16
//     assertTrue("Contract failed: equals-hashcode on var65 and var16", var65.equals(var16) ? var65.hashCode() == var16.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var1 and var16.", var1.equals(var16) == var16.equals(var1));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var21 and var16.", var21.equals(var16) == var16.equals(var21));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var38 and var16.", var38.equals(var16) == var16.equals(var38));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var65 and var16.", var65.equals(var16) == var16.equals(var65));
// 
//   }

  public void test276() {}
//   public void test276() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test276"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     var4.setShape(100, var10);
//     var4.clear();
//     int var13 = var4.size();
//     java.lang.Object var14 = null;
//     boolean var15 = var4.equals(var14);
//     java.awt.Shape var17 = var4.getShape(1);
//     boolean var18 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)1);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, (-1.0f), 0.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var22, (-1.0d), 100.0f, (-1.0f));
// 
//   }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test277"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var0.setShape(100, var6);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    var0.setShape(10, var11);
    java.awt.Shape var14 = var0.getShape(101);
    var0.clear();
    int var16 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test278"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(100);
//     java.lang.Object var3 = var0.clone();
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     var4.setShape(100, var10);
//     var4.clear();
//     java.lang.Object var13 = var4.clone();
//     var4.clear();
//     int var15 = var4.size();
//     java.lang.Object var16 = var4.clone();
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var19 = var17.getShape(0);
//     java.lang.Object var20 = var17.clone();
//     java.lang.Object var21 = var17.clone();
//     boolean var22 = var4.equals((java.lang.Object)var17);
//     boolean var23 = var0.equals((java.lang.Object)var17);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     var0.setShape(11, var27);
//     
//     // Checks the contract:  equals-hashcode on var4 and var0
//     assertTrue("Contract failed: equals-hashcode on var4 and var0", var4.equals(var0) ? var4.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var4 and var0.", var4.equals(var0) == var0.equals(var4));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var0.", var17.equals(var0) == var0.equals(var17));
// 
//   }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test279"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    java.lang.Object var10 = var0.clone();
    java.awt.Shape var12 = var0.getShape(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test280"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.lang.Object var3 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    boolean var11 = org.jfree.chart.util.ShapeUtilities.equal(var5, var10);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, (-1.0d), 100.0d);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var15);
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var5, var15);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var1, var23);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createUpTriangle((-1.0f));
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 1.0f);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var29, var32);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var23, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test281"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 100.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 1.0d, 0.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var5, var21);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 10.0d, 0.0d);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, (-1.0d), 100.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test282"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    java.lang.Object var7 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(102);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test283"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, 0.0d);
    boolean var27 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var26);
    boolean var28 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 0.0d, 0.0f, 100.0f);
    java.io.ObjectOutputStream var36 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var35, var36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test284"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, (-1.0f));
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.io.ObjectOutputStream var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test285"); }


    java.lang.Object var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, (-1.0d), (-1.0d));
    boolean var6 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test286"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    java.awt.Shape var65 = var0.getShape(2);
    int var66 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test287"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = var0.clone();
    java.lang.Object var21 = var0.clone();
    java.lang.Object var22 = null;
    boolean var23 = var0.equals(var22);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    var24.setShape(100, var30);
    var24.clear();
    java.lang.Object var33 = var24.clone();
    var24.clear();
    boolean var36 = var24.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    var37.setShape(100, var43);
    var37.clear();
    java.lang.Object var46 = var37.clone();
    var37.clear();
    boolean var49 = var37.equals((java.lang.Object)0);
    java.lang.Object var50 = var37.clone();
    boolean var51 = var24.equals((java.lang.Object)var37);
    java.awt.Shape var53 = var24.getShape(100);
    var24.clear();
    org.jfree.chart.util.ShapeList var55 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var56 = var55.clone();
    var55.clear();
    java.awt.Shape var59 = var55.getShape(100);
    org.jfree.chart.util.ShapeList var60 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 0.0d, 1.0d);
    var60.setShape(100, var66);
    var60.clear();
    java.lang.Object var69 = var60.clone();
    var60.clear();
    boolean var72 = var60.equals((java.lang.Object)0);
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.clone(var74);
    boolean var76 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var60, (java.lang.Object)var75);
    int var77 = var60.size();
    boolean var78 = var55.equals((java.lang.Object)var77);
    boolean var79 = var24.equals((java.lang.Object)var55);
    boolean var80 = var0.equals((java.lang.Object)var55);
    java.lang.Object var81 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test288"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = var0.getShape(1);
    int var30 = var0.size();
    java.lang.Object var31 = var0.clone();
    java.lang.Object var32 = var0.clone();
    java.lang.Object var33 = var0.clone();
    java.lang.Object var34 = org.jfree.chart.util.ObjectUtilities.clone(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test289"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 100.0d, 100.0d);
    var0.setShape(1, var22);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 0.0f, 100.0f);
    org.jfree.chart.util.RectangleAnchor var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, var28, 0.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test290"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(0);
//     int var3 = var0.size();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 10.0d, 1.0d);
//     var0.setShape(100, var7);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     boolean var26 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var13);
//     java.lang.Object var27 = var13.clone();
//     org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var29 = var28.clone();
//     var28.clear();
//     boolean var31 = var13.equals((java.lang.Object)var28);
//     java.lang.Object var32 = var13.clone();
//     org.jfree.chart.util.ShapeList var33 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
//     var33.setShape(100, var39);
//     var33.clear();
//     java.lang.Object var42 = var33.clone();
//     var33.clear();
//     int var44 = var33.size();
//     java.lang.Object var45 = var33.clone();
//     boolean var46 = var13.equals((java.lang.Object)var33);
//     int var47 = var13.size();
//     boolean var48 = var0.equals((java.lang.Object)var13);
//     
//     // Checks the contract:  equals-hashcode on var13 and var0
//     assertTrue("Contract failed: equals-hashcode on var13 and var0", var13.equals(var0) ? var13.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var0
//     assertTrue("Contract failed: equals-hashcode on var28 and var0", var28.equals(var0) ? var28.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var0
//     assertTrue("Contract failed: equals-hashcode on var33 and var0", var33.equals(var0) ? var33.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var0.", var13.equals(var0) == var0.equals(var13));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var0.", var28.equals(var0) == var0.equals(var28));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var33 and var0.", var33.equals(var0) == var0.equals(var33));
// 
//   }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test291"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    java.awt.Shape var23 = var0.getShape((-1));
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var34);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, (-1.0d), 100.0d);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var37, var39);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var29, var39);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var39, 100.0d, 0.0f, 0.0f);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var27, var50);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 100.0d, 1.0f, 1.0f);
    var0.setShape(10, var55);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test292"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 0.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var5);
    org.jfree.chart.util.RectangleAnchor var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, var7, 10.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test293"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), 100.0d);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var12, var22);
    var0.setShape(101, var22);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test294"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var0.setShape(0, var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 10.0d, (-1.0f), 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 1.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test295"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 0.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var14);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var2, var9);
    org.jfree.chart.util.RectangleAnchor var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, var21, 1.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test296"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.lang.Object var30 = org.jfree.chart.util.ObjectUtilities.clone(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test297"); }
// 
// 
//     java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
//     java.lang.Object var3 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var1);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     boolean var11 = org.jfree.chart.util.ShapeUtilities.equal(var5, var10);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, (-1.0d), 100.0d);
//     boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var15);
//     boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var5, var15);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var22);
//     boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var1, var23);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var30 = var28.getShape(0);
//     java.lang.Object var31 = var28.clone();
//     boolean var32 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var28);
//     org.jfree.chart.util.ShapeList var34 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
//     var34.setShape(100, var40);
//     var34.clear();
//     java.awt.Shape var44 = var34.getShape((-1));
//     int var45 = var34.size();
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, 1.0d);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var48);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, (-1.0d), 100.0d);
//     boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var48, var58);
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.rotateShape(var58, (-1.0d), 1.0f, 10.0f);
//     var34.setShape(0, var58);
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.clone(var58);
//     var28.setShape(101, var68);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.clone(var73);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var73, 0.0d, 0.0d);
//     var28.setShape(100, var73);
//     java.lang.Object var79 = var28.clone();
//     
//     // Checks the contract:  equals-hashcode on var31 and var79
//     assertTrue("Contract failed: equals-hashcode on var31 and var79", var31.equals(var79) ? var31.hashCode() == var79.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var31 and var79.", var31.equals(var79) == var79.equals(var31));
// 
//   }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test298"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 100.0d, 0.0d);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 100.0d, (-1.0d));
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var33);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 1.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test299"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    java.lang.Object var12 = var0.clone();
    var0.clear();
    int var14 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test300"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    org.jfree.chart.util.ShapeList var64 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var67, 0.0d, 1.0d);
    var64.setShape(100, var70);
    var64.clear();
    java.awt.Shape var74 = var64.getShape(0);
    boolean var75 = var37.equals((java.lang.Object)var64);
    java.awt.Shape var77 = var37.getShape(101);
    int var78 = var37.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test301"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
    boolean var43 = var0.equals((java.lang.Object)var39);
    org.jfree.chart.util.ShapeList var44 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 0.0d, 1.0f, 10.0f);
    boolean var51 = var44.equals((java.lang.Object)var46);
    java.awt.Shape var52 = null;
    boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var46, var52);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var46);
    boolean var55 = var0.equals((java.lang.Object)var54);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.rotateShape(var60, 0.0d, 1.0f, (-1.0f));
    boolean var65 = org.jfree.chart.util.ShapeUtilities.equal(var58, var60);
    org.jfree.chart.util.ShapeList var66 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 0.0d, 1.0d);
    var66.setShape(100, var72);
    var66.clear();
    java.awt.Shape var76 = var66.getShape((-1));
    java.awt.Shape var78 = var66.getShape((-1));
    java.lang.Object var79 = var66.clone();
    boolean var80 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var65, (java.lang.Object)var66);
    org.jfree.chart.util.ShapeList var81 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var83 = var81.getShape(100);
    org.jfree.chart.util.ShapeList var84 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var85 = null;
    boolean var86 = var84.equals(var85);
    java.lang.Object var87 = var84.clone();
    boolean var88 = var81.equals((java.lang.Object)var84);
    java.lang.Object var89 = var81.clone();
    boolean var90 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var65, (java.lang.Object)var81);
    java.lang.Object var91 = var81.clone();
    boolean var92 = var0.equals((java.lang.Object)var81);
    java.lang.Object var93 = var81.clone();
    java.lang.Object var94 = var81.clone();
    java.lang.Object var95 = var81.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test302"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 100.0d, (-1.0d));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 1.0d, 0.0f, 100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-1), var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test303"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var0.setShape(100, var6);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    var0.setShape(10, var11);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test304"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var0.setShape(10, var13);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var21);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, (-1.0d), 100.0d);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var26);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var16, var26);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    boolean var33 = var0.equals((java.lang.Object)var32);
    int var34 = var0.size();
    java.lang.Object var35 = var0.clone();
    java.awt.Shape var37 = var0.getShape(102);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test305() {}
//   public void test305() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test305"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = var0.clone();
//     var0.clear();
//     java.awt.Shape var4 = var0.getShape(100);
//     var0.clear();
//     java.lang.Object var6 = var0.clone();
//     org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
//     var7.setShape(100, var13);
//     var7.clear();
//     java.lang.Object var16 = var7.clone();
//     var7.clear();
//     int var18 = var7.size();
//     java.lang.Object var19 = var7.clone();
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, (-1.0d), 100.0d);
//     boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var22, var24);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 10.0d, 1.0d);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var31, var34);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 1.0d, 100.0f, 1.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
//     var7.setShape(1, var39);
//     boolean var42 = var0.equals((java.lang.Object)var7);
//     
//     // Checks the contract:  equals-hashcode on var0 and var7
//     assertTrue("Contract failed: equals-hashcode on var0 and var7", var0.equals(var7) ? var0.hashCode() == var7.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var7.", var0.equals(var7) == var7.equals(var0));
// 
//   }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test306"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    var0.clear();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 100.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 1.0d, 0.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    boolean var34 = var0.equals((java.lang.Object)var31);
    java.lang.Object var35 = var0.clone();
    java.lang.Object var36 = var0.clone();
    java.lang.Object var37 = null;
    boolean var38 = var0.equals(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test307"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = var5.getShape(100);
    java.lang.Object var8 = var5.clone();
    var5.clear();
    boolean var10 = var0.equals((java.lang.Object)var5);
    java.awt.Shape var12 = var0.getShape(1);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var23.setShape(100, var29);
    var23.clear();
    int var32 = var23.size();
    java.lang.Object var33 = null;
    boolean var34 = var23.equals(var33);
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, 0.0d, 1.0f, 10.0f);
    boolean var42 = var35.equals((java.lang.Object)var37);
    java.awt.Shape var44 = var35.getShape(100);
    var35.clear();
    org.jfree.chart.util.ShapeList var46 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 0.0d, 1.0d);
    var46.setShape(100, var52);
    var46.clear();
    java.lang.Object var55 = var46.clone();
    var46.clear();
    boolean var58 = var46.equals((java.lang.Object)0);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.clone(var60);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 0.0d, 1.0d);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.clone(var63);
    java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.rotateShape(var63, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var73, (-1.0d), 100.0d);
    boolean var77 = org.jfree.chart.util.ShapeUtilities.equal(var63, var73);
    boolean var78 = org.jfree.chart.util.ShapeUtilities.equal(var61, var63);
    boolean var79 = var46.equals((java.lang.Object)var78);
    java.lang.Object var80 = var46.clone();
    boolean var81 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var35, var80);
    boolean var82 = var23.equals(var80);
    var23.clear();
    boolean var84 = org.jfree.chart.util.ObjectUtilities.equal(var22, (java.lang.Object)var23);
    var23.clear();
    boolean var86 = var0.equals((java.lang.Object)var23);
    java.lang.Object var87 = var23.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test308"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    java.io.ObjectOutputStream var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test309"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var1 = null;
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var1, 10.0d, 100.0f, 0.0f);
// 
//   }

  public void test310() {}
//   public void test310() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test310"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var15 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var17);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var17);
//     boolean var24 = var0.equals((java.lang.Object)var17);
//     org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var27 = var25.getShape(0);
//     var25.clear();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
//     var25.setShape(1, var31);
//     java.lang.Object var39 = var25.clone();
//     java.awt.Shape var41 = var25.getShape(0);
//     java.lang.Object var42 = var25.clone();
//     boolean var43 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, var42);
//     
//     // Checks the contract:  equals-hashcode on var0 and var25
//     assertTrue("Contract failed: equals-hashcode on var0 and var25", var0.equals(var25) ? var0.hashCode() == var25.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var25.", var0.equals(var25) == var25.equals(var0));
//     
//     // Checks the contract:  equals-hashcode on var9 and var39
//     assertTrue("Contract failed: equals-hashcode on var9 and var39", var9.equals(var39) ? var9.hashCode() == var39.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var9 and var42
//     assertTrue("Contract failed: equals-hashcode on var9 and var42", var9.equals(var42) ? var9.hashCode() == var42.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var39
//     assertTrue("Contract failed: equals-hashcode on var15 and var39", var15.equals(var39) ? var15.hashCode() == var39.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var42
//     assertTrue("Contract failed: equals-hashcode on var15 and var42", var15.equals(var42) ? var15.hashCode() == var42.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var39.", var9.equals(var39) == var39.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var42.", var9.equals(var42) == var42.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var15 and var39.", var15.equals(var39) == var39.equals(var15));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var15 and var42.", var15.equals(var42) == var42.equals(var15));
// 
//   }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test311"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
    var0.setShape(0, var27);
    var0.clear();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, (-1.0d));
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 10.0d, 0.0d);
    boolean var39 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)0.0d);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test312"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, (-1.0f));
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.awt.Shape var20 = var10.getShape((-1));
    java.awt.Shape var22 = var10.getShape((-1));
    java.lang.Object var23 = var10.clone();
    boolean var24 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var10);
    org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = var25.getShape(100);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var29 = null;
    boolean var30 = var28.equals(var29);
    java.lang.Object var31 = var28.clone();
    boolean var32 = var25.equals((java.lang.Object)var28);
    java.lang.Object var33 = var25.clone();
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var25);
    int var35 = var25.size();
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, (-1.0d), 100.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, 1.0d, 10.0f, (-1.0f));
    boolean var45 = var25.equals((java.lang.Object)var44);
    var25.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test313"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    java.awt.Shape var11 = var0.getShape(100);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(100.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var18);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 0.0d, 1.0f, (-1.0f));
    boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var22, var24);
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
    var30.setShape(100, var36);
    var30.clear();
    java.awt.Shape var40 = var30.getShape((-1));
    java.awt.Shape var42 = var30.getShape((-1));
    java.lang.Object var43 = var30.clone();
    boolean var44 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var45 = var30.clone();
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 0.0d, 1.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var47);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var47);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.clone(var47);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, (-1.0d), 100.0d);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.rotateShape(var58, 0.0d, (-1.0f), 10.0f);
    boolean var63 = org.jfree.chart.util.ShapeUtilities.equal(var47, var58);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 0.0d, (-1.0d));
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 1.0d, 0.0d);
    boolean var70 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var30, (java.lang.Object)var58);
    java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 10.0d, 100.0d);
    boolean var74 = org.jfree.chart.util.ShapeUtilities.equal(var18, var73);
    boolean var75 = var0.equals((java.lang.Object)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test314"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.lang.Object var3 = null;
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var7.setShape(100, var13);
    var7.clear();
    java.lang.Object var16 = var7.clone();
    int var17 = var7.size();
    java.awt.Shape var19 = var7.getShape(0);
    boolean var21 = var7.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var23.setShape(100, var29);
    var23.clear();
    java.lang.Object var32 = var23.clone();
    var23.clear();
    boolean var35 = var23.equals((java.lang.Object)0);
    boolean var36 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var23);
    java.lang.Object var37 = var23.clone();
    boolean var38 = var7.equals(var37);
    org.jfree.chart.util.ShapeList var39 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var41, 0.0d, 1.0f, 10.0f);
    boolean var46 = var39.equals((java.lang.Object)var41);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, 1.0d);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var48);
    boolean var53 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var41, (java.lang.Object)var48);
    boolean var54 = var7.equals((java.lang.Object)var48);
    boolean var55 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var7);
    boolean var56 = org.jfree.chart.util.ObjectUtilities.equal(var3, (java.lang.Object)var6);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    boolean var58 = org.jfree.chart.util.ShapeUtilities.equal(var2, var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test315"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var3 = var2.clone();
    var2.clear();
    java.awt.Shape var6 = var2.getShape(100);
    var2.clear();
    boolean var8 = var0.equals((java.lang.Object)var2);
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    var9.setShape(100, var15);
    var9.clear();
    java.awt.Shape var19 = var9.getShape(0);
    java.lang.Object var20 = var9.clone();
    boolean var21 = var0.equals((java.lang.Object)var9);
    java.lang.Object var22 = var0.clone();
    java.lang.Object var23 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test316"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 0.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var5);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test317"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
    var1.setShape(101, var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test318"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 100.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var3.setShape(100, var9);
    var3.clear();
    java.awt.Shape var13 = var3.getShape((-1));
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    var3.setShape(100, var17);
    boolean var19 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var17);
    java.io.ObjectOutputStream var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test319"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.lang.Object var3 = var0.clone();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test320"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.lang.Object var13 = var0.clone();
    boolean var15 = var0.equals((java.lang.Object)0.0d);
    int var16 = var0.size();
    int var17 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 101);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test321"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.lang.Object var19 = var10.clone();
    var10.clear();
    boolean var22 = var10.equals((java.lang.Object)0);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    boolean var26 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var10, (java.lang.Object)var25);
    boolean var27 = var0.equals((java.lang.Object)var10);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test322"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 1.0f, 10.0f);
    boolean var24 = var17.equals((java.lang.Object)var19);
    boolean var25 = var0.equals((java.lang.Object)var19);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 0.0d, 1.0f, 10.0f);
    boolean var34 = var27.equals((java.lang.Object)var29);
    java.awt.Shape var35 = null;
    boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var29, var35);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 100.0d, 1.0d);
    boolean var41 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var26, (java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test323"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var5 = var3.getShape(0);
    int var6 = var3.size();
    boolean var7 = var0.equals((java.lang.Object)var6);
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var9 = var8.clone();
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var13);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, (-1.0d), 100.0d);
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var13, var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, (-1.0d));
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 100.0d, 0.0d);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 1.0d, 0.0f, (-1.0f));
    org.jfree.chart.util.ShapeList var47 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var48 = var47.clone();
    var47.clear();
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 10.0d, (-1.0d));
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var51);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 10.0d, 1.0d);
    boolean var59 = var47.equals((java.lang.Object)var55);
    boolean var60 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var47);
    boolean var61 = var0.equals((java.lang.Object)var47);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.clone(var63);
    java.lang.Object var65 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var63);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 0.0d, 1.0d);
    boolean var73 = org.jfree.chart.util.ShapeUtilities.equal(var67, var72);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var77, (-1.0d), 100.0d);
    boolean var81 = org.jfree.chart.util.ShapeUtilities.equal(var75, var77);
    boolean var82 = org.jfree.chart.util.ShapeUtilities.equal(var67, var77);
    java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.clone(var77);
    java.awt.Shape var84 = org.jfree.chart.util.ShapeUtilities.clone(var77);
    java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.clone(var84);
    boolean var86 = org.jfree.chart.util.ShapeUtilities.equal(var63, var85);
    java.awt.Shape var89 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var85, 0.0d, 1.0d);
    org.jfree.chart.util.ShapeList var90 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var92 = var90.getShape(0);
    java.lang.Object var93 = var90.clone();
    boolean var94 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var90);
    java.lang.Object var95 = var90.clone();
    boolean var96 = var47.equals((java.lang.Object)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test324"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    java.lang.Object var7 = var0.clone();
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
    var8.setShape(100, var14);
    var8.clear();
    java.lang.Object var17 = var8.clone();
    int var18 = var8.size();
    java.awt.Shape var20 = var8.getShape(0);
    boolean var22 = var8.equals((java.lang.Object)(short)(-1));
    java.lang.Object var23 = var8.clone();
    int var24 = var8.size();
    org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    var25.setShape(100, var31);
    var25.clear();
    int var34 = var25.size();
    boolean var35 = var8.equals((java.lang.Object)var34);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, (-1.0d), 100.0d);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var37, var39);
    boolean var44 = var8.equals((java.lang.Object)var39);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 10.0d, 0.0d);
    boolean var48 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var47);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 1.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test325"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, (-1.0d));
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 10.0d);
    org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
    var32.setShape(100, var38);
    var32.clear();
    java.lang.Object var41 = var32.clone();
    var32.clear();
    boolean var44 = var32.equals((java.lang.Object)0);
    boolean var45 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var32);
    java.lang.Object var46 = var32.clone();
    org.jfree.chart.util.ShapeList var47 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var48 = var47.clone();
    var47.clear();
    boolean var50 = var32.equals((java.lang.Object)var47);
    java.lang.Object var51 = var32.clone();
    var32.clear();
    java.awt.Shape var54 = var32.getShape(1);
    org.jfree.chart.util.ShapeList var55 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 0.0d, 1.0d);
    var55.setShape(100, var61);
    var55.clear();
    java.lang.Object var64 = var55.clone();
    int var65 = var55.size();
    java.awt.Shape var67 = var55.getShape(0);
    boolean var69 = var55.equals((java.lang.Object)(short)(-1));
    java.lang.Object var70 = var55.clone();
    int var71 = var55.size();
    org.jfree.chart.util.ShapeList var72 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.rotateShape(var74, 0.0d, 1.0f, 10.0f);
    boolean var79 = var72.equals((java.lang.Object)var74);
    boolean var80 = var55.equals((java.lang.Object)var74);
    java.awt.Shape var81 = org.jfree.chart.util.ShapeUtilities.clone(var74);
    boolean var82 = var32.equals((java.lang.Object)var81);
    boolean var83 = org.jfree.chart.util.ShapeUtilities.equal(var9, var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test326"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, 0.0d, 1.0f, (-1.0f));
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 1.0d, 10.0f, 0.0f);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var23, var26);
    org.jfree.chart.util.RectangleAnchor var39 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, var39, 10.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test327"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var4);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 100.0d, 0.0f, (-1.0f));
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 100.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var28 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)100.0d);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test328"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var5 = var3.getShape(0);
    int var6 = var3.size();
    boolean var7 = var0.equals((java.lang.Object)var6);
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var9 = var8.clone();
    boolean var10 = var0.equals(var9);
    var0.clear();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test329"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 10.0d, 10.0f, 0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, 10.0d);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
    var27.setShape(100, var33);
    var27.clear();
    java.lang.Object var36 = var27.clone();
    int var37 = var27.size();
    java.awt.Shape var39 = var27.getShape(0);
    boolean var41 = var27.equals((java.lang.Object)(short)(-1));
    java.lang.Object var42 = var27.clone();
    java.lang.Object var43 = var27.clone();
    org.jfree.chart.util.ShapeList var45 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, 1.0d);
    var45.setShape(100, var51);
    var45.clear();
    int var54 = var45.size();
    int var55 = var45.size();
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var45.setShape(0, var59);
    var27.setShape(11, var59);
    boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var23, var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test330"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
    var0.setShape(0, var27);
    var0.clear();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, (-1.0d));
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 10.0d, 0.0d);
    boolean var39 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)0.0d);
    java.lang.Object var40 = var0.clone();
    java.lang.Object var41 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test331"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.lang.Object var19 = var10.clone();
    var10.clear();
    boolean var22 = var10.equals((java.lang.Object)0);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    boolean var26 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var10, (java.lang.Object)var25);
    boolean var27 = var0.equals((java.lang.Object)var10);
    java.lang.Object var28 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test332"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    int var6 = var0.size();
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
    var8.setShape(100, var14);
    var8.clear();
    java.lang.Object var17 = var8.clone();
    var8.clear();
    boolean var20 = var8.equals((java.lang.Object)0);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var22 = var8.clone();
    var8.clear();
    java.lang.Object var24 = var8.clone();
    boolean var25 = var0.equals((java.lang.Object)var8);
    java.awt.Shape var27 = var0.getShape(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test333"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 100.0d, (-1.0d));
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    java.lang.Object var27 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var25);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var22, var25);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), (-1.0d));
    boolean var32 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)100.0d, (java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test334"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, (-1.0d), 100.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, (-1.0d));
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, (-1.0d), 10.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test335"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, 0.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createUpTriangle((-1.0f));
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var39, var44);
    org.jfree.chart.util.ShapeList var46 = new org.jfree.chart.util.ShapeList();
    var46.clear();
    java.awt.Shape var49 = var46.getShape(1);
    int var50 = var46.size();
    java.awt.Shape var52 = var46.getShape(0);
    boolean var53 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var45, (java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test336"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 10.0d, 1.0d);
    boolean var18 = var0.equals((java.lang.Object)var17);
    java.lang.Object var19 = var0.clone();
    java.lang.Object var20 = var0.clone();
    java.lang.Object var21 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test337"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.lang.Object var30 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test338"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 100.0d, 1.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 100.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test339"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var0.setShape(10, var11);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var11);
//     org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
//     var14.setShape(100, var20);
//     var14.clear();
//     int var23 = var14.size();
//     java.lang.Object var24 = null;
//     boolean var25 = var14.equals(var24);
//     java.awt.Shape var27 = var14.getShape(1);
//     java.lang.Object var28 = null;
//     boolean var29 = var14.equals(var28);
//     boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var11, (java.lang.Object)var14);
//     
//     // Checks the contract:  equals-hashcode on var14 and var0
//     assertTrue("Contract failed: equals-hashcode on var14 and var0", var14.equals(var0) ? var14.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var0.", var14.equals(var0) == var0.equals(var14));
// 
//   }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test340"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var0, var2);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var0, 1.0d, (-1.0f), 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test341"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test342"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 100.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var10, var13);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, 1.0d, 100.0f, 1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, (-1.0d), 100.0d);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var24, var34);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var22, var24);
    java.lang.Object var40 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var24);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 10.0d, (-1.0d));
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var45);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, 1.0d);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var48);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, (-1.0d), 100.0d);
    boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var48, var58);
    boolean var63 = org.jfree.chart.util.ShapeUtilities.equal(var46, var48);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, (-1.0d), 100.0f, 10.0f);
    boolean var68 = org.jfree.chart.util.ShapeUtilities.equal(var43, var48);
    boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var19, var43);
    java.io.ObjectOutputStream var70 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var43, var70);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test343"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var4);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 100.0d, 0.0f, (-1.0f));
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, (-1.0d), 1.0f, 0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test344"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 0.0d, 10.0f, 100.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 1.0d, (-1.0d));
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test345"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 100.0f, 100.0f);
    org.jfree.chart.util.RectangleAnchor var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, var6, 100.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test346"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    java.awt.Shape var6 = var0.getShape((-1));
    int var7 = var0.size();
    java.awt.Shape var9 = var0.getShape(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test347"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 0.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 10.0f, 0.0f);
    org.jfree.chart.util.RectangleAnchor var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, var11, 0.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test348() {}
//   public void test348() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test348"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var10);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 1.0d, (-1.0d));
//     boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var10, var24);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 10.0d);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 10.0d, 10.0f, (-1.0f));
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var31);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var31, 100.0d, 0.0f, 0.0f);
// 
//   }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test349"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    var0.clear();
    java.lang.Object var19 = var0.clone();
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    var20.setShape(100, var26);
    var20.clear();
    java.awt.Shape var30 = var20.getShape((-1));
    java.awt.Shape var32 = var20.getShape((-1));
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var34);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 0.0d, (-1.0d));
    boolean var39 = var20.equals((java.lang.Object)var38);
    boolean var40 = var0.equals((java.lang.Object)var39);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 1.0d, 100.0d);
    boolean var48 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test350"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 100.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 1.0d, 0.0d);
    boolean var22 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, (java.lang.Object)var21);
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var24 = null;
    boolean var25 = var23.equals(var24);
    java.lang.Object var26 = var23.clone();
    java.lang.Object var27 = var23.clone();
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 0.0d, 1.0f, 10.0f);
    var23.setShape(1, var30);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), (-1.0d));
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 100.0d, 0.0d);
    boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var38, var46);
    boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var1, var38);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.io.ObjectOutputStream var50 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var1, var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test351() {}
//   public void test351() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test351"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var0.setShape(10, var11);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     var13.clear();
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 0.0d);
//     var13.setShape(0, var32);
//     boolean var34 = var0.equals((java.lang.Object)var32);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 100.0d, 100.0d);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 100.0d, (-1.0f), 1.0f);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.rotateShape(var49, 0.0d, 10.0f, 0.0f);
//     var0.setShape(101, var53);
//     java.lang.Object var55 = var0.clone();
//     
//     // Checks the contract:  equals-hashcode on var3 and var55
//     assertTrue("Contract failed: equals-hashcode on var3 and var55", var3.equals(var55) ? var3.hashCode() == var55.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var55
//     assertTrue("Contract failed: equals-hashcode on var22 and var55", var22.equals(var55) ? var22.hashCode() == var55.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var55.", var3.equals(var55) == var55.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var22 and var55.", var22.equals(var55) == var55.equals(var22));
// 
//   }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test352"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test353"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, 1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    var0.setShape(102, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test354"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 10.0d, 1.0d);
    boolean var18 = var0.equals((java.lang.Object)var17);
    java.io.ObjectOutputStream var19 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var17, var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test355"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    java.lang.Object var18 = var14.clone();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, 0.0d, 1.0f, 10.0f);
    var14.setShape(1, var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), (-1.0d));
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var10, var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test356"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, (-1.0d));
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, (-1.0d));
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var11, var15);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var1, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test357"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.RectangleAnchor var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, var5, 1.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test358"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    java.awt.Shape var18 = null;
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var16, var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test359() {}
//   public void test359() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test359"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     java.lang.Object var13 = var0.clone();
//     org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 0.0d, 1.0f, 10.0f);
//     boolean var22 = var15.equals((java.lang.Object)var17);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var24);
//     boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)var24);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 1.0d, (-1.0d));
//     boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var24, var38);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 100.0d, 0.0d);
//     boolean var49 = org.jfree.chart.util.ShapeUtilities.equal(var24, var48);
//     org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
//     var50.setShape(100, var56);
//     var50.clear();
//     int var59 = var50.size();
//     java.lang.Object var60 = null;
//     boolean var61 = var50.equals(var60);
//     int var62 = var50.size();
//     java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
//     boolean var65 = var50.equals((java.lang.Object)var64);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.rotateShape(var64, 0.0d, 1.0f, 1.0f);
//     boolean var70 = org.jfree.chart.util.ShapeUtilities.equal(var24, var64);
//     java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.clone(var24);
//     var0.setShape(11, var71);
//     
//     // Checks the contract:  equals-hashcode on var15 and var0
//     assertTrue("Contract failed: equals-hashcode on var15 and var0", var15.equals(var0) ? var15.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var50 and var0
//     assertTrue("Contract failed: equals-hashcode on var50 and var0", var50.equals(var0) ? var50.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var15 and var0.", var15.equals(var0) == var0.equals(var15));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var50 and var0.", var50.equals(var0) == var0.equals(var50));
// 
//   }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test360"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 100.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 1.0d, 0.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var4, var20);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 10.0d, 10.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test361"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 100.0d, 0.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 1.0d, 0.0f, (-1.0f));
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var36 = var35.clone();
    var35.clear();
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 10.0d, (-1.0d));
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 10.0d, 1.0d);
    boolean var47 = var35.equals((java.lang.Object)var43);
    boolean var48 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var30, (java.lang.Object)var35);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 100.0d, 10.0d);
    java.lang.Object var52 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test362"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 10.0d, 1.0f, 0.0f);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
    var27.setShape(100, var33);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var33, var39);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var22, var33);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), 10.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 1.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test363"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 100.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 10.0f, 0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 1.0d, 1.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test364"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    var0.clear();
    java.lang.Object var19 = var0.clone();
    java.lang.Object var20 = var0.clone();
    var0.clear();
    java.lang.Object var22 = var0.clone();
    java.lang.Object var23 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test365"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var5, 0.0d, 1.0f, 10.0f);
    boolean var10 = var3.equals((java.lang.Object)var5);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    boolean var17 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var12);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var5, 100.0d, 100.0f, 1.0f);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var2, var5);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 100.0d, 1.0d);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var25, var35);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 10.0d, 0.0f, 1.0f);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var5, var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test366"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 100.0d, 100.0f, (-1.0f));
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 1.0d, (-1.0d));
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test367"); }


    java.lang.Object var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    int var10 = var1.size();
    java.lang.Object var11 = null;
    boolean var12 = var1.equals(var11);
    java.lang.Object var13 = var1.clone();
    int var14 = var1.size();
    java.lang.Object var15 = var1.clone();
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal(var0, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test368"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = var0.clone();
    java.awt.Shape var7 = var0.getShape(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test369() {}
//   public void test369() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test369"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = var0.clone();
//     var0.clear();
//     java.awt.Shape var4 = var0.getShape(100);
//     org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
//     var5.setShape(100, var11);
//     var5.clear();
//     java.lang.Object var14 = var5.clone();
//     var5.clear();
//     boolean var17 = var5.equals((java.lang.Object)0);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
//     boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var20);
//     int var22 = var5.size();
//     boolean var23 = var0.equals((java.lang.Object)var22);
//     org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var26 = var24.getShape(100);
//     org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var28 = null;
//     boolean var29 = var27.equals(var28);
//     java.lang.Object var30 = var27.clone();
//     boolean var31 = var24.equals((java.lang.Object)var27);
//     java.lang.Object var32 = var24.clone();
//     boolean var33 = var0.equals(var32);
//     org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
//     var35.setShape(100, var41);
//     var35.clear();
//     int var44 = var35.size();
//     var35.clear();
//     java.awt.Shape var47 = var35.getShape((-1));
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var54);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.clone(var54);
//     boolean var57 = org.jfree.chart.util.ShapeUtilities.equal(var51, var54);
//     var35.setShape(0, var54);
//     var0.setShape(0, var54);
//     
//     // Checks the contract:  equals-hashcode on var5 and var0
//     assertTrue("Contract failed: equals-hashcode on var5 and var0", var5.equals(var0) ? var5.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var5 and var35
//     assertTrue("Contract failed: equals-hashcode on var5 and var35", var5.equals(var35) ? var5.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var24 and var0
//     assertTrue("Contract failed: equals-hashcode on var24 and var0", var24.equals(var0) ? var24.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var24 and var35
//     assertTrue("Contract failed: equals-hashcode on var24 and var35", var24.equals(var35) ? var24.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var0
//     assertTrue("Contract failed: equals-hashcode on var27 and var0", var27.equals(var0) ? var27.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var35
//     assertTrue("Contract failed: equals-hashcode on var27 and var35", var27.equals(var35) ? var27.hashCode() == var35.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var5 and var0.", var5.equals(var0) == var0.equals(var5));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var5 and var35.", var5.equals(var35) == var35.equals(var5));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var24 and var0.", var24.equals(var0) == var0.equals(var24));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var24 and var35.", var24.equals(var35) == var35.equals(var24));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var27 and var0.", var27.equals(var0) == var0.equals(var27));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var27 and var35.", var27.equals(var35) == var35.equals(var27));
// 
//   }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test370"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, (-1.0d));
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 0.0d, 1.0f, (-1.0f));
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var27, var29);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 1.0d, 10.0f, 0.0f);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var24, var27);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var0, var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test371"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 10.0f, 1.0f);
    var0.setShape(1, var23);
    org.jfree.chart.util.ShapeList var26 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var27 = null;
    boolean var28 = var26.equals(var27);
    java.lang.Object var29 = var26.clone();
    java.lang.Object var30 = var26.clone();
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var33, 0.0d, 1.0f, 10.0f);
    var26.setShape(1, var33);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, (-1.0d), (-1.0d));
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 100.0d, 0.0d);
    boolean var50 = org.jfree.chart.util.ShapeUtilities.equal(var41, var49);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var41, 10.0d, 100.0f, 100.0f);
    var0.setShape(0, var54);
    java.awt.Shape var57 = var0.getShape(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test372"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
    var0.setShape(10, var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var41 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)10);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test373"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var16 = var0.getShape(0);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
    boolean var40 = var0.equals((java.lang.Object)var39);
    java.lang.Object var41 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(100.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var44);
    var0.setShape(0, var44);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, (-1.0d), (-1.0d));
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, (-1.0d), 100.0d);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.rotateShape(var56, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, 0.0d, 100.0d);
    boolean var64 = org.jfree.chart.util.ShapeUtilities.equal(var51, var63);
    boolean var65 = var0.equals((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test374"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 100.0d, 1.0f, 100.0f);
    java.lang.Object var7 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test375"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.lang.Object var7 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var1);
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
    var8.setShape(100, var14);
    var8.clear();
    int var17 = var8.size();
    java.lang.Object var18 = null;
    boolean var19 = var8.equals(var18);
    java.awt.Shape var21 = var8.getShape(1);
    org.jfree.chart.util.ShapeList var22 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var24 = var22.getShape(100);
    org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var26 = null;
    boolean var27 = var25.equals(var26);
    java.lang.Object var28 = var25.clone();
    boolean var29 = var22.equals((java.lang.Object)var25);
    java.lang.Object var30 = var25.clone();
    java.lang.Object var31 = var25.clone();
    boolean var32 = var8.equals((java.lang.Object)var25);
    java.lang.Object var33 = var8.clone();
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal(var7, (java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test376"); }


    java.lang.Object var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = var1.getShape(100);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var5 = null;
    boolean var6 = var4.equals(var5);
    java.lang.Object var7 = var4.clone();
    boolean var8 = var1.equals((java.lang.Object)var4);
    var4.clear();
    boolean var10 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var4);
    java.lang.Object var11 = var4.clone();
    java.lang.Object var12 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test377"); }


    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 1.0d, 10.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var11, var16);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), 100.0d);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var19, var21);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var11, var21);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, 100.0d, 0.0f, 0.0f);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var9, var32);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var3, var9);
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    var35.setShape(100, var41);
    var35.clear();
    java.lang.Object var44 = var35.clone();
    var35.clear();
    boolean var47 = var35.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var48 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var49 = var48.clone();
    java.lang.Object var50 = var48.clone();
    boolean var51 = var35.equals((java.lang.Object)var48);
    java.lang.Object var52 = var48.clone();
    java.lang.Object var53 = var48.clone();
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var57, 0.0d, 1.0d);
    boolean var61 = org.jfree.chart.util.ShapeUtilities.equal(var55, var60);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var65, (-1.0d), 100.0d);
    boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var63, var65);
    boolean var70 = org.jfree.chart.util.ShapeUtilities.equal(var55, var65);
    java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.clone(var65);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.clone(var65);
    java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.rotateShape(var65, 100.0d, 0.0f, 0.0f);
    java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var65, 100.0d, 100.0d);
    boolean var80 = var48.equals((java.lang.Object)var79);
    boolean var81 = org.jfree.chart.util.ShapeUtilities.equal(var3, var79);
    boolean var82 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)true, (java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test378"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    var0.clear();
    java.lang.Object var2 = var0.clone();
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, (-1.0f));
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var5, var7);
    boolean var13 = var0.equals((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test379"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, 0.0d);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 100.0d, (-1.0f), 0.0f);
    boolean var11 = org.jfree.chart.util.ShapeUtilities.equal(var0, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test380"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = var14.getShape(100);
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var18 = null;
    boolean var19 = var17.equals(var18);
    java.lang.Object var20 = var17.clone();
    boolean var21 = var14.equals((java.lang.Object)var17);
    java.lang.Object var22 = var17.clone();
    java.lang.Object var23 = var17.clone();
    boolean var24 = var0.equals((java.lang.Object)var17);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 0.0d, 1.0d);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, (-1.0d), 100.0d);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var29, var39);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var27, var29);
    java.lang.Object var45 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var29);
    boolean var46 = var0.equals(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test381() {}
//   public void test381() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test381"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, (-1.0d), 100.0d);
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, 1.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var2, 0.0d, 1.0f, 1.0f);
// 
//   }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test382"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.lang.Object var28 = null;
    boolean var29 = var0.equals(var28);
    java.awt.Shape var31 = var0.getShape(100);
    var0.clear();
    java.lang.Object var33 = var0.clone();
    int var34 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test383"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    java.awt.Shape var3 = var0.getShape(0);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    var0.setShape(100, var6);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 100.0d, 0.0f, 0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test384"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    int var12 = var0.size();
    java.lang.Object var13 = var0.clone();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 1.0f, (-1.0f));
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var16, var18);
    boolean var24 = var0.equals((java.lang.Object)var16);
    java.lang.Object var25 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test385"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = var0.clone();
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.lang.Object var21 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var19);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var19);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), (-1.0d));
    var0.setShape(1, var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test386"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    java.lang.Object var18 = var13.clone();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, (-1.0d), 100.0d);
    boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var23, var33);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var21, var23);
    org.jfree.chart.util.ShapeList var39 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var41, 0.0d, 1.0f, 10.0f);
    boolean var46 = var39.equals((java.lang.Object)var41);
    java.awt.Shape var47 = null;
    boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var41, var47);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    boolean var50 = org.jfree.chart.util.ShapeUtilities.equal(var23, var41);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var41, (-1.0d), 0.0f, 0.0f);
    boolean var55 = var13.equals((java.lang.Object)(-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test387"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    java.lang.Object var12 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, 1.0f, 10.0f);
    boolean var20 = var13.equals((java.lang.Object)var15);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var23 = var13.equals((java.lang.Object)var22);
    java.lang.Object var24 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var13);
    boolean var25 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var27 = var0.getShape(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test388"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, 0.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var42);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 0.0d, (-1.0d));
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var42);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, (-1.0d), 100.0d);
    boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var49, var51);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 10.0d, 1.0d);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var58, var61);
    boolean var63 = org.jfree.chart.util.ShapeUtilities.equal(var42, var61);
    boolean var65 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)(short)0);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var67, 0.0d, 1.0d);
    java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.clone(var67);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.rotateShape(var67, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var75, 100.0d, 1.0d);
    boolean var79 = org.jfree.chart.util.ShapeUtilities.equal(var42, var78);
    boolean var80 = org.jfree.chart.util.ShapeUtilities.equal(var39, var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test389"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    java.lang.Object var12 = var0.clone();
    java.lang.Object var13 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test390"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, (-1.0f));
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var11 = var10.clone();
    var10.clear();
    java.awt.Shape var14 = var10.getShape(100);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var15.setShape(100, var21);
    var15.clear();
    java.lang.Object var24 = var15.clone();
    var15.clear();
    boolean var27 = var15.equals((java.lang.Object)0);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    boolean var31 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var15, (java.lang.Object)var30);
    int var32 = var15.size();
    boolean var33 = var10.equals((java.lang.Object)var32);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 0.0d, 1.0f, 10.0f);
    boolean var40 = var10.equals((java.lang.Object)var39);
    java.lang.Object var41 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var39);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 0.0d, 1.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, (-1.0d), 100.0d);
    boolean var57 = org.jfree.chart.util.ShapeUtilities.equal(var43, var53);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.rotateShape(var53, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var61, 0.0d, (-1.0d));
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.clone(var61);
    java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.rotateShape(var70, 0.0d, 1.0f, (-1.0f));
    boolean var75 = org.jfree.chart.util.ShapeUtilities.equal(var68, var70);
    java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.rotateShape(var68, 1.0d, 10.0f, 0.0f);
    boolean var80 = org.jfree.chart.util.ShapeUtilities.equal(var65, var68);
    boolean var81 = org.jfree.chart.util.ShapeUtilities.equal(var39, var68);
    boolean var82 = org.jfree.chart.util.ShapeUtilities.equal(var2, var68);
    java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var68, (-1.0d), 10.0d);
    java.lang.Object var86 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test391"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 1.0d, (-1.0f), (-1.0f));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test392() {}
//   public void test392() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test392"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     java.lang.Object var26 = var13.clone();
//     boolean var27 = var0.equals((java.lang.Object)var13);
//     int var28 = var13.size();
//     java.lang.Object var29 = var13.clone();
//     org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 0.0d, 1.0f, 10.0f);
//     boolean var37 = var30.equals((java.lang.Object)var32);
//     int var38 = var30.size();
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var41);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var41);
//     boolean var44 = var30.equals((java.lang.Object)var41);
//     int var45 = var30.size();
//     boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var13, (java.lang.Object)var45);
//     org.jfree.chart.util.ShapeList var48 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 0.0d, 1.0f, 10.0f);
//     boolean var55 = var48.equals((java.lang.Object)var50);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var58 = var48.equals((java.lang.Object)var57);
//     java.lang.Object var59 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var57);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var61, (-1.0d), 100.0d);
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.rotateShape(var64, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var68, 1.0d, (-1.0d));
//     boolean var72 = org.jfree.chart.util.ShapeUtilities.equal(var57, var71);
//     java.lang.Object var73 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var71);
//     java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var75, (-1.0d), 100.0d);
//     boolean var79 = org.jfree.chart.util.ShapeUtilities.equal(var71, var78);
//     var13.setShape(11, var71);
//     
//     // Checks the contract:  equals-hashcode on var0 and var13
//     assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var13
//     assertTrue("Contract failed: equals-hashcode on var30 and var13", var30.equals(var13) ? var30.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var48 and var13
//     assertTrue("Contract failed: equals-hashcode on var48 and var13", var48.equals(var13) ? var48.hashCode() == var13.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var13.", var0.equals(var13) == var13.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var30 and var13.", var30.equals(var13) == var13.equals(var30));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var48 and var13.", var48.equals(var13) == var13.equals(var48));
// 
//   }

  public void test393() {}
//   public void test393() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test393"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     java.lang.Object var26 = var13.clone();
//     boolean var27 = var0.equals((java.lang.Object)var13);
//     org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var29 = var28.clone();
//     var28.clear();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 10.0d, (-1.0d));
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var32);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 10.0d, 1.0d);
//     boolean var40 = var28.equals((java.lang.Object)var36);
//     boolean var41 = var0.equals((java.lang.Object)var28);
//     org.jfree.chart.util.ShapeList var43 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
//     var43.setShape(100, var49);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var53);
//     var43.setShape(0, var53);
//     java.awt.Shape var57 = var43.getShape(10);
//     java.awt.Shape var59 = var43.getShape((-1));
//     int var60 = var43.size();
//     java.awt.Shape var62 = var43.getShape(0);
//     java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
//     boolean var70 = org.jfree.chart.util.ShapeUtilities.equal(var64, var69);
//     java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var74, (-1.0d), 100.0d);
//     boolean var78 = org.jfree.chart.util.ShapeUtilities.equal(var72, var74);
//     boolean var79 = org.jfree.chart.util.ShapeUtilities.equal(var64, var74);
//     java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.clone(var74);
//     java.awt.Shape var81 = org.jfree.chart.util.ShapeUtilities.clone(var74);
//     boolean var82 = org.jfree.chart.util.ShapeUtilities.equal(var62, var81);
//     var0.setShape(0, var62);
//     
//     // Checks the contract:  equals-hashcode on var0 and var43
//     assertTrue("Contract failed: equals-hashcode on var0 and var43", var0.equals(var43) ? var0.hashCode() == var43.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var0
//     assertTrue("Contract failed: equals-hashcode on var13 and var0", var13.equals(var0) ? var13.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var43
//     assertTrue("Contract failed: equals-hashcode on var13 and var43", var13.equals(var43) ? var13.hashCode() == var43.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var0
//     assertTrue("Contract failed: equals-hashcode on var28 and var0", var28.equals(var0) ? var28.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var43
//     assertTrue("Contract failed: equals-hashcode on var28 and var43", var28.equals(var43) ? var28.hashCode() == var43.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var43.", var0.equals(var43) == var43.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var0.", var13.equals(var0) == var0.equals(var13));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var43.", var13.equals(var43) == var43.equals(var13));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var0.", var28.equals(var0) == var0.equals(var28));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var43.", var28.equals(var43) == var43.equals(var28));
// 
//   }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test394"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, (-1.0d));
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    int var7 = var6.size();
    boolean var9 = var6.equals((java.lang.Object)100.0d);
    boolean var11 = var6.equals((java.lang.Object)(-1));
    int var12 = var6.size();
    var6.clear();
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var16 = null;
    boolean var17 = var15.equals(var16);
    java.lang.Object var18 = var15.clone();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var15.setShape(100, var21);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 100.0d, 10.0d);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 100.0d, (-1.0d));
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    var6.setShape(1, var21);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var5, var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test395() {}
//   public void test395() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test395"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = var0.clone();
//     var0.clear();
//     java.awt.Shape var4 = var0.getShape(100);
//     org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var7 = var5.getShape(100);
//     java.lang.Object var8 = var5.clone();
//     var5.clear();
//     boolean var10 = var0.equals((java.lang.Object)var5);
//     java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var5);
//     org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     var12.setShape(100, var18);
//     var12.clear();
//     java.lang.Object var21 = var12.clone();
//     int var22 = var12.size();
//     java.awt.Shape var24 = var12.getShape(0);
//     boolean var26 = var12.equals((java.lang.Object)(short)(-1));
//     org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
//     var28.setShape(100, var34);
//     var28.clear();
//     java.lang.Object var37 = var28.clone();
//     var28.clear();
//     boolean var40 = var28.equals((java.lang.Object)0);
//     boolean var41 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var28);
//     java.lang.Object var42 = var28.clone();
//     boolean var43 = var12.equals(var42);
//     org.jfree.chart.util.ShapeList var44 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 0.0d, 1.0f, 10.0f);
//     boolean var51 = var44.equals((java.lang.Object)var46);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var53);
//     boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var46, (java.lang.Object)var53);
//     boolean var59 = var12.equals((java.lang.Object)var53);
//     var12.clear();
//     java.lang.Object var61 = var12.clone();
//     boolean var62 = var5.equals((java.lang.Object)var12);
//     org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
//     var63.setShape(100, var69);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.clone(var73);
//     var63.setShape(0, var73);
//     java.lang.Object var76 = var63.clone();
//     int var77 = var63.size();
//     java.awt.Shape var78 = null;
//     java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var80, (-1.0d), 100.0d);
//     java.awt.Shape var86 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var80, 0.0d, 1.0d);
//     java.awt.Shape var90 = org.jfree.chart.util.ShapeUtilities.rotateShape(var86, 1.0d, 10.0f, (-1.0f));
//     java.awt.Shape var94 = org.jfree.chart.util.ShapeUtilities.rotateShape(var90, 1.0d, 0.0f, 1.0f);
//     boolean var95 = org.jfree.chart.util.ShapeUtilities.equal(var78, var90);
//     boolean var96 = var63.equals((java.lang.Object)var90);
//     boolean var97 = var12.equals((java.lang.Object)var96);
//     
//     // Checks the contract:  equals-hashcode on var0 and var63
//     assertTrue("Contract failed: equals-hashcode on var0 and var63", var0.equals(var63) ? var0.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var5 and var63
//     assertTrue("Contract failed: equals-hashcode on var5 and var63", var5.equals(var63) ? var5.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var12 and var63
//     assertTrue("Contract failed: equals-hashcode on var12 and var63", var12.equals(var63) ? var12.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var63
//     assertTrue("Contract failed: equals-hashcode on var28 and var63", var28.equals(var63) ? var28.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var63
//     assertTrue("Contract failed: equals-hashcode on var44 and var63", var44.equals(var63) ? var44.hashCode() == var63.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var63.", var0.equals(var63) == var63.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var5 and var63.", var5.equals(var63) == var63.equals(var5));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var12 and var63.", var12.equals(var63) == var63.equals(var12));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var63.", var28.equals(var63) == var63.equals(var28));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var44 and var63.", var44.equals(var63) == var63.equals(var44));
//     
//     // Checks the contract:  equals-hashcode on var1 and var76
//     assertTrue("Contract failed: equals-hashcode on var1 and var76", var1.equals(var76) ? var1.hashCode() == var76.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var76
//     assertTrue("Contract failed: equals-hashcode on var8 and var76", var8.equals(var76) ? var8.hashCode() == var76.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var76
//     assertTrue("Contract failed: equals-hashcode on var11 and var76", var11.equals(var76) ? var11.hashCode() == var76.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var21 and var76
//     assertTrue("Contract failed: equals-hashcode on var21 and var76", var21.equals(var76) ? var21.hashCode() == var76.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var76
//     assertTrue("Contract failed: equals-hashcode on var37 and var76", var37.equals(var76) ? var37.hashCode() == var76.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var42 and var76
//     assertTrue("Contract failed: equals-hashcode on var42 and var76", var42.equals(var76) ? var42.hashCode() == var76.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var61 and var76
//     assertTrue("Contract failed: equals-hashcode on var61 and var76", var61.equals(var76) ? var61.hashCode() == var76.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var1 and var76.", var1.equals(var76) == var76.equals(var1));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var8 and var76.", var8.equals(var76) == var76.equals(var8));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var76.", var11.equals(var76) == var76.equals(var11));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var21 and var76.", var21.equals(var76) == var76.equals(var21));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var37 and var76.", var37.equals(var76) == var76.equals(var37));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var42 and var76.", var42.equals(var76) == var76.equals(var42));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var61 and var76.", var61.equals(var76) == var76.equals(var61));
// 
//   }

}
