
import junit.framework.*;

public class RandoopTest2 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test1"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 1.0d, 100.0d);
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var21 = null;
    boolean var22 = var20.equals(var21);
    java.lang.Object var23 = var20.clone();
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var25 = null;
    boolean var26 = var24.equals(var25);
    java.lang.Object var27 = var24.clone();
    var24.clear();
    java.awt.Shape var30 = var24.getShape(100);
    boolean var31 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var20, (java.lang.Object)var24);
    org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
    var32.setShape(100, var38);
    var32.clear();
    java.awt.Shape var42 = var32.getShape(100);
    java.lang.Object var43 = var32.clone();
    var32.clear();
    boolean var45 = var20.equals((java.lang.Object)var32);
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var20);
    org.jfree.chart.util.ShapeList var48 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 0.0d, 1.0d);
    var48.setShape(100, var54);
    var48.clear();
    int var57 = var48.size();
    var48.clear();
    java.lang.Object var59 = var48.clone();
    boolean var61 = var48.equals((java.lang.Object)'#');
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var64, (-1.0d), 0.0d);
    java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.rotateShape(var67, 0.0d, 10.0f, 1.0f);
    var48.setShape(1, var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.setShape((-1), var71);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test2"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    int var11 = var0.size();
    java.lang.Object var12 = var0.clone();
    java.lang.Object var13 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test3() {}
//   public void test3() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test3"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     int var2 = var1.size();
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var4 = var3.clone();
//     var3.clear();
//     java.awt.Shape var7 = var3.getShape(100);
//     var3.clear();
//     boolean var9 = var1.equals((java.lang.Object)var3);
//     int var10 = var1.size();
//     java.lang.Object var11 = var1.clone();
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var21);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, (-1.0d), 100.0d);
//     boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var26);
//     boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var16, var26);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 100.0d, 0.0f, 0.0f);
//     boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var14, var37);
//     boolean var39 = org.jfree.chart.util.ObjectUtilities.equal(var11, (java.lang.Object)var14);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var14, 0.0d, 10.0f, 1.0f);
// 
//   }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test4"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var8 = null;
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 1.0f, 1.0f);
    org.jfree.chart.util.RectangleAnchor var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, var15, 0.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test5"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    var4.setShape(0, var14);
    java.awt.Shape var18 = var4.getShape(10);
    var4.clear();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 100.0d, 1.0d);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 1.0d, 0.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    boolean var38 = var4.equals((java.lang.Object)var35);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var3, var35);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 1.0d, 0.0d);
    java.io.ObjectOutputStream var43 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var42, var43);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test6"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = var4.getShape(0);
    var4.clear();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var4.setShape(1, var10);
    java.lang.Object var18 = var4.clone();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), 100.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 1.0d, 10.0f, (-1.0f));
    var4.setShape(1, var27);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var27);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 100.0d, 0.0f, 1.0f);
    org.jfree.chart.util.RectangleAnchor var39 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, var39, 100.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test7"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.lang.Object var12 = var0.clone();
    var0.clear();
    java.lang.Object var14 = null;
    boolean var15 = var0.equals(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test8"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.lang.Object var13 = var0.clone();
    java.lang.Object var14 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test9"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 100.0d, 1.0d);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 0.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test10"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test11"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test12() {}
//   public void test12() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test12"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var1 = null;
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var1, 0.0d, (-1.0f), 100.0f);
// 
//   }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test13"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
    boolean var43 = var0.equals((java.lang.Object)var39);
    org.jfree.chart.util.ShapeList var44 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 0.0d, 1.0f, 10.0f);
    boolean var51 = var44.equals((java.lang.Object)var46);
    java.awt.Shape var52 = null;
    boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var46, var52);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var46);
    boolean var55 = var0.equals((java.lang.Object)var54);
    java.lang.Object var56 = var0.clone();
    java.lang.Object var57 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test14() {}
//   public void test14() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test14"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(10);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 0.0d, 1.0d);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var5);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var5, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var5, var15);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var5);
//     boolean var18 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var5);
//     org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var21 = var19.getShape(0);
//     var19.clear();
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 100.0d);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
//     var19.setShape(1, var25);
//     java.lang.Object var33 = var19.clone();
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, (-1.0d), 1.0f, 1.0f);
//     var19.setShape(0, var36);
//     java.lang.Object var46 = var19.clone();
//     java.awt.Shape var48 = var19.getShape(0);
//     boolean var49 = var0.equals((java.lang.Object)var19);
//     
//     // Checks the contract:  equals-hashcode on var0 and var19
//     assertTrue("Contract failed: equals-hashcode on var0 and var19", var0.equals(var19) ? var0.hashCode() == var19.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var19.", var0.equals(var19) == var19.equals(var0));
//     
//     // Checks the contract:  equals-hashcode on var3 and var33
//     assertTrue("Contract failed: equals-hashcode on var3 and var33", var3.equals(var33) ? var3.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var46
//     assertTrue("Contract failed: equals-hashcode on var3 and var46", var3.equals(var46) ? var3.hashCode() == var46.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var33.", var3.equals(var33) == var33.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var46.", var3.equals(var46) == var46.equals(var3));
// 
//   }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test15"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, (-1.0d));
    boolean var6 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, (java.lang.Object)'#');
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 0.0f);
    org.jfree.chart.util.RectangleAnchor var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, var11, 0.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test16"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 10.0f);
    java.io.ObjectOutputStream var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test17"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    var5.clear();
    java.lang.Object var14 = var5.clone();
    var5.clear();
    boolean var17 = var5.equals((java.lang.Object)0);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var20);
    int var22 = var5.size();
    boolean var23 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, 0.0d, 1.0f, 10.0f);
    boolean var30 = var0.equals((java.lang.Object)var29);
    java.lang.Object var31 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var29);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var33);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var33, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, (-1.0d), 100.0d);
    boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var33, var43);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 0.0d, (-1.0d));
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var51);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.rotateShape(var60, 0.0d, 1.0f, (-1.0f));
    boolean var65 = org.jfree.chart.util.ShapeUtilities.equal(var58, var60);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.rotateShape(var58, 1.0d, 10.0f, 0.0f);
    boolean var70 = org.jfree.chart.util.ShapeUtilities.equal(var55, var58);
    boolean var71 = org.jfree.chart.util.ShapeUtilities.equal(var29, var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var72 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var71);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test18"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var0, var2);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var0, 100.0d, 100.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test19"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 10.0d);
    boolean var21 = var0.equals((java.lang.Object)var17);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    java.lang.Object var26 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var24);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var28, var33);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 100.0d);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var36, var38);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var28, var38);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var45);
    boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var24, var46);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, 1.0d);
    var0.setShape(2, var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test20"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var2 = null;
//     boolean var3 = var1.equals(var2);
//     java.lang.Object var4 = var1.clone();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var1.setShape(100, var7);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var1.setShape(10, var12);
//     org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
//     var14.setShape(100, var20);
//     var14.clear();
//     java.lang.Object var23 = var14.clone();
//     var14.clear();
//     boolean var26 = var14.equals((java.lang.Object)0);
//     var14.clear();
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), 0.0d);
//     var14.setShape(0, var33);
//     boolean var35 = var1.equals((java.lang.Object)var33);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var33, 1.0d, (-1.0f), 1.0f);
// 
//   }

  public void test21() {}
//   public void test21() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test21"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.awt.Shape var10 = var0.getShape((-1));
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
//     var0.setShape(100, var14);
//     java.awt.Shape var17 = var0.getShape(2);
//     org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     var18.setShape(100, var24);
//     var18.clear();
//     java.lang.Object var27 = var18.clone();
//     int var28 = var18.size();
//     java.awt.Shape var30 = var18.getShape(0);
//     boolean var32 = var18.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var33 = var18.clone();
//     int var34 = var18.size();
//     org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
//     var35.setShape(100, var41);
//     var35.clear();
//     int var44 = var35.size();
//     boolean var45 = var18.equals((java.lang.Object)var44);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, (-1.0d), 100.0d);
//     boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var47, var49);
//     boolean var54 = var18.equals((java.lang.Object)var49);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 10.0d, 0.0d);
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.clone(var57);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.clone(var57);
//     boolean var60 = var0.equals((java.lang.Object)var59);
//     
//     // Checks the contract:  equals-hashcode on var18 and var0
//     assertTrue("Contract failed: equals-hashcode on var18 and var0", var18.equals(var0) ? var18.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var0
//     assertTrue("Contract failed: equals-hashcode on var35 and var0", var35.equals(var0) ? var35.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var18 and var0.", var18.equals(var0) == var0.equals(var18));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var35 and var0.", var35.equals(var0) == var0.equals(var35));
// 
//   }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test22"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 10.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 100.0f, 0.0f);
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var7.setShape(100, var13);
    var7.clear();
    int var16 = var7.size();
    int var17 = var7.size();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var7.setShape(0, var21);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var6, var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test23"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 10.0f, 10.0f);
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var7.setShape(100, var13);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    var7.setShape(0, var17);
    java.lang.Object var20 = var7.clone();
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 0.0f);
    boolean var24 = var7.equals((java.lang.Object)var23);
    boolean var25 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test24"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     var0.clear();
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
//     boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var17, var22);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
//     boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var25, var27);
//     boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     var0.setShape(101, var27);
//     java.lang.Object var35 = null;
//     boolean var36 = var0.equals(var35);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 1.0d);
//     boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var39, var44);
//     java.lang.Object var46 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var39);
//     var0.setShape(1, var39);
//     org.jfree.chart.util.ShapeList var48 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 0.0d, 1.0d);
//     var48.setShape(100, var54);
//     var48.clear();
//     int var57 = var48.size();
//     int var58 = var48.size();
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     var48.setShape(0, var62);
//     int var64 = var48.size();
//     java.lang.Object var65 = var48.clone();
//     int var66 = var48.size();
//     int var67 = var48.size();
//     boolean var68 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1, (java.lang.Object)var67);
//     
//     // Checks the contract:  equals-hashcode on var9 and var65
//     assertTrue("Contract failed: equals-hashcode on var9 and var65", var9.equals(var65) ? var9.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var65
//     assertTrue("Contract failed: equals-hashcode on var14 and var65", var14.equals(var65) ? var14.hashCode() == var65.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var65.", var9.equals(var65) == var65.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var65.", var14.equals(var65) == var65.equals(var14));
// 
//   }

  public void test25() {}
//   public void test25() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test25"); }
// 
// 
//     java.lang.Object var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = var1.getShape(100);
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var5 = null;
//     boolean var6 = var4.equals(var5);
//     java.lang.Object var7 = var4.clone();
//     boolean var8 = var1.equals((java.lang.Object)var4);
//     var4.clear();
//     boolean var10 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var4);
//     java.awt.Shape var12 = var4.getShape(0);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
//     boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
//     boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var20, var22);
//     java.lang.Object var38 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var22);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 100.0d, 0.0f, (-1.0f));
//     boolean var43 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var16, (java.lang.Object)100.0d);
//     var4.setShape(100, var16);
//     
//     // Checks the contract:  equals-hashcode on var1 and var4
//     assertTrue("Contract failed: equals-hashcode on var1 and var4", var1.equals(var4) ? var1.hashCode() == var4.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var1 and var4.", var1.equals(var4) == var4.equals(var1));
// 
//   }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test26"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = var14.clone();
    java.awt.Shape var22 = var14.getShape(101);
    java.lang.Object var23 = var14.clone();
    int var24 = var14.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test27"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 100.0d, 0.0f, (-1.0f));
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var9, var12);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 10.0d, 10.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test28"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    java.lang.Object var20 = var1.clone();
    org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    var21.setShape(100, var27);
    var21.clear();
    java.lang.Object var30 = var21.clone();
    var21.clear();
    int var32 = var21.size();
    java.lang.Object var33 = var21.clone();
    boolean var34 = var1.equals((java.lang.Object)var21);
    int var35 = var1.size();
    java.lang.Object var36 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test29"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    int var12 = var0.size();
    java.awt.Shape var14 = var0.getShape(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test30"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    java.lang.Object var7 = var3.clone();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 0.0d, 1.0f, 10.0f);
    var3.setShape(1, var10);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), (-1.0d));
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var2, var19);
    org.jfree.chart.util.RectangleAnchor var22 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, var22, (-1.0d), 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test31() {}
//   public void test31() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test31"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = var1.getShape(100);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var1.setShape(10, var14);
//     java.lang.Object var16 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var14, 100.0d, 0.0f, (-1.0f));
// 
//   }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test32"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    var0.clear();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    boolean var15 = var0.equals((java.lang.Object)10.0f);
    int var16 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test33"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    int var16 = var0.size();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var23 = var21.getShape(0);
    var21.clear();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    var21.setShape(1, var27);
    java.lang.Object var35 = var21.clone();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 100.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var44, 1.0d, 10.0f, (-1.0f));
    var21.setShape(1, var44);
    boolean var50 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var20, (java.lang.Object)var44);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 1.0d, 1.0f, (-1.0f));
    boolean var55 = var0.equals((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test34() {}
//   public void test34() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test34"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var0.setShape(10, var11);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var13, (java.lang.Object)var28);
//     int var30 = var13.size();
//     java.lang.Object var31 = var13.clone();
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(100.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
//     boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var33, var38);
//     boolean var40 = var13.equals((java.lang.Object)var39);
//     boolean var41 = var0.equals((java.lang.Object)var13);
//     
//     // Checks the contract:  equals-hashcode on var13 and var0
//     assertTrue("Contract failed: equals-hashcode on var13 and var0", var13.equals(var0) ? var13.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var0.", var13.equals(var0) == var0.equals(var13));
// 
//   }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test35"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 0.0d, (-1.0f), 10.0f);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var1, var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, (-1.0d));
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.io.ObjectOutputStream var22 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var21, var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test36() {}
//   public void test36() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test36"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 100.0d, 100.0d);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 100.0d, (-1.0f), 1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 0.0d, 10.0f, 0.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var14, 1.0d, 10.0f, 0.0f);
// 
//   }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test37"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    int var11 = var0.size();
    java.lang.Object var12 = var0.clone();
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = var13.getShape(0);
    java.lang.Object var16 = var13.clone();
    java.lang.Object var17 = var13.clone();
    boolean var18 = var0.equals((java.lang.Object)var13);
    java.lang.Object var19 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test38"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    var0.clear();
    java.lang.Object var40 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test39() {}
//   public void test39() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test39"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     int var1 = var0.size();
//     org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var3 = var2.clone();
//     var2.clear();
//     java.awt.Shape var6 = var2.getShape(100);
//     var2.clear();
//     boolean var8 = var0.equals((java.lang.Object)var2);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 1.0f);
//     var0.setShape(0, var12);
//     
//     // Checks the contract:  equals-hashcode on var2 and var0
//     assertTrue("Contract failed: equals-hashcode on var2 and var0", var2.equals(var0) ? var2.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var2 and var0.", var2.equals(var0) == var0.equals(var2));
// 
//   }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test40"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    var0.clear();
    int var19 = var0.size();
    int var20 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test41"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    int var12 = var0.size();
    java.lang.Object var13 = var0.clone();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 1.0f, (-1.0f));
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var16, var18);
    boolean var24 = var0.equals((java.lang.Object)var16);
    int var25 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test42"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 0.0d);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var13);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test43"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    var16.clear();
    java.lang.Object var25 = var16.clone();
    var16.clear();
    boolean var28 = var16.equals((java.lang.Object)0);
    boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var16);
    java.lang.Object var30 = var16.clone();
    boolean var31 = var0.equals(var30);
    org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 0.0d, 1.0f, 10.0f);
    boolean var39 = var32.equals((java.lang.Object)var34);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 1.0d);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var34, (java.lang.Object)var41);
    boolean var47 = var0.equals((java.lang.Object)var41);
    var0.clear();
    java.lang.Object var49 = var0.clone();
    java.lang.Object var50 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test44"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var14 = var0.getShape((-1));
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), 100.0d);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var20, var30);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var18, var20);
    java.lang.Object var36 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-1), var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test45"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    int var28 = var13.size();
    java.lang.Object var29 = var13.clone();
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 0.0d, 1.0f, 10.0f);
    boolean var37 = var30.equals((java.lang.Object)var32);
    int var38 = var30.size();
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    boolean var44 = var30.equals((java.lang.Object)var41);
    int var45 = var30.size();
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var13, (java.lang.Object)var45);
    java.awt.Shape var48 = var13.getShape(101);
    var13.clear();
    java.awt.Shape var51 = var13.getShape(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test46"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    java.lang.Object var14 = null;
    boolean var15 = var0.equals(var14);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 100.0d, 100.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 100.0d, (-1.0f), 1.0f);
    boolean var30 = var0.equals((java.lang.Object)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var31 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var30);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test47"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 10.0f, 1.0f);
    var0.setShape(1, var23);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, (-1.0d), 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test48"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 1.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var3.setShape(100, var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var13);
    var3.setShape(0, var13);
    java.awt.Shape var17 = var3.getShape(10);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var3.setShape(0, var20);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var2, var20);
    org.jfree.chart.util.RectangleAnchor var26 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, var26, 10.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test49"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test50() {}
//   public void test50() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test50"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     java.lang.Object var26 = var13.clone();
//     boolean var27 = var0.equals((java.lang.Object)var13);
//     int var28 = var13.size();
//     var13.clear();
//     org.jfree.chart.util.ShapeList var31 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 0.0d, 1.0d);
//     var31.setShape(100, var37);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var41);
//     var31.setShape(0, var41);
//     java.lang.Object var44 = var31.clone();
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 0.0f);
//     boolean var48 = var31.equals((java.lang.Object)var47);
//     var13.setShape(1, var47);
//     
//     // Checks the contract:  equals-hashcode on var0 and var13
//     assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var31
//     assertTrue("Contract failed: equals-hashcode on var0 and var31", var0.equals(var31) ? var0.hashCode() == var31.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var13.", var0.equals(var13) == var13.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var31.", var0.equals(var31) == var31.equals(var0));
//     
//     // Checks the contract:  equals-hashcode on var9 and var44
//     assertTrue("Contract failed: equals-hashcode on var9 and var44", var9.equals(var44) ? var9.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var44
//     assertTrue("Contract failed: equals-hashcode on var22 and var44", var22.equals(var44) ? var22.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var44
//     assertTrue("Contract failed: equals-hashcode on var26 and var44", var26.equals(var44) ? var26.hashCode() == var44.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var44.", var9.equals(var44) == var44.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var22 and var44.", var22.equals(var44) == var44.equals(var22));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var26 and var44.", var26.equals(var44) == var44.equals(var26));
// 
//   }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test51"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var0.clone();
    int var18 = var0.size();
    java.lang.Object var19 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test52"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var18 = var0.getShape(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var19 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)100);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test53"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    org.jfree.chart.util.RectangleAnchor var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, var18, (-1.0d), 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test54"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.lang.Object var17 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test55() {}
//   public void test55() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test55"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     int var9 = var0.size();
//     var0.clear();
//     java.lang.Object var11 = var0.clone();
//     boolean var13 = var0.equals((java.lang.Object)'#');
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 10.0f, 1.0f);
//     var0.setShape(1, var23);
//     org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var27 = var25.getShape(0);
//     var25.clear();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
//     var25.setShape(1, var31);
//     java.lang.Object var39 = var25.clone();
//     java.awt.Shape var41 = var25.getShape(0);
//     java.lang.Object var42 = var25.clone();
//     java.lang.Object var43 = org.jfree.chart.util.ObjectUtilities.clone(var42);
//     boolean var44 = var0.equals(var43);
//     
//     // Checks the contract:  equals-hashcode on var11 and var39
//     assertTrue("Contract failed: equals-hashcode on var11 and var39", var11.equals(var39) ? var11.hashCode() == var39.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var42
//     assertTrue("Contract failed: equals-hashcode on var11 and var42", var11.equals(var42) ? var11.hashCode() == var42.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var43
//     assertTrue("Contract failed: equals-hashcode on var11 and var43", var11.equals(var43) ? var11.hashCode() == var43.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var39.", var11.equals(var39) == var39.equals(var11));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var42.", var11.equals(var42) == var42.equals(var11));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var43.", var11.equals(var43) == var43.equals(var11));
// 
//   }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test56"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, (-1.0d));
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 10.0d, 1.0f, 0.0f);
    var0.setShape(100, var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test57"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 100.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = var3.clone();
    var3.clear();
    java.awt.Shape var7 = var3.getShape(1);
    boolean var8 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1.0f), (java.lang.Object)var3);
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 0.0d, 1.0f, 10.0f);
    boolean var16 = var9.equals((java.lang.Object)var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var19 = var9.equals((java.lang.Object)var18);
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = var20.getShape(100);
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var24 = null;
    boolean var25 = var23.equals(var24);
    java.lang.Object var26 = var23.clone();
    boolean var27 = var20.equals((java.lang.Object)var23);
    boolean var28 = var9.equals((java.lang.Object)var23);
    java.lang.Object var29 = var23.clone();
    java.awt.Shape var31 = var23.getShape(101);
    java.lang.Object var32 = null;
    boolean var33 = var23.equals(var32);
    org.jfree.chart.util.ShapeList var34 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, 0.0d, 1.0f, 10.0f);
    boolean var41 = var34.equals((java.lang.Object)var36);
    java.awt.Shape var43 = var34.getShape(100);
    var34.clear();
    boolean var45 = var23.equals((java.lang.Object)var34);
    boolean var46 = var3.equals((java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test58"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var12, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 10.0d, 0.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 0.0f, 100.0f);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var2, var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
    boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var30, var35);
    java.lang.Object var37 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var30);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var23, var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test59"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 100.0d);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test60() {}
//   public void test60() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test60"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var10);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
//     boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var10, var18);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
//     boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
//     boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var18, var22);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var18);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.clone(var18);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var18, 0.0d, 1.0f, (-1.0f));
// 
//   }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test61"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, (-1.0d));
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 10.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 1.0d, (-1.0d));
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var9, var42);
    org.jfree.chart.util.RectangleAnchor var44 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, var44, 100.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test62"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 0.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 0.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test63"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     int var9 = var0.size();
//     int var10 = var0.size();
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     var0.setShape(0, var14);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
//     var0.setShape(10, var37);
//     java.awt.Shape var42 = var0.getShape(10);
//     boolean var44 = var0.equals((java.lang.Object)(-1.0d));
//     org.jfree.chart.util.ShapeList var45 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var47, 0.0d, 1.0f, 10.0f);
//     boolean var52 = var45.equals((java.lang.Object)var47);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var55 = var45.equals((java.lang.Object)var54);
//     java.lang.Object var56 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var54);
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, (-1.0d), 100.0d);
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.rotateShape(var61, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var65, 1.0d, (-1.0d));
//     boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var54, var68);
//     java.lang.Object var70 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var68);
//     boolean var71 = var0.equals(var70);
//     
//     // Checks the contract:  equals-hashcode on var45 and var0
//     assertTrue("Contract failed: equals-hashcode on var45 and var0", var45.equals(var0) ? var45.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var45 and var0.", var45.equals(var0) == var0.equals(var45));
// 
//   }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test64"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test65"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, (-1.0d), 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test66"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 10.0f, 1.0f);
    var0.setShape(1, var23);
    int var25 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);

  }

  public void test67() {}
//   public void test67() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test67"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     var4.setShape(100, var10);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
//     var4.setShape(0, var14);
//     java.awt.Shape var18 = var4.getShape(10);
//     var4.clear();
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 100.0d, 1.0d);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 1.0d, 0.0d);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var35);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var35);
//     boolean var38 = var4.equals((java.lang.Object)var35);
//     boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var3, var35);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 1.0d, 0.0d);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var3);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 1.0d, 0.0d);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var3);
//     org.jfree.chart.util.ShapeList var48 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var50 = var48.getShape(10);
//     boolean var52 = var48.equals((java.lang.Object)(-1));
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 0.0f);
//     java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.rotateShape(var56, 1.0d, 10.0f, 10.0f);
//     var48.setShape(10, var56);
//     boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var3, var56);
//     
//     // Checks the contract:  equals-hashcode on var4 and var48
//     assertTrue("Contract failed: equals-hashcode on var4 and var48", var4.equals(var48) ? var4.hashCode() == var48.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var4 and var48.", var4.equals(var48) == var48.equals(var4));
// 
//   }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test68"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = null;
    var0.setShape(0, var12);
    java.lang.Object var14 = null;
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)0, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test69"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    java.lang.Object var18 = var13.clone();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var20, var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), 100.0d);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var28, var30);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var20, var30);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 100.0d, 0.0f, 0.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 100.0d, 100.0d);
    boolean var45 = var13.equals((java.lang.Object)var44);
    org.jfree.chart.util.ShapeList var46 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 0.0d, 1.0d);
    var46.setShape(100, var52);
    var46.clear();
    java.lang.Object var55 = var46.clone();
    int var56 = var46.size();
    java.awt.Shape var58 = var46.getShape(0);
    boolean var60 = var46.equals((java.lang.Object)(short)(-1));
    java.lang.Object var61 = var46.clone();
    int var62 = var46.size();
    org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
    var63.setShape(100, var69);
    var63.clear();
    int var72 = var63.size();
    boolean var73 = var46.equals((java.lang.Object)var72);
    java.awt.Shape var75 = var46.getShape(1);
    int var76 = var46.size();
    boolean var77 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var45, (java.lang.Object)var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test70"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 0.0d, (-1.0f), 10.0f);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var1, var12);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 10.0d, 0.0f, 10.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, 100.0d, (-1.0f), 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test71"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    java.lang.Object var64 = var37.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test72"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 100.0d, 10.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 100.0d, (-1.0d));
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var16 = null;
    boolean var17 = var15.equals(var16);
    java.lang.Object var18 = var15.clone();
    java.lang.Object var19 = var15.clone();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 0.0d, 1.0f, 10.0f);
    var15.setShape(1, var22);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), (-1.0d));
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var6, var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test73"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    var0.clear();
    var0.clear();
    java.lang.Object var14 = var0.clone();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test74"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    int var11 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var15, var17);
    java.lang.Object var33 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var17);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 100.0d, 0.0f, (-1.0f));
    var0.setShape(10, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test75"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    java.lang.Object var11 = var0.clone();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var18);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    boolean var21 = var0.equals((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test76"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    int var28 = var13.size();
    var13.clear();
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 0.0d, 1.0f, 10.0f);
    boolean var37 = var30.equals((java.lang.Object)var32);
    java.awt.Shape var38 = null;
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var32, var38);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 1.0d, 1.0f, 1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
    boolean var48 = var13.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test77() {}
//   public void test77() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test77"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var14 = var13.clone();
//     java.lang.Object var15 = var13.clone();
//     boolean var16 = var0.equals((java.lang.Object)var13);
//     java.lang.Object var17 = var13.clone();
//     org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
//     int var19 = var18.size();
//     boolean var21 = var18.equals((java.lang.Object)100.0d);
//     boolean var23 = var18.equals((java.lang.Object)(-1));
//     boolean var24 = var13.equals((java.lang.Object)(-1));
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, (-1.0d), 100.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, 0.0d, (-1.0f), 10.0f);
//     boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var26, var37);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, (-1.0d));
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 1.0d, 0.0d);
//     org.jfree.chart.util.ShapeList var49 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.rotateShape(var51, 0.0d, 1.0f, 10.0f);
//     boolean var56 = var49.equals((java.lang.Object)var51);
//     java.awt.Shape var58 = var49.getShape(100);
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var49.setShape(10, var62);
//     boolean var64 = org.jfree.chart.util.ShapeUtilities.equal(var37, var62);
//     boolean var65 = var13.equals((java.lang.Object)var62);
//     
//     // Checks the contract:  equals-hashcode on var0 and var49
//     assertTrue("Contract failed: equals-hashcode on var0 and var49", var0.equals(var49) ? var0.hashCode() == var49.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var49
//     assertTrue("Contract failed: equals-hashcode on var13 and var49", var13.equals(var49) ? var13.hashCode() == var49.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var49
//     assertTrue("Contract failed: equals-hashcode on var18 and var49", var18.equals(var49) ? var18.hashCode() == var49.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var49.", var0.equals(var49) == var49.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var13 and var49.", var13.equals(var49) == var49.equals(var13));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var18 and var49.", var18.equals(var49) == var49.equals(var18));
// 
//   }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test78"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(10);
    boolean var4 = var0.equals((java.lang.Object)(-1));
    var0.clear();
    int var6 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test79"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 100.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 1.0d);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), (-1.0f), (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test80"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    var14.clear();
    java.awt.Shape var22 = var14.getShape(0);
    java.lang.Object var23 = var14.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test81() {}
//   public void test81() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test81"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var1 = null;
//     org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, 10.0f);
//     boolean var9 = var2.equals((java.lang.Object)var4);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var11);
//     boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var4, (java.lang.Object)var11);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
//     boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var11, var19);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, (-1.0d), 100.0d);
//     boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var23, var33);
//     boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var19, var23);
//     boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var1, var19);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var19, 10.0d, 10.0f, 1.0f);
// 
//   }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test82"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    var5.clear();
    java.lang.Object var14 = var5.clone();
    var5.clear();
    boolean var17 = var5.equals((java.lang.Object)0);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var20);
    int var22 = var5.size();
    boolean var23 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var23, (java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test83"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    java.lang.Object var10 = var0.clone();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var15, var22);
    boolean var24 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, (-1.0f));
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 10.0d);
    var0.setShape(100, var28);
    java.awt.Shape var34 = var0.getShape(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test84"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 0.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 100.0d, 10.0f, (-1.0f));
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.io.ObjectOutputStream var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var9, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test85() {}
//   public void test85() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test85"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     var0.clear();
//     int var2 = var0.size();
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var3.setShape(100, var9);
//     var3.clear();
//     java.lang.Object var12 = var3.clone();
//     int var13 = var3.size();
//     java.awt.Shape var15 = var3.getShape(0);
//     boolean var17 = var3.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var18 = var3.clone();
//     int var19 = var3.size();
//     org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     var20.setShape(100, var26);
//     var20.clear();
//     int var29 = var20.size();
//     boolean var30 = var3.equals((java.lang.Object)var29);
//     java.lang.Object var31 = null;
//     boolean var32 = var3.equals(var31);
//     java.lang.Object var33 = var3.clone();
//     java.lang.Object var34 = var3.clone();
//     boolean var35 = var0.equals((java.lang.Object)var3);
//     org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
//     var37.setShape(100, var43);
//     var37.clear();
//     java.lang.Object var46 = var37.clone();
//     var37.clear();
//     boolean var49 = var37.equals((java.lang.Object)0);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var51);
//     boolean var53 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var37, (java.lang.Object)var52);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     var37.setShape(0, var57);
//     var37.clear();
//     java.lang.Object var60 = var37.clone();
//     java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
//     var37.setShape(0, var64);
//     org.jfree.chart.util.ShapeList var66 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.rotateShape(var68, 0.0d, 1.0f, 10.0f);
//     boolean var73 = var66.equals((java.lang.Object)var68);
//     java.awt.Shape var75 = var66.getShape(100);
//     java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var66.setShape(10, var79);
//     java.lang.Object var81 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var79);
//     boolean var82 = org.jfree.chart.util.ShapeUtilities.equal(var64, var79);
//     var3.setShape(100, var79);
//     
//     // Checks the contract:  equals-hashcode on var0 and var3
//     assertTrue("Contract failed: equals-hashcode on var0 and var3", var0.equals(var3) ? var0.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var37
//     assertTrue("Contract failed: equals-hashcode on var0 and var37", var0.equals(var37) ? var0.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var66
//     assertTrue("Contract failed: equals-hashcode on var0 and var66", var0.equals(var66) ? var0.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var3
//     assertTrue("Contract failed: equals-hashcode on var20 and var3", var20.equals(var3) ? var20.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var37
//     assertTrue("Contract failed: equals-hashcode on var20 and var37", var20.equals(var37) ? var20.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var66
//     assertTrue("Contract failed: equals-hashcode on var20 and var66", var20.equals(var66) ? var20.hashCode() == var66.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var3.", var0.equals(var3) == var3.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var37.", var0.equals(var37) == var37.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var66.", var0.equals(var66) == var66.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var3.", var20.equals(var3) == var3.equals(var20));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var37.", var20.equals(var37) == var37.equals(var20));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var66.", var20.equals(var66) == var66.equals(var20));
// 
//   }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test86"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var0.setShape(10, var11);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     var13.clear();
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 0.0d);
//     var13.setShape(0, var32);
//     boolean var34 = var0.equals((java.lang.Object)var32);
//     org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
//     var35.setShape(100, var41);
//     var35.clear();
//     java.awt.Shape var45 = var35.getShape(100);
//     var35.clear();
//     java.lang.Object var47 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var35);
//     org.jfree.chart.util.ShapeList var48 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var50 = var48.getShape(100);
//     org.jfree.chart.util.ShapeList var51 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var52 = null;
//     boolean var53 = var51.equals(var52);
//     java.lang.Object var54 = var51.clone();
//     boolean var55 = var48.equals((java.lang.Object)var51);
//     java.lang.Object var56 = var48.clone();
//     boolean var57 = var35.equals((java.lang.Object)var48);
//     boolean var58 = var0.equals((java.lang.Object)var35);
//     
//     // Checks the contract:  equals-hashcode on var35 and var0
//     assertTrue("Contract failed: equals-hashcode on var35 and var0", var35.equals(var0) ? var35.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var13
//     assertTrue("Contract failed: equals-hashcode on var35 and var13", var35.equals(var13) ? var35.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var48 and var0
//     assertTrue("Contract failed: equals-hashcode on var48 and var0", var48.equals(var0) ? var48.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var48 and var13
//     assertTrue("Contract failed: equals-hashcode on var48 and var13", var48.equals(var13) ? var48.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var0
//     assertTrue("Contract failed: equals-hashcode on var51 and var0", var51.equals(var0) ? var51.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var13
//     assertTrue("Contract failed: equals-hashcode on var51 and var13", var51.equals(var13) ? var51.hashCode() == var13.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var35 and var0.", var35.equals(var0) == var0.equals(var35));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var35 and var13.", var35.equals(var13) == var13.equals(var35));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var48 and var0.", var48.equals(var0) == var0.equals(var48));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var48 and var13.", var48.equals(var13) == var13.equals(var48));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var51 and var0.", var51.equals(var0) == var0.equals(var51));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var51 and var13.", var51.equals(var13) == var13.equals(var51));
// 
//   }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test87"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = var0.clone();
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.lang.Object var19 = var10.clone();
    java.awt.Shape var21 = var10.getShape(10);
    int var22 = var10.size();
    boolean var23 = org.jfree.chart.util.ObjectUtilities.equal(var9, (java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test88() {}
//   public void test88() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test88"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     var1.clear();
//     java.lang.Object var10 = var1.clone();
//     java.awt.Shape var12 = var1.getShape(10);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 100.0d);
//     var1.setShape(1, var23);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 0.0f, 100.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 100.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var31, 0.0d, 100.0f, 0.0f);
// 
//   }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test89"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    int var12 = var0.size();
    java.lang.Object var13 = var0.clone();
    java.awt.Shape var15 = var0.getShape(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test90"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var16 = var0.getShape(0);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
    boolean var40 = var0.equals((java.lang.Object)var39);
    var0.clear();
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 100.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 1.0d, 10.0f, (-1.0f));
    java.lang.Object var55 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var54);
    var0.setShape(1, var54);
    java.lang.Object var57 = var0.clone();
    java.lang.Object var58 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test91"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var0.setShape(10, var11);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     var13.clear();
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 0.0d);
//     var13.setShape(0, var32);
//     boolean var34 = var0.equals((java.lang.Object)var32);
//     var0.clear();
//     
//     // Checks the contract:  equals-hashcode on var0 and var13
//     assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var13.", var0.equals(var13) == var13.equals(var0));
// 
//   }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test92"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var29);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, (-1.0d), 100.0d);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var32, var34);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var24, var34);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var34);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var34);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 0.0d, 1.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var34, var43);
    boolean var49 = org.jfree.chart.util.ShapeUtilities.equal(var22, var34);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 100.0d, 100.0d);
    java.lang.Object var53 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test93"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     var0.clear();
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
//     boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var17, var22);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
//     boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var25, var27);
//     boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     var0.setShape(101, var27);
//     java.lang.Object var35 = var0.clone();
//     
//     // Checks the contract:  equals-hashcode on var9 and var35
//     assertTrue("Contract failed: equals-hashcode on var9 and var35", var9.equals(var35) ? var9.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var35
//     assertTrue("Contract failed: equals-hashcode on var14 and var35", var14.equals(var35) ? var14.hashCode() == var35.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var35.", var9.equals(var35) == var35.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var35.", var14.equals(var35) == var35.equals(var14));
// 
//   }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test94"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 10.0d, 1.0f, 0.0f);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
    var27.setShape(100, var33);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var33, var39);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var22, var33);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), 10.0d);
    java.io.ObjectOutputStream var45 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var22, var45);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test95"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    java.lang.Object var28 = var13.clone();
    java.lang.Object var29 = var13.clone();
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
    var30.setShape(100, var36);
    var30.clear();
    java.lang.Object var39 = var30.clone();
    int var40 = var30.size();
    var30.clear();
    int var42 = var30.size();
    boolean var43 = org.jfree.chart.util.ObjectUtilities.equal(var29, (java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test96"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var10);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
//     boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var10, var18);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
//     boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
//     boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var18, var22);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var22, 1.0d, 0.0f, 100.0f);
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test97"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.lang.Object var15 = var0.clone();
    java.lang.Object var16 = var0.clone();
    var0.clear();
    var0.clear();
    int var19 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test98"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 10.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 0.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test99"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 100.0d, 1.0d);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 0.0d);
    java.io.ObjectOutputStream var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var19, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test100"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    var18.setShape(100, var24);
    var18.clear();
    java.lang.Object var27 = var18.clone();
    int var28 = var18.size();
    java.awt.Shape var30 = var18.getShape(0);
    boolean var32 = var18.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var34 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
    var34.setShape(100, var40);
    var34.clear();
    java.lang.Object var43 = var34.clone();
    var34.clear();
    boolean var46 = var34.equals((java.lang.Object)0);
    boolean var47 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var34);
    java.lang.Object var48 = var34.clone();
    boolean var49 = var18.equals(var48);
    boolean var50 = var13.equals((java.lang.Object)var18);
    int var51 = var18.size();
    var18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test101"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = null;
    boolean var15 = var13.equals(var14);
    var13.clear();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var18 = var17.clone();
    var17.clear();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 10.0d, (-1.0d));
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 10.0d, 1.0d);
    boolean var29 = var17.equals((java.lang.Object)var25);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var31 = var13.equals((java.lang.Object)var25);
    boolean var32 = var0.equals((java.lang.Object)var25);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, 0.0d, 0.0f, 0.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test102"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 100.0d, 100.0d);
    var0.setShape(1, var22);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 0.0f, 100.0f);
    java.io.ObjectOutputStream var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var22, var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test103"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    var0.clear();
    java.lang.Class var11 = null;
    java.lang.ClassLoader var12 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var11);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var12);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var14.setShape(100, var20);
    var14.clear();
    java.awt.Shape var24 = var14.getShape(0);
    java.lang.Object var25 = var14.clone();
    boolean var26 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var12, var25);
    boolean var27 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test104"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = var0.clone();
    java.awt.Shape var22 = var0.getShape(1);
    java.lang.Object var23 = var0.clone();
    java.lang.Object var24 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test105"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    java.lang.Object var6 = var0.clone();
    int var7 = var0.size();
    int var8 = var0.size();
    java.lang.Object var9 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test106"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
//     var13.setShape(100, var19);
//     var13.clear();
//     java.lang.Object var22 = var13.clone();
//     var13.clear();
//     boolean var25 = var13.equals((java.lang.Object)0);
//     java.lang.Object var26 = var13.clone();
//     boolean var27 = var0.equals((java.lang.Object)var13);
//     int var28 = var13.size();
//     var13.clear();
//     int var30 = var13.size();
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
//     boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var33, var38);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var38);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 1.0d, 100.0f, (-1.0f));
//     var13.setShape(10, var38);
//     
//     // Checks the contract:  equals-hashcode on var0 and var13
//     assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var13.", var0.equals(var13) == var13.equals(var0));
// 
//   }

  public void test107() {}
//   public void test107() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test107"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     int var1 = var0.size();
//     boolean var3 = var0.equals((java.lang.Object)100.0d);
//     java.lang.Object var4 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, (-1.0d), 100.0d);
//     boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var6, var8);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 10.0d, 1.0d);
//     org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var18 = var16.getShape(0);
//     var16.clear();
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), 100.0d);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     var16.setShape(1, var22);
//     java.lang.Object var30 = var16.clone();
//     boolean var31 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var15, (java.lang.Object)var16);
//     boolean var32 = var0.equals((java.lang.Object)var15);
//     
//     // Checks the contract:  equals-hashcode on var0 and var16
//     assertTrue("Contract failed: equals-hashcode on var0 and var16", var0.equals(var16) ? var0.hashCode() == var16.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var16.", var0.equals(var16) == var16.equals(var0));
//     
//     // Checks the contract:  equals-hashcode on var4 and var30
//     assertTrue("Contract failed: equals-hashcode on var4 and var30", var4.equals(var30) ? var4.hashCode() == var30.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var4 and var30.", var4.equals(var30) == var30.equals(var4));
// 
//   }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test108"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    int var17 = var13.size();
    int var18 = var13.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test109"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    var0.clear();
    java.lang.Object var19 = var0.clone();
    java.lang.Object var20 = var0.clone();
    java.lang.Object var21 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test110"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    var0.clear();
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var12 = var11.clone();
    var11.clear();
    java.awt.Shape var15 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = var16.getShape(100);
    java.lang.Object var19 = var16.clone();
    var16.clear();
    boolean var21 = var11.equals((java.lang.Object)var16);
    java.awt.Shape var23 = var16.getShape(10);
    java.awt.Shape var25 = var16.getShape(0);
    java.lang.Object var26 = var16.clone();
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
    boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var31, var36);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, (-1.0d), 100.0d);
    boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var39, var41);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var31, var41);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 10.0d, 0.0d);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 1.0d, 0.0f, 100.0f);
    boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var29, var50);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 0.0d);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 100.0d, (-1.0d));
    boolean var62 = var16.equals((java.lang.Object)(-1.0d));
    boolean var63 = var0.equals((java.lang.Object)var16);
    var16.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test111"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 100.0d, 1.0f, 0.0f);
    java.io.ObjectOutputStream var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test112"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.awt.Shape var15 = var0.getShape(100);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test113"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 1.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test114() {}
//   public void test114() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test114"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     var15.setShape(100, var21);
//     var15.clear();
//     int var24 = var15.size();
//     java.lang.Object var25 = null;
//     boolean var26 = var15.equals(var25);
//     java.awt.Shape var28 = var15.getShape(1);
//     java.lang.Object var29 = var15.clone();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), (-1.0d));
//     var15.setShape(0, var32);
//     boolean var37 = var0.equals((java.lang.Object)var32);
//     
//     // Checks the contract:  equals-hashcode on var0 and var15
//     assertTrue("Contract failed: equals-hashcode on var0 and var15", var0.equals(var15) ? var0.hashCode() == var15.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var15.", var0.equals(var15) == var15.equals(var0));
// 
//   }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test115"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, (-1.0d));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var8, var10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var17, var20);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var1, var20);
    boolean var24 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, (java.lang.Object)(short)0);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 100.0d, 1.0d);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var1, var37);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), (-1.0f), 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test116"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var4, var11);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test117"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.lang.Object var12 = var0.clone();
    int var13 = var0.size();
    var0.clear();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 1.0f);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)1.0f);
    var0.setShape(101, var17);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 1.0d, 100.0f, 1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 100.0d, 0.0f, (-1.0f));
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 1.0d, (-1.0f), (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test118"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(0);
//     var0.clear();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var0.setShape(1, var6);
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
//     var0.setShape(0, var17);
//     org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 0.0d, 1.0f, 10.0f);
//     boolean var34 = var27.equals((java.lang.Object)var29);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var37 = var27.equals((java.lang.Object)var36);
//     java.lang.Object var38 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var36);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, (-1.0d), 100.0d);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 1.0d, (-1.0d));
//     boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var36, var50);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 0.0d, 1.0d);
//     boolean var59 = org.jfree.chart.util.ShapeUtilities.equal(var53, var58);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, (-1.0d), 100.0d);
//     boolean var67 = org.jfree.chart.util.ShapeUtilities.equal(var61, var63);
//     boolean var68 = org.jfree.chart.util.ShapeUtilities.equal(var53, var63);
//     boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var36, var63);
//     boolean var70 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)var69);
//     
//     // Checks the contract:  equals-hashcode on var27 and var0
//     assertTrue("Contract failed: equals-hashcode on var27 and var0", var27.equals(var0) ? var27.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var27 and var0.", var27.equals(var0) == var0.equals(var27));
// 
//   }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test119"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 1.0d, (-1.0f), 1.0f);
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 0.0d, 1.0f, 10.0f);
    boolean var16 = var9.equals((java.lang.Object)var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var19 = var9.equals((java.lang.Object)var18);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 0.0d);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var1, var18);
    org.jfree.chart.util.RectangleAnchor var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, var24, 0.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test120"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    var0.clear();
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    var11.clear();
    boolean var23 = var11.equals((java.lang.Object)0);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 100.0d);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var28, var38);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    boolean var44 = var11.equals((java.lang.Object)var43);
    java.lang.Object var45 = var11.clone();
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var45);
    java.lang.Object var47 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test121"); }


    java.lang.Object var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(10.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 100.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 100.0d);
    boolean var9 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test122"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    org.jfree.chart.util.RectangleAnchor var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, var2, 0.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test123"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 100.0d, 0.0f, (-1.0f));
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var12, var15);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var2, var21);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 10.0d, 100.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    org.jfree.chart.util.RectangleAnchor var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, var28, 1.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test124"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.lang.Object var17 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test125"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 100.0d, 0.0f, (-1.0f));
    org.jfree.chart.util.RectangleAnchor var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, var7, 0.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test126() {}
//   public void test126() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test126"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
//     boolean var7 = var0.equals((java.lang.Object)var2);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var10 = var0.equals((java.lang.Object)var9);
//     org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var13 = var11.getShape(100);
//     org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var15 = null;
//     boolean var16 = var14.equals(var15);
//     java.lang.Object var17 = var14.clone();
//     boolean var18 = var11.equals((java.lang.Object)var14);
//     boolean var19 = var0.equals((java.lang.Object)var14);
//     java.lang.Object var20 = var0.clone();
//     java.lang.Object var21 = var0.clone();
//     java.lang.Object var22 = var0.clone();
//     org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var25 = var23.getShape(100);
//     java.lang.Object var26 = var23.clone();
//     var23.clear();
//     org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 0.0d, 1.0f, 10.0f);
//     boolean var35 = var28.equals((java.lang.Object)var30);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     boolean var42 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var30, (java.lang.Object)var37);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var44);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.clone(var45);
//     boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var37, var45);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 0.0d, 1.0d);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.clone(var49);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.rotateShape(var49, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var59, (-1.0d), 100.0d);
//     boolean var63 = org.jfree.chart.util.ShapeUtilities.equal(var49, var59);
//     boolean var64 = org.jfree.chart.util.ShapeUtilities.equal(var45, var49);
//     java.awt.Shape var65 = null;
//     boolean var66 = org.jfree.chart.util.ShapeUtilities.equal(var49, var65);
//     boolean var67 = var23.equals((java.lang.Object)var66);
//     boolean var68 = var0.equals((java.lang.Object)var23);
//     org.jfree.chart.util.ShapeList var70 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var71 = var70.clone();
//     var70.clear();
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var74, 10.0d, (-1.0d));
//     java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.clone(var74);
//     java.awt.Shape var81 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var78, 10.0d, 1.0d);
//     boolean var82 = var70.equals((java.lang.Object)var78);
//     java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var78, (-1.0d), 10.0d);
//     var0.setShape(101, var78);
//     
//     // Checks the contract:  equals-hashcode on var11 and var0
//     assertTrue("Contract failed: equals-hashcode on var11 and var0", var11.equals(var0) ? var11.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var0
//     assertTrue("Contract failed: equals-hashcode on var14 and var0", var14.equals(var0) ? var14.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var23 and var0
//     assertTrue("Contract failed: equals-hashcode on var23 and var0", var23.equals(var0) ? var23.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var0
//     assertTrue("Contract failed: equals-hashcode on var28 and var0", var28.equals(var0) ? var28.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var70 and var0
//     assertTrue("Contract failed: equals-hashcode on var70 and var0", var70.equals(var0) ? var70.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var0.", var11.equals(var0) == var0.equals(var11));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var0.", var14.equals(var0) == var0.equals(var14));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var23 and var0.", var23.equals(var0) == var0.equals(var23));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var0.", var28.equals(var0) == var0.equals(var28));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var70 and var0.", var70.equals(var0) == var0.equals(var70));
// 
//   }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test127"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 0.0d, (-1.0f), 10.0f);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var1, var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, (-1.0d));
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.lang.Object var22 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var12);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test128"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
    boolean var43 = var0.equals((java.lang.Object)var39);
    java.lang.Object var44 = var0.clone();
    java.lang.Object var45 = var0.clone();
    java.lang.Object var46 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test129"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.lang.Object var14 = var0.clone();
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var15.setShape(100, var21);
    var15.clear();
    java.lang.Object var24 = var15.clone();
    var15.clear();
    int var26 = var15.size();
    java.lang.Object var27 = var15.clone();
    java.lang.Object var28 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var15);
    java.lang.Object var29 = org.jfree.chart.util.ObjectUtilities.clone(var28);
    boolean var30 = var0.equals(var29);
    org.jfree.chart.util.ShapeList var31 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var33, 0.0d, 1.0f, 10.0f);
    boolean var38 = var31.equals((java.lang.Object)var33);
    int var39 = var31.size();
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var42);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var42);
    boolean var45 = var31.equals((java.lang.Object)var42);
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var42);
    java.io.ObjectOutputStream var47 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var42, var47);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test130() {}
//   public void test130() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test130"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
//     boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 10.0d, 0.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 10.0d, 1.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, (-1.0d), 10.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var24, 1.0d, 0.0f, 0.0f);
// 
//   }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test131"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var5 = null;
    boolean var6 = var4.equals(var5);
    java.lang.Object var7 = var4.clone();
    var4.clear();
    java.awt.Shape var10 = var4.getShape(100);
    boolean var11 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var4);
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    var12.setShape(100, var18);
    var12.clear();
    java.awt.Shape var22 = var12.getShape(100);
    java.lang.Object var23 = var12.clone();
    var12.clear();
    boolean var25 = var0.equals((java.lang.Object)var12);
    java.lang.Object var26 = var12.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test132"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    java.lang.Object var18 = var0.clone();
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    var19.setShape(100, var25);
    var19.clear();
    java.lang.Object var28 = var19.clone();
    var19.clear();
    boolean var31 = var19.equals((java.lang.Object)0);
    java.lang.Object var32 = var19.clone();
    org.jfree.chart.util.ShapeList var33 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var34 = var33.clone();
    var33.clear();
    java.awt.Shape var37 = var33.getShape(100);
    org.jfree.chart.util.ShapeList var38 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var40 = var38.getShape(100);
    java.lang.Object var41 = var38.clone();
    var38.clear();
    boolean var43 = var33.equals((java.lang.Object)var38);
    java.lang.Object var44 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var38);
    boolean var45 = var19.equals((java.lang.Object)var38);
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var19);
    java.lang.Object var47 = null;
    boolean var48 = var19.equals(var47);
    int var49 = var19.size();
    var19.clear();
    var19.clear();
    java.lang.Object var52 = var19.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test133"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = var1.getShape(100);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var1.setShape(10, var14);
//     java.lang.Object var16 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
//     var17.setShape(100, var23);
//     boolean var26 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var23, (java.lang.Object)"");
//     boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var14, var23);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 1.0d, 10.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var30, 0.0d, 0.0f, (-1.0f));
// 
//   }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test134"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.lang.Object var13 = var0.clone();
    java.awt.Shape var15 = var0.getShape(10);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test135"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var5 = null;
    boolean var6 = var4.equals(var5);
    java.lang.Object var7 = var4.clone();
    var4.clear();
    java.awt.Shape var10 = var4.getShape(100);
    boolean var11 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var4);
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test136"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var9 = null;
//     boolean var10 = var8.equals(var9);
//     java.lang.Object var11 = var8.clone();
//     java.lang.Object var12 = var8.clone();
//     java.lang.Object var13 = var8.clone();
//     boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var8);
//     
//     // Checks the contract:  equals-hashcode on var8 and var0
//     assertTrue("Contract failed: equals-hashcode on var8 and var0", var8.equals(var0) ? var8.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var8 and var0.", var8.equals(var0) == var0.equals(var8));
// 
//   }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test137"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    var5.setShape(0, var15);
    java.awt.Shape var19 = var5.getShape(10);
    java.awt.Shape var21 = var5.getShape((-1));
    int var22 = var5.size();
    java.awt.Shape var24 = var5.getShape(0);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var26, var31);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, (-1.0d), 100.0d);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var34, var36);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var26, var36);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var24, var43);
    boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var1, var43);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 101);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test138"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    java.lang.Object var39 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    var0.clear();
    org.jfree.chart.util.ShapeList var41 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
    var41.setShape(100, var47);
    var41.clear();
    boolean var50 = var0.equals((java.lang.Object)var41);
    java.lang.Object var51 = var41.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test139"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    int var21 = var11.size();
    java.awt.Shape var23 = var11.getShape(0);
    boolean var25 = var11.equals((java.lang.Object)(short)(-1));
    java.lang.Object var26 = var11.clone();
    int var27 = var11.size();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    boolean var38 = var11.equals((java.lang.Object)var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = var11.equals((java.lang.Object)var42);
    java.lang.Object var48 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var42);
    boolean var49 = var0.equals(var48);
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
    var50.setShape(100, var56);
    var50.clear();
    java.lang.Object var59 = var50.clone();
    var50.clear();
    boolean var62 = var50.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
    var63.setShape(100, var69);
    var63.clear();
    java.lang.Object var72 = var63.clone();
    var63.clear();
    boolean var75 = var63.equals((java.lang.Object)0);
    java.lang.Object var76 = var63.clone();
    boolean var77 = var50.equals((java.lang.Object)var63);
    java.awt.Shape var79 = var50.getShape(100);
    boolean var80 = var0.equals((java.lang.Object)var50);
    java.awt.Shape var82 = var50.getShape((-1));
    int var83 = var50.size();
    java.awt.Shape var85 = var50.getShape(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test140"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.RectangleAnchor var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var0, var1, 1.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test141"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    java.lang.Object var2 = var0.clone();
    java.lang.Object var3 = org.jfree.chart.util.ObjectUtilities.clone(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test142"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    int var3 = var0.size();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 0.0d);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, 0.0d, 10.0f, 1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 0.0d, 0.0f, 1.0f);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var8, var17);
    boolean var23 = var0.equals((java.lang.Object)var17);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 0.0d, 100.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test143"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    java.lang.Object var20 = var1.clone();
    org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    var21.setShape(100, var27);
    var21.clear();
    java.lang.Object var30 = var21.clone();
    var21.clear();
    int var32 = var21.size();
    java.lang.Object var33 = var21.clone();
    boolean var34 = var1.equals((java.lang.Object)var21);
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var37 = var35.getShape(0);
    java.lang.Object var38 = var35.clone();
    int var39 = var35.size();
    java.lang.Object var40 = var35.clone();
    boolean var41 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var21, var40);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    java.awt.Shape var53 = var42.getShape(10);
    boolean var54 = var21.equals((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test144"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, (-1.0d), 100.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, (-1.0d));
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var26, var31);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, (-1.0d), 100.0d);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var34, var36);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var26, var36);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var9, var36);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, (-1.0d), 100.0d);
    boolean var50 = org.jfree.chart.util.ShapeUtilities.equal(var44, var46);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 10.0d, 1.0d);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var9, var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test145"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var5 = var3.getShape(0);
    int var6 = var3.size();
    boolean var7 = var0.equals((java.lang.Object)var6);
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var9 = var8.clone();
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test146"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var12, (-1.0d), 0.0f, 0.0f);
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test147"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    boolean var7 = var0.equals((java.lang.Object)var3);
    java.lang.Object var8 = var3.clone();
    java.lang.Object var9 = var3.clone();
    var3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test148"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 100.0d);
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = var12.getShape(0);
    var12.clear();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var12.setShape(1, var18);
    java.lang.Object var26 = var12.clone();
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 100.0d);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 0.0d, 1.0d);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 1.0d, 10.0f, (-1.0f));
    var12.setShape(1, var35);
    java.lang.Object var41 = var12.clone();
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, (-1.0d), 100.0d);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, 0.0d, 1.0d);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var48);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, 100.0d, 1.0d);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, 1.0d, 0.0d);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.clone(var62);
    boolean var64 = org.jfree.chart.util.ShapeUtilities.equal(var46, var62);
    boolean var65 = var12.equals((java.lang.Object)var62);
    boolean var66 = org.jfree.chart.util.ShapeUtilities.equal(var4, var62);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, (-1.0d), (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test149"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 10.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 10.0f, 100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)100.0f);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test150"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    var6.setShape(100, var12);
    var6.clear();
    java.lang.Object var15 = var6.clone();
    int var16 = var6.size();
    java.awt.Shape var18 = var6.getShape(0);
    boolean var20 = var6.equals((java.lang.Object)(short)(-1));
    java.lang.Object var21 = var6.clone();
    int var22 = var6.size();
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    int var24 = var23.size();
    boolean var25 = var6.equals((java.lang.Object)var24);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, (-1.0d), 100.0d);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var27, var37);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, (-1.0d));
    boolean var49 = var6.equals((java.lang.Object)var45);
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, 0.0d, 1.0f, 10.0f);
    boolean var57 = var50.equals((java.lang.Object)var52);
    java.awt.Shape var58 = null;
    boolean var59 = org.jfree.chart.util.ShapeUtilities.equal(var52, var58);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.clone(var52);
    boolean var61 = var6.equals((java.lang.Object)var60);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.clone(var63);
    java.lang.Object var65 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var63);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 0.0d, 1.0d);
    boolean var73 = org.jfree.chart.util.ShapeUtilities.equal(var67, var72);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var77, (-1.0d), 100.0d);
    boolean var81 = org.jfree.chart.util.ShapeUtilities.equal(var75, var77);
    boolean var82 = org.jfree.chart.util.ShapeUtilities.equal(var67, var77);
    java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.clone(var77);
    java.awt.Shape var84 = org.jfree.chart.util.ShapeUtilities.clone(var77);
    java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.clone(var84);
    boolean var86 = org.jfree.chart.util.ShapeUtilities.equal(var63, var85);
    java.awt.Shape var89 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var85, 0.0d, 1.0d);
    boolean var90 = var6.equals((java.lang.Object)var89);
    java.awt.Shape var92 = var6.getShape(1);
    boolean var93 = org.jfree.chart.util.ObjectUtilities.equal(var5, (java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test151"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 10.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    var9.setShape(100, var15);
    var9.clear();
    int var18 = var9.size();
    java.lang.Object var19 = null;
    boolean var20 = var9.equals(var19);
    java.awt.Shape var22 = var9.getShape(1);
    boolean var23 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var8, (java.lang.Object)1);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 0.0d, (-1.0f), 0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var8);
    boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test152"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    int var6 = var0.size();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test153"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    var0.clear();
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    var11.clear();
    boolean var23 = var11.equals((java.lang.Object)0);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 100.0d);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var28, var38);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    boolean var44 = var11.equals((java.lang.Object)var43);
    java.lang.Object var45 = var11.clone();
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var45);
    int var47 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test154"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var15 = var0.clone();
//     int var16 = var0.size();
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     int var18 = var17.size();
//     boolean var19 = var0.equals((java.lang.Object)var18);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
//     boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
//     boolean var43 = var0.equals((java.lang.Object)var39);
//     org.jfree.chart.util.ShapeList var44 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 0.0d, 1.0f, 10.0f);
//     boolean var51 = var44.equals((java.lang.Object)var46);
//     java.awt.Shape var53 = var44.getShape(100);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var44.setShape(10, var57);
//     java.lang.Object var59 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var57);
//     org.jfree.chart.util.ShapeList var60 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 0.0d, 1.0d);
//     var60.setShape(100, var66);
//     boolean var69 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var66, (java.lang.Object)"");
//     boolean var70 = org.jfree.chart.util.ShapeUtilities.equal(var57, var66);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var57, 1.0d, 10.0d);
//     boolean var74 = org.jfree.chart.util.ShapeUtilities.equal(var39, var73);
//     
//     // Checks the contract:  equals-hashcode on var0 and var44
//     assertTrue("Contract failed: equals-hashcode on var0 and var44", var0.equals(var44) ? var0.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var60
//     assertTrue("Contract failed: equals-hashcode on var0 and var60", var0.equals(var60) ? var0.hashCode() == var60.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var44
//     assertTrue("Contract failed: equals-hashcode on var17 and var44", var17.equals(var44) ? var17.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var60
//     assertTrue("Contract failed: equals-hashcode on var17 and var60", var17.equals(var60) ? var17.hashCode() == var60.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var44.", var0.equals(var44) == var44.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var60.", var0.equals(var60) == var60.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var44.", var17.equals(var44) == var44.equals(var17));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var60.", var17.equals(var60) == var60.equals(var17));
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test155"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 100.0d, 1.0f, 100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var8);
    java.lang.Object var14 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var8);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test156() {}
//   public void test156() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test156"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var15 = var0.clone();
//     int var16 = var0.size();
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
//     var17.setShape(100, var23);
//     var17.clear();
//     int var26 = var17.size();
//     boolean var27 = var0.equals((java.lang.Object)var26);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
//     boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
//     boolean var36 = var0.equals((java.lang.Object)var31);
//     org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var38 = var37.clone();
//     var37.clear();
//     java.awt.Shape var41 = var37.getShape(100);
//     org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
//     var42.setShape(100, var48);
//     var42.clear();
//     java.lang.Object var51 = var42.clone();
//     var42.clear();
//     boolean var54 = var42.equals((java.lang.Object)0);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
//     boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
//     int var59 = var42.size();
//     boolean var60 = var37.equals((java.lang.Object)var59);
//     java.awt.Shape var62 = var37.getShape(0);
//     boolean var63 = var0.equals((java.lang.Object)var37);
//     int var64 = var37.size();
//     org.jfree.chart.util.ShapeList var65 = new org.jfree.chart.util.ShapeList();
//     int var66 = var65.size();
//     var65.clear();
//     var65.clear();
//     boolean var69 = var37.equals((java.lang.Object)var65);
//     java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var72, 0.0d, 1.0d);
//     java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.clone(var72);
//     java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.rotateShape(var72, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var80, 100.0d, 1.0d);
//     java.awt.Shape var86 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var80, 10.0d, 0.0d);
//     java.awt.Shape var89 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
//     boolean var90 = org.jfree.chart.util.ShapeUtilities.equal(var86, var89);
//     var65.setShape(100, var89);
//     
//     // Checks the contract:  equals-hashcode on var0 and var65
//     assertTrue("Contract failed: equals-hashcode on var0 and var65", var0.equals(var65) ? var0.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var65
//     assertTrue("Contract failed: equals-hashcode on var17 and var65", var17.equals(var65) ? var17.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var65
//     assertTrue("Contract failed: equals-hashcode on var37 and var65", var37.equals(var65) ? var37.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var42 and var65
//     assertTrue("Contract failed: equals-hashcode on var42 and var65", var42.equals(var65) ? var42.hashCode() == var65.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var65.", var0.equals(var65) == var65.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var65.", var17.equals(var65) == var65.equals(var17));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var37 and var65.", var37.equals(var65) == var65.equals(var37));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var42 and var65.", var42.equals(var65) == var65.equals(var42));
// 
//   }

  public void test157() {}
//   public void test157() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test157"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     var0.clear();
//     var0.clear();
//     int var6 = var0.size();
//     var0.clear();
//     org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var11 = var9.getShape(0);
//     var9.clear();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, (-1.0d), 100.0d);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     var9.setShape(1, var15);
//     java.lang.Object var23 = var9.clone();
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 10.0d);
//     boolean var30 = var9.equals((java.lang.Object)var26);
//     var0.setShape(0, var26);
//     
//     // Checks the contract:  equals-hashcode on var3 and var23
//     assertTrue("Contract failed: equals-hashcode on var3 and var23", var3.equals(var23) ? var3.hashCode() == var23.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var23.", var3.equals(var23) == var23.equals(var3));
// 
//   }

  public void test158() {}
//   public void test158() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test158"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var3.setShape(100, var9);
//     var3.clear();
//     java.lang.Object var12 = var3.clone();
//     int var13 = var3.size();
//     java.awt.Shape var15 = var3.getShape(0);
//     boolean var17 = var3.equals((java.lang.Object)(short)(-1));
//     org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     var19.setShape(100, var25);
//     var19.clear();
//     java.lang.Object var28 = var19.clone();
//     var19.clear();
//     boolean var31 = var19.equals((java.lang.Object)0);
//     boolean var32 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var19);
//     java.lang.Object var33 = var19.clone();
//     boolean var34 = var3.equals(var33);
//     org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, 0.0d, 1.0f, 10.0f);
//     boolean var42 = var35.equals((java.lang.Object)var37);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.clone(var44);
//     boolean var49 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var37, (java.lang.Object)var44);
//     boolean var50 = var3.equals((java.lang.Object)var44);
//     boolean var51 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var3);
//     org.jfree.chart.util.ShapeList var54 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var57, 0.0d, 1.0d);
//     var54.setShape(100, var60);
//     var54.clear();
//     java.lang.Object var63 = var54.clone();
//     var54.clear();
//     boolean var66 = var54.equals((java.lang.Object)0);
//     boolean var67 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var54);
//     java.lang.Object var68 = var54.clone();
//     org.jfree.chart.util.ShapeList var69 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var70 = var69.clone();
//     var69.clear();
//     boolean var72 = var54.equals((java.lang.Object)var69);
//     java.lang.Object var73 = var54.clone();
//     java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var77, 0.0d, 1.0d);
//     boolean var81 = org.jfree.chart.util.ShapeUtilities.equal(var75, var80);
//     java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var88 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var85, (-1.0d), 100.0d);
//     boolean var89 = org.jfree.chart.util.ShapeUtilities.equal(var83, var85);
//     boolean var90 = org.jfree.chart.util.ShapeUtilities.equal(var75, var85);
//     java.awt.Shape var91 = org.jfree.chart.util.ShapeUtilities.clone(var85);
//     boolean var92 = var54.equals((java.lang.Object)var85);
//     java.awt.Shape var95 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var85, (-1.0d), 10.0d);
//     var3.setShape(11, var85);
//     
//     // Checks the contract:  equals-hashcode on var19 and var3
//     assertTrue("Contract failed: equals-hashcode on var19 and var3", var19.equals(var3) ? var19.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var3
//     assertTrue("Contract failed: equals-hashcode on var35 and var3", var35.equals(var3) ? var35.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var3
//     assertTrue("Contract failed: equals-hashcode on var54 and var3", var54.equals(var3) ? var54.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var69 and var3
//     assertTrue("Contract failed: equals-hashcode on var69 and var3", var69.equals(var3) ? var69.hashCode() == var3.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var19 and var3.", var19.equals(var3) == var3.equals(var19));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var35 and var3.", var35.equals(var3) == var3.equals(var35));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var54 and var3.", var54.equals(var3) == var3.equals(var54));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var69 and var3.", var69.equals(var3) == var3.equals(var69));
// 
//   }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test159"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.awt.Shape var4 = var0.getShape(10);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 0.0d, (-1.0f), 10.0f);
    boolean var14 = var0.equals((java.lang.Object)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test160"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, (-1.0f));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, (-1.0d), 0.0d);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var6, var8);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 10.0f, (-1.0f));
    java.io.ObjectOutputStream var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var6, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test161"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test162"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     var0.setShape(100, var6);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     var0.setShape(10, var11);
//     java.lang.Object var13 = var0.clone();
//     
//     // Checks the contract:  equals-hashcode on var3 and var13
//     assertTrue("Contract failed: equals-hashcode on var3 and var13", var3.equals(var13) ? var3.hashCode() == var13.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var13.", var3.equals(var13) == var13.equals(var3));
// 
//   }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test163"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var12, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 10.0d, 0.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 0.0f, 100.0f);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var2, var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, (-1.0d), 0.0d);
    org.jfree.chart.util.RectangleAnchor var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, var32, 0.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test164"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.lang.Object var28 = null;
    boolean var29 = var0.equals(var28);
    java.awt.Shape var31 = var0.getShape(100);
    var0.clear();
    java.awt.Shape var34 = var0.getShape(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test165"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 0.0d);
    java.io.ObjectOutputStream var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var4, var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test166"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 10.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test167"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 1.0f, 10.0f);
    boolean var24 = var17.equals((java.lang.Object)var19);
    boolean var25 = var0.equals((java.lang.Object)var19);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(100.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    boolean var29 = var0.equals((java.lang.Object)var27);
    java.io.ObjectOutputStream var30 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var27, var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test168"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, 0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), 100.0d);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var18, var23);
    boolean var25 = var0.equals((java.lang.Object)var23);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 1.0d, (-1.0f), (-1.0f));
    var0.setShape(1, var34);
    org.jfree.chart.util.RectangleAnchor var36 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, var36, (-1.0d), 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test169"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    java.lang.Object var18 = var13.clone();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var20, var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), 100.0d);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var28, var30);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var20, var30);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 100.0d, 0.0f, 0.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 100.0d, 100.0d);
    boolean var45 = var13.equals((java.lang.Object)var44);
    org.jfree.chart.util.RectangleAnchor var46 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, var46, 0.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test170"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 100.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var10, var13);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, 1.0d, 100.0f, 1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 10.0d, 0.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test171"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     java.awt.Shape var14 = var0.getShape(0);
//     int var15 = var0.size();
//     boolean var17 = var0.equals((java.lang.Object)(-1.0f));
//     var0.clear();
//     java.lang.Object var19 = var0.clone();
//     org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var21 = var20.clone();
//     java.lang.Object var22 = var20.clone();
//     java.lang.Object var23 = var20.clone();
//     boolean var24 = var0.equals((java.lang.Object)var20);
//     java.awt.Shape var26 = null;
//     var20.setShape(0, var26);
//     
//     // Checks the contract:  equals-hashcode on var0 and var20
//     assertTrue("Contract failed: equals-hashcode on var0 and var20", var0.equals(var20) ? var0.hashCode() == var20.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var0
//     assertTrue("Contract failed: equals-hashcode on var20 and var0", var20.equals(var0) ? var20.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test172"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    var0.clear();
    int var40 = var0.size();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test173"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 1.0d, 0.0f, 1.0f);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 1.0f, 10.0f);
    boolean var23 = var16.equals((java.lang.Object)var18);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)var25);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 1.0d, 10.0d);
    java.io.ObjectOutputStream var35 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var34, var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test174"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var15, var17);
    boolean var33 = var0.equals((java.lang.Object)var32);
    java.lang.Object var34 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    int var35 = var0.size();
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, 1.0d);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var37, var42);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var42);
    boolean var45 = var0.equals((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test175"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
//     var16.setShape(100, var22);
//     var16.clear();
//     java.lang.Object var25 = var16.clone();
//     var16.clear();
//     boolean var28 = var16.equals((java.lang.Object)0);
//     boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var16);
//     java.lang.Object var30 = var16.clone();
//     boolean var31 = var0.equals(var30);
//     org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 0.0d, 1.0f, 10.0f);
//     boolean var39 = var32.equals((java.lang.Object)var34);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 1.0d);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var41);
//     boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var34, (java.lang.Object)var41);
//     boolean var47 = var0.equals((java.lang.Object)var41);
//     var0.clear();
//     java.lang.Object var49 = var0.clone();
//     java.awt.Shape var51 = null;
//     var0.setShape(10, var51);
//     
//     // Checks the contract:  equals-hashcode on var0 and var16
//     assertTrue("Contract failed: equals-hashcode on var0 and var16", var0.equals(var16) ? var0.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var32
//     assertTrue("Contract failed: equals-hashcode on var0 and var32", var0.equals(var32) ? var0.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var0
//     assertTrue("Contract failed: equals-hashcode on var16 and var0", var16.equals(var0) ? var16.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var0
//     assertTrue("Contract failed: equals-hashcode on var32 and var0", var32.equals(var0) ? var32.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test176"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    var0.clear();
    int var40 = var0.size();
    java.awt.Shape var42 = var0.getShape(102);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test177"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 100.0d, 100.0f, (-1.0f));
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 1.0d, (-1.0d));
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, (-1.0d), 0.0f, 100.0f);
    org.jfree.chart.util.RectangleAnchor var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, var23, 10.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test178"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    var5.clear();
    java.lang.Object var14 = var5.clone();
    var5.clear();
    boolean var17 = var5.equals((java.lang.Object)0);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var20);
    int var22 = var5.size();
    boolean var23 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var25 = var0.getShape(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test179"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    var0.clear();
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    java.lang.Object var7 = var3.clone();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 0.0d, 1.0f, 10.0f);
    var3.setShape(1, var10);
    var3.clear();
    int var17 = var3.size();
    boolean var18 = var0.equals((java.lang.Object)var3);
    java.lang.Object var19 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test180"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    boolean var5 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 1.0d);
    java.io.ObjectOutputStream var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var8, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test181"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.io.ObjectOutputStream var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var3, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test182"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.rotateShape(var0, 0.0d, 1.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test183"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var0.setShape(10, var13);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test184"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 100.0d, 0.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 1.0d, 0.0f, (-1.0f));
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var36 = var35.clone();
    var35.clear();
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 10.0d, (-1.0d));
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 10.0d, 1.0d);
    boolean var47 = var35.equals((java.lang.Object)var43);
    boolean var48 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var30, (java.lang.Object)var35);
    var35.clear();
    java.awt.Shape var51 = var35.getShape(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test185"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    boolean var7 = var0.equals((java.lang.Object)var3);
    java.lang.Object var8 = var3.clone();
    java.lang.Object var9 = var3.clone();
    int var10 = var3.size();
    int var11 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test186() {}
//   public void test186() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test186"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     var0.clear();
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
//     boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var17, var22);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
//     boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var25, var27);
//     boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var17, var27);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     var0.setShape(101, var27);
//     org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, 0.0d, 1.0f, 10.0f);
//     boolean var42 = var35.equals((java.lang.Object)var37);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.clone(var44);
//     boolean var49 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var37, (java.lang.Object)var44);
//     boolean var50 = var0.equals((java.lang.Object)var37);
//     
//     // Checks the contract:  equals-hashcode on var35 and var0
//     assertTrue("Contract failed: equals-hashcode on var35 and var0", var35.equals(var0) ? var35.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var35 and var0.", var35.equals(var0) == var0.equals(var35));
// 
//   }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test187"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.lang.Object var13 = var0.clone();
    java.lang.Object var14 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test188"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    var0.clear();
    java.lang.Object var12 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = var13.getShape(100);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = null;
    boolean var18 = var16.equals(var17);
    java.lang.Object var19 = var16.clone();
    boolean var20 = var13.equals((java.lang.Object)var16);
    java.lang.Object var21 = var13.clone();
    boolean var22 = var0.equals((java.lang.Object)var13);
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var23.setShape(100, var29);
    var23.clear();
    java.lang.Object var32 = var23.clone();
    var23.clear();
    boolean var35 = var23.equals((java.lang.Object)0);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var23, (java.lang.Object)var38);
    int var40 = var23.size();
    java.lang.Object var41 = var23.clone();
    boolean var42 = var13.equals(var41);
    var13.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test189"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 100.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 10.0d, 0.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    boolean var23 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var15);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var0, var15);
    org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 0.0d, 1.0f, 10.0f);
    boolean var32 = var25.equals((java.lang.Object)var27);
    java.lang.Object var33 = var25.clone();
    java.lang.Object var34 = null;
    boolean var35 = var25.equals(var34);
    java.lang.Object var36 = var25.clone();
    boolean var37 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var24, var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test190"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    java.lang.Object var13 = var4.clone();
    var4.clear();
    int var15 = var4.size();
    java.lang.Object var16 = var4.clone();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = var17.getShape(0);
    java.lang.Object var20 = var17.clone();
    java.lang.Object var21 = var17.clone();
    boolean var22 = var4.equals((java.lang.Object)var17);
    boolean var23 = var0.equals((java.lang.Object)var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 0.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 10.0d, (-1.0d));
    boolean var32 = var17.equals((java.lang.Object)(-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test191"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var29 = var0.getShape(100);
    var0.clear();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 100.0d, 100.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, 100.0d, (-1.0f), 1.0f);
    boolean var45 = var0.equals((java.lang.Object)(-1.0f));
    int var46 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test192"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 0.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, 100.0d, 10.0f, (-1.0f));
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 100.0d, 0.0f, (-1.0f));
    java.io.ObjectOutputStream var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var8, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test193() {}
//   public void test193() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test193"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     var1.clear();
//     java.awt.Shape var11 = var1.getShape((-1));
//     int var12 = var1.size();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 100.0d);
//     boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, (-1.0d), 1.0f, 10.0f);
//     var1.setShape(0, var25);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var25, 1.0d, (-1.0f), (-1.0f));
// 
//   }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test194"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var3 = var2.clone();
    var2.clear();
    java.awt.Shape var6 = var2.getShape(100);
    var2.clear();
    boolean var8 = var0.equals((java.lang.Object)var2);
    int var9 = var0.size();
    java.lang.Object var10 = var0.clone();
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test195"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = var0.clone();
    java.lang.Object var21 = var0.clone();
    java.lang.Object var22 = null;
    boolean var23 = var0.equals(var22);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    var24.setShape(100, var30);
    var24.clear();
    java.lang.Object var33 = var24.clone();
    var24.clear();
    boolean var36 = var24.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    var37.setShape(100, var43);
    var37.clear();
    java.lang.Object var46 = var37.clone();
    var37.clear();
    boolean var49 = var37.equals((java.lang.Object)0);
    java.lang.Object var50 = var37.clone();
    boolean var51 = var24.equals((java.lang.Object)var37);
    java.awt.Shape var53 = var24.getShape(100);
    var24.clear();
    org.jfree.chart.util.ShapeList var55 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var56 = var55.clone();
    var55.clear();
    java.awt.Shape var59 = var55.getShape(100);
    org.jfree.chart.util.ShapeList var60 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 0.0d, 1.0d);
    var60.setShape(100, var66);
    var60.clear();
    java.lang.Object var69 = var60.clone();
    var60.clear();
    boolean var72 = var60.equals((java.lang.Object)0);
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.clone(var74);
    boolean var76 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var60, (java.lang.Object)var75);
    int var77 = var60.size();
    boolean var78 = var55.equals((java.lang.Object)var77);
    boolean var79 = var24.equals((java.lang.Object)var55);
    boolean var80 = var0.equals((java.lang.Object)var55);
    java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(100.0f);
    java.awt.Shape var84 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var87 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var84, 0.0d, 1.0d);
    boolean var88 = org.jfree.chart.util.ShapeUtilities.equal(var82, var87);
    boolean var89 = var55.equals((java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test196"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 100.0d, 100.0f, (-1.0f));
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 1.0d, (-1.0d));
    java.awt.Shape var19 = null;
    boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var11, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test197"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = var14.clone();
    org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    var21.setShape(100, var27);
    var21.clear();
    java.lang.Object var30 = var21.clone();
    var21.clear();
    boolean var33 = var21.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var34 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
    var34.setShape(100, var40);
    var34.clear();
    java.lang.Object var43 = var34.clone();
    var34.clear();
    boolean var46 = var34.equals((java.lang.Object)0);
    java.lang.Object var47 = var34.clone();
    boolean var48 = var21.equals((java.lang.Object)var34);
    java.awt.Shape var50 = var21.getShape(100);
    var21.clear();
    org.jfree.chart.util.ShapeList var52 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var53 = var52.clone();
    var52.clear();
    java.awt.Shape var56 = var52.getShape(100);
    org.jfree.chart.util.ShapeList var57 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var60, 0.0d, 1.0d);
    var57.setShape(100, var63);
    var57.clear();
    java.lang.Object var66 = var57.clone();
    var57.clear();
    boolean var69 = var57.equals((java.lang.Object)0);
    java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.clone(var71);
    boolean var73 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var57, (java.lang.Object)var72);
    int var74 = var57.size();
    boolean var75 = var52.equals((java.lang.Object)var74);
    boolean var76 = var21.equals((java.lang.Object)var52);
    boolean var77 = var14.equals((java.lang.Object)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test198"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.RectangleAnchor var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, var8, 10.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test199() {}
//   public void test199() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test199"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     java.lang.Object var12 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var10);
//     boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var7, var10);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var16, 10.0d, 1.0f, 10.0f);
// 
//   }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test200"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test201"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var6, var12);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 0.0d);
    java.io.ObjectOutputStream var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var6, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test202() {}
//   public void test202() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test202"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var2 = null;
//     boolean var3 = var1.equals(var2);
//     java.lang.Object var4 = var1.clone();
//     java.lang.Object var5 = var1.clone();
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 0.0d, 1.0f, 10.0f);
//     var1.setShape(1, var8);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 0.0d);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var8);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var17, 1.0d, 0.0f, 10.0f);
// 
//   }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test203"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, (-1.0f));
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var0, var6);
    org.jfree.chart.util.RectangleAnchor var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, var8, 1.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test204"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    int var16 = var0.size();
    java.awt.Shape var18 = var0.getShape(101);
    java.lang.Object var19 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test205"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.lang.Object var13 = var0.clone();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 0.0f);
    boolean var17 = var0.equals((java.lang.Object)var16);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test206"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = null;
    boolean var6 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test207"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var3);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, (-1.0d), 100.0d);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var3, var13);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, (-1.0d));
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 1.0d, 0.0d);
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)10.0d, (java.lang.Object)var30);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 100.0d, 100.0f, 100.0f);
    var0.setShape(101, var30);
    org.jfree.chart.util.RectangleAnchor var40 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, var40, (-1.0d), 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test208"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 100.0d, 10.0f, 10.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 0.0d, 10.0f, 1.0f);
    org.jfree.chart.util.RectangleAnchor var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, var32, (-1.0d), 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test209"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
//     boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var12, 1.0d, 1.0f, 100.0f);
// 
//   }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test210"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    var37.clear();
    java.lang.Object var65 = var37.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test211"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    int var12 = var0.size();
    java.lang.Object var13 = var0.clone();
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var14.setShape(100, var20);
    var14.clear();
    java.lang.Object var23 = var14.clone();
    var14.clear();
    boolean var26 = var14.equals((java.lang.Object)0);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var14, (java.lang.Object)var29);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var14.setShape(0, var34);
    var14.clear();
    java.lang.Object var37 = var14.clone();
    boolean var38 = var0.equals(var37);
    java.awt.Shape var40 = var0.getShape(0);
    java.lang.Object var41 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test212"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    int var10 = var0.size();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 1.0d, 100.0f, 0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    boolean var21 = var0.equals((java.lang.Object)var20);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test213"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var29 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
    var30.setShape(100, var36);
    var30.clear();
    java.lang.Object var39 = var30.clone();
    var30.clear();
    int var41 = var30.size();
    java.awt.Shape var43 = var30.getShape(100);
    boolean var44 = var0.equals((java.lang.Object)var30);
    var30.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test214"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    int var21 = var11.size();
    java.awt.Shape var23 = var11.getShape(0);
    boolean var25 = var11.equals((java.lang.Object)(short)(-1));
    java.lang.Object var26 = var11.clone();
    int var27 = var11.size();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    boolean var38 = var11.equals((java.lang.Object)var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = var11.equals((java.lang.Object)var42);
    java.lang.Object var48 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var42);
    boolean var49 = var0.equals(var48);
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
    var50.setShape(100, var56);
    var50.clear();
    java.lang.Object var59 = var50.clone();
    var50.clear();
    boolean var62 = var50.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
    var63.setShape(100, var69);
    var63.clear();
    java.lang.Object var72 = var63.clone();
    var63.clear();
    boolean var75 = var63.equals((java.lang.Object)0);
    java.lang.Object var76 = var63.clone();
    boolean var77 = var50.equals((java.lang.Object)var63);
    java.awt.Shape var79 = var50.getShape(100);
    boolean var80 = var0.equals((java.lang.Object)var50);
    java.awt.Shape var82 = var50.getShape(101);
    var50.clear();
    int var84 = var50.size();
    java.lang.Object var85 = var50.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test215"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var16 = var0.getShape(0);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    var0.setShape(101, var19);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test216"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 100.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, 100.0d, 0.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test217() {}
//   public void test217() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test217"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 10.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var6, 10.0d, 0.0f, 1.0f);
// 
//   }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test218"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    boolean var17 = var0.equals((java.lang.Object)100);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 10.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 1.0d, (-1.0f), 1.0f);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var29 = var27.getShape(0);
    var27.clear();
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, (-1.0d), 100.0d);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
    var27.setShape(1, var33);
    java.lang.Object var41 = var27.clone();
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 100.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 1.0d, 10.0f, (-1.0f));
    var27.setShape(1, var50);
    java.lang.Object var56 = var27.clone();
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.clone(var59);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.clone(var60);
    java.lang.Object var62 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var61);
    var27.setShape(101, var61);
    boolean var64 = org.jfree.chart.util.ShapeUtilities.equal(var19, var61);
    java.lang.Object var65 = null;
    boolean var66 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var19, var65);
    boolean var67 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test219"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.lang.Object var11 = null;
    boolean var12 = var0.equals(var11);
    java.lang.Object var13 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test220"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var15.setShape(100, var21);
    var15.clear();
    java.lang.Object var24 = var15.clone();
    var15.clear();
    boolean var27 = var15.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    java.lang.Object var37 = var28.clone();
    var28.clear();
    boolean var40 = var28.equals((java.lang.Object)0);
    java.lang.Object var41 = var28.clone();
    boolean var42 = var15.equals((java.lang.Object)var28);
    boolean var43 = var1.equals((java.lang.Object)var15);
    java.lang.Object var44 = var1.clone();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test221"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.awt.Shape var6 = var0.getShape(100);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 100.0d);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 1.0d, 0.0f, 1.0f);
    var0.setShape(101, var23);
    java.awt.Shape var26 = var0.getShape(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test222"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, (-1.0f));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, (-1.0d), 0.0d);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var6, var8);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 10.0f, (-1.0f));
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test223() {}
//   public void test223() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test223"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var15 = var0.clone();
//     int var16 = var0.size();
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
//     var17.setShape(100, var23);
//     var17.clear();
//     int var26 = var17.size();
//     boolean var27 = var0.equals((java.lang.Object)var26);
//     java.lang.Object var28 = null;
//     boolean var29 = var0.equals(var28);
//     java.lang.Object var30 = var0.clone();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(100.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
//     boolean var34 = var0.equals((java.lang.Object)var33);
//     java.awt.Shape var36 = var0.getShape(2);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 1.0d, 0.0d);
//     var0.setShape(102, var43);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var0.", var17.equals(var0) == var0.equals(var17));
// 
//   }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test224"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    int var16 = var0.size();
    java.lang.Object var17 = var0.clone();
    java.lang.Object var18 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    int var19 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test225"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     boolean var11 = org.jfree.chart.util.ShapeUtilities.equal(var5, var10);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, (-1.0d), 100.0d);
//     boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var15);
//     boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var5, var15);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 100.0d, 0.0f, 0.0f);
//     boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var3, var26);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 100.0d, 1.0f, 1.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var26, 10.0d, 10.0f, 1.0f);
// 
//   }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test226"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    int var9 = var0.size();
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.lang.Object var19 = var10.clone();
    var10.clear();
    boolean var22 = var10.equals((java.lang.Object)0);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    boolean var26 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var10, (java.lang.Object)var25);
    boolean var27 = var0.equals((java.lang.Object)var10);
    java.lang.Object var28 = null;
    boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var10, var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test227"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    int var20 = var16.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test228"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var6 = var4.getShape(0);
//     var4.clear();
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
//     var4.setShape(1, var10);
//     java.lang.Object var18 = var4.clone();
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), 100.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 1.0d, 10.0f, (-1.0f));
//     var4.setShape(1, var27);
//     boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var27);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 10.0d, (-1.0d));
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
//     org.jfree.chart.util.ShapeList var41 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var43 = var41.getShape(100);
//     java.lang.Object var44 = var41.clone();
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.clone(var47);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 0.0d, (-1.0d));
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.clone(var47);
//     var41.setShape(1, var52);
//     boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var40, var52);
//     boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var27, var40);
//     
//     // Checks the contract:  equals-hashcode on var44 and var18
//     assertTrue("Contract failed: equals-hashcode on var44 and var18", var44.equals(var18) ? var44.hashCode() == var18.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var44 and var18.", var44.equals(var18) == var18.equals(var44));
// 
//   }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test229"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    int var21 = var11.size();
    java.awt.Shape var23 = var11.getShape(0);
    boolean var25 = var11.equals((java.lang.Object)(short)(-1));
    java.lang.Object var26 = var11.clone();
    int var27 = var11.size();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    boolean var38 = var11.equals((java.lang.Object)var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = var11.equals((java.lang.Object)var42);
    java.lang.Object var48 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var42);
    boolean var49 = var0.equals(var48);
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
    var50.setShape(100, var56);
    var50.clear();
    java.lang.Object var59 = var50.clone();
    var50.clear();
    boolean var62 = var50.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var63 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 0.0d, 1.0d);
    var63.setShape(100, var69);
    var63.clear();
    java.lang.Object var72 = var63.clone();
    var63.clear();
    boolean var75 = var63.equals((java.lang.Object)0);
    java.lang.Object var76 = var63.clone();
    boolean var77 = var50.equals((java.lang.Object)var63);
    java.awt.Shape var79 = var50.getShape(100);
    boolean var80 = var0.equals((java.lang.Object)var50);
    java.awt.Shape var82 = var50.getShape(101);
    var50.clear();
    int var84 = var50.size();
    java.lang.Object var85 = var50.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test230"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    var0.clear();
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, 1.0f, 10.0f);
    boolean var20 = var13.equals((java.lang.Object)var15);
    java.lang.Object var21 = var13.clone();
    java.lang.Object var22 = null;
    boolean var23 = var13.equals(var22);
    int var24 = var13.size();
    boolean var25 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var27 = var0.getShape(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test231"); }


    java.lang.Object var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, (-1.0d));
    boolean var7 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)'#');
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 1.0f, 0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    boolean var13 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var2);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var16 = null;
    boolean var17 = var15.equals(var16);
    java.lang.Object var18 = var15.clone();
    java.lang.Object var19 = var15.clone();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 0.0d, 1.0f, 10.0f);
    var15.setShape(1, var22);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 10.0d, 0.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var14, var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test232"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.lang.Object var30 = var0.clone();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, (-1.0d));
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, (-1.0d), 100.0d);
    boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var39, var41);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 10.0d, 1.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var48, var51);
    boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var32, var51);
    java.lang.Object var54 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var32);
    boolean var55 = var0.equals((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test233"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    var0.clear();
    java.lang.Object var40 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test234"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, (-1.0f));
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.awt.Shape var20 = var10.getShape((-1));
    java.awt.Shape var22 = var10.getShape((-1));
    java.lang.Object var23 = var10.clone();
    boolean var24 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var10);
    java.lang.Object var25 = var10.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, (-1.0d), 100.0d);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 0.0d, (-1.0f), 10.0f);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var27, var38);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, (-1.0d));
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 1.0d, 0.0d);
    boolean var50 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var10, (java.lang.Object)var38);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 10.0d, 0.0d);
    org.jfree.chart.util.RectangleAnchor var54 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, var54, (-1.0d), 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test235"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 0.0f);
    boolean var4 = org.jfree.chart.util.ShapeUtilities.equal(var0, var3);
    org.jfree.chart.util.RectangleAnchor var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, var5, 10.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test236"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    java.lang.Object var18 = var13.clone();
    java.lang.Object var19 = var13.clone();
    java.lang.Object var20 = var13.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test237"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var0.clone();
    java.awt.Shape var19 = var0.getShape(1);
    java.awt.Shape var21 = var0.getShape(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test238"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, (-1.0d));
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var7.setShape(100, var13);
    var7.clear();
    java.lang.Object var16 = var7.clone();
    var7.clear();
    boolean var19 = var7.equals((java.lang.Object)0);
    boolean var20 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var7);
    java.lang.Object var21 = var7.clone();
    org.jfree.chart.util.ShapeList var22 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var23 = var22.clone();
    var22.clear();
    boolean var25 = var7.equals((java.lang.Object)var22);
    java.lang.Object var26 = var7.clone();
    var7.clear();
    java.awt.Shape var29 = var7.getShape(1);
    boolean var30 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)1);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 0.0d, 1.0d);
    boolean var38 = org.jfree.chart.util.ShapeUtilities.equal(var32, var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var32, var42);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 0.0d);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var2, var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test239"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    java.lang.Object var6 = var0.clone();
    int var7 = var0.size();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 100.0d, 1.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, 0.0d);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var13, var29);
    boolean var32 = var0.equals((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test240"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 100.0d, (-1.0d));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, (-1.0d));
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 10.0d, 0.0d);
    java.io.ObjectOutputStream var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var11, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test241"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape((-1));
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), 100.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 0.0d, (-1.0f), 10.0f);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var12, var23);
    var0.setShape(101, var23);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, 1.0d);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 0.0d, (-1.0f), 0.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test242"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    int var16 = var0.size();
    java.lang.Object var17 = var0.clone();
    java.lang.Object var18 = var0.clone();
    java.awt.Shape var20 = var0.getShape(1);
    int var21 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test243() {}
//   public void test243() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test243"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     var1.clear();
//     java.lang.Object var10 = var1.clone();
//     int var11 = var1.size();
//     java.awt.Shape var13 = var1.getShape(0);
//     boolean var15 = var1.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var16 = var1.clone();
//     int var17 = var1.size();
//     org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
//     int var19 = var18.size();
//     boolean var20 = var1.equals((java.lang.Object)var19);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
//     boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, (-1.0d));
//     boolean var44 = var1.equals((java.lang.Object)var40);
//     org.jfree.chart.util.ShapeList var45 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var47, 0.0d, 1.0f, 10.0f);
//     boolean var52 = var45.equals((java.lang.Object)var47);
//     java.awt.Shape var53 = null;
//     boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var47, var53);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var47);
//     boolean var56 = var1.equals((java.lang.Object)var55);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var55, (-1.0d), 10.0f, 0.0f);
// 
//   }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test244"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 100.0d, 10.0f, 10.0f);
    org.jfree.chart.util.RectangleAnchor var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, var28, 100.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test245"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    java.awt.Shape var11 = var0.getShape((-1));
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 100.0d, (-1.0d));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, (-1.0d));
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 10.0d, 0.0d);
    boolean var30 = var0.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test246"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.awt.Shape var21 = var14.getShape(100);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    boolean var30 = var14.equals((java.lang.Object)var24);
    java.lang.Object var31 = var14.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test247"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    var0.clear();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
    var0.setShape(0, var19);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 100.0d, 10.0f, 10.0f);
    java.io.ObjectOutputStream var25 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var19, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test248"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var4, var11);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, 1.0f, 10.0f);
    boolean var20 = var13.equals((java.lang.Object)var15);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var23 = var13.equals((java.lang.Object)var22);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = var24.getShape(100);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var28 = null;
    boolean var29 = var27.equals(var28);
    java.lang.Object var30 = var27.clone();
    boolean var31 = var24.equals((java.lang.Object)var27);
    boolean var32 = var13.equals((java.lang.Object)var27);
    java.lang.Object var33 = var13.clone();
    java.lang.Object var34 = var13.clone();
    boolean var35 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var12, (java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test249"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 100.0d, 0.0f, (-1.0f));
    var0.setShape(0, var7);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, (-1.0d), 100.0d);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var14, var24);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 10.0d, 10.0f, 0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 1.0d, 10.0d);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var7, var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test250"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    var0.clear();
    int var7 = var0.size();
    java.lang.Object var8 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test251() {}
//   public void test251() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test251"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(0);
//     var0.clear();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var0.setShape(1, var6);
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var16 = var0.getShape(0);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
//     boolean var40 = var0.equals((java.lang.Object)var39);
//     var0.clear();
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 100.0d);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 1.0d, 10.0f, (-1.0f));
//     java.lang.Object var55 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var54);
//     var0.setShape(1, var54);
//     java.lang.Object var57 = var0.clone();
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.rotateShape(var59, 0.0d, 1.0f, 10.0f);
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var65, 0.0d, 1.0d);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.clone(var65);
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.rotateShape(var65, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var73, 100.0d, 1.0d);
//     java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var73, 1.0d, 0.0d);
//     boolean var80 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var59, (java.lang.Object)var79);
//     boolean var81 = var0.equals((java.lang.Object)var79);
//     org.jfree.chart.util.ShapeList var82 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var83 = var82.clone();
//     java.awt.Shape var85 = var82.getShape(0);
//     java.awt.Shape var88 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var89 = org.jfree.chart.util.ShapeUtilities.clone(var88);
//     var82.setShape(100, var88);
//     boolean var91 = var0.equals((java.lang.Object)var88);
//     
//     // Checks the contract:  equals-hashcode on var83 and var14
//     assertTrue("Contract failed: equals-hashcode on var83 and var14", var83.equals(var14) ? var83.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var83 and var57
//     assertTrue("Contract failed: equals-hashcode on var83 and var57", var83.equals(var57) ? var83.hashCode() == var57.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var83 and var14.", var83.equals(var14) == var14.equals(var83));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var83 and var57.", var83.equals(var57) == var57.equals(var83));
// 
//   }

  public void test252() {}
//   public void test252() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test252"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     java.lang.Object var12 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var10);
//     boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var7, var10);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var7, 1.0d, 1.0f, 100.0f);
// 
//   }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test253"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 100.0d, 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test254"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var4);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 100.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test255"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    int var28 = var13.size();
    var13.clear();
    java.lang.Object var30 = null;
    boolean var31 = var13.equals(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test256"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var0.setShape(10, var13);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var21);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, (-1.0d), 100.0d);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var26);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var16, var26);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    boolean var33 = var0.equals((java.lang.Object)var32);
    int var34 = var0.size();
    java.lang.Object var35 = var0.clone();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, (-1.0d), 100.0d);
    boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var38, var48);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, 0.0d, (-1.0d));
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.rotateShape(var59, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.clone(var63);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 100.0d, 0.0d);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 100.0d, (-1.0d));
    java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.clone(var70);
    var0.setShape(101, var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test257"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.lang.Object var23 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var22);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 0.0d, 1.0f, 100.0f);
    org.jfree.chart.util.RectangleAnchor var29 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, var29, (-1.0d), 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test258"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    boolean var7 = var0.equals((java.lang.Object)var3);
    java.lang.Object var8 = var0.clone();
    java.awt.Shape var10 = var0.getShape(102);
    java.awt.Shape var12 = var0.getShape((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test259"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 100.0d, 0.0d);
    var0.setShape(101, var16);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test260"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 0.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, (-1.0f), 100.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test261"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 100.0d, (-1.0d));
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, (-1.0d), 10.0d);
    org.jfree.chart.util.ShapeList var29 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 0.0d, 1.0d);
    var29.setShape(100, var35);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    var29.setShape(0, var39);
    java.awt.Shape var43 = var29.getShape(10);
    var29.clear();
    boolean var45 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)"hi!", (java.lang.Object)var29);
    java.lang.Object var46 = var29.clone();
    java.lang.Object var47 = var29.clone();
    boolean var48 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var24, var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-1), var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test262"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var12, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 100.0d, 10.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test263() {}
//   public void test263() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test263"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     var0.clear();
//     int var2 = var0.size();
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var3.setShape(100, var9);
//     var3.clear();
//     java.lang.Object var12 = var3.clone();
//     int var13 = var3.size();
//     java.awt.Shape var15 = var3.getShape(0);
//     boolean var17 = var3.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var18 = var3.clone();
//     int var19 = var3.size();
//     org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
//     var20.setShape(100, var26);
//     var20.clear();
//     int var29 = var20.size();
//     boolean var30 = var3.equals((java.lang.Object)var29);
//     java.lang.Object var31 = null;
//     boolean var32 = var3.equals(var31);
//     java.lang.Object var33 = var3.clone();
//     java.lang.Object var34 = var3.clone();
//     boolean var35 = var0.equals((java.lang.Object)var3);
//     java.awt.Shape var37 = var0.getShape(1);
//     int var38 = var0.size();
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 100.0f);
//     org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
//     var42.setShape(100, var48);
//     var42.clear();
//     java.awt.Shape var52 = var42.getShape((-1));
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
//     var42.setShape(100, var56);
//     boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var41, (java.lang.Object)var56);
//     boolean var59 = var0.equals((java.lang.Object)var41);
//     
//     // Checks the contract:  equals-hashcode on var0 and var42
//     assertTrue("Contract failed: equals-hashcode on var0 and var42", var0.equals(var42) ? var0.hashCode() == var42.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var42
//     assertTrue("Contract failed: equals-hashcode on var3 and var42", var3.equals(var42) ? var3.hashCode() == var42.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var42
//     assertTrue("Contract failed: equals-hashcode on var20 and var42", var20.equals(var42) ? var20.hashCode() == var42.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var42.", var0.equals(var42) == var42.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var42.", var3.equals(var42) == var42.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var42.", var20.equals(var42) == var42.equals(var20));
// 
//   }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test264"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(0);
    java.lang.Object var11 = var0.clone();
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    var12.setShape(100, var18);
    var12.clear();
    int var21 = var12.size();
    java.lang.Object var22 = null;
    boolean var23 = var12.equals(var22);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 0.0d, 1.0f, 10.0f);
    boolean var31 = var24.equals((java.lang.Object)var26);
    java.awt.Shape var33 = var24.getShape(100);
    var24.clear();
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    var35.setShape(100, var41);
    var35.clear();
    java.lang.Object var44 = var35.clone();
    var35.clear();
    boolean var47 = var35.equals((java.lang.Object)0);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.clone(var49);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var52, 0.0d, 1.0d);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.clone(var52);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var62, (-1.0d), 100.0d);
    boolean var66 = org.jfree.chart.util.ShapeUtilities.equal(var52, var62);
    boolean var67 = org.jfree.chart.util.ShapeUtilities.equal(var50, var52);
    boolean var68 = var35.equals((java.lang.Object)var67);
    java.lang.Object var69 = var35.clone();
    boolean var70 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var24, var69);
    boolean var71 = var12.equals(var69);
    java.awt.Shape var73 = var12.getShape(0);
    org.jfree.chart.util.ShapeList var74 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var75 = null;
    boolean var76 = var74.equals(var75);
    java.lang.Object var77 = var74.clone();
    var74.clear();
    java.awt.Shape var80 = var74.getShape(100);
    int var81 = var74.size();
    boolean var82 = var12.equals((java.lang.Object)var74);
    boolean var83 = var0.equals((java.lang.Object)var12);
    java.awt.Shape var85 = var12.getShape(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test265() {}
//   public void test265() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test265"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var10);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 1.0d, (-1.0d));
//     boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var10, var24);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 10.0d);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 10.0d, 10.0f, (-1.0f));
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var31, 0.0d, 0.0f, 1.0f);
// 
//   }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test266"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = var14.getShape(100);
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var18 = null;
    boolean var19 = var17.equals(var18);
    java.lang.Object var20 = var17.clone();
    boolean var21 = var14.equals((java.lang.Object)var17);
    java.lang.Object var22 = var17.clone();
    java.lang.Object var23 = var17.clone();
    boolean var24 = var0.equals((java.lang.Object)var17);
    java.lang.Object var25 = var17.clone();
    org.jfree.chart.util.ShapeList var26 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 0.0d, 1.0d);
    var26.setShape(100, var32);
    var26.clear();
    java.lang.Object var35 = var26.clone();
    var26.clear();
    boolean var38 = var26.equals((java.lang.Object)0);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 0.0d, 1.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, (-1.0d), 100.0d);
    boolean var57 = org.jfree.chart.util.ShapeUtilities.equal(var43, var53);
    boolean var58 = org.jfree.chart.util.ShapeUtilities.equal(var41, var43);
    boolean var59 = var26.equals((java.lang.Object)var58);
    java.lang.Object var60 = var26.clone();
    org.jfree.chart.util.ShapeList var61 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var64, 0.0d, 1.0d);
    var61.setShape(100, var67);
    var61.clear();
    int var70 = var61.size();
    java.lang.Object var71 = null;
    boolean var72 = var61.equals(var71);
    boolean var73 = var26.equals((java.lang.Object)var61);
    boolean var74 = var17.equals((java.lang.Object)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test267"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 100.0d, 0.0d);
    var0.setShape(101, var16);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test268"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 100.0d, 100.0f, (-1.0f));
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 1.0d, (-1.0d));
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, (-1.0d), 0.0f, 100.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test269"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test270"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = var5.getShape(100);
    java.lang.Object var8 = var5.clone();
    var5.clear();
    boolean var10 = var0.equals((java.lang.Object)var5);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var5);
    int var12 = var5.size();
    int var13 = var5.size();
    java.lang.Object var14 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test271"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    var16.clear();
    java.lang.Object var25 = var16.clone();
    var16.clear();
    boolean var28 = var16.equals((java.lang.Object)0);
    boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var16);
    java.lang.Object var30 = var16.clone();
    boolean var31 = var0.equals(var30);
    java.lang.Object var32 = var0.clone();
    var0.clear();
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, (-1.0d), 0.0d);
    org.jfree.chart.util.ShapeList var39 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var40 = var39.clone();
    var39.clear();
    java.lang.Object var42 = var39.clone();
    boolean var43 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1.0d), (java.lang.Object)var39);
    boolean var44 = var0.equals((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test272"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), (-1.0f));
    java.io.ObjectOutputStream var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test273"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
    boolean var8 = var1.equals((java.lang.Object)var3);
    java.awt.Shape var10 = var1.getShape(100);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var1.setShape(10, var14);
    java.lang.Object var16 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var14);
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    boolean var26 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var23, (java.lang.Object)"");
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var14, var23);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var0, var23);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test274"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 100.0d, 100.0d);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    var5.clear();
    java.awt.Shape var15 = var5.getShape(100);
    java.lang.Object var16 = var5.clone();
    var5.clear();
    var5.clear();
    java.lang.Object var19 = var5.clone();
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone(var19);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)100.0d, var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test275"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    java.lang.Object var39 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    var0.clear();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test276"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var8 = null;
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var1, var8);
    org.jfree.chart.util.RectangleAnchor var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, var10, 0.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test277"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    int var20 = var14.size();
    org.jfree.chart.util.ShapeList var21 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 0.0d, 1.0f, 10.0f);
    boolean var28 = var21.equals((java.lang.Object)var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var31 = var21.equals((java.lang.Object)var30);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 0.0d);
    boolean var35 = var14.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test278"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, (-1.0d));
    boolean var7 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)'#');
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var2, var9);
    boolean var11 = org.jfree.chart.util.ShapeUtilities.equal(var0, var9);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 1.0f);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test279"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, (-1.0f));
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.awt.Shape var20 = var10.getShape((-1));
    java.awt.Shape var22 = var10.getShape((-1));
    java.lang.Object var23 = var10.clone();
    boolean var24 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var10);
    org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = var25.getShape(100);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var29 = null;
    boolean var30 = var28.equals(var29);
    java.lang.Object var31 = var28.clone();
    boolean var32 = var25.equals((java.lang.Object)var28);
    java.lang.Object var33 = var25.clone();
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var25);
    java.awt.Shape var36 = var25.getShape(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test280"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    var0.clear();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 1.0d, (-1.0f), (-1.0f));
    boolean var15 = var0.equals((java.lang.Object)var10);
    java.io.ObjectOutputStream var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var10, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test281"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 100.0d, (-1.0d));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 10.0d);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    var16.setShape(0, var26);
    java.awt.Shape var30 = var16.getShape(10);
    var16.clear();
    boolean var32 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)"hi!", (java.lang.Object)var16);
    java.lang.Object var33 = var16.clone();
    java.lang.Object var34 = var16.clone();
    boolean var35 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var11, var34);
    java.io.ObjectOutputStream var36 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var11, var36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test282"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    var16.clear();
    java.lang.Object var25 = var16.clone();
    var16.clear();
    boolean var28 = var16.equals((java.lang.Object)0);
    boolean var29 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var16);
    java.lang.Object var30 = var16.clone();
    boolean var31 = var0.equals(var30);
    org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 0.0d, 1.0f, 10.0f);
    boolean var39 = var32.equals((java.lang.Object)var34);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 1.0d);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var34, (java.lang.Object)var41);
    boolean var47 = var0.equals((java.lang.Object)var41);
    var0.clear();
    java.lang.Object var49 = var0.clone();
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var51 = var50.clone();
    var50.clear();
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var54, 10.0d, (-1.0d));
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.clone(var54);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 10.0d, 1.0d);
    boolean var62 = var50.equals((java.lang.Object)var58);
    boolean var63 = org.jfree.chart.util.ObjectUtilities.equal(var49, (java.lang.Object)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test283() {}
//   public void test283() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test283"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var14 = var13.clone();
//     java.lang.Object var15 = var13.clone();
//     boolean var16 = var0.equals((java.lang.Object)var13);
//     java.lang.Object var17 = var13.clone();
//     java.lang.Object var18 = var13.clone();
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
//     boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var20, var25);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, (-1.0d), 100.0d);
//     boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var28, var30);
//     boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var20, var30);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var30);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var30);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 100.0d, 0.0f, 0.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 100.0d, 100.0d);
//     boolean var45 = var13.equals((java.lang.Object)var44);
//     org.jfree.chart.util.ShapeList var47 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.rotateShape(var49, 0.0d, 1.0f, 10.0f);
//     boolean var54 = var47.equals((java.lang.Object)var49);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var57 = var47.equals((java.lang.Object)var56);
//     org.jfree.chart.util.ShapeList var58 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var60 = var58.getShape(100);
//     org.jfree.chart.util.ShapeList var61 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var62 = null;
//     boolean var63 = var61.equals(var62);
//     java.lang.Object var64 = var61.clone();
//     boolean var65 = var58.equals((java.lang.Object)var61);
//     boolean var66 = var47.equals((java.lang.Object)var61);
//     java.awt.Shape var68 = var61.getShape(100);
//     java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
//     java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.rotateShape(var71, 1.0d, 0.0f, 100.0f);
//     java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.clone(var71);
//     boolean var77 = var61.equals((java.lang.Object)var71);
//     var13.setShape(101, var71);
//     
//     // Checks the contract:  equals-hashcode on var0 and var13
//     assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var13
//     assertTrue("Contract failed: equals-hashcode on var47 and var13", var47.equals(var13) ? var47.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var13
//     assertTrue("Contract failed: equals-hashcode on var58 and var13", var58.equals(var13) ? var58.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var61 and var13
//     assertTrue("Contract failed: equals-hashcode on var61 and var13", var61.equals(var13) ? var61.hashCode() == var13.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var13.", var0.equals(var13) == var13.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var47 and var13.", var47.equals(var13) == var13.equals(var47));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var58 and var13.", var58.equals(var13) == var13.equals(var58));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var61 and var13.", var61.equals(var13) == var13.equals(var61));
// 
//   }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test284"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 100.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var14 = org.jfree.chart.util.ShapeUtilities.equal(var10, var13);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 0.0d, 0.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test285"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 10.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var15);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), 100.0d);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var18, var20);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var10, var20);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 100.0d, 0.0f, 0.0f);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var8, var31);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    java.io.ObjectOutputStream var34 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var8, var34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test286"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var12, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = var0.equals((java.lang.Object)var22);
    java.lang.Object var24 = var0.clone();
    int var25 = var0.size();
    java.awt.Shape var27 = var0.getShape(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test287() {}
//   public void test287() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test287"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = null;
//     boolean var2 = var0.equals(var1);
//     java.lang.Object var3 = var0.clone();
//     java.lang.Object var4 = var0.clone();
//     java.lang.Object var5 = var0.clone();
//     org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
//     var6.setShape(100, var12);
//     var6.clear();
//     java.lang.Object var15 = var6.clone();
//     int var16 = var6.size();
//     java.awt.Shape var18 = var6.getShape(0);
//     boolean var20 = var6.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var21 = var6.clone();
//     int var22 = var6.size();
//     org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
//     int var24 = var23.size();
//     boolean var25 = var6.equals((java.lang.Object)var24);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, (-1.0d), 100.0d);
//     boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var27, var37);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, (-1.0d));
//     boolean var49 = var6.equals((java.lang.Object)var45);
//     org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, 0.0d, 1.0f, 10.0f);
//     boolean var57 = var50.equals((java.lang.Object)var52);
//     java.awt.Shape var58 = null;
//     boolean var59 = org.jfree.chart.util.ShapeUtilities.equal(var52, var58);
//     java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.clone(var52);
//     boolean var61 = var6.equals((java.lang.Object)var60);
//     java.lang.Object var62 = var6.clone();
//     boolean var63 = var0.equals((java.lang.Object)var6);
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var66, 10.0d, (-1.0d));
//     java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.rotateShape(var66, 1.0d, (-1.0f), 1.0f);
//     org.jfree.chart.util.ShapeList var74 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.rotateShape(var76, 0.0d, 1.0f, 10.0f);
//     boolean var81 = var74.equals((java.lang.Object)var76);
//     java.awt.Shape var83 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var84 = var74.equals((java.lang.Object)var83);
//     java.awt.Shape var87 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var83, 0.0d, 0.0d);
//     boolean var88 = org.jfree.chart.util.ShapeUtilities.equal(var66, var83);
//     java.lang.Object var89 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var83);
//     var0.setShape(100, var83);
//     
//     // Checks the contract:  equals-hashcode on var6 and var0
//     assertTrue("Contract failed: equals-hashcode on var6 and var0", var6.equals(var0) ? var6.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var23 and var0
//     assertTrue("Contract failed: equals-hashcode on var23 and var0", var23.equals(var0) ? var23.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var50 and var0
//     assertTrue("Contract failed: equals-hashcode on var50 and var0", var50.equals(var0) ? var50.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var74 and var0
//     assertTrue("Contract failed: equals-hashcode on var74 and var0", var74.equals(var0) ? var74.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var6 and var0.", var6.equals(var0) == var0.equals(var6));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var23 and var0.", var23.equals(var0) == var0.equals(var23));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var50 and var0.", var50.equals(var0) == var0.equals(var50));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var74 and var0.", var74.equals(var0) == var0.equals(var74));
// 
//   }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test288"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var0.setShape(0, var17);
    java.awt.Shape var23 = var0.getShape(100);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test289() {}
//   public void test289() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test289"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     int var9 = var0.size();
//     var0.clear();
//     java.lang.Object var11 = var0.clone();
//     boolean var13 = var0.equals((java.lang.Object)'#');
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 100.0d);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 100.0d);
//     org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var29 = var27.getShape(0);
//     var27.clear();
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, (-1.0d), 100.0d);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
//     var27.setShape(1, var33);
//     java.lang.Object var41 = var27.clone();
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 100.0d);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 0.0d, 1.0d);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 1.0d, 10.0f, (-1.0f));
//     var27.setShape(1, var50);
//     java.lang.Object var56 = var27.clone();
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, (-1.0d), 100.0d);
//     java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 0.0d, 1.0d);
//     java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.clone(var63);
//     java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.rotateShape(var63, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var71, 100.0d, 1.0d);
//     java.awt.Shape var77 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var71, 1.0d, 0.0d);
//     java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.clone(var77);
//     boolean var79 = org.jfree.chart.util.ShapeUtilities.equal(var61, var77);
//     boolean var80 = var27.equals((java.lang.Object)var77);
//     boolean var81 = org.jfree.chart.util.ShapeUtilities.equal(var19, var77);
//     boolean var82 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var81);
//     
//     // Checks the contract:  equals-hashcode on var0 and var27
//     assertTrue("Contract failed: equals-hashcode on var0 and var27", var0.equals(var27) ? var0.hashCode() == var27.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var27.", var0.equals(var27) == var27.equals(var0));
//     
//     // Checks the contract:  equals-hashcode on var11 and var41
//     assertTrue("Contract failed: equals-hashcode on var11 and var41", var11.equals(var41) ? var11.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var56
//     assertTrue("Contract failed: equals-hashcode on var11 and var56", var11.equals(var56) ? var11.hashCode() == var56.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var41
//     assertTrue("Contract failed: equals-hashcode on var14 and var41", var14.equals(var41) ? var14.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var56
//     assertTrue("Contract failed: equals-hashcode on var14 and var56", var14.equals(var56) ? var14.hashCode() == var56.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var41.", var11.equals(var41) == var41.equals(var11));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var56.", var11.equals(var56) == var56.equals(var11));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var41.", var14.equals(var41) == var41.equals(var14));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var56.", var14.equals(var56) == var56.equals(var14));
// 
//   }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test290"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    org.jfree.chart.util.RectangleAnchor var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, var18, (-1.0d), 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test291"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.lang.Object var13 = var0.clone();
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = var14.clone();
    var14.clear();
    java.awt.Shape var18 = var14.getShape(100);
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = var19.getShape(100);
    java.lang.Object var22 = var19.clone();
    var19.clear();
    boolean var24 = var14.equals((java.lang.Object)var19);
    java.lang.Object var25 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var19);
    boolean var26 = var0.equals((java.lang.Object)var19);
    var0.clear();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var30 = var28.getShape(0);
    java.lang.Object var31 = var28.clone();
    int var32 = var28.size();
    java.lang.Object var33 = var28.clone();
    java.lang.Object var34 = var28.clone();
    boolean var35 = var0.equals(var34);
    java.awt.Shape var37 = var0.getShape(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test292"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    var9.clear();
    java.awt.Shape var12 = var9.getShape(1);
    int var13 = var9.size();
    java.awt.Shape var15 = var9.getShape(0);
    java.lang.Object var16 = var9.clone();
    boolean var17 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test293"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 10.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    boolean var12 = var0.equals((java.lang.Object)var8);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = null;
    boolean var15 = var13.equals(var14);
    java.lang.Object var16 = var13.clone();
    java.lang.Object var17 = var13.clone();
    java.lang.Object var18 = var13.clone();
    boolean var19 = var0.equals(var18);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test294"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, (-1.0d), 100.0d);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var12, var22);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 10.0d, 10.0f, 0.0f);
    boolean var35 = var0.equals((java.lang.Object)10.0f);
    var0.clear();
    int var37 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test295"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape(100);
    java.lang.Object var11 = var0.clone();
    int var12 = var0.size();
    int var13 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test296"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var0.clone();
    java.lang.Object var18 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test297"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 0.0d);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var5);
    java.io.ObjectOutputStream var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var5, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test298"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 10.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    boolean var12 = var0.equals((java.lang.Object)var8);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var8, (java.lang.Object)var14);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test299() {}
//   public void test299() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test299"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = var0.clone();
//     var0.clear();
//     java.awt.Shape var4 = var0.getShape(100);
//     org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
//     var5.setShape(100, var11);
//     var5.clear();
//     java.lang.Object var14 = var5.clone();
//     var5.clear();
//     boolean var17 = var5.equals((java.lang.Object)0);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
//     boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var20);
//     int var22 = var5.size();
//     boolean var23 = var0.equals((java.lang.Object)var22);
//     java.lang.Object var24 = var0.clone();
//     org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
//     var25.setShape(100, var31);
//     var25.clear();
//     java.lang.Object var34 = var25.clone();
//     var25.clear();
//     boolean var37 = var25.equals((java.lang.Object)0);
//     var25.clear();
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, (-1.0d), 0.0d);
//     var25.setShape(0, var44);
//     boolean var46 = var0.equals((java.lang.Object)var44);
//     
//     // Checks the contract:  equals-hashcode on var0 and var25
//     assertTrue("Contract failed: equals-hashcode on var0 and var25", var0.equals(var25) ? var0.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var5 and var25
//     assertTrue("Contract failed: equals-hashcode on var5 and var25", var5.equals(var25) ? var5.hashCode() == var25.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var25.", var0.equals(var25) == var25.equals(var0));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var5 and var25.", var5.equals(var25) == var25.equals(var5));
// 
//   }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test300"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 10.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 100.0f, 0.0f);
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var7.setShape(100, var13);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    var7.setShape(0, var17);
    java.awt.Shape var21 = var7.getShape(10);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    var7.setShape(0, var24);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 10.0d, (-1.0f), 10.0f);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)100.0f, (java.lang.Object)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test301"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    java.awt.Shape var3 = var0.getShape(0);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    var0.setShape(100, var6);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, (-1.0d), 0.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 0.0d, 10.0f, 1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 0.0d, 0.0f, 1.0f);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var11, var20);
    boolean var26 = var0.equals((java.lang.Object)var11);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 0.0d, 10.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test302"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 0.0d, 1.0d);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var5);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var5, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, 100.0d, 0.0f, (-1.0f));
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var13, var16);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var13);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var3, var22);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 10.0d, 100.0d);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, 0.0d, 100.0f, 100.0f);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var0, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test303"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 0.0d, 1.0f, 10.0f);
    boolean var19 = var12.equals((java.lang.Object)var14);
    java.awt.Shape var21 = var12.getShape(100);
    var12.clear();
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var23.setShape(100, var29);
    var23.clear();
    java.lang.Object var32 = var23.clone();
    var23.clear();
    boolean var35 = var23.equals((java.lang.Object)0);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var40, var50);
    boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var38, var40);
    boolean var56 = var23.equals((java.lang.Object)var55);
    java.lang.Object var57 = var23.clone();
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var12, var57);
    boolean var59 = var0.equals(var57);
    java.lang.Object var60 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test304() {}
//   public void test304() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test304"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
//     boolean var7 = var0.equals((java.lang.Object)var2);
//     java.lang.Object var8 = var0.clone();
//     java.lang.Object var9 = null;
//     boolean var10 = var0.equals(var9);
//     int var11 = var0.size();
//     org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var13 = null;
//     boolean var14 = var12.equals(var13);
//     java.lang.Object var15 = var12.clone();
//     var12.clear();
//     java.awt.Shape var18 = var12.getShape(100);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), 100.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 1.0d, 10.0f, (-1.0f));
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 1.0d, 0.0f, 1.0f);
//     var12.setShape(101, var35);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var35);
//     boolean var38 = var0.equals((java.lang.Object)var37);
//     
//     // Checks the contract:  equals-hashcode on var0 and var12
//     assertTrue("Contract failed: equals-hashcode on var0 and var12", var0.equals(var12) ? var0.hashCode() == var12.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var12.", var0.equals(var12) == var12.equals(var0));
// 
//   }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test305"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(10);
    java.awt.Shape var4 = var0.getShape(0);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var8);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var8);
    var0.setShape(101, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test306"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    java.lang.Object var11 = var0.clone();
    java.lang.Object var12 = null;
    boolean var13 = var0.equals(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test307"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, (-1.0d));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 100.0d, 0.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 1.0d, 0.0f, (-1.0f));
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var36 = var35.clone();
    var35.clear();
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 10.0d, (-1.0d));
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 10.0d, 1.0d);
    boolean var47 = var35.equals((java.lang.Object)var43);
    boolean var48 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var30, (java.lang.Object)var35);
    var35.clear();
    java.lang.Object var50 = var35.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test308"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 100.0d, 1.0d);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 1.0d, 0.0d);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = org.jfree.chart.util.ShapeUtilities.equal(var5, var21);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 10.0d, 0.0d);
    org.jfree.chart.util.RectangleAnchor var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, var27, (-1.0d), (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test309"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var0.setShape(100, var6);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    var0.setShape(10, var11);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    var13.clear();
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 0.0d);
    var13.setShape(0, var32);
    boolean var34 = var0.equals((java.lang.Object)var32);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 100.0d, 100.0d);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 100.0d, (-1.0f), 1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.rotateShape(var49, 0.0d, 10.0f, 0.0f);
    var0.setShape(101, var53);
    int var55 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 102);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test310"); }


    org.jfree.chart.util.ShapeList var2 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 0.0d, 1.0d);
    var2.setShape(100, var8);
    var2.clear();
    java.lang.Object var11 = var2.clone();
    var2.clear();
    boolean var14 = var2.equals((java.lang.Object)0);
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var2);
    java.lang.Object var16 = var2.clone();
    boolean var17 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var2);
    java.awt.Shape var19 = var2.getShape((-1));
    var2.clear();
    int var21 = var2.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test311"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 10.0f, 10.0f);
    java.lang.Object var7 = null;
    boolean var8 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test312() {}
//   public void test312() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test312"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, (-1.0d), 100.0d);
//     org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
//     var6.setShape(100, var12);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
//     var6.setShape(0, var16);
//     java.awt.Shape var20 = var6.getShape(10);
//     java.awt.Shape var22 = var6.getShape((-1));
//     int var23 = var6.size();
//     java.awt.Shape var25 = var6.getShape(0);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 0.0d, 1.0d);
//     boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var27, var32);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, (-1.0d), 100.0d);
//     boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var35, var37);
//     boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var27, var37);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var25, var44);
//     boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var2, var44);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var2, 10.0d, (-1.0f), 0.0f);
// 
//   }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test313"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, (-1.0d));
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = null;
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, (-1.0d));
    org.jfree.chart.util.RectangleAnchor var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, var11, 1.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test314"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    var1.clear();
    java.awt.Shape var18 = var1.getShape(10);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    var1.setShape(0, var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, (-1.0d), 0.0d);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 0.0d, 10.0f, 1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 0.0d, 0.0f, 1.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    boolean var41 = var1.equals((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test315"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    var0.clear();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 100.0d);
    boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, (-1.0d));
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, 10.0d, 1.0f, 0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 100.0d, 0.0d);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var44, 1.0d, 0.0f, (-1.0f));
    var0.setShape(101, var44);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.clone(var52);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var52);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, 100.0d, 1.0f, 0.0f);
    boolean var59 = org.jfree.chart.util.ShapeUtilities.equal(var44, var52);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var52, 100.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test316"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 100.0d, (-1.0d));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 1.0d, 0.0f, 100.0f);
    java.io.ObjectOutputStream var12 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var4, var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test317"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var4);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 10.0d, (-1.0d));
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 100.0d);
    boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var28, var38);
    boolean var43 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 100.0f, 10.0f);
    boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var23, var28);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.rotateShape(var53, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    boolean var61 = org.jfree.chart.util.ShapeUtilities.equal(var53, var60);
    boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var23, var60);
    java.io.ObjectOutputStream var63 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var23, var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test318"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = null;
//     var0.setShape(0, var12);
//     org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var16 = var14.getShape(100);
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var18 = null;
//     boolean var19 = var17.equals(var18);
//     java.lang.Object var20 = var17.clone();
//     boolean var21 = var14.equals((java.lang.Object)var17);
//     boolean var22 = var0.equals((java.lang.Object)var17);
//     
//     // Checks the contract:  equals-hashcode on var0 and var14
//     assertTrue("Contract failed: equals-hashcode on var0 and var14", var0.equals(var14) ? var0.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var17
//     assertTrue("Contract failed: equals-hashcode on var0 and var17", var0.equals(var17) ? var0.hashCode() == var17.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var0
//     assertTrue("Contract failed: equals-hashcode on var14 and var0", var14.equals(var0) ? var14.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test319"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.rotateShape(var0, 100.0d, 10.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test320"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    var0.clear();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, (-1.0d), 100.0d);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var33, 1.0d, 10.0f, (-1.0f));
    var0.setShape(10, var33);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var40, var50);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 0.0d, (-1.0d));
    boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var33, var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test321"); }


    java.lang.Object var0 = null;
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 0.0f);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    java.lang.Object var13 = var4.clone();
    int var14 = var4.size();
    java.awt.Shape var16 = var4.getShape(0);
    boolean var18 = var4.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    var20.setShape(100, var26);
    var20.clear();
    java.lang.Object var29 = var20.clone();
    var20.clear();
    boolean var32 = var20.equals((java.lang.Object)0);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var20);
    java.lang.Object var34 = var20.clone();
    boolean var35 = var4.equals(var34);
    org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 0.0d, 1.0f, 10.0f);
    boolean var43 = var36.equals((java.lang.Object)var38);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.clone(var45);
    boolean var50 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var38, (java.lang.Object)var45);
    boolean var51 = var4.equals((java.lang.Object)var45);
    boolean var52 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var4);
    boolean var53 = org.jfree.chart.util.ObjectUtilities.equal(var0, (java.lang.Object)var3);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var3);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 10.0d);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.clone(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test322"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 10.0d);
    boolean var21 = var0.equals((java.lang.Object)var17);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test323"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var12, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    boolean var23 = var0.equals((java.lang.Object)var22);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 10.0d, (-1.0d));
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var25);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var22, var29);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test324"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.io.ObjectOutputStream var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test325"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle((-1.0f));
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var3);
    java.lang.Object var5 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var3);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var7, var12);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    boolean var21 = org.jfree.chart.util.ShapeUtilities.equal(var15, var17);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var7, var17);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var3, var25);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var1, var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test326"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    java.awt.Shape var13 = var0.getShape(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test327"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = var5.getShape(100);
    java.lang.Object var8 = var5.clone();
    var5.clear();
    boolean var10 = var0.equals((java.lang.Object)var5);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var5);
    java.lang.Object var12 = null;
    boolean var13 = var5.equals(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test328"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    var0.clear();
    int var12 = var0.size();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test329"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 100.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var3);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 1.0d);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.lang.Object var20 = var11.clone();
    int var21 = var11.size();
    java.awt.Shape var23 = var11.getShape(0);
    boolean var25 = var11.equals((java.lang.Object)(short)(-1));
    java.lang.Object var26 = var11.clone();
    int var27 = var11.size();
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 0.0d, 1.0d);
    var28.setShape(100, var34);
    var28.clear();
    int var37 = var28.size();
    boolean var38 = var11.equals((java.lang.Object)var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, (-1.0d), 100.0d);
    boolean var46 = org.jfree.chart.util.ShapeUtilities.equal(var40, var42);
    boolean var47 = var11.equals((java.lang.Object)var42);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 10.0d, 0.0d);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 1.0d, (-1.0f), (-1.0f));
    boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var10, var54);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 1.0d, 1.0f, 0.0f);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.rotateShape(var59, 100.0d, 0.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test330"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.lang.Object var13 = var0.clone();
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = var14.clone();
    var14.clear();
    java.awt.Shape var18 = var14.getShape(100);
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = var19.getShape(100);
    java.lang.Object var22 = var19.clone();
    var19.clear();
    boolean var24 = var14.equals((java.lang.Object)var19);
    java.lang.Object var25 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var19);
    boolean var26 = var0.equals((java.lang.Object)var19);
    java.awt.Shape var28 = var19.getShape(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test331"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    java.lang.Object var7 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    var0.clear();
    org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = var9.getShape(0);
    int var12 = var9.size();
    var9.clear();
    int var14 = var9.size();
    boolean var15 = var0.equals((java.lang.Object)var14);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = var16.getShape(100);
    java.lang.Object var19 = var16.clone();
    var16.clear();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 100.0d, 1.0d);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 1.0d, 0.0d);
    boolean var43 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var22, (java.lang.Object)var42);
    boolean var44 = var16.equals((java.lang.Object)var42);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 10.0d, (-1.0f), 1.0f);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, 1.0d, 10.0f, 10.0f);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var52, 0.0d, 100.0d);
    java.lang.Object var56 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var52);
    boolean var57 = var0.equals((java.lang.Object)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test332"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 100.0f);
//     org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var4 = var3.clone();
//     var3.clear();
//     java.awt.Shape var7 = var3.getShape(1);
//     boolean var8 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1.0f), (java.lang.Object)var3);
//     org.jfree.chart.util.ShapeList var9 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
//     var9.setShape(100, var15);
//     var9.clear();
//     java.lang.Object var18 = var9.clone();
//     int var19 = var9.size();
//     java.awt.Shape var21 = var9.getShape(0);
//     boolean var23 = var9.equals((java.lang.Object)(short)(-1));
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, 0.0d, 1.0d);
//     boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var26, var31);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var26);
//     var9.setShape(0, var26);
//     java.awt.Shape var36 = var9.getShape(1);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
//     boolean var44 = org.jfree.chart.util.ShapeUtilities.equal(var38, var43);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, (-1.0d), 100.0d);
//     boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var46, var48);
//     boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var38, var48);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var48);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var48);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.rotateShape(var48, (-1.0d), 1.0f, 1.0f);
//     java.lang.Object var60 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var59);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.clone(var59);
//     boolean var62 = var9.equals((java.lang.Object)var61);
//     boolean var63 = var3.equals((java.lang.Object)var62);
//     
//     // Checks the contract:  equals-hashcode on var3 and var9
//     assertTrue("Contract failed: equals-hashcode on var3 and var9", var3.equals(var9) ? var3.hashCode() == var9.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var9.", var3.equals(var9) == var9.equals(var3));
// 
//   }

  public void test333() {}
//   public void test333() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test333"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var3, 10.0d, 1.0f, (-1.0f));
// 
//   }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test334"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    java.lang.Object var14 = var0.clone();
    int var15 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test335"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = var14.clone();
    java.awt.Shape var22 = var14.getShape(101);
    java.lang.Object var23 = null;
    boolean var24 = var14.equals(var23);
    org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 0.0d, 1.0f, 10.0f);
    boolean var32 = var25.equals((java.lang.Object)var27);
    java.awt.Shape var34 = var25.getShape(100);
    var25.clear();
    boolean var36 = var14.equals((java.lang.Object)var25);
    java.awt.Shape var38 = var25.getShape(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test336"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 1.0d, 10.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var15);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), 100.0d);
    boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var18, var20);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var10, var20);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 100.0d, 0.0f, 0.0f);
    boolean var32 = org.jfree.chart.util.ShapeUtilities.equal(var8, var31);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 100.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test337"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var5 = null;
    boolean var6 = var4.equals(var5);
    java.lang.Object var7 = var4.clone();
    var4.clear();
    java.awt.Shape var10 = var4.getShape(100);
    boolean var11 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var4);
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
    var12.setShape(100, var18);
    var12.clear();
    java.awt.Shape var22 = var12.getShape(100);
    java.lang.Object var23 = var12.clone();
    var12.clear();
    boolean var25 = var0.equals((java.lang.Object)var12);
    var0.clear();
    int var27 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test338"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    boolean var3 = var0.equals((java.lang.Object)100.0d);
    java.lang.Object var4 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = null;
    boolean var7 = var0.equals(var6);
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
    var8.setShape(100, var14);
    var8.clear();
    java.awt.Shape var18 = var8.getShape((-1));
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    var19.setShape(100, var25);
    var19.clear();
    java.lang.Object var28 = var19.clone();
    int var29 = var19.size();
    java.awt.Shape var31 = var19.getShape(0);
    boolean var33 = var19.equals((java.lang.Object)(short)(-1));
    java.lang.Object var34 = var19.clone();
    int var35 = var19.size();
    org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, 1.0d);
    var36.setShape(100, var42);
    var36.clear();
    int var45 = var36.size();
    boolean var46 = var19.equals((java.lang.Object)var45);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var48, var50);
    boolean var55 = var19.equals((java.lang.Object)var50);
    java.lang.Object var56 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var50);
    boolean var57 = var8.equals(var56);
    java.lang.Object var58 = var8.clone();
    boolean var59 = var0.equals((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test339"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.clone(var11);
//     var1.setShape(0, var11);
//     java.awt.Shape var15 = var1.getShape(10);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     var1.setShape(0, var18);
//     java.awt.Shape var24 = var1.getShape(100);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var24, (-1.0d), 0.0f, (-1.0f));
// 
//   }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test340"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var0.setShape(0, var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test341"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    java.awt.Shape var23 = var0.getShape((-1));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    boolean var27 = var0.equals((java.lang.Object)1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var0.setShape(0, var30);
    int var32 = var0.size();
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 1.0d, 0.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var39);
    var0.setShape(10, var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test342"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 100.0d, 0.0f, (-1.0f));
    java.io.ObjectOutputStream var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test343"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    java.lang.Object var18 = var0.clone();
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    var19.setShape(100, var25);
    var19.clear();
    java.lang.Object var28 = var19.clone();
    var19.clear();
    boolean var31 = var19.equals((java.lang.Object)0);
    java.lang.Object var32 = var19.clone();
    org.jfree.chart.util.ShapeList var33 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var34 = var33.clone();
    var33.clear();
    java.awt.Shape var37 = var33.getShape(100);
    org.jfree.chart.util.ShapeList var38 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var40 = var38.getShape(100);
    java.lang.Object var41 = var38.clone();
    var38.clear();
    boolean var43 = var33.equals((java.lang.Object)var38);
    java.lang.Object var44 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var38);
    boolean var45 = var19.equals((java.lang.Object)var38);
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var19);
    org.jfree.chart.util.ShapeList var47 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 0.0d, 1.0d);
    var47.setShape(100, var53);
    var47.clear();
    java.lang.Object var56 = var47.clone();
    var47.clear();
    boolean var59 = var47.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var60 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var63, 0.0d, 1.0d);
    var60.setShape(100, var66);
    var60.clear();
    java.lang.Object var69 = var60.clone();
    var60.clear();
    boolean var72 = var60.equals((java.lang.Object)0);
    java.lang.Object var73 = var60.clone();
    boolean var74 = var47.equals((java.lang.Object)var60);
    java.lang.Object var75 = var47.clone();
    boolean var76 = var19.equals((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test344"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    int var28 = var13.size();
    java.lang.Object var29 = var13.clone();
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 0.0d, 1.0f, 10.0f);
    boolean var37 = var30.equals((java.lang.Object)var32);
    int var38 = var30.size();
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var41);
    boolean var44 = var30.equals((java.lang.Object)var41);
    int var45 = var30.size();
    boolean var46 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var13, (java.lang.Object)var45);
    java.awt.Shape var48 = var13.getShape(101);
    java.awt.Shape var50 = var13.getShape(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test345"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.awt.Shape var10 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 100.0d, 1.0f, 100.0f);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = null;
    boolean var21 = var0.equals(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test346"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    int var4 = var0.size();
    java.awt.Shape var6 = var0.getShape(0);
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 0.0d, 1.0f, 10.0f);
    boolean var14 = var7.equals((java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var9, (java.lang.Object)var16);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, (-1.0d), 100.0d);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 1.0d, (-1.0d));
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var16, var30);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 100.0d, 0.0d);
    boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var16, var40);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 10.0d, 10.0d);
    boolean var45 = var0.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test347"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.awt.Shape var12 = var0.getShape((-1));
    java.lang.Object var13 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test348"); }


    java.awt.Shape var0 = null;
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.rotateShape(var0, 0.0d, 10.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test349() {}
//   public void test349() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test349"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
//     boolean var7 = var0.equals((java.lang.Object)var2);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
//     boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 100.0d);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, (-1.0d));
//     boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 10.0d);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 10.0d, 10.0f, (-1.0f));
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var36);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var36);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 100.0d);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var47, 0.0d, (-1.0f), 10.0f);
//     boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var36, var47);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 0.0d, (-1.0d));
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 1.0d, 0.0d);
//     org.jfree.chart.util.ShapeList var59 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.rotateShape(var61, 0.0d, 1.0f, 10.0f);
//     boolean var66 = var59.equals((java.lang.Object)var61);
//     java.awt.Shape var68 = var59.getShape(100);
//     java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
//     var59.setShape(10, var72);
//     boolean var74 = org.jfree.chart.util.ShapeUtilities.equal(var47, var72);
//     boolean var75 = org.jfree.chart.util.ShapeUtilities.equal(var30, var72);
//     
//     // Checks the contract:  equals-hashcode on var0 and var59
//     assertTrue("Contract failed: equals-hashcode on var0 and var59", var0.equals(var59) ? var0.hashCode() == var59.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var59.", var0.equals(var59) == var59.equals(var0));
// 
//   }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test350"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 100.0d, (-1.0d));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 10.0d);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test351"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 1.0d, 10.0f, 0.0f);
    java.awt.Shape var9 = null;
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test352"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.awt.Shape var10 = var0.getShape((-1));
//     int var11 = var0.size();
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var14);
//     java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, (-1.0d), 100.0d);
//     boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var14, var24);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, (-1.0d), 1.0f, 10.0f);
//     var0.setShape(0, var24);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, (-1.0d), 100.0d);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.rotateShape(var39, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     boolean var47 = org.jfree.chart.util.ShapeUtilities.equal(var39, var46);
//     var0.setShape(1, var46);
//     java.awt.Shape var50 = var0.getShape(100);
//     org.jfree.chart.util.ShapeList var51 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var53 = var51.getShape(100);
//     java.lang.Object var54 = var51.clone();
//     org.jfree.chart.util.ShapeList var55 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 0.0d, 1.0d);
//     var55.setShape(100, var61);
//     var55.clear();
//     java.lang.Object var64 = var55.clone();
//     var55.clear();
//     int var66 = var55.size();
//     java.lang.Object var67 = var55.clone();
//     org.jfree.chart.util.ShapeList var68 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var70 = var68.getShape(0);
//     java.lang.Object var71 = var68.clone();
//     java.lang.Object var72 = var68.clone();
//     boolean var73 = var55.equals((java.lang.Object)var68);
//     boolean var74 = var51.equals((java.lang.Object)var68);
//     boolean var75 = var0.equals((java.lang.Object)var51);
//     
//     // Checks the contract:  equals-hashcode on var51 and var0
//     assertTrue("Contract failed: equals-hashcode on var51 and var0", var51.equals(var0) ? var51.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var55 and var0
//     assertTrue("Contract failed: equals-hashcode on var55 and var0", var55.equals(var0) ? var55.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var68 and var0
//     assertTrue("Contract failed: equals-hashcode on var68 and var0", var68.equals(var0) ? var68.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var51 and var0.", var51.equals(var0) == var0.equals(var51));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var55 and var0.", var55.equals(var0) == var0.equals(var55));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var68 and var0.", var68.equals(var0) == var0.equals(var68));
// 
//   }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test353"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var0.setShape(0, var17);
    java.awt.Shape var23 = var0.getShape(100);
    org.jfree.chart.util.RectangleAnchor var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, var24, 100.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test354"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 0.0d, (-1.0f), 10.0f);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var1, var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, (-1.0d));
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 1.0d, 0.0d);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test355"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    int var16 = var0.size();
    java.lang.Object var17 = var0.clone();
    java.lang.Object var18 = var0.clone();
    java.awt.Shape var20 = var0.getShape(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test356"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 100.0d, (-1.0d));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, (-1.0d));
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 10.0d, 0.0d);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test357"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    org.jfree.chart.util.ShapeList var37 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var38 = var37.clone();
    var37.clear();
    java.awt.Shape var41 = var37.getShape(100);
    org.jfree.chart.util.ShapeList var42 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 0.0d, 1.0d);
    var42.setShape(100, var48);
    var42.clear();
    java.lang.Object var51 = var42.clone();
    var42.clear();
    boolean var54 = var42.equals((java.lang.Object)0);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var42, (java.lang.Object)var57);
    int var59 = var42.size();
    boolean var60 = var37.equals((java.lang.Object)var59);
    java.awt.Shape var62 = var37.getShape(0);
    boolean var63 = var0.equals((java.lang.Object)var37);
    org.jfree.chart.util.ShapeList var64 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var67, 0.0d, 1.0d);
    var64.setShape(100, var70);
    var64.clear();
    java.awt.Shape var74 = var64.getShape(0);
    boolean var75 = var37.equals((java.lang.Object)var64);
    java.lang.Object var76 = var64.clone();
    java.lang.Object var77 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test358"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 10.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test359"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.lang.Object var7 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var1);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 100.0d);
    org.jfree.chart.util.RectangleAnchor var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, var11, 100.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test360"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    int var13 = var4.size();
    int var14 = var4.size();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var4.setShape(0, var18);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 0.0d, 0.0f, (-1.0f));
    var0.setShape(101, var23);
    org.jfree.chart.util.RectangleAnchor var25 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, var25, 100.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test361"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = null;
    boolean var10 = var0.equals(var9);
    int var11 = var0.size();
    var0.clear();
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, 1.0f, 10.0f);
    boolean var20 = var13.equals((java.lang.Object)var15);
    java.lang.Object var21 = var13.clone();
    java.lang.Object var22 = null;
    boolean var23 = var13.equals(var22);
    int var24 = var13.size();
    boolean var25 = var0.equals((java.lang.Object)var13);
    java.lang.Object var26 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test362"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var3.setShape(100, var9);
    boolean var11 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)0.0f, (java.lang.Object)var9);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 10.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test363() {}
//   public void test363() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test363"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = var0.clone();
//     var0.clear();
//     java.awt.Shape var4 = var0.getShape(100);
//     org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
//     var5.setShape(100, var11);
//     var5.clear();
//     java.lang.Object var14 = var5.clone();
//     var5.clear();
//     boolean var17 = var5.equals((java.lang.Object)0);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
//     boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, (java.lang.Object)var20);
//     int var22 = var5.size();
//     boolean var23 = var0.equals((java.lang.Object)var22);
//     org.jfree.chart.util.ShapeList var25 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var27 = var25.getShape(100);
//     java.lang.Object var28 = var25.clone();
//     var25.clear();
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 0.0d, 1.0f, 10.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var37);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var37, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 100.0d, 1.0d);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, 1.0d, 0.0d);
//     boolean var52 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var31, (java.lang.Object)var51);
//     boolean var53 = var25.equals((java.lang.Object)var51);
//     var0.setShape(11, var51);
//     
//     // Checks the contract:  equals-hashcode on var5 and var0
//     assertTrue("Contract failed: equals-hashcode on var5 and var0", var5.equals(var0) ? var5.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var0
//     assertTrue("Contract failed: equals-hashcode on var25 and var0", var25.equals(var0) ? var25.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var5 and var0.", var5.equals(var0) == var0.equals(var5));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var25 and var0.", var25.equals(var0) == var0.equals(var25));
// 
//   }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test364"); }


    java.lang.Class var0 = null;
    java.lang.ClassLoader var1 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var0);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var3.setShape(100, var9);
    var3.clear();
    java.awt.Shape var13 = var3.getShape(0);
    java.lang.Object var14 = var3.clone();
    boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, var14);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test365"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    java.lang.Object var20 = var1.clone();
    var1.clear();
    java.awt.Shape var23 = var1.getShape(1);
    java.lang.Object var24 = var1.clone();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test366"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    var4.setShape(0, var14);
    java.awt.Shape var18 = var4.getShape(10);
    var4.clear();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 100.0d, 1.0d);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 1.0d, 0.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    boolean var38 = var4.equals((java.lang.Object)var35);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var3, var35);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var44 = null;
    boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var43, var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test367"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 0.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 10.0f, 1.0f);
    org.jfree.chart.util.RectangleAnchor var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, var9, 10.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test368() {}
//   public void test368() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test368"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, (-1.0d), 100.0d);
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 10.0d, 1.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var11, 100.0d, 0.0f, 1.0f);
// 
//   }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test369"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 100.0f, 100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.lang.Object var7 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var1);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, 100.0d);
    org.jfree.chart.util.RectangleAnchor var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, var11, (-1.0d), 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test370"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.awt.Shape var16 = var0.getShape((-1));
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var19, var24);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 100.0d);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var27, var29);
    boolean var34 = org.jfree.chart.util.ShapeUtilities.equal(var19, var29);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    var0.setShape(2, var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test371"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    var0.clear();
    int var19 = var0.size();
    java.lang.Object var20 = null;
    boolean var21 = var0.equals(var20);
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var24 = var23.clone();
    java.awt.Shape var26 = var23.getShape(0);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    var23.setShape(100, var29);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 100.0d, 0.0f, 0.0f);
    var0.setShape(2, var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test372"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape((-1));
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), 100.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 0.0d, (-1.0f), 10.0f);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var12, var23);
    var0.setShape(101, var23);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, 1.0d);
    java.lang.Object var33 = null;
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var23, var33);
    java.awt.Shape var35 = null;
    boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var23, var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test373"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, (-1.0d));
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    var0.setShape(1, var11);
    java.awt.Shape var14 = var0.getShape(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)1);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test374"); }


    java.lang.Object var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    int var11 = var1.size();
    java.awt.Shape var13 = var1.getShape(0);
    boolean var15 = var1.equals((java.lang.Object)(short)(-1));
    java.lang.Object var16 = var1.clone();
    int var17 = var1.size();
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    int var19 = var18.size();
    boolean var20 = var1.equals((java.lang.Object)var19);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.clone(var22);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
    boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, (-1.0d));
    boolean var44 = var1.equals((java.lang.Object)var40);
    java.lang.Object var45 = var1.clone();
    java.lang.Object var46 = var1.clone();
    java.lang.Object var47 = null;
    boolean var48 = var1.equals(var47);
    boolean var49 = org.jfree.chart.util.ObjectUtilities.equal(var0, var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test375"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 10.0d, (-1.0d));
    boolean var6 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, (java.lang.Object)'#');
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var1, (-1.0d), 1.0f, 0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 100.0d, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test376"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, (-1.0d), (-1.0d));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var15);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    java.io.ObjectOutputStream var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var17, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test377"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    java.lang.Object var2 = var0.clone();
    java.awt.Shape var4 = var0.getShape(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test378"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), (-1.0f));
    java.lang.Object var3 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var2);
    java.io.ObjectOutputStream var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test379"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    int var12 = var0.size();
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 0.0d, 1.0f, 10.0f);
    boolean var20 = var13.equals((java.lang.Object)var15);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var23 = var13.equals((java.lang.Object)var22);
    org.jfree.chart.util.ShapeList var24 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = var24.getShape(100);
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var28 = null;
    boolean var29 = var27.equals(var28);
    java.lang.Object var30 = var27.clone();
    boolean var31 = var24.equals((java.lang.Object)var27);
    boolean var32 = var13.equals((java.lang.Object)var27);
    java.lang.Object var33 = var13.clone();
    java.lang.Object var34 = var13.clone();
    java.lang.Object var35 = var13.clone();
    org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = var36.getShape(100);
    java.lang.Object var39 = var36.clone();
    var36.clear();
    org.jfree.chart.util.ShapeList var41 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, 0.0d, 1.0f, 10.0f);
    boolean var48 = var41.equals((java.lang.Object)var43);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 0.0d, 1.0d);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    boolean var55 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var43, (java.lang.Object)var50);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.clone(var57);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.clone(var58);
    boolean var60 = org.jfree.chart.util.ShapeUtilities.equal(var50, var58);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var62, 0.0d, 1.0d);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.clone(var62);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.rotateShape(var62, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var72, (-1.0d), 100.0d);
    boolean var76 = org.jfree.chart.util.ShapeUtilities.equal(var62, var72);
    boolean var77 = org.jfree.chart.util.ShapeUtilities.equal(var58, var62);
    java.awt.Shape var78 = null;
    boolean var79 = org.jfree.chart.util.ShapeUtilities.equal(var62, var78);
    boolean var80 = var36.equals((java.lang.Object)var79);
    boolean var81 = var13.equals((java.lang.Object)var36);
    boolean var82 = var0.equals((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test380"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var8 = null;
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var8);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 10.0d, 0.0d);
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var10, var20);
    org.jfree.chart.util.RectangleAnchor var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, var28, 10.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test381"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    java.lang.Object var20 = var1.clone();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 0.0d, 1.0d);
    boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var22, var27);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, (-1.0d), 100.0d);
    boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var30, var32);
    boolean var37 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    boolean var39 = var1.equals((java.lang.Object)var32);
    java.awt.Shape var41 = var1.getShape(0);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var45, (-1.0d), 100.0d);
    boolean var49 = org.jfree.chart.util.ShapeUtilities.equal(var43, var45);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 10.0d, 1.0d);
    org.jfree.chart.util.ShapeList var53 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var56, 0.0d, 1.0d);
    var53.setShape(100, var59);
    var53.clear();
    java.lang.Object var62 = var53.clone();
    int var63 = var53.size();
    java.awt.Shape var65 = var53.getShape(0);
    boolean var67 = var53.equals((java.lang.Object)(short)(-1));
    java.lang.Object var68 = var53.clone();
    int var69 = var53.size();
    org.jfree.chart.util.ShapeList var70 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var73 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var76 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var73, 0.0d, 1.0d);
    var70.setShape(100, var76);
    var70.clear();
    int var79 = var70.size();
    boolean var80 = var53.equals((java.lang.Object)var79);
    java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var84 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var87 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var84, (-1.0d), 100.0d);
    boolean var88 = org.jfree.chart.util.ShapeUtilities.equal(var82, var84);
    boolean var89 = var53.equals((java.lang.Object)var84);
    java.awt.Shape var92 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var84, 10.0d, 0.0d);
    java.awt.Shape var96 = org.jfree.chart.util.ShapeUtilities.rotateShape(var84, 1.0d, (-1.0f), (-1.0f));
    boolean var97 = org.jfree.chart.util.ShapeUtilities.equal(var52, var96);
    boolean var98 = var1.equals((java.lang.Object)var52);
    int var99 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 0);

  }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test382"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     boolean var15 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var10);
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 0.0d, (-1.0f), 10.0f);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 1.0d, (-1.0d));
//     boolean var28 = org.jfree.chart.util.ShapeUtilities.equal(var10, var24);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 10.0d);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 0.0d, (-1.0d));
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, (-1.0d), 1.0d);
//     boolean var41 = org.jfree.chart.util.ShapeUtilities.equal(var31, var40);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 0.0d, (-1.0f), 100.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var31, 100.0d, 1.0f, 0.0f);
// 
//   }

  public void test383() {}
//   public void test383() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test383"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     var0.clear();
//     boolean var12 = var0.equals((java.lang.Object)0);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
//     boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
//     int var17 = var0.size();
//     org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     var18.setShape(100, var24);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var28);
//     var18.setShape(0, var28);
//     java.awt.Shape var32 = var18.getShape(10);
//     java.lang.Object var33 = var18.clone();
//     java.lang.Object var34 = var18.clone();
//     var18.clear();
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 10.0d, 0.0f, (-1.0f));
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, (-1.0d), 0.0d);
//     boolean var48 = org.jfree.chart.util.ShapeUtilities.equal(var42, var44);
//     boolean var49 = var18.equals((java.lang.Object)var44);
//     boolean var50 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)var44);
//     
//     // Checks the contract:  equals-hashcode on var9 and var33
//     assertTrue("Contract failed: equals-hashcode on var9 and var33", var9.equals(var33) ? var9.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var9 and var34
//     assertTrue("Contract failed: equals-hashcode on var9 and var34", var9.equals(var34) ? var9.hashCode() == var34.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var33.", var9.equals(var33) == var33.equals(var9));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var9 and var34.", var9.equals(var34) == var34.equals(var9));
// 
//   }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test384"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var29 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var30 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, 0.0d, 1.0d);
    var30.setShape(100, var36);
    var30.clear();
    java.lang.Object var39 = var30.clone();
    var30.clear();
    int var41 = var30.size();
    java.awt.Shape var43 = var30.getShape(100);
    boolean var44 = var0.equals((java.lang.Object)var30);
    int var45 = var30.size();
    java.lang.Object var46 = var30.clone();
    java.lang.Object var47 = var30.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test385"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    var0.setShape(0, var17);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 100.0d, 1.0d);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    boolean var40 = org.jfree.chart.util.ShapeUtilities.equal(var17, var38);
    org.jfree.chart.util.RectangleAnchor var41 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, var41, 10.0d, 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test386"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.RectangleAnchor var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var0, var1, (-1.0d), 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test387"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    var0.clear();
    int var6 = var0.size();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    boolean var9 = var0.equals((java.lang.Object)1.0f);
    java.awt.Shape var11 = var0.getShape(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test388"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 10.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 10.0d, 1.0d);
    boolean var12 = var0.equals((java.lang.Object)var8);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var8);
    java.io.ObjectOutputStream var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var8, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test389"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 1.0d, 0.0f, 100.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 10.0d, 10.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test390"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.io.ObjectOutputStream var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test391"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, (-1.0f));
    boolean var9 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var11 = var10.clone();
    var10.clear();
    java.awt.Shape var14 = var10.getShape(100);
    org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    var15.setShape(100, var21);
    var15.clear();
    java.lang.Object var24 = var15.clone();
    var15.clear();
    boolean var27 = var15.equals((java.lang.Object)0);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var29);
    boolean var31 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var15, (java.lang.Object)var30);
    int var32 = var15.size();
    boolean var33 = var10.equals((java.lang.Object)var32);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 0.0d, 1.0f, 10.0f);
    boolean var40 = var10.equals((java.lang.Object)var39);
    java.lang.Object var41 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var39);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 0.0d, 1.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, (-1.0d), 100.0d);
    boolean var57 = org.jfree.chart.util.ShapeUtilities.equal(var43, var53);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.rotateShape(var53, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var61, 0.0d, (-1.0d));
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.clone(var61);
    java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var70 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.rotateShape(var70, 0.0d, 1.0f, (-1.0f));
    boolean var75 = org.jfree.chart.util.ShapeUtilities.equal(var68, var70);
    java.awt.Shape var79 = org.jfree.chart.util.ShapeUtilities.rotateShape(var68, 1.0d, 10.0f, 0.0f);
    boolean var80 = org.jfree.chart.util.ShapeUtilities.equal(var65, var68);
    boolean var81 = org.jfree.chart.util.ShapeUtilities.equal(var39, var68);
    boolean var82 = org.jfree.chart.util.ShapeUtilities.equal(var2, var68);
    java.awt.Shape var85 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var68, (-1.0d), 10.0d);
    org.jfree.chart.util.RectangleAnchor var86 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var89 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var68, var86, 0.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test392"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    boolean var7 = var0.equals((java.lang.Object)var3);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test393"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 1.0d, (-1.0d));
    boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var9, var23);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 10.0d);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 10.0d, 10.0f, (-1.0f));
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test394"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    org.jfree.chart.util.ShapeList var12 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 0.0d, 1.0f, 10.0f);
    boolean var19 = var12.equals((java.lang.Object)var14);
    java.awt.Shape var21 = var12.getShape(100);
    var12.clear();
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var23.setShape(100, var29);
    var23.clear();
    java.lang.Object var32 = var23.clone();
    var23.clear();
    boolean var35 = var23.equals((java.lang.Object)0);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 0.0d, 1.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var40);
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, (-1.0d), 100.0d);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var40, var50);
    boolean var55 = org.jfree.chart.util.ShapeUtilities.equal(var38, var40);
    boolean var56 = var23.equals((java.lang.Object)var55);
    java.lang.Object var57 = var23.clone();
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var12, var57);
    boolean var59 = var0.equals(var57);
    java.lang.Object var60 = var0.clone();
    java.awt.Shape var62 = var0.getShape(11);
    org.jfree.chart.util.ShapeList var65 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var71 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var68, 0.0d, 1.0d);
    var65.setShape(100, var71);
    var65.clear();
    java.lang.Object var74 = var65.clone();
    var65.clear();
    boolean var77 = var65.equals((java.lang.Object)0);
    boolean var78 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var65);
    java.lang.Object var79 = var65.clone();
    boolean var80 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)1.0d, (java.lang.Object)var65);
    java.awt.Shape var82 = var65.getShape((-1));
    boolean var83 = var0.equals((java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test395"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), (-1.0f));
    java.lang.Object var3 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var2);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 100.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test396"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, 0.0f);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 10.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, (-1.0d), 1.0d);
    org.jfree.chart.util.RectangleAnchor var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, var9, 1.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test397"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.lang.Object var14 = var0.clone();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test398"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 100.0d, 1.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 1.0d, 0.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var34, var50);
    boolean var53 = var0.equals((java.lang.Object)var50);
    java.lang.Object var54 = var0.clone();
    org.jfree.chart.util.ShapeList var55 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var58, 0.0d, 1.0d);
    var55.setShape(100, var61);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.clone(var65);
    var55.setShape(0, var65);
    java.awt.Shape var69 = var55.getShape(10);
    boolean var70 = var0.equals((java.lang.Object)var55);
    java.lang.Object var71 = var0.clone();
    java.lang.Object var72 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test399"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), (-1.0d));
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 100.0d);
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var4, var16);
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    var18.setShape(100, var24);
    var18.clear();
    java.lang.Object var27 = var18.clone();
    var18.clear();
    boolean var30 = var18.equals((java.lang.Object)0);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
    boolean var34 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)var33);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var18.setShape(0, var38);
    var18.clear();
    java.lang.Object var41 = var18.clone();
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 0.0d, 1.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 100.0d, 1.0d);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 1.0d, 0.0d);
    boolean var58 = var18.equals((java.lang.Object)var57);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.clone(var57);
    boolean var60 = org.jfree.chart.util.ShapeUtilities.equal(var16, var57);
    java.io.ObjectOutputStream var61 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var16, var61);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test400"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 100.0d, 1.0f, 0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 0.0f, 0.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)0.0d);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test401"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var16 = var0.getShape(0);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
    boolean var40 = var0.equals((java.lang.Object)var39);
    java.lang.Object var41 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    var0.clear();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test402"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.awt.Shape var21 = var14.getShape(100);
    int var22 = var14.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test403"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var11 = var0.getShape(10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 100.0d, 100.0d);
    var0.setShape(1, var22);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var22, (-1.0d), 0.0f, 100.0f);
    org.jfree.chart.util.ShapeList var28 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, 0.0d, 1.0f, 10.0f);
    boolean var35 = var28.equals((java.lang.Object)var30);
    java.awt.Shape var37 = var28.getShape(100);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var28.setShape(10, var41);
    java.lang.Object var43 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var41);
    org.jfree.chart.util.ShapeList var44 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 0.0d, 1.0d);
    var44.setShape(100, var50);
    boolean var53 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var50, (java.lang.Object)"");
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var41, var50);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 1.0d, 10.0d);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)100.0f, (java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test404"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.awt.Shape var10 = var0.getShape((-1));
    java.awt.Shape var12 = var0.getShape((-1));
    java.lang.Object var13 = var0.clone();
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var21);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, (-1.0d), 100.0d);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var26);
    boolean var31 = org.jfree.chart.util.ShapeUtilities.equal(var16, var26);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var26);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 0.0d, 0.0f, 1.0f);
    boolean var42 = var0.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test405"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 10.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 100.0f, 0.0f);
    java.io.ObjectOutputStream var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var6, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test406"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    java.awt.Shape var11 = var0.getShape((-1));
    int var12 = var0.size();
    java.awt.Shape var14 = var0.getShape(1);
    java.lang.Object var15 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test407"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var5 = var0.getShape((-1));
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test408"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var2, var4);
    java.lang.Object var20 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var4);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var4);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var4, 0.0d, 1.0f, 1.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 100.0d, 0.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 100.0f);
    org.jfree.chart.util.ShapeList var32 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
    var32.setShape(100, var38);
    var32.clear();
    java.awt.Shape var42 = var32.getShape((-1));
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 100.0f);
    var32.setShape(100, var46);
    boolean var48 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var31, (java.lang.Object)var46);
    java.awt.Shape var49 = null;
    boolean var50 = org.jfree.chart.util.ShapeUtilities.equal(var46, var49);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var4, var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test409"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    var0.clear();
    java.lang.Object var23 = var0.clone();
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
    var0.setShape(0, var27);
    var0.clear();
    int var30 = var0.size();
    int var31 = var0.size();
    java.awt.Shape var33 = null;
    var0.setShape(11, var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test410"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    var0.clear();
    int var40 = var0.size();
    java.lang.Object var41 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test411"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var0.clone();
    java.awt.Shape var19 = var0.getShape(1);
    java.lang.Object var20 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test412"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var12, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 100.0d, 0.0f, 0.0f);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var2, var25);
    java.io.ObjectOutputStream var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test413"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    java.lang.Object var12 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(10.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 100.0d, 100.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 1.0d, 100.0d);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal(var12, (java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test414() {}
//   public void test414() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test414"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, 0.0d, 1.0d);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, (-1.0d));
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 10.0d, 1.0f, 0.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var27);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var27, 100.0d, 0.0d);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, 1.0d, 0.0f, (-1.0f));
//     org.jfree.chart.util.ShapeList var36 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var37 = var36.clone();
//     var36.clear();
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var40, 10.0d, (-1.0d));
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.clone(var40);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 10.0d, 1.0d);
//     boolean var48 = var36.equals((java.lang.Object)var44);
//     boolean var49 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var31, (java.lang.Object)var36);
//     java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 10.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var52, 100.0d, 100.0f, 0.0f);
// 
//   }

  public void test415() {}
//   public void test415() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test415"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(100);
//     java.lang.Object var3 = var0.clone();
//     var0.clear();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 1.0f, 10.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 1.0d);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, 0.0d);
//     boolean var27 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var26);
//     boolean var28 = var0.equals((java.lang.Object)var26);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 10.0d, (-1.0f), 1.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 1.0d, 10.0f, 10.0f);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 100.0d);
//     org.jfree.chart.util.ShapeList var40 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var41 = null;
//     boolean var42 = var40.equals(var41);
//     java.lang.Object var43 = var40.clone();
//     java.lang.Object var44 = var40.clone();
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var47, 0.0d, 1.0f, 10.0f);
//     var40.setShape(1, var47);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, (-1.0d), (-1.0d));
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.clone(var55);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var56);
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.clone(var57);
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.clone(var57);
//     boolean var60 = org.jfree.chart.util.ShapeUtilities.equal(var39, var59);
//     
//     // Checks the contract:  equals-hashcode on var0 and var40
//     assertTrue("Contract failed: equals-hashcode on var0 and var40", var0.equals(var40) ? var0.hashCode() == var40.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var40.", var0.equals(var40) == var40.equals(var0));
// 
//   }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test416"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, (-1.0f));
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var4, var9);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, (-1.0d), 100.0d);
    boolean var18 = org.jfree.chart.util.ShapeUtilities.equal(var12, var14);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var4, var14);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var14, 100.0d, 0.0f, 0.0f);
    boolean var26 = org.jfree.chart.util.ShapeUtilities.equal(var2, var25);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 0.0d, 0.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test417"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond((-1.0f));
    boolean var7 = var0.equals((java.lang.Object)var6);
    java.lang.Object var8 = null;
    boolean var9 = var0.equals(var8);
    java.awt.Shape var11 = var0.getShape((-1));
    int var12 = var0.size();
    java.awt.Shape var14 = var0.getShape(100);
    java.lang.Object var15 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test418"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), (-1.0d));
    var0.setShape(0, var17);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test419"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.lang.Object var8 = var0.clone();
    java.lang.Object var9 = var0.clone();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 100.0d, 0.0d);
    var0.setShape(101, var16);
    int var18 = var0.size();
    java.awt.Shape var20 = var0.getShape(0);
    int var21 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 102);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 102);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test420"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var0.setShape(0, var20);
    java.awt.Shape var23 = var0.getShape((-1));
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    boolean var27 = var0.equals((java.lang.Object)1.0f);
    java.awt.Shape var29 = var0.getShape(0);
    int var30 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test421"); }
// 
// 
//     java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     var4.setShape(100, var10);
//     var4.clear();
//     int var13 = var4.size();
//     boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var13);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var16, var21);
//     java.awt.Shape var23 = null;
//     boolean var24 = org.jfree.chart.util.ShapeUtilities.equal(var16, var23);
//     boolean var25 = org.jfree.chart.util.ShapeUtilities.equal(var3, var16);
//     org.jfree.chart.util.ShapeList var26 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 0.0d, 1.0d);
//     var26.setShape(100, var32);
//     var26.clear();
//     int var35 = var26.size();
//     int var36 = var26.size();
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
//     var26.setShape(0, var40);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createRegularCross(10.0f, 0.0f);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, (-1.0d), 100.0d);
//     boolean var50 = org.jfree.chart.util.ShapeUtilities.equal(var44, var49);
//     boolean var51 = var26.equals((java.lang.Object)var49);
//     boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var16, var49);
//     
//     // Checks the contract:  equals-hashcode on var4 and var26
//     assertTrue("Contract failed: equals-hashcode on var4 and var26", var4.equals(var26) ? var4.hashCode() == var26.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var4 and var26.", var4.equals(var26) == var26.equals(var4));
// 
//   }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test422"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 10.0d, 0.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var7);
    org.jfree.chart.util.RectangleAnchor var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, var17, 100.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test423"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)var15);
    int var17 = var0.size();
    var0.clear();
    int var19 = var0.size();
    java.lang.Object var20 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test424"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var10 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = var11.getShape(100);
    org.jfree.chart.util.ShapeList var14 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var15 = null;
    boolean var16 = var14.equals(var15);
    java.lang.Object var17 = var14.clone();
    boolean var18 = var11.equals((java.lang.Object)var14);
    boolean var19 = var0.equals((java.lang.Object)var14);
    java.lang.Object var20 = var0.clone();
    java.awt.Shape var22 = var0.getShape(1);
    java.lang.Class var23 = null;
    java.lang.ClassLoader var24 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var23);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var24);
    boolean var26 = var0.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test425() {}
//   public void test425() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test425"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, (-1.0d), 100.0f, 100.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.clone(var2);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var2, 1.0d, 100.0f, 10.0f);
// 
//   }

  public void test426() {}
//   public void test426() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test426"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     var0.setShape(0, var10);
//     java.lang.Object var13 = var0.clone();
//     boolean var15 = var0.equals((java.lang.Object)0.0d);
//     java.lang.Object var16 = var0.clone();
//     org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 0.0d, 1.0f, 10.0f);
//     boolean var25 = var18.equals((java.lang.Object)var20);
//     java.awt.Shape var26 = null;
//     boolean var27 = org.jfree.chart.util.ShapeUtilities.equal(var20, var26);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.clone(var20);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var30, 0.0d, 1.0d);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var30);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.rotateShape(var30, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 100.0d, 1.0d);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 10.0d, 0.0d);
//     boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var28, var38);
//     var0.setShape(10, var38);
//     
//     // Checks the contract:  equals-hashcode on var18 and var0
//     assertTrue("Contract failed: equals-hashcode on var18 and var0", var18.equals(var0) ? var18.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var18 and var0.", var18.equals(var0) == var0.equals(var18));
// 
//   }

  public void test427() {}
//   public void test427() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test427"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
//     boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 10.0d, 0.0d);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, 1.0d, 0.0f, 100.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), (-1.0d));
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, 10.0d, 0.0f, 100.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var25, 0.0d, 0.0f, 10.0f);
// 
//   }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test428"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.awt.Shape var15 = var0.getShape(100);
    java.lang.Object var16 = var0.clone();
    java.lang.Object var17 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    java.awt.Shape var19 = var0.getShape(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test429"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    boolean var3 = var0.equals((java.lang.Object)100.0d);
    boolean var5 = var0.equals((java.lang.Object)(-1));
    java.lang.Object var6 = var0.clone();
    int var7 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test430"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var9, var17);
    org.jfree.chart.util.RectangleAnchor var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, var20, 0.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test431"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), (-1.0d));
    var0.setShape(0, var17);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 100.0d, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test432"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
    boolean var43 = var0.equals((java.lang.Object)var39);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.rotateShape(var39, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, 10.0d, 1.0d);
    java.io.ObjectOutputStream var51 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var50, var51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test433"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 1.0d, 10.0f, (-1.0f));
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, 100.0d, 100.0f, (-1.0f));
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 1.0d, (-1.0d));
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, (-1.0d), 0.0f, 100.0f);
    org.jfree.chart.util.RectangleAnchor var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, var23, 10.0d, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test434() {}
//   public void test434() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test434"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     int var9 = var0.size();
//     var0.clear();
//     java.lang.Object var11 = var0.clone();
//     boolean var13 = var0.equals((java.lang.Object)'#');
//     java.lang.Object var14 = var0.clone();
//     org.jfree.chart.util.ShapeList var15 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     var15.setShape(100, var21);
//     var15.clear();
//     java.lang.Object var24 = var15.clone();
//     var15.clear();
//     int var26 = var15.size();
//     java.lang.Object var27 = var15.clone();
//     java.lang.Object var28 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var15);
//     java.lang.Object var29 = org.jfree.chart.util.ObjectUtilities.clone(var28);
//     boolean var30 = var0.equals(var29);
//     java.awt.Shape var32 = var0.getShape(101);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var35);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var38);
//     java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, (-1.0d), 100.0d);
//     boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var38, var48);
//     boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var36, var38);
//     java.lang.Object var54 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var38);
//     java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 100.0d, 0.0f, (-1.0f));
//     java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.clone(var38);
//     var0.setShape(0, var59);
//     
//     // Checks the contract:  equals-hashcode on var15 and var0
//     assertTrue("Contract failed: equals-hashcode on var15 and var0", var15.equals(var0) ? var15.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var15 and var0.", var15.equals(var0) == var0.equals(var15));
// 
//   }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test435"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(100.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, (-1.0d), 100.0d);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 1.0d, 0.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var4, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test436"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var28, 0.0d, 1.0f, (-1.0f));
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var26, var28);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    boolean var35 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var23, (java.lang.Object)var28);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.io.ObjectOutputStream var38 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var36, var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test437"); }


    java.lang.Object var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.awt.Shape var11 = var1.getShape(100);
    java.lang.Object var12 = var1.clone();
    var1.clear();
    var1.clear();
    java.lang.Object var15 = var1.clone();
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal(var0, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test438"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.awt.Shape var13 = var0.getShape(1);
    java.lang.Object var14 = null;
    boolean var15 = var0.equals(var14);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 0.0d, 1.0d);
    var16.setShape(100, var22);
    var16.clear();
    java.lang.Object var25 = var16.clone();
    var16.clear();
    boolean var28 = var16.equals((java.lang.Object)0);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var30);
    boolean var32 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var16, (java.lang.Object)var31);
    int var33 = var16.size();
    java.lang.Object var34 = var16.clone();
    org.jfree.chart.util.ShapeList var35 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 0.0d, 1.0d);
    var35.setShape(100, var41);
    var35.clear();
    java.lang.Object var44 = var35.clone();
    var35.clear();
    boolean var47 = var35.equals((java.lang.Object)0);
    java.lang.Object var48 = var35.clone();
    org.jfree.chart.util.ShapeList var49 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var50 = var49.clone();
    var49.clear();
    java.awt.Shape var53 = var49.getShape(100);
    org.jfree.chart.util.ShapeList var54 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var56 = var54.getShape(100);
    java.lang.Object var57 = var54.clone();
    var54.clear();
    boolean var59 = var49.equals((java.lang.Object)var54);
    java.lang.Object var60 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var54);
    boolean var61 = var35.equals((java.lang.Object)var54);
    boolean var62 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var16, (java.lang.Object)var35);
    java.lang.Object var63 = null;
    boolean var64 = var35.equals(var63);
    int var65 = var35.size();
    org.jfree.chart.util.ShapeList var66 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var69 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var72 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var69, 0.0d, 1.0d);
    var66.setShape(100, var72);
    var66.clear();
    java.lang.Object var75 = var66.clone();
    var66.clear();
    boolean var78 = var66.equals((java.lang.Object)0);
    java.awt.Shape var80 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var81 = org.jfree.chart.util.ShapeUtilities.clone(var80);
    boolean var82 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var66, (java.lang.Object)var81);
    int var83 = var66.size();
    var66.clear();
    java.lang.Object var85 = var66.clone();
    boolean var86 = var35.equals(var85);
    boolean var87 = var0.equals(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test439"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    var1.clear();
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var20);
    var1.setShape(0, var21);
    java.lang.Object var23 = null;
    boolean var24 = var1.equals(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var25 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var24);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test440"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    var0.clear();
    java.lang.Object var3 = var0.clone();
    java.lang.Class var4 = null;
    java.lang.ClassLoader var5 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var4);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var5);
    org.jfree.chart.util.ShapeList var7 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var7.setShape(100, var13);
    var7.clear();
    java.awt.Shape var17 = var7.getShape(0);
    java.lang.Object var18 = var7.clone();
    boolean var19 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var5, var18);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var5);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal(var3, (java.lang.Object)var5);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var5);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var5);
    org.jfree.chart.util.ObjectUtilities.setClassLoader(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test441"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    var6.setShape(100, var12);
    var6.clear();
    java.lang.Object var15 = var6.clone();
    var6.clear();
    boolean var18 = var6.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var19 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var22, 0.0d, 1.0d);
    var19.setShape(100, var25);
    var19.clear();
    java.lang.Object var28 = var19.clone();
    var19.clear();
    boolean var31 = var19.equals((java.lang.Object)0);
    java.lang.Object var32 = var19.clone();
    boolean var33 = var6.equals((java.lang.Object)var19);
    org.jfree.chart.util.ShapeList var34 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var35 = var34.clone();
    var34.clear();
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 10.0d, (-1.0d));
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.clone(var38);
    java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, 10.0d, 1.0d);
    boolean var46 = var34.equals((java.lang.Object)var42);
    boolean var47 = var6.equals((java.lang.Object)var34);
    int var48 = var34.size();
    boolean var49 = var0.equals((java.lang.Object)var48);
    org.jfree.chart.util.ShapeList var50 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.rotateShape(var52, 0.0d, 1.0f, 10.0f);
    boolean var57 = var50.equals((java.lang.Object)var52);
    java.awt.Shape var59 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    boolean var60 = var50.equals((java.lang.Object)var59);
    org.jfree.chart.util.ShapeList var61 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var63 = var61.getShape(100);
    org.jfree.chart.util.ShapeList var64 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var65 = null;
    boolean var66 = var64.equals(var65);
    java.lang.Object var67 = var64.clone();
    boolean var68 = var61.equals((java.lang.Object)var64);
    boolean var69 = var50.equals((java.lang.Object)var64);
    java.lang.Object var70 = var50.clone();
    java.awt.Shape var72 = var50.getShape(1);
    java.lang.Object var73 = var50.clone();
    boolean var74 = var0.equals((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test442"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, (-1.0d));
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.clone(var8);
    boolean var10 = org.jfree.chart.util.ShapeUtilities.equal(var5, var9);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var5);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var5, 100.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test443"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    var0.clear();
    java.awt.Shape var4 = var0.getShape(1);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test444"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 10.0d, 0.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 10.0d, 0.0f, (-1.0f));
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, (-1.0d), 0.0d);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var27, var29);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 0.0d, 10.0f, (-1.0f));
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var27);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var20, var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test445"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.lang.Object var11 = var0.clone();
    java.awt.Shape var13 = null;
    var0.setShape(11, var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test446"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    boolean var7 = var0.equals((java.lang.Object)var3);
    var3.clear();
    java.lang.Object var9 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test447"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.awt.Shape var21 = var11.getShape(100);
    java.lang.Object var22 = var11.clone();
    java.lang.Object var23 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var11);
    boolean var24 = var0.equals(var23);
    java.lang.Object var25 = var0.clone();
    java.lang.Object var26 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test448() {}
//   public void test448() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test448"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     var1.clear();
//     java.awt.Shape var11 = var1.getShape((-1));
//     int var12 = var1.size();
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 0.0d, 1.0d);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, (-1.0d), 100.0d);
//     boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var15, var25);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, (-1.0d), 1.0f, 10.0f);
//     var1.setShape(0, var25);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var25);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 1.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, 1.0d, 10.0d);
//     boolean var42 = org.jfree.chart.util.ShapeUtilities.equal(var35, var38);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var38, (-1.0d), 1.0f, 100.0f);
// 
//   }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test449"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 100.0d, 100.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, (-1.0d), (-1.0f), 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test450"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.lang.Object var5 = var0.clone();
    var0.clear();
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), (-1.0f));
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 1.0d, (-1.0f), (-1.0f));
    boolean var15 = var0.equals((java.lang.Object)var10);
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = null;
    boolean var18 = var16.equals(var17);
    java.lang.Object var19 = var16.clone();
    java.lang.Object var20 = var16.clone();
    java.lang.Object var21 = var16.clone();
    java.lang.Object var22 = var16.clone();
    java.lang.Object var23 = var16.clone();
    boolean var24 = var0.equals(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test451"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 10.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var6 = var4.getShape(0);
    var4.clear();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, (-1.0d), 100.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var10, 0.0d, 1.0d);
    var4.setShape(1, var10);
    java.lang.Object var18 = var4.clone();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, (-1.0d), 100.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 1.0d, 10.0f, (-1.0f));
    var4.setShape(1, var27);
    boolean var33 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, (java.lang.Object)var27);
    java.awt.Shape var34 = null;
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var3, var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test452"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.lang.Object var8 = var0.clone();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test453"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var11, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 10.0f, 10.0f);
    java.io.ObjectOutputStream var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var27, var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test454"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.lang.Object var4 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test455"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    var0.setShape(0, var14);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.clone(var23);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 100.0d, 1.0d);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 1.0d, 0.0d);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.clone(var37);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var21, var37);
    var0.setShape(10, var37);
    java.io.ObjectOutputStream var41 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var37, var41);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test456() {}
//   public void test456() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test456"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var2 = var0.getShape(0);
//     var0.clear();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
//     var0.setShape(1, var6);
//     java.lang.Object var14 = var0.clone();
//     java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
//     java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
//     var0.setShape(1, var23);
//     java.lang.Object var29 = var0.clone();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.clone(var32);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var33);
//     java.lang.Object var35 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var34);
//     var0.setShape(101, var34);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 10.0f);
//     boolean var40 = var0.equals((java.lang.Object)10.0f);
//     boolean var42 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, (java.lang.Object)102);
//     java.lang.Object var43 = var0.clone();
//     
//     // Checks the contract:  equals-hashcode on var29 and var43
//     assertTrue("Contract failed: equals-hashcode on var29 and var43", var29.equals(var43) ? var29.hashCode() == var43.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var29 and var43.", var29.equals(var43) == var43.equals(var29));
// 
//   }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test457"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    var0.clear();
    org.jfree.chart.util.ShapeList var3 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    java.lang.Object var6 = var3.clone();
    java.lang.Object var7 = var3.clone();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var10, 0.0d, 1.0f, 10.0f);
    var3.setShape(1, var10);
    var3.clear();
    int var17 = var3.size();
    boolean var18 = var0.equals((java.lang.Object)var3);
    int var19 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test458"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.awt.Shape var18 = var0.getShape(0);
    java.awt.Shape var20 = var0.getShape((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test459() {}
//   public void test459() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test459"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.lang.Object var1 = var0.clone();
//     java.lang.Object var2 = var0.clone();
//     java.awt.Shape var4 = var0.getShape(100);
//     java.lang.Object var5 = var0.clone();
//     org.jfree.chart.util.ShapeList var6 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
//     var6.setShape(100, var12);
//     var6.clear();
//     java.lang.Object var15 = var6.clone();
//     int var16 = var6.size();
//     java.awt.Shape var18 = var6.getShape(0);
//     boolean var20 = var6.equals((java.lang.Object)(short)(-1));
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
//     boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var23, var28);
//     java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.clone(var23);
//     var6.setShape(0, var23);
//     java.awt.Shape var33 = var6.getShape(1);
//     boolean var34 = var0.equals((java.lang.Object)var6);
//     
//     // Checks the contract:  equals-hashcode on var0 and var6
//     assertTrue("Contract failed: equals-hashcode on var0 and var6", var0.equals(var6) ? var0.hashCode() == var6.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var6.", var0.equals(var6) == var6.equals(var0));
// 
//   }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test460"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    var0.clear();
    java.lang.Object var11 = var0.clone();
    boolean var13 = var0.equals((java.lang.Object)'#');
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, (-1.0d), 0.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var19, 0.0d, 10.0f, 1.0f);
    var0.setShape(1, var23);
    java.lang.Object var25 = null;
    boolean var26 = var0.equals(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test461"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, 0.0d);
    boolean var27 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var26);
    boolean var28 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 10.0d, (-1.0f), 1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 1.0d, 10.0f, 10.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 100.0d);
    java.lang.Object var40 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var36);
    java.io.ObjectOutputStream var41 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var36, var41);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test462() {}
//   public void test462() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test462"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
//     boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 10.0d, 0.0d);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 10.0d, 1.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var12, (-1.0d), 10.0f, 1.0f);
// 
//   }

  public void test463() {}
//   public void test463() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test463"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
//     var0.setShape(0, var10);
//     java.awt.Shape var14 = var0.getShape(10);
//     java.lang.Object var15 = var0.clone();
//     java.lang.Object var16 = var0.clone();
//     var0.clear();
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(10.0f, 100.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 10.0d, 0.0f, (-1.0f));
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, (-1.0d), 0.0d);
//     boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var24, var26);
//     boolean var31 = var0.equals((java.lang.Object)var26);
//     java.lang.Object var32 = var0.clone();
//     
//     // Checks the contract:  equals-hashcode on var32 and var15
//     assertTrue("Contract failed: equals-hashcode on var32 and var15", var32.equals(var15) ? var32.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var16
//     assertTrue("Contract failed: equals-hashcode on var32 and var16", var32.equals(var16) ? var32.hashCode() == var16.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var32 and var15.", var32.equals(var15) == var15.equals(var32));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var32 and var16.", var32.equals(var16) == var16.equals(var32));
// 
//   }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test464"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    var0.clear();
    int var6 = var0.size();
    org.jfree.chart.util.ShapeList var8 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 0.0d, 1.0d);
    var8.setShape(100, var14);
    var8.clear();
    java.lang.Object var17 = var8.clone();
    var8.clear();
    boolean var20 = var8.equals((java.lang.Object)0);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var22 = var8.clone();
    var8.clear();
    java.lang.Object var24 = var8.clone();
    boolean var25 = var0.equals((java.lang.Object)var8);
    java.lang.Object var26 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test465"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, (-1.0d), 100.0d);
    boolean var15 = org.jfree.chart.util.ShapeUtilities.equal(var9, var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var1, var11);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var18);
    org.jfree.chart.util.ShapeList var20 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var22 = var20.getShape(0);
    var20.clear();
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, (-1.0d), 100.0d);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var26, 0.0d, 1.0d);
    var20.setShape(1, var26);
    java.lang.Object var34 = var20.clone();
    java.awt.Shape var36 = var20.getShape(0);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, (-1.0d), 100.0d);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, 0.0d, 1.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var43);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var43, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 100.0d, 1.0d);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var51, 1.0d, 0.0d);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.clone(var57);
    boolean var59 = org.jfree.chart.util.ShapeUtilities.equal(var41, var57);
    boolean var60 = var20.equals((java.lang.Object)var59);
    boolean var61 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var19, (java.lang.Object)var60);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var19, 100.0d, 1.0d);
    java.awt.Shape var65 = org.jfree.chart.util.ShapeUtilities.clone(var19);
    java.awt.Shape var66 = org.jfree.chart.util.ShapeUtilities.clone(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test466"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 100.0d, 10.0d);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    java.awt.Shape var12 = null;
    boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var11, var12);
    java.io.ObjectOutputStream var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var12, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test467"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.clone(var10);
    var0.setShape(0, var10);
    java.awt.Shape var14 = var0.getShape(10);
    java.lang.Object var15 = var0.clone();
    java.lang.Object var16 = var0.clone();
    var0.clear();
    java.lang.Object var18 = null;
    boolean var19 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var0, var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test468"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 0.0d, 1.0d);
    var0.setShape(1, var6);
    java.lang.Object var14 = var0.clone();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, (-1.0d), 100.0d);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var17, 0.0d, 1.0d);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.rotateShape(var23, 1.0d, 10.0f, (-1.0f));
    var0.setShape(1, var23);
    java.lang.Object var29 = var0.clone();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 1.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var36, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 100.0d, 1.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, 1.0d, 0.0d);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    boolean var52 = org.jfree.chart.util.ShapeUtilities.equal(var34, var50);
    boolean var53 = var0.equals((java.lang.Object)var50);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test469"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    int var18 = var17.size();
    boolean var19 = var0.equals((java.lang.Object)var18);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
    boolean var43 = var0.equals((java.lang.Object)var39);
    org.jfree.chart.util.ShapeList var44 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 0.0d, 1.0f, 10.0f);
    boolean var51 = var44.equals((java.lang.Object)var46);
    java.awt.Shape var52 = null;
    boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var46, var52);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var46);
    boolean var55 = var0.equals((java.lang.Object)var54);
    java.lang.Object var56 = var0.clone();
    org.jfree.chart.util.ShapeList var57 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var60 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var60, 0.0d, 1.0d);
    var57.setShape(100, var63);
    var57.clear();
    java.awt.Shape var67 = var57.getShape(100);
    java.lang.Object var68 = var57.clone();
    var57.clear();
    var57.clear();
    java.lang.Object var71 = null;
    boolean var72 = var57.equals(var71);
    java.lang.Object var73 = var57.clone();
    boolean var74 = var0.equals(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test470"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var9);
    boolean var12 = org.jfree.chart.util.ShapeUtilities.equal(var6, var9);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = null;
    boolean var15 = var13.equals(var14);
    java.lang.Object var16 = var13.clone();
    java.lang.Object var17 = var13.clone();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var20, 0.0d, 1.0f, 10.0f);
    var13.setShape(1, var20);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, (-1.0d), (-1.0d));
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.clone(var28);
    boolean var30 = org.jfree.chart.util.ShapeUtilities.equal(var9, var28);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 1.0d, 10.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test471() {}
//   public void test471() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test471"); }
// 
// 
//     org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
//     var0.setShape(100, var6);
//     var0.clear();
//     java.lang.Object var9 = var0.clone();
//     int var10 = var0.size();
//     java.awt.Shape var12 = var0.getShape(0);
//     boolean var14 = var0.equals((java.lang.Object)(short)(-1));
//     java.lang.Object var15 = var0.clone();
//     int var16 = var0.size();
//     org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
//     int var18 = var17.size();
//     boolean var19 = var0.equals((java.lang.Object)var18);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
//     boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var31, (-1.0d), 1.0f, 10.0f);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var39, 0.0d, (-1.0d));
//     boolean var43 = var0.equals((java.lang.Object)var39);
//     java.lang.Object var44 = var0.clone();
//     java.lang.Object var45 = var0.clone();
//     java.lang.Object var46 = null;
//     boolean var47 = var0.equals(var46);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, 0.0d, 1.0d);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.clone(var50);
//     java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var50);
//     java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.clone(var50);
//     java.lang.Object var57 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var56);
//     java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.rotateShape(var56, 10.0d, 100.0f, 0.0f);
//     var0.setShape(0, var61);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var17 and var0.", var17.equals(var0) == var0.equals(var17));
// 
//   }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test472"); }


    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
    var1.setShape(100, var7);
    var1.clear();
    java.lang.Object var10 = var1.clone();
    var1.clear();
    boolean var13 = var1.equals((java.lang.Object)0);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var1);
    java.lang.Object var15 = var1.clone();
    org.jfree.chart.util.ShapeList var16 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var17 = var16.clone();
    var16.clear();
    boolean var19 = var1.equals((java.lang.Object)var16);
    java.lang.Object var20 = var1.clone();
    var1.clear();
    java.awt.Shape var23 = var1.getShape(1);
    java.lang.Object var24 = var1.clone();
    int var25 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test473() {}
//   public void test473() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test473"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
//     boolean var11 = org.jfree.chart.util.ShapeUtilities.equal(var5, var10);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, (-1.0d), 100.0d);
//     boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var13, var15);
//     boolean var20 = org.jfree.chart.util.ShapeUtilities.equal(var5, var15);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.clone(var15);
//     java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, 10.0d, 0.0d);
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.rotateShape(var24, 1.0d, 0.0f, 100.0f);
//     boolean var29 = org.jfree.chart.util.ShapeUtilities.equal(var3, var24);
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, (-1.0d), 0.0d);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, 100.0d, (-1.0d));
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var35, 10.0d, 100.0f, 1.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var39, (-1.0d), 100.0f, 0.0f);
// 
//   }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test474"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var1, 0.0d, 1.0d);
    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.clone(var1);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, 100.0d, 100.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 100.0d, (-1.0f), 1.0f);
    java.io.ObjectOutputStream var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var13, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test475"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    int var8 = var0.size();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var11);
    boolean var14 = var0.equals((java.lang.Object)var11);
    org.jfree.chart.util.RectangleAnchor var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, var15, 100.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test476"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    var13.setShape(100, var19);
    var13.clear();
    java.lang.Object var22 = var13.clone();
    var13.clear();
    boolean var25 = var13.equals((java.lang.Object)0);
    java.lang.Object var26 = var13.clone();
    boolean var27 = var0.equals((java.lang.Object)var13);
    java.lang.Object var28 = var13.clone();
    var13.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test477"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.lang.Object var28 = null;
    boolean var29 = var0.equals(var28);
    java.lang.Object var30 = var0.clone();
    var0.clear();
    java.awt.Shape var33 = var0.getShape(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test478"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    int var10 = var0.size();
    java.awt.Shape var12 = var0.getShape(0);
    boolean var14 = var0.equals((java.lang.Object)(short)(-1));
    java.lang.Object var15 = var0.clone();
    int var16 = var0.size();
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 0.0d, 1.0d);
    var17.setShape(100, var23);
    var17.clear();
    int var26 = var17.size();
    boolean var27 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var29, var31);
    boolean var36 = var0.equals((java.lang.Object)var31);
    java.awt.Shape var38 = var0.getShape(0);
    var0.clear();
    var0.clear();
    int var41 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test479"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var2 = null;
    boolean var3 = var1.equals(var2);
    java.lang.Object var4 = var1.clone();
    java.lang.Object var5 = var1.clone();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 0.0d, 1.0f, 10.0f);
    var1.setShape(1, var8);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 100.0d, (-1.0f), 1.0f);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, (-1.0d), 1.0f, 1.0f);
    boolean var22 = org.jfree.chart.util.ShapeUtilities.equal(var0, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test480() {}
//   public void test480() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test480"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     var1.setShape(100, var7);
//     java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.clone(var11);
//     var1.setShape(0, var11);
//     java.awt.Shape var15 = var1.getShape(10);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 1.0d);
//     var1.setShape(0, var18);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 10.0d, (-1.0f), 10.0f);
//     java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, 0.0d, 100.0d);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var29, 0.0d, 10.0f, 0.0f);
// 
//   }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test481"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 1.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.clone(var9);
    boolean var14 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var2, (java.lang.Object)var9);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    boolean var19 = org.jfree.chart.util.ShapeUtilities.equal(var9, var17);
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, (-1.0d), 100.0d);
    boolean var35 = org.jfree.chart.util.ShapeUtilities.equal(var21, var31);
    boolean var36 = org.jfree.chart.util.ShapeUtilities.equal(var17, var21);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var17);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 1.0d, 1.0d);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test482"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.0d, 1.0f, 10.0f);
    boolean var7 = var0.equals((java.lang.Object)var2);
    java.awt.Shape var9 = var0.getShape(100);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(1.0f, 1.0f);
    var0.setShape(10, var13);
    java.lang.Object var15 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var13);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 10.0d, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test483"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(1.0f, 100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.clone(var14);
    var4.setShape(0, var14);
    java.awt.Shape var18 = var4.getShape(10);
    var4.clear();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.clone(var21);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.rotateShape(var21, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 100.0d, 1.0d);
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var29, 1.0d, 0.0d);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    boolean var38 = var4.equals((java.lang.Object)var35);
    boolean var39 = org.jfree.chart.util.ShapeUtilities.equal(var3, var35);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 1.0d, 0.0d);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var3);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 1.0d, 0.0d);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.clone(var3);
    java.io.ObjectOutputStream var48 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var47, var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test484"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, 0.0d);
    boolean var27 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var26);
    boolean var28 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 10.0d, (-1.0f), 1.0f);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 1.0d, 10.0f, 10.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var36, 0.0d, 100.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test485"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    int var1 = var0.size();
    boolean var3 = var0.equals((java.lang.Object)100.0d);
    java.lang.Object var4 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var0);
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = null;
    boolean var7 = var0.equals(var6);
    int var8 = var0.size();
    var0.clear();
    org.jfree.chart.util.ShapeList var10 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, 0.0d, 1.0d);
    var10.setShape(100, var16);
    var10.clear();
    java.lang.Object var19 = var10.clone();
    int var20 = var10.size();
    java.awt.Shape var22 = var10.getShape(0);
    org.jfree.chart.util.ShapeList var23 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var24 = null;
    boolean var25 = var23.equals(var24);
    var23.clear();
    org.jfree.chart.util.ShapeList var27 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var28 = var27.clone();
    var27.clear();
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var31, 10.0d, (-1.0d));
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.clone(var31);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 10.0d, 1.0d);
    boolean var39 = var27.equals((java.lang.Object)var35);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    boolean var41 = var23.equals((java.lang.Object)var35);
    boolean var42 = var10.equals((java.lang.Object)var35);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    boolean var44 = var0.equals((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test486"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    java.lang.Object var10 = null;
    boolean var11 = var0.equals(var10);
    java.lang.Object var12 = var0.clone();
    int var13 = var0.size();
    var0.clear();
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(0.0f);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 1.0f);
    boolean var21 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)1.0f);
    var0.setShape(101, var17);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.rotateShape(var17, 1.0d, 100.0f, 1.0f);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.rotateShape(var26, 100.0d, (-1.0f), 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test487() {}
//   public void test487() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test487"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, 0.0d, 1.0d);
//     boolean var8 = org.jfree.chart.util.ShapeUtilities.equal(var2, var7);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
//     java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
//     java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, (-1.0d), 100.0d);
//     boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
//     boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var2, var12);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.clone(var12);
//     java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var23, 10.0d, (-1.0f), 0.0f);
// 
//   }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test488"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 100.0f);
    java.io.ObjectOutputStream var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeShape(var2, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test489"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 0.0d, 1.0f, 10.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 0.0d, 1.0d);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.clone(var12);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 100.0d, 1.0d);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var20, 1.0d, 0.0d);
    boolean var27 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var6, (java.lang.Object)var26);
    boolean var28 = var0.equals((java.lang.Object)var26);
    java.awt.Shape var30 = var0.getShape(0);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 10.0f);
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.clone(var33);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, 0.0d, 1.0d);
    boolean var45 = org.jfree.chart.util.ShapeUtilities.equal(var39, var44);
    java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(1.0f);
    java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var52 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, (-1.0d), 100.0d);
    boolean var53 = org.jfree.chart.util.ShapeUtilities.equal(var47, var49);
    boolean var54 = org.jfree.chart.util.ShapeUtilities.equal(var39, var49);
    java.awt.Shape var55 = org.jfree.chart.util.ShapeUtilities.clone(var49);
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var49, 10.0d, 0.0d);
    java.awt.Shape var62 = org.jfree.chart.util.ShapeUtilities.rotateShape(var58, 1.0d, 0.0f, 100.0f);
    boolean var63 = org.jfree.chart.util.ShapeUtilities.equal(var37, var58);
    boolean var64 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var34, (java.lang.Object)var63);
    boolean var65 = var0.equals((java.lang.Object)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var66 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)var65);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test490"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    int var3 = var0.size();
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, (-1.0d), 100.0d);
    java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var9, 0.0d, (-1.0f), 10.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 0.0d, 100.0d);
    org.jfree.chart.util.ShapeList var17 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var19 = var17.getShape(0);
    var17.clear();
    java.awt.Shape var23 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, (-1.0d), 100.0d);
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var23, 0.0d, 1.0d);
    var17.setShape(1, var23);
    java.lang.Object var31 = var17.clone();
    java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, (-1.0d), 100.0d);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, 0.0d, 1.0d);
    java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.rotateShape(var40, 1.0d, 10.0f, (-1.0f));
    var17.setShape(1, var40);
    java.lang.Object var46 = var17.clone();
    java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var48, (-1.0d), 100.0d);
    java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var56 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var53, 0.0d, 1.0d);
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.clone(var53);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.rotateShape(var53, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var64 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var61, 100.0d, 1.0d);
    java.awt.Shape var67 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var61, 1.0d, 0.0d);
    java.awt.Shape var68 = org.jfree.chart.util.ShapeUtilities.clone(var67);
    boolean var69 = org.jfree.chart.util.ShapeUtilities.equal(var51, var67);
    boolean var70 = var17.equals((java.lang.Object)var67);
    boolean var71 = org.jfree.chart.util.ShapeUtilities.equal(var9, var67);
    java.awt.Shape var74 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var67, 10.0d, (-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-1), var67);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test491"); }


    java.awt.Shape var1 = org.jfree.chart.util.ShapeUtilities.createDownTriangle(100.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    boolean var7 = org.jfree.chart.util.ShapeUtilities.equal(var1, var6);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 10.0f);
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.rotateShape(var12, 0.0d, 1.0f, (-1.0f));
    boolean var17 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    var18.setShape(100, var24);
    var18.clear();
    java.awt.Shape var28 = var18.getShape((-1));
    java.awt.Shape var30 = var18.getShape((-1));
    java.lang.Object var31 = var18.clone();
    boolean var32 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var33 = var18.clone();
    java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var35, 0.0d, 1.0d);
    java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.clone(var35);
    java.awt.Shape var43 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var46 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var43, (-1.0d), 100.0d);
    java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.rotateShape(var46, 0.0d, (-1.0f), 10.0f);
    boolean var51 = org.jfree.chart.util.ShapeUtilities.equal(var35, var46);
    java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 0.0d, (-1.0d));
    java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 1.0d, 0.0d);
    boolean var58 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var18, (java.lang.Object)var46);
    java.awt.Shape var61 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var46, 10.0d, 100.0d);
    boolean var62 = org.jfree.chart.util.ShapeUtilities.equal(var6, var61);
    java.awt.Shape var63 = org.jfree.chart.util.ShapeUtilities.clone(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test492"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(0);
    java.lang.Object var3 = var0.clone();
    int var4 = var0.size();
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test493"); }


    java.awt.Shape var0 = null;
    org.jfree.chart.util.RectangleAnchor var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var0, var1, (-1.0d), 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test494"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = null;
    boolean var2 = var0.equals(var1);
    java.lang.Object var3 = var0.clone();
    java.lang.Object var4 = var0.clone();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 0.0d, 1.0f, 10.0f);
    var0.setShape(1, var7);
    var0.clear();
    int var14 = var0.size();
    int var15 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test495"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    boolean var12 = var0.equals((java.lang.Object)0);
    org.jfree.chart.util.ShapeList var13 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var14 = var13.clone();
    java.lang.Object var15 = var13.clone();
    boolean var16 = var0.equals((java.lang.Object)var13);
    java.lang.Object var17 = var13.clone();
    org.jfree.chart.util.ShapeList var18 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var21, 0.0d, 1.0d);
    var18.setShape(100, var24);
    var18.clear();
    java.lang.Object var27 = var18.clone();
    int var28 = var18.size();
    java.awt.Shape var30 = var18.getShape(0);
    boolean var32 = var18.equals((java.lang.Object)(short)(-1));
    org.jfree.chart.util.ShapeList var34 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var37, 0.0d, 1.0d);
    var34.setShape(100, var40);
    var34.clear();
    java.lang.Object var43 = var34.clone();
    var34.clear();
    boolean var46 = var34.equals((java.lang.Object)0);
    boolean var47 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)(-1L), (java.lang.Object)var34);
    java.lang.Object var48 = var34.clone();
    boolean var49 = var18.equals(var48);
    boolean var50 = var13.equals((java.lang.Object)var18);
    var18.clear();
    java.lang.Object var52 = var18.clone();
    var18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test496"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(100.0f, 10.0f);
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.clone(var2);
    org.jfree.chart.util.ShapeList var4 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 0.0d, 1.0d);
    var4.setShape(100, var10);
    var4.clear();
    java.awt.Shape var14 = var4.getShape(100);
    java.lang.Object var15 = var4.clone();
    boolean var16 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var3, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test497"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    int var9 = var0.size();
    int var10 = var0.size();
    org.jfree.chart.util.ShapeList var11 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var17 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var14, 0.0d, 1.0d);
    var11.setShape(100, var17);
    var11.clear();
    java.awt.Shape var21 = var11.getShape(100);
    java.lang.Object var22 = var11.clone();
    var11.clear();
    var11.clear();
    java.lang.Object var25 = null;
    boolean var26 = var11.equals(var25);
    var11.clear();
    boolean var28 = var0.equals((java.lang.Object)var11);
    var0.clear();
    java.awt.Shape var31 = var0.getShape(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test498"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, 0.0d, 1.0d);
    var0.setShape(100, var6);
    var0.clear();
    java.lang.Object var9 = var0.clone();
    var0.clear();
    int var11 = var0.size();
    java.awt.Shape var13 = var0.getShape(100);
    java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var19 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var16, 0.0d, 1.0d);
    java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.clone(var16);
    java.awt.Shape var24 = org.jfree.chart.util.ShapeUtilities.rotateShape(var16, (-1.0d), 1.0f, 1.0f);
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 100.0d, 1.0d);
    java.awt.Shape var30 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var24, 10.0d, 0.0d);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.clone(var24);
    var0.setShape(100, var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test499"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var2 = var0.getShape(100);
    java.lang.Object var3 = var0.clone();
    var0.clear();
    org.jfree.chart.util.ShapeList var5 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, 0.0d, 1.0d);
    var5.setShape(100, var11);
    var5.clear();
    java.lang.Object var14 = var5.clone();
    int var15 = var5.size();
    java.awt.Shape var17 = var5.getShape(0);
    boolean var19 = var5.equals((java.lang.Object)(short)(-1));
    java.lang.Object var20 = var5.clone();
    int var21 = var5.size();
    org.jfree.chart.util.ShapeList var22 = new org.jfree.chart.util.ShapeList();
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, 0.0d, 1.0d);
    var22.setShape(100, var28);
    var22.clear();
    java.lang.Object var31 = var22.clone();
    var22.clear();
    boolean var34 = var22.equals((java.lang.Object)0);
    java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createDiamond(1.0f);
    java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.clone(var36);
    boolean var38 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var22, (java.lang.Object)var37);
    java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createRegularCross(0.0f, 0.0f);
    var22.setShape(0, var42);
    var22.clear();
    java.lang.Object var45 = var22.clone();
    java.lang.Object var46 = var22.clone();
    boolean var47 = var5.equals((java.lang.Object)var22);
    boolean var48 = var0.equals((java.lang.Object)var47);
    java.awt.Shape var50 = var0.getShape(0);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test500() {}
//   public void test500() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest2.test500"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.util.ShapeList var1 = new org.jfree.chart.util.ShapeList();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createUpTriangle(1.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 0.0d, 1.0f, 10.0f);
//     boolean var8 = var1.equals((java.lang.Object)var3);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createDiamond(0.0f);
//     boolean var11 = var1.equals((java.lang.Object)var10);
//     java.awt.Shape var12 = null;
//     boolean var13 = org.jfree.chart.util.ShapeUtilities.equal(var10, var12);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var12, (-1.0d), (-1.0f), 100.0f);
// 
//   }

}
