#!/usr/bin/env perl
#
#-------------------------------------------------------------------------------
# Copyright (c) 2014-2018 Ren√© Just, Darioush Jalali, and Defects4J contributors.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#-------------------------------------------------------------------------------

use warnings;
use strict;

use FindBin qw($Bin);
use File::Basename;
use Cwd qw(abs_path);

use lib abs_path("$Bin/../core");

=pod

=head1 NAME

defects4j -- command-line interface to Defects4J.

=head1 SYNOPSIS

  defects4j <command> [<args>]

=head1 DESCRIPTION

This script provides a high-level command-line interface to Defects4J.

=cut

# Hash of key-value pairs storing command names and descriptions
# TODO: Use a POD parser to populate the hash and create the POD documentation?
my %cmd_descr;

=pod

=head1 COMMANDS

=over 4

=item * L<B<checkout>|d4j::d4j-checkout/>

checkout a particular project version.

=cut
$cmd_descr{checkout}="checkout a particular project version";

=pod

=item * L<B<compile>|d4j::d4j-compile/>

compile a checked-out project version.

=cut
$cmd_descr{compile}="compile a checked-out project version";

=pod

=item * L<B<test>|d4j::d4j-test/>

run tests on a checked-out project version.

=cut
$cmd_descr{test}="run tests on a checked-out project version";

=pod

=item * L<B<monitor.test>|d4j::d4j-monitor.test/>

monitor class loader while running a single test.

=cut
$cmd_descr{"monitor.test"}="monitor class loader while running a single test";

=pod

=item * L<B<mutation>|d4j::d4j-mutation/>

run mutation analysis for a checked-out project version.

=cut
$cmd_descr{"mutation"}="run mutation analysis for a checked-out project version";

=pod

=item * L<B<coverage>|d4j::d4j-coverage/>

run code coverage analysis for a checked-out project version.

=cut
$cmd_descr{"coverage"}="run code coverage analysis for a checked-out project version";

=pod

=item * L<B<info>|d4j::d4j-info/>

print information for a specific project or bug.

=cut
$cmd_descr{info}="print information for a specific project or bug";

=pod

=item * L<B<export>|d4j::d4j-export/>

export a version-specific property.

=back

=cut
$cmd_descr{export}="export a version-specific property";

#
# Issue usage message and quit
#
sub _d4j_usage {
    print("usage: " . basename($0) . " <command> [<args>]\n\n");
    print("Commands:\n");
    for my $cmd (sort keys %cmd_descr) {
        printf("  %-12s  %-s\n", $cmd, $cmd_descr{$cmd});
    }
    exit 1;
}

# At least a command has to be provided
$#ARGV >= 0 or _d4j_usage();
my $cmd = shift(@ARGV);
_d4j_usage() unless defined $cmd_descr{$cmd};

# Add d4j-prefix to actual script name
my $script = dirname(abs_path($0)) . "/d4j/d4j-$cmd";

# Fake $0 for executed script to report "defects4j cmd" in usage messages.
$0 = basename($0) . " $cmd";

require($script);
