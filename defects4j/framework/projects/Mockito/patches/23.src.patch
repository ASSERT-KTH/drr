diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index b18dd3b..c4384f7 100644
--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -41,16 +41,14 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = -7105341425736035847L;
 
-    private transient MockitoCore mockitoCore;
-    private transient ReturnsEmptyValues delegate;
+    private MockitoCore mockitoCore = new MockitoCore();
+    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
 
         Class<?> rawType = returnTypeGenericMetadata.rawType();
-        instantiateMockitoCoreIfNeeded();
-        instantiateDelegateIfNeeded();
         if (!mockitoCore.isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
@@ -58,17 +56,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         return getMock(invocation, returnTypeGenericMetadata);
     }
 
-    private synchronized void instantiateMockitoCoreIfNeeded() {
-        if (mockitoCore == null) {
-            mockitoCore = new MockitoCore();
-        }
-    }
 
-    private synchronized void instantiateDelegateIfNeeded() {
-        if (delegate == null) {
-            delegate = new ReturnsEmptyValues();
-        }
-    }
 
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
@@ -109,7 +97,6 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
                 : withSettings();
 
         return mockSettings
-		        .serializable()
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
 
@@ -124,7 +111,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
 
     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
 
-        container.addAnswer(new SerializableAnswer() {
+        container.addAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
             }
@@ -133,9 +120,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         return mock;
     }
 	
-	abstract class SerializableAnswer implements Answer<Object>, Serializable {
 		
-	}
 	
 
     protected GenericMetadataSupport actualParameterizedType(Object mock) {
