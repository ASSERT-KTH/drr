diff --git a/test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java b/test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java
deleted file mode 100644
index 2240728..0000000
--- a/test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package org.mockito.internal.util.reflection;
-
-import org.fest.assertions.Assertions;
-import org.junit.Test;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.lang.reflect.Field;
-
-import static org.junit.Assert.*;
-
-
-public class BeanPropertySetterTest {
-
-    @Test
-    public void shouldUseTheSetterOnTheTargetWithTheFieldType() throws Exception {
-        SomeBean someBean = new SomeBean();
-        Field theField = someBean.getClass().getDeclaredField("theField");
-
-        File valueToInject = new File("path");
-
-        boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);
-
-        assertTrue(injected);
-        assertTrue(someBean.setTheFieldWasUsed);
-        assertSame(valueToInject, someBean.getTheField());
-    }
-
-    @Test
-    public void shouldNotFailIfBeanHasOnlyASetter() throws Exception {
-        SomeBeanWithJustASetter someBean = new SomeBeanWithJustASetter();
-        Field theField = someBean.getClass().getDeclaredField("theField");
-
-        File valueToInject = new File("path");
-
-        boolean injected = new BeanPropertySetter(someBean, theField, true).set(valueToInject);
-
-        assertTrue(injected);
-        assertTrue(someBean.setTheFieldWasUsed);
-    }
-
-    @Test
-    public void shouldFailIfMatchingSetterCannotBeFoundAndIfReportFailureTrue() throws Exception {
-        SomeBeanWithNoSetterMatchingFieldType bean = new SomeBeanWithNoSetterMatchingFieldType();
-        Field theField = bean.getClass().getDeclaredField("theField");
-
-        File valueToInject = new File("path");
-
-        try {
-            new BeanPropertySetter(bean, theField, true).set(valueToInject);
-            fail();
-        } catch (Exception e) {
-            Assertions.assertThat(e.getMessage()).contains("setter not found");
-        }
-    }
-
-    @Test
-    public void shouldReturnFalseIfNoSetterFound() throws Exception {
-        SomeBeanWithJustAGetter bean = new SomeBeanWithJustAGetter();
-        Field theField = bean.getClass().getDeclaredField("theField");
-
-        File valueToInject = new File("path");
-
-        boolean injected = new BeanPropertySetter(bean, theField).set(valueToInject);
-
-        assertFalse(injected);
-    }
-
-    @Test
-    public void shouldReturnFalseIfNoSetterWasFoundAndIfReportFailureFalse() throws Exception {
-        SomeBeanWithNoSetterMatchingFieldType bean = new SomeBeanWithNoSetterMatchingFieldType();
-        Field theField = bean.getClass().getDeclaredField("theField");
-
-        File valueToInject = new File("path");
-
-        boolean injected = new BeanPropertySetter(bean, theField, false).set(valueToInject);
-
-        assertFalse(injected);
-    }
-
-    static class SomeBean {
-        private File theField;
-        boolean setTheFieldWasUsed;
-
-        public void setTheField(final File theField) {
-            setTheFieldWasUsed = true;
-            this.theField = theField;
-        }
-
-        public File getTheField() {
-            return theField;
-        }
-    }
-
-    static class SomeBeanWithJustASetter {
-        private File theField;
-        boolean setTheFieldWasUsed;
-
-        public void setTheField(final File theField) {
-            this.theField = theField;
-            setTheFieldWasUsed = true;
-        }
-    }
-    static class SomeBeanWithJustAGetter {
-        private File theField;
-
-        public File getTheField() {
-            return theField;
-        }
-    }
-
-    static class SomeBeanWithNoSetterMatchingFieldType {
-        private File theField;
-        boolean setTheFieldWasUsed;
-
-        public void setTheField(final FileOutputStream somethingElse) {
-            setTheFieldWasUsed = true;
-        }
-    }
-
-}
diff --git a/test/org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java b/test/org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
deleted file mode 100644
index a2025dd..0000000
--- a/test/org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package org.mockitousage.bugs;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
-
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-/**
- * Issue 211 : @InjectMocks should carry out their work by the method (and not by field) if available 
- */
-@RunWith(MockitoJUnitRunner.class)
-public class InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest {
-    @Mock List<?> fieldAccess;
-    @Mock List<?> propertySetterAccess;
-    @InjectMocks BeanAwaitingInjection awaitingInjection;
-
-    @Test
-    public void shouldInjectUsingPropertySetterIfAvailable() {
-        assertTrue(awaitingInjection.propertySetterUsed);
-    }
-
-    @Test
-    public void shouldInjectFieldIfNoSetter() {
-        assertEquals(fieldAccess, awaitingInjection.fieldAccess);
-    }
-
-    static class BeanAwaitingInjection {
-        List<?> fieldAccess;
-        List<?> propertySetterAccess;
-        boolean propertySetterUsed;
-
-        public void setPropertySetterAccess(List<?> propertySetterAccess) {
-            // don't care if field is set, the setter can do whatever it want.
-            propertySetterUsed = true;
-        }
-    }
-
-}
