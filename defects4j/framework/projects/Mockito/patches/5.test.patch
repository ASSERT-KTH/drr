diff --git a/test/org/mockitointegration/NoJUnitDependenciesTest.java b/test/org/mockitointegration/NoJUnitDependenciesTest.java
deleted file mode 100644
index a1071b5..0000000
--- a/test/org/mockitointegration/NoJUnitDependenciesTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package org.mockitointegration;
-
-import org.hamcrest.Matcher;
-import org.junit.Test;
-import org.mockito.Mockito;
-import org.mockito.cglib.proxy.Enhancer;
-import org.mockitoutil.ClassLoaders;
-import org.objenesis.Objenesis;
-
-import java.util.Set;
-
-public class NoJUnitDependenciesTest {
-    @Test
-    public void pure_mockito_should_not_depend_JUnit() throws Exception {
-        ClassLoader classLoader_without_JUnit = ClassLoaders.excludingClassLoader()
-                .withCodeSourceUrlOf(
-                        Mockito.class,
-                        Matcher.class,
-                        Enhancer.class,
-                        Objenesis.class
-                )
-                .without("junit", "org.junit")
-                .build();
-
-        Set<String> pureMockitoAPIClasses = ClassLoaders.in(classLoader_without_JUnit).omit("runners", "junit", "JUnit").listOwnedClasses();
-
-        for (String pureMockitoAPIClass : pureMockitoAPIClasses) {
-            checkDependency(classLoader_without_JUnit, pureMockitoAPIClass);
-        }
-    }
-
-    private void checkDependency(ClassLoader classLoader_without_JUnit, String pureMockitoAPIClass) throws ClassNotFoundException {
-        try {
-            Class.forName(pureMockitoAPIClass, true, classLoader_without_JUnit);
-        } catch (Throwable e) {
-            throw new AssertionError(String.format("'%s' has some dependency to JUnit", pureMockitoAPIClass), e);
-        }
-    }
-}
diff --git a/test/org/mockitoutil/ClassLoaders.java b/test/org/mockitoutil/ClassLoaders.java
index 75c8350..931969f 100644
--- a/test/org/mockitoutil/ClassLoaders.java
+++ b/test/org/mockitoutil/ClassLoaders.java
@@ -1,23 +1,14 @@
 package org.mockitoutil;
 
-import java.io.ByteArrayInputStream;
 import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
 import java.net.MalformedURLException;
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.net.URLConnection;
-import java.net.URLStreamHandler;
 import java.util.*;
 
 import static java.util.Arrays.asList;
 
 public abstract class ClassLoaders {
-    protected ClassLoader parent = currentClassLoader();
-
     protected ClassLoaders() {}
 
     public static IsolatedURLClassLoaderBuilder isolatedClassLoader() {
@@ -32,23 +23,9 @@ public abstract class ClassLoaders {
         return new InMemoryClassLoaderBuilder();
     }
 
-    public static ReachableClassesFinder in(ClassLoader classLoader_without_jUnit) {
-        return new ReachableClassesFinder(classLoader_without_jUnit);
-    }
 
-    public static ClassLoader jdkClassLoader() {
-        return String.class.getClassLoader();
-    }
 
-    public static ClassLoader systemClassLoader() {
-        return ClassLoader.getSystemClassLoader();
-    }
 
-    public static ClassLoader currentClassLoader() {
-        return ClassLoaders.class.getClassLoader();
-    }
-
-    public abstract ClassLoader build();
 
     public static class IsolatedURLClassLoaderBuilder extends ClassLoaders {
         private final ArrayList<String> privateCopyPrefixes = new ArrayList<String>();
@@ -78,7 +55,6 @@ public abstract class ClassLoaders {
 
         public ClassLoader build() {
             return new LocalIsolatedURLClassLoader(
-                    jdkClassLoader(),
                     codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),
                     privateCopyPrefixes
             );
@@ -88,8 +64,8 @@ public abstract class ClassLoaders {
     static class LocalIsolatedURLClassLoader extends URLClassLoader {
         private final ArrayList<String> privateCopyPrefixes;
 
-        public LocalIsolatedURLClassLoader(ClassLoader classLoader, URL[] urls, ArrayList<String> privateCopyPrefixes) {
-            super(urls, classLoader);
+        public LocalIsolatedURLClassLoader(URL[] urls, ArrayList<String> privateCopyPrefixes) {
+            super(urls, null);
             this.privateCopyPrefixes = privateCopyPrefixes;
         }
 
@@ -135,7 +111,6 @@ public abstract class ClassLoaders {
 
         public ClassLoader build() {
             return new LocalExcludingURLClassLoader(
-                    jdkClassLoader(),
                     codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),
                     privateCopyPrefixes
             );
@@ -145,8 +120,8 @@ public abstract class ClassLoaders {
     static class LocalExcludingURLClassLoader extends URLClassLoader {
         private final ArrayList<String> privateCopyPrefixes;
 
-        public LocalExcludingURLClassLoader(ClassLoader classLoader, URL[] urls, ArrayList<String> privateCopyPrefixes) {
-            super(urls, classLoader);
+        public LocalExcludingURLClassLoader(URL[] urls, ArrayList<String> privateCopyPrefixes) {
+            super(urls, null);
             this.privateCopyPrefixes = privateCopyPrefixes;
         }
 
@@ -167,27 +142,20 @@ public abstract class ClassLoaders {
     public static class InMemoryClassLoaderBuilder extends ClassLoaders {
         private Map<String , byte[]> inMemoryClassObjects = new HashMap<String , byte[]>();
 
-        public InMemoryClassLoaderBuilder withParent(ClassLoader parent) {
-            this.parent = parent;
-            return this;
-        }
-
         public InMemoryClassLoaderBuilder withClassDefinition(String name, byte[] classDefinition) {
             inMemoryClassObjects.put(name, classDefinition);
             return this;
         }
 
         public ClassLoader build() {
-            return new InMemoryClassLoader(parent, inMemoryClassObjects);
+            return new InMemoryClassLoader(inMemoryClassObjects);
         }
     }
 
     static class InMemoryClassLoader extends ClassLoader {
-        public static final String SCHEME = "mem";
         private Map<String , byte[]> inMemoryClassObjects = new HashMap<String , byte[]>();
 
-        public InMemoryClassLoader(ClassLoader parent, Map<String, byte[]> inMemoryClassObjects) {
-            super(parent);
+        public InMemoryClassLoader(Map<String, byte[]> inMemoryClassObjects) {
             this.inMemoryClassObjects = inMemoryClassObjects;
         }
 
@@ -199,60 +167,7 @@ public abstract class ClassLoaders {
             throw new ClassNotFoundException(name);
         }
 
-        @Override
-        public Enumeration<URL> getResources(String ignored) throws IOException {
-            return inMemoryOnly();
-        }
-
-        private Enumeration<URL> inMemoryOnly() {
-            final Set<String> names = inMemoryClassObjects.keySet();
-            return new Enumeration<URL>() {
-                private final MemHandler memHandler = new MemHandler(InMemoryClassLoader.this);
-                private final Iterator<String> it = names.iterator();
-
-                public boolean hasMoreElements() {
-                    return it.hasNext();
-                }
-
-                public URL nextElement() {
-                    try {
-                        return new URL(null, SCHEME + ":" + it.next(), memHandler);
-                    } catch (MalformedURLException rethrown) {
-                        throw new IllegalStateException(rethrown);
-                    }
-                }
-            };
-        }
-    }
-
-    public static class MemHandler extends URLStreamHandler {
-        private InMemoryClassLoader inMemoryClassLoader;
-
-        public MemHandler(InMemoryClassLoader inMemoryClassLoader) {
-            this.inMemoryClassLoader = inMemoryClassLoader;
-        }
-
-        @Override
-        protected URLConnection openConnection(URL url) throws IOException {
-            return new MemURLConnection(url, inMemoryClassLoader);
-        }
 
-        private static class MemURLConnection extends URLConnection {
-            private final InMemoryClassLoader inMemoryClassLoader;
-            private String qualifiedName;
-            public MemURLConnection(URL url, InMemoryClassLoader inMemoryClassLoader) {
-                super(url);
-                this.inMemoryClassLoader = inMemoryClassLoader;
-                qualifiedName = url.getPath();
-            }
-            @Override
-            public void connect() throws IOException { }
-
-            @Override
-            public InputStream getInputStream() throws IOException {
-                return new ByteArrayInputStream(inMemoryClassLoader.inMemoryClassObjects.get(qualifiedName));
-            }
-        }
     }
 
     protected URL obtainClassPathOf(String className) {
@@ -269,7 +184,6 @@ public abstract class ClassLoaders {
     protected List<URL> pathsToURLs(String... codeSourceUrls) {
         return pathsToURLs(Arrays.asList(codeSourceUrls));
     }
-
     private List<URL> pathsToURLs(List<String> codeSourceUrls) {
         ArrayList<URL> urls = new ArrayList<URL>(codeSourceUrls.size());
         for (String codeSourceUrl : codeSourceUrls) {
@@ -286,81 +200,4 @@ public abstract class ClassLoaders {
             throw new IllegalArgumentException("Path is malformed", e);
         }
     }
-
-    public static class ReachableClassesFinder {
-        private ClassLoader classLoader;
-        private Set<String> qualifiedNameSubstring = new HashSet<String>();
-
-        public ReachableClassesFinder(ClassLoader classLoader) {
-            this.classLoader = classLoader;
-        }
-
-        public ReachableClassesFinder omit(String... qualifiedNameSubstring) {
-            this.qualifiedNameSubstring.addAll(Arrays.asList(qualifiedNameSubstring));
-            return this;
-        }
-
-        public Set<String> listOwnedClasses() throws IOException, URISyntaxException {
-            Enumeration<URL> roots = classLoader.getResources("");
-
-            Set<String> classes = new HashSet<String>();
-            while(roots.hasMoreElements()) {
-                URI uri = roots.nextElement().toURI();
-
-                if (uri.getScheme().equalsIgnoreCase("file")) {
-                    addFromFileBasedClassLoader(classes, uri);
-                } else if(uri.getScheme().equalsIgnoreCase(InMemoryClassLoader.SCHEME)) {
-                    addFromInMemoryBasedClassLoader(classes, uri);
-                } else {
-                    throw new IllegalArgumentException(String.format("Given ClassLoader '%s' don't have reachable by File or vi ClassLoaders.inMemory", classLoader));
-                }
-            }
-            return classes;
-        }
-
-        private void addFromFileBasedClassLoader(Set<String> classes, URI uri) {
-            File root = new File(uri);
-            classes.addAll(findClassQualifiedNames(root, root, qualifiedNameSubstring));
-        }
-
-        private void addFromInMemoryBasedClassLoader(Set<String> classes, URI uri) {
-            String qualifiedName = uri.getSchemeSpecificPart();
-            if(excludes(qualifiedName, qualifiedNameSubstring)) {
-                classes.add(qualifiedName);
-            }
-        }
-
-
-        private Set<String> findClassQualifiedNames(File root, File file, Set<String> packageFilters) {
-            if(file.isDirectory()) {
-                File[] files = file.listFiles();
-                Set<String> classes = new HashSet<String>();
-                for (File children : files) {
-                    classes.addAll(findClassQualifiedNames(root, children, packageFilters));
-                }
-                return classes;
-            } else {
-                if (file.getName().endsWith(".class")) {
-                    String qualifiedName = classNameFor(root, file);
-                    if (excludes(qualifiedName, packageFilters)) {
-                        return Collections.singleton(qualifiedName);
-                    }
-                }
-            }
-            return Collections.emptySet();
-        }
-
-        private boolean excludes(String qualifiedName, Set<String> packageFilters) {
-            for (String filter : packageFilters) {
-                if(qualifiedName.contains(filter)) return false;
-            }
-            return true;
-        }
-
-        private String classNameFor(File root, File file) {
-            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.');
-            return temp.subSequence(0, temp.indexOf(".class")).toString();
-        }
-
-    }
 }
diff --git a/test/org/mockitoutil/ClassLoadersTest.java b/test/org/mockitoutil/ClassLoadersTest.java
index 1f6b090..fe4c04f 100644
--- a/test/org/mockitoutil/ClassLoadersTest.java
+++ b/test/org/mockitoutil/ClassLoadersTest.java
@@ -5,10 +5,8 @@ import org.mockito.Mockito;
 
 import static org.fest.assertions.Assertions.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockitoutil.ClassLoaders.currentClassLoader;
 import static org.mockitoutil.ClassLoaders.excludingClassLoader;
 import static org.mockitoutil.ClassLoaders.isolatedClassLoader;
-import static org.mockitoutil.ClassLoaders.jdkClassLoader;
 
 public class ClassLoadersTest {
 
@@ -172,53 +170,6 @@ public class ClassLoadersTest {
         assertThat(aClass.getName()).isEqualTo("yop.Dude");
     }
 
-    @Test
-    public void cannot_load_a_class_file_not_in_parent() throws Exception {
-        // given
-        ClassLoader cl = ClassLoaders
-                .inMemoryClassLoader()
-                .withParent(jdkClassLoader())
-                .build();
-
-        cl.loadClass("java.lang.String");
-
-        try {
-            // when
-            cl.loadClass("org.mockito.Mockito");
-            fail("should have not found Mockito class");
-        } catch (ClassNotFoundException e) {
-            // then
-            assertThat(e.getMessage()).contains("org.mockito.Mockito");
-        }
-    }
-
-    @Test
-    public void can_list_all_classes_reachable_in_a_classloader() throws Exception {
-        ClassLoader classLoader = ClassLoaders.inMemoryClassLoader()
-                .withParent(jdkClassLoader())
-                .withClassDefinition("a.A", SimpleClassGenerator.makeMarkerInterface("a.A"))
-                .withClassDefinition("a.b.B", SimpleClassGenerator.makeMarkerInterface("a.b.B"))
-                .withClassDefinition("c.C", SimpleClassGenerator.makeMarkerInterface("c.C"))
-//                .withCodeSourceUrlOf(ClassLoaders.class)
-                .build();
-
-        assertThat(ClassLoaders.in(classLoader).listOwnedClasses()).containsOnly("a.A", "a.b.B", "c.C");
-        assertThat(ClassLoaders.in(classLoader).omit("b", "c").listOwnedClasses()).containsOnly("a.A");
-    }
-
-    @Test
-    public void return_bootstrap_classloader() throws Exception {
-        assertThat(jdkClassLoader()).isNotEqualTo(Mockito.class.getClassLoader());
-        assertThat(jdkClassLoader()).isNotEqualTo(ClassLoaders.class.getClassLoader());
-        assertThat(jdkClassLoader()).isEqualTo(Number.class.getClassLoader());
-        assertThat(jdkClassLoader()).isEqualTo(null);
-    }
-
-    @Test
-    public void return_current_classloader() throws Exception {
-        assertThat(currentClassLoader()).isEqualTo(this.getClass().getClassLoader());
-    }
-
     static class ClassUsingInterface1 implements Interface1 { }
     interface Interface1 { }
 }
