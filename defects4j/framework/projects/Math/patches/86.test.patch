diff --git a/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java b/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
index 6bb7d4f..2d302bc 100644
--- a/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
+++ b/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
@@ -17,9 +17,6 @@
 
 package org.apache.commons.math.linear;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.linear.CholeskyDecomposition;
 import org.apache.commons.math.linear.CholeskyDecompositionImpl;
@@ -28,9 +25,12 @@ import org.apache.commons.math.linear.NonSquareMatrixException;
 import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
 import org.apache.commons.math.linear.NotSymmetricMatrixException;
 import org.apache.commons.math.linear.RealMatrix;
-import org.junit.Test;
 
-public class CholeskyDecompositionImplTest {
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+public class CholeskyDecompositionImplTest extends TestCase {
 
     private double[][] testData = new double[][] {
             {  1,  2,   4,   7,  11 },
@@ -40,8 +40,17 @@ public class CholeskyDecompositionImplTest {
             { 11, 58, 182, 430, 855 }
     };
 
+    public CholeskyDecompositionImplTest(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(CholeskyDecompositionImplTest.class);
+        suite.setName("CholeskyDecompositionImpl Tests");
+        return suite;
+    }
+
     /** test dimensions */
-    @Test
     public void testDimensions() throws MathException {
         CholeskyDecomposition llt =
             new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));
@@ -52,45 +61,47 @@ public class CholeskyDecompositionImplTest {
     }
 
     /** test non-square matrix */
-    @Test(expected = NonSquareMatrixException.class)
-    public void testNonSquare() throws MathException {
-        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));
+    public void testNonSquare() {
+        try {
+            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));
+        } catch (NonSquareMatrixException ime) {
+            // expected behavior
+        } catch (Exception e) {
+            fail("wrong exception caught");
+        }
     }
 
     /** test non-symmetric matrix */
-    @Test(expected = NotSymmetricMatrixException.class)
-    public void testNotSymmetricMatrixException() throws MathException {
-        double[][] changed = testData.clone();
-        changed[0][changed[0].length - 1] += 1.0e-5;
-        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));
+    public void testNotSymmetricMatrixException() {
+        try {
+            double[][] changed = testData.clone();
+            changed[0][changed[0].length - 1] += 1.0e-5;
+            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));
+        } catch (NotSymmetricMatrixException e) {
+            // expected behavior
+        } catch (Exception e) {
+            fail("wrong exception caught");
+        }
     }
 
     /** test non positive definite matrix */
-    @Test(expected = NotPositiveDefiniteMatrixException.class)
-    public void testNotPositiveDefinite() throws MathException {
-        CholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
-                { 14, 11, 13, 15, 24 },
-                { 11, 34, 13, 8,  25 },
-                { 13, 13, 14, 15, 21 },
-                { 15, 8,  15, 18, 23 },
-                { 24, 25, 21, 23, 45 }
-        }));
-        System.out.println(cd.getL().multiply(cd.getLT()));
-    }
-
-    @Test(expected = NotPositiveDefiniteMatrixException.class)
-    public void testMath274() throws MathException {
-        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
-                { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },
-                {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },
-                { 0.30328980,  0.07137959, 0.30458776, 0.04882449 },
-                { 0.04909388,  0.04762857, 0.04882449, 0.07543265 }
-            
-        }));
+    public void testNotPositiveDefinite() {
+        try {
+            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
+                    { 14, 11, 13, 15, 24 },
+                    { 11, 34, 13, 8,  25 },
+                    { 13, 13, 14, 15, 21 },
+                    { 15, 8,  15, 18, 23 },
+                    { 24, 25, 21, 23, 45 }
+            }));
+        } catch (NotPositiveDefiniteMatrixException e) {
+            // expected behavior
+        } catch (Exception e) {
+            fail("wrong exception caught");
+        }
     }
 
     /** test A = LLT */
-    @Test
     public void testAEqualLLT() throws MathException {
         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
         CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);
@@ -101,19 +112,17 @@ public class CholeskyDecompositionImplTest {
     }
 
     /** test that L is lower triangular */
-    @Test
     public void testLLowerTriangular() throws MathException {
         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
         RealMatrix l = new CholeskyDecompositionImpl(matrix).getL();
         for (int i = 0; i < l.getRowDimension(); i++) {
             for (int j = i + 1; j < l.getColumnDimension(); j++) {
-                assertEquals(0.0, l.getEntry(i, j), 0.0);
+                assertEquals(0.0, l.getEntry(i, j));
             }
         }
     }
 
     /** test that LT is transpose of L */
-    @Test
     public void testLTTransposed() throws MathException {
         RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
         CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);
@@ -124,7 +133,6 @@ public class CholeskyDecompositionImplTest {
     }
 
     /** test matrices values */
-    @Test
     public void testMatricesValues() throws MathException {
         RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {
                 {  1,  0,  0,  0,  0 },
