diff --git a/src/test/java/org/apache/commons/math3/util/FastMathTest.java b/src/test/java/org/apache/commons/math3/util/FastMathTest.java
index 282e7b2..9490e1e 100644
--- a/src/test/java/org/apache/commons/math3/util/FastMathTest.java
+++ b/src/test/java/org/apache/commons/math3/util/FastMathTest.java
@@ -158,50 +158,6 @@ public class FastMathTest {
     }
 
     @Test
-    public void testMath905LargePositive() {
-        final double start = StrictMath.log(Double.MAX_VALUE);
-        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
-        final double end = 2 * StrictMath.log(endT);
-
-        double maxErr = 0;
-        for (double x = start; x < end; x += 1e-3) {
-            final double tst = FastMath.cosh(x);
-            final double ref = Math.cosh(x);
-            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
-        }
-        Assert.assertEquals(0, maxErr, 3);
-
-        for (double x = start; x < end; x += 1e-3) {
-            final double tst = FastMath.sinh(x);
-            final double ref = Math.sinh(x);
-            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
-        }
-        Assert.assertEquals(0, maxErr, 3);
-    }
-
-    @Test
-    public void testMath905LargeNegative() {
-        final double start = -StrictMath.log(Double.MAX_VALUE);
-        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
-        final double end = -2 * StrictMath.log(endT);
-
-        double maxErr = 0;
-        for (double x = start; x > end; x -= 1e-3) {
-            final double tst = FastMath.cosh(x);
-            final double ref = Math.cosh(x);
-            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
-        }
-        Assert.assertEquals(0, maxErr, 3);
-
-        for (double x = start; x > end; x -= 1e-3) {
-            final double tst = FastMath.sinh(x);
-            final double ref = Math.sinh(x);
-            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
-        }
-        Assert.assertEquals(0, maxErr, 3);
-    }
-
-    @Test
     public void testHyperbolicInverses() {
         double maxErr = 0;
         for (double x = -30; x < 30; x += 0.01) {
