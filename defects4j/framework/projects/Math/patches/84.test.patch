diff --git a/src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java b/src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
index 71f6ecb..8652af3 100644
--- a/src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
+++ b/src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
@@ -17,19 +17,24 @@
 
 package org.apache.commons.math.optimization.direct;
 
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
 import org.apache.commons.math.optimization.GoalType;
-import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.RealPointValuePair;
 import org.apache.commons.math.optimization.SimpleScalarValueChecker;
-import org.junit.Assert;
-import org.junit.Test;
 
-public class MultiDirectionalTest {
+public class MultiDirectionalTest
+  extends TestCase {
+
+  public MultiDirectionalTest(String name) {
+    super(name);
+  }
 
-  @Test
   public void testFunctionEvaluationExceptions() {
       MultivariateRealFunction wrong =
           new MultivariateRealFunction() {
@@ -47,26 +52,25 @@ public class MultiDirectionalTest {
       try {
           MultiDirectional optimizer = new MultiDirectional(0.9, 1.9);
           optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { -1.0 });
-          Assert.fail("an exception should have been thrown");
+          fail("an exception should have been thrown");
       } catch (FunctionEvaluationException ce) {
           // expected behavior
-          Assert.assertNull(ce.getCause());
+          assertNull(ce.getCause());
       } catch (Exception e) {
-          Assert.fail("wrong exception caught: " + e.getMessage());
+          fail("wrong exception caught: " + e.getMessage());
       } 
       try {
           MultiDirectional optimizer = new MultiDirectional(0.9, 1.9);
           optimizer.optimize(wrong, GoalType.MINIMIZE, new double[] { +2.0 });
-          Assert.fail("an exception should have been thrown");
+          fail("an exception should have been thrown");
       } catch (FunctionEvaluationException ce) {
           // expected behavior
-          Assert.assertNotNull(ce.getCause());
+          assertNotNull(ce.getCause());
       } catch (Exception e) {
-          Assert.fail("wrong exception caught: " + e.getMessage());
+          fail("wrong exception caught: " + e.getMessage());
       } 
   }
 
-  @Test
   public void testMinimizeMaximize()
       throws FunctionEvaluationException, ConvergenceException {
 
@@ -89,45 +93,43 @@ public class MultiDirectionalTest {
       };
 
       MultiDirectional optimizer = new MultiDirectional();
-      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
+      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-30));
       optimizer.setMaxIterations(200);
       optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });
       RealPointValuePair optimum;
 
       // minimization
       optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });
-      Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);
-      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
-      Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);
-      Assert.assertTrue(optimizer.getEvaluations() > 120);
-      Assert.assertTrue(optimizer.getEvaluations() < 150);
+      assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);
+      assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
+      assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);
+      assertTrue(optimizer.getEvaluations() > 120);
+      assertTrue(optimizer.getEvaluations() < 150);
 
       optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });
-      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
-      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);
-      Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              
-      Assert.assertTrue(optimizer.getEvaluations() > 120);
-      Assert.assertTrue(optimizer.getEvaluations() < 150);
+      assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
+      assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);
+      assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              
+      assertTrue(optimizer.getEvaluations() > 120);
+      assertTrue(optimizer.getEvaluations() < 150);
 
       // maximization
       optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });
-      Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);
-      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);
-      Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);
-      Assert.assertTrue(optimizer.getEvaluations() > 120);
-      Assert.assertTrue(optimizer.getEvaluations() < 150);
+      assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);
+      assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);
+      assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);
+      assertTrue(optimizer.getEvaluations() > 120);
+      assertTrue(optimizer.getEvaluations() < 150);
 
-      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
       optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });
-      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
-      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
-      Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);
-      Assert.assertTrue(optimizer.getEvaluations() > 180);
-      Assert.assertTrue(optimizer.getEvaluations() < 220);
+      assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
+      assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
+      assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);
+      assertTrue(optimizer.getEvaluations() > 120);
+      assertTrue(optimizer.getEvaluations() < 150);
 
   }
 
-  @Test
   public void testRosenbrock()
     throws FunctionEvaluationException, ConvergenceException {
 
@@ -152,14 +154,13 @@ public class MultiDirectionalTest {
     RealPointValuePair optimum =
         optimizer.optimize(rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1.0 });
 
-    Assert.assertEquals(count, optimizer.getEvaluations());
-    Assert.assertTrue(optimizer.getEvaluations() > 50);
-    Assert.assertTrue(optimizer.getEvaluations() < 100);
-    Assert.assertTrue(optimum.getValue() > 1.0e-2);
+    assertEquals(count, optimizer.getEvaluations());
+    assertTrue(optimizer.getEvaluations() > 70);
+    assertTrue(optimizer.getEvaluations() < 100);
+    assertTrue(optimum.getValue() > 1.0e-2);
 
   }
 
-  @Test
   public void testPowell()
     throws FunctionEvaluationException, ConvergenceException {
 
@@ -182,64 +183,15 @@ public class MultiDirectionalTest {
     optimizer.setMaxIterations(1000);
     RealPointValuePair optimum =
       optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });
-    Assert.assertEquals(count, optimizer.getEvaluations());
-    Assert.assertTrue(optimizer.getEvaluations() > 800);
-    Assert.assertTrue(optimizer.getEvaluations() < 900);
-    Assert.assertTrue(optimum.getValue() > 1.0e-2);
+    assertEquals(count, optimizer.getEvaluations());
+    assertTrue(optimizer.getEvaluations() > 800);
+    assertTrue(optimizer.getEvaluations() < 900);
+    assertTrue(optimum.getValue() > 1.0e-2);
 
   }
 
-  @Test
-  public void testMath283()
-      throws FunctionEvaluationException, OptimizationException {
-      // fails because MultiDirectional.iterateSimplex is looping forever
-      // the while(true) should be replaced with a convergence check
-      MultiDirectional multiDirectional = new MultiDirectional();
-      multiDirectional.setMaxIterations(100);
-      multiDirectional.setMaxEvaluations(1000);
-
-      final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);
-
-      RealPointValuePair estimate = multiDirectional.optimize(function,
-                                    GoalType.MAXIMIZE, function.getMaximumPosition());
-
-      final double EPSILON = 1e-5;
-
-      final double expectedMaximum = function.getMaximum();
-      final double actualMaximum = estimate.getValue();
-      Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);
-
-      final double[] expectedPosition = function.getMaximumPosition();
-      final double[] actualPosition = estimate.getPoint();
-      Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );
-      Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );
-      
-  }
-
-  private static class Gaussian2D implements MultivariateRealFunction {
-
-      private final double[] maximumPosition;
-
-      private final double std;
-      
-      public Gaussian2D(double xOpt, double yOpt, double std) {
-          maximumPosition = new double[] { xOpt, yOpt };
-          this.std = std;
-      }
-
-      public double getMaximum() {
-          return value(maximumPosition);
-      }
-
-      public double[] getMaximumPosition() {
-          return maximumPosition.clone();
-      }
-
-      public double value(double[] point) {
-          final double x = point[0], y = point[1];
-          final double twoS2 = 2.0 * std * std;
-          return 1.0 / (twoS2 * Math.PI) * Math.exp(-(x * x + y * y) / twoS2);
-      }
+  public static Test suite() {
+    return new TestSuite(MultiDirectionalTest.class);
   }
 
   private int count;
