diff --git a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
index 73603cd..b695ee6 100644
--- a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
+++ b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
@@ -220,33 +220,6 @@ public class PolynomialFitterTest {
         checkUnsolvableProblem(new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-15, 1e-15)), false);
     }
 
-    @Test
-    public void testLargeSample() {
-        Random randomizer = new Random(0x5551480dca5b369bl);
-        double maxError = 0;
-        for (int degree = 0; degree < 10; ++degree) {
-            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
-
-            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
-            for (int i = 0; i < 40000; ++i) {
-                double x = -1.0 + i / 20000.0;
-                fitter.addObservedPoint(1.0, x,
-                                        p.value(x) + 0.1 * randomizer.nextGaussian());
-            }
-
-            final double[] init = new double[degree + 1];
-            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
-
-            for (double x = -1.0; x < 1.0; x += 0.01) {
-                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
-                              (1.0 + FastMath.abs(p.value(x)));
-                maxError = FastMath.max(maxError, error);
-                Assert.assertTrue(FastMath.abs(error) < 0.01);
-            }
-        }
-        Assert.assertTrue(maxError > 0.001);
-    }
-
     private void checkUnsolvableProblem(MultivariateVectorOptimizer optimizer,
                                         boolean solvable) {
         Random randomizer = new Random(1248788532l);
