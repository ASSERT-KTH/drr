diff --git a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
index 58acc52..9423741 100644
--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
@@ -16,14 +16,21 @@
 
 package com.google.javascript.jscomp;
 
+import com.google.javascript.rhino.Node;
+
 /**
  * Tests for PeepholeRemoveDeadCodeTest in isolation. Tests for the interaction
  * of multiple peephole passes are in PeepholeIntegrationTest.
  */
 public class PeepholeRemoveDeadCodeTest extends CompilerTestCase {
 
+  private static final String MATH =
+      "/** @const */ var Math = {};" +
+      "/** @nosideeffects */ Math.random = function(){};" +
+      "/** @nosideeffects */ Math.sin = function(){};";
+
   public PeepholeRemoveDeadCodeTest() {
-    super("");
+    super(MATH);
   }
 
   @Override
@@ -34,10 +41,20 @@ public class PeepholeRemoveDeadCodeTest extends CompilerTestCase {
 
   @Override
   public CompilerPass getProcessor(final Compiler compiler) {
-    PeepholeOptimizationsPass peepholePass =
-      new PeepholeOptimizationsPass(compiler, new PeepholeRemoveDeadCode());
-
-    return peepholePass;
+    return new CompilerPass() {
+      @Override
+      public void process(Node externs, Node root) {
+        SimpleDefinitionFinder definitionFinder =
+            new SimpleDefinitionFinder(compiler);
+        definitionFinder.process(externs, root);
+        new PureFunctionIdentifier(compiler, definitionFinder)
+            .process(externs, root);
+        PeepholeOptimizationsPass peepholePass =
+            new PeepholeOptimizationsPass(
+                compiler, new PeepholeRemoveDeadCode());
+        peepholePass.process(externs, root);
+      }
+    };
   }
 
   @Override
@@ -226,7 +243,6 @@ public class PeepholeRemoveDeadCodeTest extends CompilerTestCase {
     //  - the FOR init expression
     //  - the FOR increment expression
 
-
     // Known side-effect free functions calls are removed.
     fold("Math.random()", "");
     fold("Math.random(f() + g())", "f(),g();");
@@ -234,7 +250,11 @@ public class PeepholeRemoveDeadCodeTest extends CompilerTestCase {
 
     // Calls to functions with unknown side-effects are are left.
     foldSame("f();");
-    foldSame("(function () {})();");
+    foldSame("(function () { f(); })();");
+
+    // We know that this function has no side effects because of the
+    // PureFunctionIdentifier.
+    fold("(function () {})();", "");
 
     // Uncalled function expressions are removed
     fold("(function () {});", "");
