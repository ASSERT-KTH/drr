diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
index 152da7e..4c481b4 100644
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -1775,7 +1775,10 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ G.prototype.foo = function() { };" +
-        "(new G()).foo(1);");
+        "(new G()).foo(1);",
+        "Function G.prototype.foo: called with 1 argument(s). " +
+        "Function requires at least 0 argument(s) " +
+        "and no more than 0 argument(s).");
   }
 
   public void testMethodInference7() throws Exception {
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 7544dde..1161365 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -2030,7 +2030,10 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "/** @constructor \n * @extends {F} */ " +
         "function G() {}" +
         "/** @override */ G.prototype.foo = function() { };" +
-        "(new G()).foo(1);");
+        "(new G()).foo(1);",
+        "Function G.prototype.foo: called with 1 argument(s). " +
+        "Function requires at least 0 argument(s) " +
+        "and no more than 0 argument(s).");
   }
 
   public void testMethodInference7() throws Exception {
@@ -5322,27 +5325,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "Property indexOf never defined on String.prototype.toLowerCase");
   }
 
-  public void testIssue368() throws Exception {
-    testTypes(
-        "/** @constructor */ function Foo(){}" +
-        "/**\n" +
-        " * @param {number} one\n" +
-        " * @param {string} two\n" +
-        " */\n" +
-        "Foo.prototype.add = function(one, two) {};" +
-        "/**\n" +
-        " * @constructor\n" +
-        " * @extends {Foo}\n" +
-        " */\n" +
-        "function Bar(){}" +
-        "/** @override */\n" +
-        "Bar.prototype.add = function(ignored) {};" +
-        "(new Bar()).add(1, 2);",
-        "actual parameter 2 of Bar.prototype.add does not match formal parameter\n" +
-        "found   : number\n" +
-        "required: string");
-  }
-
   public void testIssue380() throws Exception {
     testTypes(
         "/** @type { function(string): {innerHTML: string} } */" +
