diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index ad698eb..78bd30a 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -616,7 +616,7 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     fold("x = -1 >= 9", "x = false");
 
     fold("x = true == true", "x = true");
-    fold("x = false == false", "x = true");
+    fold("x = true == true", "x = true");
     fold("x = false == null", "x = false");
     fold("x = false == true", "x = false");
     fold("x = true == null", "x = false");
@@ -666,7 +666,7 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     fold("x = y === y", "x = y===y");
 
     fold("x = true === true", "x = true");
-    fold("x = false === false", "x = true");
+    fold("x = true === true", "x = true");
     fold("x = false === null", "x = false");
     fold("x = false === true", "x = false");
     fold("x = true === null", "x = false");
@@ -696,32 +696,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     fold("true === null", "false");
   }
 
-  public void testFoldComparison3() {
-    fold("x = !1 == !0", "x = false");
-
-    fold("x = !0 == !0", "x = true");
-    fold("x = !1 == !1", "x = true");
-    fold("x = !1 == null", "x = false");
-    fold("x = !1 == !0", "x = false");
-    fold("x = !0 == null", "x = false");
-
-    fold("!0 == !0", "true");
-    fold("!1 == null", "false");
-    fold("!1 == !0", "false");
-    fold("!0 == null", "false");
-
-    fold("x = !0 === !0", "x = true");
-    fold("x = !1 === !1", "x = true");
-    fold("x = !1 === null", "x = false");
-    fold("x = !1 === !0", "x = false");
-    fold("x = !0 === null", "x = false");
-
-    fold("!0 === !0", "true");
-    fold("!1 === null", "false");
-    fold("!1 === !0", "false");
-    fold("!0 === null", "false");
-  }
-
   public void testFoldGetElem() {
     fold("x = [,10][0]", "x = void 0");
     fold("x = [10, 20][0]", "x = 10");
@@ -1072,8 +1046,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
           "void 0",
           "true",
           "false",
-          "!0",
-          "!1",
           "0",
           "1",
           "''",
@@ -1083,9 +1055,9 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
           "NaN",
           "Infinity"
           // TODO(nicksantos): Add more literals
-          // "-Infinity",
+          //-Infinity
           //"({})",
-          // "[]"
+          //"[]",
           //"[0]",
           //"Object",
           //"(function() {})"
