diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
index 94ee207..f88a769 100644
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -18,7 +18,6 @@ package com.google.javascript.jscomp;
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.CheckLevel;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
@@ -34,7 +33,6 @@ import com.google.javascript.rhino.testing.Asserts;
 
 import java.util.Arrays;
 import java.util.List;
-import java.util.Set;
 
 /**
  * Tests {@link TypeCheck}.
@@ -2118,15 +2116,10 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testTypeRedefinition() throws Exception {
-    testClosureTypesMultipleWarnings(
-        "a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
+    testTypes("a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
         + "/** @constructor */ a.A = function() {}",
-        Lists.newArrayList(
-            "variable a.A redefined with type function (new:a.A): undefined, " +
-            "original definition at [testcode]:1 with type enum{a.A}",
-            "assignment to property A of a\n" +
-            "found   : function (new:a.A): undefined\n" +
-            "required: enum{a.A}"));
+        "variable a.A redefined with type function (new:a.A): undefined, " +
+        "original definition at [testcode]:1 with type enum{a.A}");
   }
 
   public void testIn1() throws Exception {
@@ -6937,12 +6930,10 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
           0, compiler.getWarningCount());
     } else {
       assertEquals(descriptions.size(), compiler.getWarningCount());
-      Set<String> actualWarningDescriptions = Sets.newHashSet();
       for (int i = 0; i < descriptions.size(); i++) {
-        actualWarningDescriptions.add(compiler.getWarnings()[i].description);
+        assertEquals(descriptions.get(i),
+            compiler.getWarnings()[i].description);
       }
-      assertEquals(
-          Sets.newHashSet(descriptions), actualWarningDescriptions);
     }
   }
 
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index ad43d21..fc24441 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -18,7 +18,6 @@ package com.google.javascript.jscomp;
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
 import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
@@ -33,7 +32,6 @@ import com.google.javascript.rhino.testing.Asserts;
 
 import java.util.Arrays;
 import java.util.List;
-import java.util.Set;
 
 /**
  * Tests {@link TypeCheck}.
@@ -2513,14 +2511,10 @@ public class TypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testTypeRedefinition() throws Exception {
-    testClosureTypesMultipleWarnings("a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
+    testTypes("a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
         + "/** @constructor */ a.A = function() {}",
-        Lists.newArrayList(
-            "variable a.A redefined with type function (new:a.A): undefined, " +
-            "original definition at [testcode]:1 with type enum{a.A}",
-            "assignment to property A of a\n" +
-            "found   : function (new:a.A): undefined\n" +
-            "required: enum{a.A}"));
+        "variable a.A redefined with type function (new:a.A): undefined, " +
+        "original definition at [testcode]:1 with type enum{a.A}");
   }
 
   public void testIn1() throws Exception {
@@ -6338,18 +6332,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "G.prototype.bar = F.prototype.bar;");
   }
 
-  public void testIssue635b() throws Exception {
-    testTypes(
-        "/** @constructor */" +
-        "function F() {}" +
-        "/** @constructor */" +
-        "function G() {}" +
-        "/** @type {function(new:G)} */ var x = F;",
-        "initializing variable\n" +
-        "found   : function (new:F): undefined\n" +
-        "required: function (new:G): ?");
-  }
-
   public void testIssue669() throws Exception {
     testTypes(
         "/** @return {{prop1: (Object|undefined)}} */" +
@@ -10877,12 +10859,10 @@ public class TypeCheckTest extends CompilerTypeTestCase {
           "unexpected warning(s) : " +
           Joiner.on(", ").join(compiler.getWarnings()),
           descriptions.size(), compiler.getWarningCount());
-      Set<String> actualWarningDescriptions = Sets.newHashSet();
       for (int i = 0; i < descriptions.size(); i++) {
-        actualWarningDescriptions.add(compiler.getWarnings()[i].description);
+        assertEquals(descriptions.get(i),
+            compiler.getWarnings()[i].description);
       }
-      assertEquals(
-          Sets.newHashSet(descriptions), actualWarningDescriptions);
     }
   }
 
