diff --git a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
index 74b9276..c0fa439 100644
--- a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
+++ b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java
@@ -35,7 +35,7 @@ public class CheckGlobalThisTest extends CompilerTestCase {
   private void testFailure(String js) {
     test(js, null, CheckGlobalThis.GLOBAL_THIS);
   }
-
+  
   public void testGlobalThis1() throws Exception {
     testSame("var a = this;");
   }
@@ -51,19 +51,15 @@ public class CheckGlobalThisTest extends CompilerTestCase {
   public void testGlobalThis4() {
     testFailure("this['foo'] = 5;");
   }
-
+  
   public void testGlobalThis5() {
     testFailure("(a = this).foo = 4;");
   }
-
+  
   public void testGlobalThis6() {
     testSame("a = this;");
   }
 
-  public void testGlobalThis7() {
-    testFailure("var a = this.foo;");
-  }
-
   public void testStaticFunction1() {
     testSame("function a() { return this; }");
   }
@@ -85,15 +81,11 @@ public class CheckGlobalThisTest extends CompilerTestCase {
   }
 
   public void testStaticFunction6() {
-    testSame("function a() { return function() { this = 8; } }");
+    testFailure("function a() { return function() { this = 8; } }");
   }
 
   public void testStaticFunction7() {
-    testSame("var a = function() { return function() { this = 8; } }");
-  }
-
-  public void testStaticFunction8() {
-    testFailure("var a = function() { return this.foo; };");
+    testFailure("var a = function() { return function() { this = 8; } }");
   }
 
   public void testConstructor1() {
@@ -145,11 +137,11 @@ public class CheckGlobalThisTest extends CompilerTestCase {
   }
 
   public void testStaticMethod2() {
-    testSame("a.b = function() { return function() { this.m2 = 5; } }");
+    testFailure("a.b = function() { return function() { this.m2 = 5; } }");
   }
 
   public void testStaticMethod3() {
-    testSame("a.b.c = function() { return function() { this.m2 = 5; } }");
+    testFailure("a.b.c = function() { return function() { this.m2 = 5; } }");
   }
 
   public void testMethodInStaticFunction() {
@@ -166,22 +158,4 @@ public class CheckGlobalThisTest extends CompilerTestCase {
         "    function myself() {" +
         "      function andI() { this.m2 = 5; } } } }");
   }
-
-  public void testInnerFunction1() {
-    testFailure("function f() { function g() { return this.x; } }");
-  }
-
-  public void testInnerFunction2() {
-    testFailure("function f() { var g = function() { return this.x; } }");
-  }
-
-  public void testInnerFunction3() {
-    testFailure(
-        "function f() { var x = {}; x.y = function() { return this.x; } }");
-  }
-
-  public void testInnerFunction4() {
-    testSame(
-        "function f() { var x = {}; x.y(function() { return this.x; }); }");
-  }
 }
diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java
index 477a91b..55beb9f 100644
--- a/test/com/google/javascript/jscomp/CompilerTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java
@@ -20,6 +20,7 @@ import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.CodeChangeHandler.RecentChange;
 import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
 import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
 
 import junit.framework.TestCase;
diff --git a/test/com/google/javascript/jscomp/ConcreteTypeTest.java b/test/com/google/javascript/jscomp/ConcreteTypeTest.java
index d368f0d..d7a7e01 100644
--- a/test/com/google/javascript/jscomp/ConcreteTypeTest.java
+++ b/test/com/google/javascript/jscomp/ConcreteTypeTest.java
@@ -244,7 +244,7 @@ public class ConcreteTypeTest extends TestCase {
       return registry;
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public ConcreteFunctionType createConcreteFunction(
         Node decl, StaticScope<ConcreteType> parent) {
       ConcreteFunctionType funcType = functionByDeclaration.get(decl);
@@ -258,7 +258,7 @@ public class ConcreteTypeTest extends TestCase {
       return funcType;
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public ConcreteInstanceType createConcreteInstance(
         ObjectType instanceType) {
       ConcreteInstanceType instType = instanceByJSType.get(instanceType);
@@ -269,17 +269,17 @@ public class ConcreteTypeTest extends TestCase {
       return instType;
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public ConcreteFunctionType getConcreteFunction(FunctionType functionType) {
       return functionByJSType.get(functionType);
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public ConcreteInstanceType getConcreteInstance(ObjectType instanceType) {
       return instanceByJSType.get(instanceType);
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public StaticScope<ConcreteType> createFunctionScope(
         Node decl, StaticScope<ConcreteType> parent) {
       FakeScope scope = new FakeScope((FakeScope) parent);
@@ -294,7 +294,7 @@ public class ConcreteTypeTest extends TestCase {
       return scope;
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public StaticScope<ConcreteType> createInstanceScope(
         ObjectType instanceType) {
       FakeScope parentScope = null;
@@ -321,15 +321,15 @@ public class ConcreteTypeTest extends TestCase {
       this.parent = parent;
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public StaticScope<ConcreteType> getParentScope() { return parent; }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public StaticSlot<ConcreteType> getOwnSlot(String name) {
       return slots.get(name);
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public StaticSlot<ConcreteType> getSlot(String name) {
       if (slots.containsKey(name)) {
         return slots.get(name);
@@ -340,7 +340,7 @@ public class ConcreteTypeTest extends TestCase {
       }
     }
 
-    /** {@inheritDoc} */
+    /** @inheritDoc */
     public ConcreteType getTypeOfThis() { return ConcreteType.ALL; }
 
     void addSlot(String name) {
@@ -356,13 +356,13 @@ public class ConcreteTypeTest extends TestCase {
       this.name = name;
     }
 
-    /* {@inheritDoc} */
+    /* @inheritDoc */
     public String getName() { return name; }
 
-    /* {@inheritDoc} */
+    /* @inheritDoc */
     public ConcreteType getType() { return ConcreteType.ALL; }
 
-    /* {@inheritDoc} */
+    /* @inheritDoc */
     public boolean isTypeInferred() { return true; }
   }
 }
diff --git a/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java b/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java
index fc4fa22..a7036cc 100644
--- a/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java
+++ b/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java
@@ -338,7 +338,14 @@ public class DataFlowAnalysisTest extends TestCase {
      * Constructor.
      *
      * @param isTop To define if the lattice is top.
+     * @param constMap A map from name to constant variable.
      */
+    ConstPropLatticeElement(
+        boolean isTop, Map<Variable, Integer> constMap) {
+      this.isTop = isTop;
+      this.constMap = constMap;
+    }
+
     ConstPropLatticeElement(boolean isTop) {
       this.isTop = isTop;
       this.constMap = Maps.newHashMap();
diff --git a/test/com/google/javascript/jscomp/InferJSDocInfoTest.java b/test/com/google/javascript/jscomp/InferJSDocInfoTest.java
index ce273b7..6832419 100644
--- a/test/com/google/javascript/jscomp/InferJSDocInfoTest.java
+++ b/test/com/google/javascript/jscomp/InferJSDocInfoTest.java
@@ -24,6 +24,8 @@ import com.google.javascript.jscomp.ScopeCreator;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.jstype.FunctionType;
 import com.google.javascript.rhino.jstype.JSType;
+import com.google.javascript.rhino.jstype.JSTypeNative;
+import com.google.javascript.rhino.jstype.JSTypeRegistry;
 import com.google.javascript.rhino.jstype.ObjectType;
 
 import java.util.Deque;
@@ -38,6 +40,7 @@ import java.util.Deque;
 // assertions about type information.
 public class InferJSDocInfoTest extends CompilerTestCase {
 
+  private JSTypeRegistry registry;
   private Scope globalScope;
 
   @Override
@@ -63,6 +66,7 @@ public class InferJSDocInfoTest extends CompilerTestCase {
 
   @Override
   public CompilerPass getProcessor(final Compiler compiler) {
+    registry = compiler.getTypeRegistry();
     return new CompilerPass() {
       public void process(Node externs, Node root) {
         ScopeCreator scopeCreator =
@@ -213,4 +217,12 @@ public class InferJSDocInfoTest extends CompilerTestCase {
     }
     return null;
   }
+
+  private JSType getNativeType(JSTypeNative type) {
+    return registry.getNativeType(type);
+  }
+
+  private ObjectType getNativeObjectType(JSTypeNative type) {
+    return (ObjectType) registry.getNativeType(type);
+  }
 }
diff --git a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
index e58037d..76eb013 100644
--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
@@ -38,6 +38,7 @@
 
 package com.google.javascript.rhino.jstype;
 
+import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
 
 
diff --git a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java
index 8d3f2ce..04338c2 100644
--- a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java
+++ b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java
@@ -46,6 +46,7 @@ import com.google.javascript.rhino.testing.Asserts;
 
 import junit.framework.TestCase;
 
+
 /**
  * Tests {@link JSTypeRegistry}.
  *
diff --git a/test/com/google/javascript/rhino/jstype/JSTypeTest.java b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
index f26fa45..eb429f8 100644
--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
@@ -4863,8 +4863,7 @@ public class JSTypeTest extends BaseJSTypeTestCase {
   }
 
   /**
-   * Tests
-   * {@link JSTypeRegistry#getGreatestSubtypeWithProperty(JSType, String)}.
+   * Tests {@link JSTypeRegistry#getGreatestSubtypeWithProperty(JSType)}.
    */
   public void testGreatestSubtypeWithProperty() {
     ObjectType foo = registry.createObjectType("foo", null, OBJECT_TYPE);
@@ -5265,6 +5264,10 @@ public class JSTypeTest extends BaseJSTypeTestCase {
     return registry.createArrowType(params);
   }
 
+  private ArrowType createArrowType(Node params, JSType retType) {
+    return registry.createArrowType(params, retType);
+  }
+
   private void assertTypeEquals(JSType a, JSType b) {
     Asserts.assertTypeEquals(a, b);
   }
