diff --git a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
index 6e5c400..103262c 100644
--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
@@ -500,24 +500,6 @@ public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
         "function f(x) { var a    ; var b = x; var c    ; x = 3; return b; }");
   }
 
-  public void testIssue794a() {
-    noInline(
-        "var x = 1; " +
-        "try { x += someFunction(); } catch (e) {}" +
-        "x += 1;" +
-        "try { x += someFunction(); } catch (e) {}" +
-        "return x;");
-  }
-
-  public void testIssue794b() {
-    noInline(
-        "var x = 1; " +
-        "try { x = x + someFunction(); } catch (e) {}" +
-        "x = x + 1;" +
-        "try { x = x + someFunction(); } catch (e) {}" +
-        "return x;");
-  }
-
   private void noInline(String input) {
     inline(input, input);
   }
diff --git a/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java b/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java
index c6086fe..7924eb3 100644
--- a/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java
+++ b/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java
@@ -108,13 +108,6 @@ public class MaybeReachingVariableUseTest extends TestCase {
     assertMatch("var x = [], foo; D: for (x in foo) { U:x }");
   }
 
-  public void testTryCatch() {
-    assertMatch(
-        "D: var x = 1; " +
-        "try { U: var y = foo() + x; } catch (e) {} " +
-        "U: var z = x;");
-  }
-
   /**
    * The def of x at D: may be used by the read of x at U:.
    */
