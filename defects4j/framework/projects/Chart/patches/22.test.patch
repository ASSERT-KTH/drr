Index: source/org/jfree/data/junit/KeyedObjects2DTests.java
===================================================================
--- source/org/jfree/data/junit/KeyedObjects2DTests.java	(revision 227)
+++ source/org/jfree/data/junit/KeyedObjects2DTests.java	(revision 225)
@@ -36,7 +36,6 @@
  * -------
  * 01-Mar-2004 : Version 1 (DG);
  * 28-Sep-2007 : Added testEquals() and enhanced testClone() (DG);
- * 03-Oct-2007 : Added new tests (DG);
  *
  */
 
@@ -54,7 +53,6 @@
 import junit.framework.TestSuite;
 
 import org.jfree.data.KeyedObjects2D;
-import org.jfree.data.UnknownKeyException;
 
 /**
  * Tests for the {@link KeyedObjects2D} class.
@@ -148,282 +146,5 @@
         assertEquals(ko2D1, ko2D2);
 
     }
-    
-    /**
-     * Some checks for the getValue(int, int) method.
-     */
-    public void testGetValueByIndex() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.addObject("Obj1", "R1", "C1");
-        data.addObject("Obj2", "R2", "C2");
-        assertEquals("Obj1", data.getObject(0, 0));
-        assertEquals("Obj2", data.getObject(1, 1));
-        assertNull(data.getObject(0, 1));
-        assertNull(data.getObject(1, 0));
-        
-        // check invalid indices
-        boolean pass = false;
-        try {
-            data.getObject(-1, 0);
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-        
-        pass = false;
-        try {
-            data.getObject(0, -1);
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
 
-        pass = false;
-        try {
-            data.getObject(2, 0);
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-
-        pass = false;
-        try {
-            data.getObject(0, 2);
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-    }
-
-    /**
-     * Some checks for the getValue(Comparable, Comparable) method.
-     */
-    public void testGetValueByKey() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.addObject("Obj1", "R1", "C1");
-        data.addObject("Obj2", "R2", "C2");
-        assertEquals("Obj1", data.getObject("R1", "C1"));
-        assertEquals("Obj2", data.getObject("R2", "C2"));
-        assertNull(data.getObject("R1", "C2"));
-        assertNull(data.getObject("R2", "C1"));
-        
-        // check invalid indices
-        boolean pass = false;
-        try {
-            data.getObject("XX", "C1");
-        }
-        catch (UnknownKeyException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-        
-        pass = false;
-        try {
-            data.getObject("R1", "XX");
-        }
-        catch (UnknownKeyException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-
-        pass = false;
-        try {
-            data.getObject("XX", "C1");
-        }
-        catch (UnknownKeyException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-
-        pass = false;
-        try {
-            data.getObject("R1", "XX");
-        }
-        catch (UnknownKeyException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-    }
-    
-    /**
-     * Some checks for the setObject(Object, Comparable, Comparable) method.
-     */
-    public void testSetObject() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.setObject("Obj1", "R1", "C1");
-        data.setObject("Obj2", "R2", "C2");
-        assertEquals("Obj1", data.getObject("R1", "C1"));
-        assertEquals("Obj2", data.getObject("R2", "C2"));
-        assertNull(data.getObject("R1", "C2"));
-        assertNull(data.getObject("R2", "C1"));
-        
-        // confirm overwriting an existing value
-        data.setObject("ABC", "R2", "C2");
-        assertEquals("ABC", data.getObject("R2", "C2"));
-        
-        // try null keys
-        boolean pass = false;
-        try {
-            data.setObject("X", null, "C1");
-        }
-        catch (IllegalArgumentException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-        
-        pass = false;
-        try {
-            data.setObject("X", "R1", null);
-        }
-        catch (IllegalArgumentException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-    }
-    
-    /**
-     * Some checks for the removeRow(int) method.
-     */
-    public void testRemoveRowByIndex() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.setObject("Obj1", "R1", "C1");
-        data.setObject("Obj2", "R2", "C2");
-        data.removeRow(0);
-        assertEquals(1, data.getRowCount());
-        assertEquals("Obj2", data.getObject(0, 1));
-        
-        // try negative row index
-        boolean pass = false;
-        try {
-            data.removeRow(-1);
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-        
-        // try row index too high
-        pass = false;
-        try {
-            data.removeRow(data.getRowCount());
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-    }
-
-    /**
-     * Some checks for the removeColumn(int) method.
-     */
-    public void testRemoveColumnByIndex() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.setObject("Obj1", "R1", "C1");
-        data.setObject("Obj2", "R2", "C2");
-        data.removeColumn(0);
-        assertEquals(1, data.getColumnCount());
-        assertEquals("Obj2", data.getObject(1, 0));
-        
-        // try negative column index
-        boolean pass = false;
-        try {
-            data.removeColumn(-1);
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-        
-        // try column index too high
-        pass = false;
-        try {
-            data.removeColumn(data.getColumnCount());
-        }
-        catch (IndexOutOfBoundsException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-    }
-
-    /**
-     * Some checks for the removeRow(Comparable) method.
-     */
-    public void testRemoveRowByKey() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.setObject("Obj1", "R1", "C1");
-        data.setObject("Obj2", "R2", "C2");
-        data.removeRow("R2");
-        assertEquals(1, data.getRowCount());
-        assertEquals("Obj1", data.getObject(0, 0));
-        
-        // try unknown row key
-        boolean pass = false;
-        try {
-            data.removeRow("XXX");
-        }
-        catch (UnknownKeyException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-        
-        // try null row key
-        pass = false;
-        try {
-            data.removeRow(null);
-        }
-        catch (IllegalArgumentException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-    }
-
-    /**
-     * Some checks for the removeColumn(Comparable) method.
-     */
-    public void testRemoveColumnByKey() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.setObject("Obj1", "R1", "C1");
-        data.setObject("Obj2", "R2", "C2");
-        data.removeColumn("C2");
-        assertEquals(1, data.getColumnCount());
-        assertEquals("Obj1", data.getObject(0, 0));
-        
-        // try unknown column key
-        boolean pass = false;
-        try {
-            data.removeColumn("XXX");
-        }
-        catch (UnknownKeyException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-        
-        // try null column key
-        pass = false;
-        try {
-            data.removeColumn(null);
-        }
-        catch (IllegalArgumentException e) {
-            pass = true;
-        }
-        assertTrue(pass);
-    }
-    
-    /**
-     * A simple check for the removeValue() method.
-     */
-    public void testRemoveValue() {
-        KeyedObjects2D data = new KeyedObjects2D();
-        data.setObject("Obj1", "R1", "C1");
-        data.setObject("Obj2", "R2", "C2");
-        data.removeObject("R2", "C2");
-        assertEquals(1, data.getRowCount());
-        assertEquals(1, data.getColumnCount());
-        assertEquals("Obj1", data.getObject(0, 0));
-    }
-
 }
