* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.lang3.StringUtils
* Starting client
* Connecting to master process on port 18061
* Analyzing classpath: 
  - /home/wasp/Desktop/ICSE18/DiffTGen/drr/patches/D_correct/Lang20/patch1-Lang-20-Arja/patch1Lang20_arja/target/build/classes
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/myprinter.jar
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.lang3.StringUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 1251
  - Branch 1187
  - Exception 0
  - MutationFactory 1002
  - Output 376
  - Method 155
  - MethodNoException 155
  - CBranchFitnessFactory 1187
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1552261733121
* Starting evolution
[Progress:>                             0%] [Cov:>                                  1%][Progress:>                             0%] [Cov:====>                              14%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  1%][Progress:>                             3%] [Cov:====>                              13%][Progress:>                             3%] [Cov:====>                              14%][Progress:=>                            5%] [Cov:>                                  1%][Progress:=>                            5%] [Cov:>                                  2%][Progress:=>                            5%] [Cov:=====>                             15%][Progress:=>                            5%] [Cov:=====>                             16%][Progress:=>                            5%] [Cov:======>                            18%][Progress:=>                            5%] [Cov:=======>                           20%][Progress:=>                            6%] [Cov:>                                  2%][Progress:=>                            6%] [Cov:=>                                 3%][Progress:==>                           8%] [Cov:=====>                             16%][Progress:==>                           8%] [Cov:=====>                             17%][Progress:==>                           8%] [Cov:======>                            18%][Progress:==>                           8%] [Cov:======>                            19%][Progress:==>                           8%] [Cov:=======>                           21%][Progress:===>                          13%] [Cov:>                                  0%][Progress:===>                          13%] [Cov:>                                  1%][Progress:===>                          13%] [Cov:====>                              14%][Progress:===>                          13%] [Cov:=====>                             15%][Progress:===>                          13%] [Cov:=====>                             16%][Progress:===>                          13%] [Cov:=====>                             17%][Progress:===>                          13%] [Cov:======>                            18%][Progress:===>                          13%] [Cov:=======>                           20%][Progress:===>                          13%] [Cov:=======>                           22%][Progress:===>                          13%] [Cov:========>                          23%][Progress:===>                          13%] [Cov:========>                          25%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:===>                          13%] [Cov:============>                      35%][Progress:===>                          13%] [Cov:============>                      36%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:=>                                 4%][Progress:====>                         15%] [Cov:=====>                             16%][Progress:====>                         15%] [Cov:=====>                             17%][Progress:====>                         15%] [Cov:======>                            19%][Progress:====>                         15%] [Cov:=======>                           21%][Progress:====>                         15%] [Cov:========>                          24%][Progress:====>                         16%] [Cov:>                                  1%][Progress:====>                         16%] [Cov:====>                              14%][Progress:====>                         16%] [Cov:=====>                             15%][Progress:======>                       20%] [Cov:>                                  2%][Progress:======>                       20%] [Cov:=>                                 4%][Progress:======>                       20%] [Cov:=====>                             16%][Progress:======>                       20%] [Cov:=====>                             17%][Progress:======>                       20%] [Cov:======>                            19%][Progress:======>                       20%] [Cov:=======>                           21%][Progress:======>                       20%] [Cov:========>                          24%][Progress:======>                       21%] [Cov:>                                  1%][Progress:======>                       21%] [Cov:>                                  2%][Progress:======>                       21%] [Cov:=====>                             15%][Progress:======>                       21%] [Cov:=====>                             16%][Progress:======>                       21%] [Cov:=====>                             17%][Progress:======>                       21%] [Cov:======>                            19%][Progress:======>                       21%] [Cov:=======>                           21%][Progress:======>                       21%] [Cov:=======>                           22%][Progress:======>                       21%] [Cov:========>                          25%][Progress:======>                       23%] [Cov:>                                  2%][Progress:======>                       23%] [Cov:=>                                 5%][Progress:======>                       23%] [Cov:=====>                             17%][Progress:======>                       23%] [Cov:=======>                           20%][Progress:======>                       23%] [Cov:=======>                           21%][Progress:======>                       23%] [Cov:========>                          24%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:=======>                      25%] [Cov:>                                  1%][Progress:=======>                      25%] [Cov:=>                                 3%][Progress:=======>                      25%] [Cov:=====>                             15%][Progress:=======>                      25%] [Cov:=====>                             16%][Progress:=======>                      25%] [Cov:=====>                             17%][Progress:=======>                      25%] [Cov:======>                            18%][Progress:=======>                      25%] [Cov:=======>                           20%][Progress:=======>                      25%] [Cov:=======>                           22%][Progress:=======>                      25%] [Cov:========>                          25%][Progress:=======>                      25%] [Cov:=========>                         28%][Progress:=======>                      25%] [Cov:==========>                        29%][Progress:=========>                    30%] [Cov:>                                  2%][Progress:=========>                    30%] [Cov:=>                                 5%][Progress:=========>                    30%] [Cov:=====>                             17%][Progress:=========>                    30%] [Cov:======>                            19%][Progress:=========>                    30%] [Cov:=======>                           21%][Progress:=========>                    30%] [Cov:========>                          24%][Progress:=========>                    30%] [Cov:=========>                         27%][Progress:=========>                    31%] [Cov:=====>                             15%][Progress:=========>                    31%] [Cov:=====>                             17%][Progress:=========>                    31%] [Cov:======>                            19%][Progress:=========>                    31%] [Cov:=======>                           20%][Progress:=========>                    33%] [Cov:>                                  2%][Progress:=========>                    33%] [Cov:=>                                 4%][Progress:=========>                    33%] [Cov:=====>                             16%][Progress:=========>                    33%] [Cov:=====>                             17%][Progress:=========>                    33%] [Cov:======>                            18%][Progress:=========>                    33%] [Cov:=======>                           21%][Progress:=========>                    33%] [Cov:========>                          23%][Progress:=========>                    33%] [Cov:=========>                         27%][Progress:=========>                    33%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:>                                  0%][Progress:==========>                   35%] [Cov:>                                  1%][Progress:==========>                   35%] [Cov:====>                              13%][Progress:==========>                   35%] [Cov:====>                              14%][Progress:==========>                   35%] [Cov:=====>                             15%][Progress:==========>                   35%] [Cov:=====>                             16%][Progress:==========>                   36%] [Cov:>                                  2%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=====>                             16%][Progress:==========>                   36%] [Cov:=====>                             17%][Progress:==========>                   36%] [Cov:======>                            18%][Progress:==========>                   36%] [Cov:=======>                           21%][Progress:==========>                   36%] [Cov:========>                          23%][Progress:==========>                   36%] [Cov:========>                          24%][Progress:============>                 40%] [Cov:>                                  1%][Progress:============>                 40%] [Cov:>                                  2%][Progress:============>                 40%] [Cov:=====>                             15%][Progress:============>                 40%] [Cov:=====>                             16%][Progress:============>                 40%] [Cov:=====>                             17%][Progress:============>                 40%] [Cov:======>                            19%][Progress:============>                 40%] [Cov:=======>                           21%][Progress:============>                 40%] [Cov:============>                      36%][Progress:============>                 41%] [Cov:=========>                         27%][Progress:============>                 41%] [Cov:=========>                         28%][Progress:============>                 41%] [Cov:==========>                        29%][Progress:============>                 41%] [Cov:==========>                        31%][Progress:============>                 41%] [Cov:===========>                       34%][Progress:============>                 41%] [Cov:============>                      36%][Progress:============>                 43%] [Cov:========>                          23%][Progress:============>                 43%] [Cov:============>                      36%][Progress:============>                 43%] [Cov:============>                      37%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:====>                              12%][Progress:=============>                46%] [Cov:=======>                           22%][Progress:=============>                46%] [Cov:==========================>        77%][Progress:==============>               48%] [Cov:=========================>         74%][Progress:==============>               48%] [Cov:==========================>        77%][Progress:===============>              51%] [Cov:==========================>        76%][Progress:===============>              51%] [Cov:==========================>        77%][Progress:===============>              53%] [Cov:==========================>        75%][Progress:===============>              53%] [Cov:==========================>        77%][Progress:================>             55%] [Cov:==========================>        77%][Progress:=================>            58%] [Cov:==========================>        76%][Progress:=================>            58%] [Cov:==========================>        77%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:==========================>        75%][Progress:==================>           60%] [Cov:==========================>        77%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:==================>           61%] [Cov:==========================>        75%][Progress:==================>           61%] [Cov:==========================>        77%][Progress:==================>           61%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:=====================>        70%] [Cov:==========================>        77%][Progress:=====================>        70%] [Cov:===========================>       78%][Progress:=====================>        71%] [Cov:===========================>       78%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        76%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:===========================>       78%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:==========================>        76%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:===========================>       78%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       78%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       78%][Progress:===========================>  93%] [Cov:===========================>       78%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:===========================>       78%][Progress:============================> 96%] [Cov:===========================>       78%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       79%][MASTER] 00:50:14.484 [logback-1] WARN  ResetExecutor - Stopped resetting of classes due to timeout
[MASTER] 00:50:16.126 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 17261ms
[Progress:==============================100%] [Cov:=============================>     85%]
* Search finished after 79s and 6 generations, 11130 statements, best individual has fitness: 6565.416668130406
[MASTER] 00:50:17.238 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 19 seconds more than allowed.
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 00:51:33.882 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 87%
* Total number of goals: 1251
* Number of covered goals: 1090
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 1187
* Number of covered goals: 970
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 71%
* Total number of goals: 1002
* Number of covered goals: 708
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 79%
* Total number of goals: 376
* Number of covered goals: 298
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 155
* Number of covered goals: 155
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 155
* Number of covered goals: 155
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 1187
* Number of covered goals: 820
* Generated 194 tests with total length 2329
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 00:52:23.967 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
[MASTER] 00:52:23.968 [logback-1] WARN  JUnitAnalyzer - Failing test: String string0 = "java.text.Normalizer";
String string1 = "5C\"yNtC<=eFW0";
String string2 = StringUtils.substringBetween("java.text.Normalizer", "5C\"yNtC<=eFW0");
String string3 = "java.text.Normalizer$Form";
String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.text.Normalizer$Form");
int int0 = Integer.MAX_VALUE;
char char0 = 'S';
String string4 = StringUtils.center(string3, int0, char0);
String[] stringArray1 = StringUtils.splitPreserveAllTokens(string4);
String string5 = "The String must not be empty";
int int1 = 64;
String string6 = StringUtils.abbreviate(string5, int1);
String string7 = " U&ncI]t==w";
String string8 = StringUtils.substringBeforeLast(string7, string0);
String string9 = StringUtils.trim(string3);
String string10 = "";
int int2 = (-422);
String string11 = StringUtils.rightPad(string10, int2);
String string12 = StringUtils.EMPTY;
boolean boolean0 = StringUtils.endsWith(string5, string12);
StringUtils stringUtils0 = new StringUtils();
String string13 = "QU,o74)7IkT";
String string14 = StringUtils.stripToEmpty(string13);
int int3 = 3354;
int int4 = StringUtils.ordinalIndexOf(string13, string13, int3);
String string15 = StringUtils.capitalize(string1);
String string16 = StringUtils.deleteWhitespace(string13);
String string17 = " vs ";
int int5 = 0;
String[] stringArray2 = StringUtils.split(string9, string17, int5);
String string18 = "";
String string19 = StringUtils.defaultString(string14, string18);

* Writing JUnit test case 'StringUtils_ESTest' to evosuite-tests
* Done!

* Computation finished
