* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.lang3.StringUtils
* Starting client
* Connecting to master process on port 15190
* Analyzing classpath: 
  - /home/wasp/Desktop/ICSE18/DiffTGen/drr/patches/D_correct/Lang20/patch1-Lang-20-Arja/patch1Lang20_arja/target/build/classes
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/myprinter.jar
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.lang3.StringUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 1251
  - Branch 1187
  - Exception 0
  - MutationFactory 1002
  - Output 376
  - Method 155
  - MethodNoException 155
  - CBranchFitnessFactory 1187
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1552258154219
* Starting evolution
[Progress:>                             1%] [Cov:>                                  2%][Progress:>                             1%] [Cov:=>                                 4%][Progress:>                             1%] [Cov:=====>                             17%][Progress:>                             1%] [Cov:======>                            18%][Progress:>                             1%] [Cov:=======>                           20%][Progress:>                             1%] [Cov:=======>                           22%][Progress:>                             1%] [Cov:========>                          24%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  1%][Progress:>                             3%] [Cov:====>                              13%][Progress:>                             3%] [Cov:=====>                             15%][Progress:>                             3%] [Cov:=====>                             16%][Progress:>                             3%] [Cov:=====>                             17%][Progress:>                             3%] [Cov:======>                            19%][Progress:>                             3%] [Cov:=======>                           21%][Progress:=>                            5%] [Cov:>                                  1%][Progress:=>                            5%] [Cov:>                                  2%][Progress:=>                            5%] [Cov:=====>                             15%][Progress:=>                            5%] [Cov:=====>                             16%][Progress:=>                            5%] [Cov:======>                            18%][Progress:=>                            5%] [Cov:=======>                           20%][Progress:==>                           8%] [Cov:=>                                 3%][Progress:==>                           8%] [Cov:=>                                 5%][Progress:==>                           8%] [Cov:======>                            18%][Progress:==>                           8%] [Cov:=======>                           20%][Progress:==>                           8%] [Cov:=======>                           22%][Progress:==>                           8%] [Cov:=========>                         27%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:==>                           8%] [Cov:===========>                       32%][Progress:===>                          10%] [Cov:>                                  1%][Progress:===>                          10%] [Cov:>                                  2%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:=====>                             15%][Progress:===>                          10%] [Cov:=====>                             16%][Progress:===>                          10%] [Cov:=====>                             17%][Progress:===>                          10%] [Cov:======>                            18%][Progress:===>                          10%] [Cov:======>                            19%][Progress:===>                          10%] [Cov:=======>                           20%][Progress:===>                          10%] [Cov:=======>                           21%][Progress:===>                          11%] [Cov:=>                                 4%][Progress:===>                          11%] [Cov:==>                                8%][Progress:===>                          11%] [Cov:=======>                           20%][Progress:===>                          11%] [Cov:========>                          24%][Progress:===>                          11%] [Cov:=========>                         27%][Progress:===>                          11%] [Cov:==========>                        31%][Progress:===>                          11%] [Cov:============>                      35%][Progress:===>                          11%] [Cov:============>                      36%][Progress:====>                         16%] [Cov:>                                  2%][Progress:====>                         16%] [Cov:=>                                 5%][Progress:====>                         16%] [Cov:=====>                             17%][Progress:====>                         16%] [Cov:======>                            19%][Progress:====>                         16%] [Cov:=======>                           21%][Progress:====>                         16%] [Cov:========>                          25%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:=>                                 4%][Progress:======>                       20%] [Cov:==>                                7%][Progress:======>                       20%] [Cov:======>                            19%][Progress:======>                       20%] [Cov:=======>                           22%][Progress:======>                       20%] [Cov:========>                          24%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:>                                  1%][Progress:======>                       21%] [Cov:=>                                 3%][Progress:======>                       21%] [Cov:=====>                             15%][Progress:======>                       21%] [Cov:=====>                             16%][Progress:======>                       21%] [Cov:=====>                             17%][Progress:======>                       21%] [Cov:======>                            19%][Progress:======>                       21%] [Cov:=======>                           21%][Progress:======>                       21%] [Cov:========>                          23%][Progress:======>                       23%] [Cov:=>                                 3%][Progress:======>                       23%] [Cov:=>                                 5%][Progress:======>                       23%] [Cov:======>                            18%][Progress:======>                       23%] [Cov:=======>                           20%][Progress:======>                       23%] [Cov:=======>                           22%][Progress:======>                       23%] [Cov:========>                          25%][Progress:======>                       23%] [Cov:==========>                        29%][Progress:======>                       23%] [Cov:==========>                        30%][Progress:=======>                      26%] [Cov:>                                  2%][Progress:=======>                      26%] [Cov:=>                                 4%][Progress:=======>                      26%] [Cov:=====>                             17%][Progress:=======>                      26%] [Cov:======>                            18%][Progress:=======>                      26%] [Cov:=======>                           20%][Progress:=======>                      26%] [Cov:========>                          23%][Progress:=======>                      26%] [Cov:=========>                         27%][Progress:=========>                    30%] [Cov:>                                  1%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=====>                             16%][Progress:=========>                    30%] [Cov:=====>                             17%][Progress:=========>                    30%] [Cov:======>                            18%][Progress:=========>                    30%] [Cov:======>                            19%][Progress:=========>                    30%] [Cov:=======>                           21%][Progress:=========>                    30%] [Cov:========>                          23%][Progress:=========>                    31%] [Cov:>                                  2%][Progress:=========>                    31%] [Cov:=>                                 5%][Progress:=========>                    31%] [Cov:=====>                             17%][Progress:=========>                    31%] [Cov:======>                            19%][Progress:=========>                    31%] [Cov:=======>                           21%][Progress:=========>                    31%] [Cov:========>                          23%][Progress:=========>                    31%] [Cov:=========>                         26%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=>                                 5%][Progress:=========>                    33%] [Cov:======>                            18%][Progress:=========>                    33%] [Cov:=======>                           21%][Progress:=========>                    33%] [Cov:=======>                           22%][Progress:=========>                    33%] [Cov:========>                          25%][Progress:=========>                    33%] [Cov:=========>                         28%][Progress:=========>                    33%] [Cov:==========>                        29%][Progress:=========>                    33%] [Cov:==========>                        30%][Progress:==========>                   35%] [Cov:>                                  1%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:=====>                             15%][Progress:==========>                   35%] [Cov:=====>                             16%][Progress:==========>                   35%] [Cov:=====>                             17%][Progress:==========>                   35%] [Cov:=======>                           20%][Progress:==========>                   35%] [Cov:=======>                           22%][Progress:==========>                   35%] [Cov:========>                          23%][Progress:==========>                   35%] [Cov:=========>                         27%][Progress:==========>                   35%] [Cov:============>                      36%][Progress:==========>                   36%] [Cov:======>                            18%][Progress:==========>                   36%] [Cov:======>                            19%][Progress:==========>                   36%] [Cov:=======>                           20%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:============>                 40%] [Cov:==========>                        30%][Progress:============>                 40%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:==========>                        29%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       34%][Progress:============>                 43%] [Cov:============>                      35%][Progress:=============>                45%] [Cov:========>                          23%][Progress:=============>                45%] [Cov:==========>                        30%][Progress:=============>                45%] [Cov:==========>                        31%][Progress:=============>                45%] [Cov:===========>                       34%][Progress:=============>                45%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:===========================>       78%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              51%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      81%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:============================>      80%][Progress:================>             56%] [Cov:============================>      81%][Progress:================>             56%] [Cov:============================>      81%][Progress:=================>            58%] [Cov:============================>      80%][Progress:=================>            58%] [Cov:============================>      81%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:============================>      80%][Progress:==================>           60%] [Cov:============================>      81%][Progress:==================>           60%] [Cov:============================>      81%][Progress:==================>           61%] [Cov:============================>      80%][Progress:==================>           61%] [Cov:============================>      81%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:===========================>       78%][Progress:===================>          65%] [Cov:============================>      80%][Progress:===================>          66%] [Cov:============================>      80%][Progress:=====================>        70%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      81%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      81%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      81%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      81%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][MASTER] 23:50:19.719 [logback-1] WARN  ResetExecutor - Stopped resetting of classes due to timeout
[MASTER] 23:50:32.872 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 13167ms
[Progress:==============================100%] [Cov:==============================>    88%]
* Search finished after 75s and 10 generations, 15452 statements, best individual has fitness: 6226.471904719675
[MASTER] 23:50:34.041 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 15 seconds more than allowed.
* Minimizing test suite
[MASTER] 23:51:48.160 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 1251
* Number of covered goals: 1134
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 1187
* Number of covered goals: 1028
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 1002
* Number of covered goals: 750
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 81%
* Total number of goals: 376
* Number of covered goals: 304
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 155
* Number of covered goals: 155
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 155
* Number of covered goals: 155
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 73%
* Total number of goals: 1187
* Number of covered goals: 867
* Generated 223 tests with total length 2731
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 23:52:20.911 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 23:52:20.913 [logback-1] WARN  JUnitAnalyzer - Failing test: String string0 = "', is neither of type Map.Entry nor an Array";
int int0 = Integer.MAX_VALUE;
char char0 = 's';
String string1 = StringUtils.leftPad(string0, int0, char0);
String string2 = "Uc&&pkeeec~`_";
String string3 = "java.text.Normalizer$Form";
int int1 = 870;
String string4 = StringUtils.abbreviateMiddle(string2, string3, int1);
HashSet<Integer> hashSet0 = new HashSet<Integer>();
String string5 = StringUtils.join((Iterable<?>) hashSet0, string3);
String string6 = StringUtils.repeat(char0, int1);
boolean boolean0 = StringUtils.equals((CharSequence) string1, (CharSequence) string3);
String string7 = StringUtils.repeat(char0, int0);
String string8 = "java.text.Normalizer is not available";
String string9 = StringUtils.normalizeSpace(string8);
boolean boolean1 = StringUtils.contains((CharSequence) string9, int0);
String string10 = null;
String string11 = "UWdq.M#@(W-\"]Q9-";
String string12 = StringUtils.substringBetween(string10, string11);
int int2 = (-852);
int int3 = StringUtils.indexOf((CharSequence) string7, int2);
int int4 = 256;
int int5 = StringUtils.lastIndexOf((CharSequence) string12, int4, int4);

[MASTER] 23:52:26.358 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 23:52:26.360 [logback-1] WARN  JUnitAnalyzer - Failing test: int int0 = Integer.MAX_VALUE;
String[] stringArray0 = StringUtils.split("_Xx/o", "_Xx/o", Integer.MAX_VALUE);
boolean boolean0 = StringUtils.isWhitespace("_Xx/o");
String string0 = StringUtils.substringAfterLast((String) null, "_Xx/o");
StringUtils stringUtils0 = new StringUtils();
String string1 = "org.apache.commons.lang3.CharUtils";
String string2 = "";
String string3 = StringUtils.rightPad(string1, int0, string2);
String string4 = StringUtils.removeEnd(string0, string1);
int int1 = StringUtils.ordinalIndexOf(string4, string4, int0);
String string5 = null;
String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string4, string5);
String string6 = "";
Locale locale0 = Locale.TAIWAN;
String string7 = StringUtils.lowerCase(string6, locale0);
int int2 = (-1592);
Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
Collection<String> collection0 = null;
List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, collection0);
int int3 = StringUtils.ordinalIndexOf(string7, string1, int2);
int int4 = (-1536);
char char0 = 'n';
String string8 = StringUtils.center(string0, int4, char0);
boolean boolean1 = StringUtils.isBlank(string3);
String string9 = "cWkHvm";
String string10 = "";
String string11 = "Y5sgAL";
String string12 = StringUtils.replaceOnce(string9, string10, string11);

* Writing JUnit test case 'StringUtils_ESTest' to evosuite-tests
* Done!

* Computation finished
