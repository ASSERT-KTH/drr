* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.lang3.StringUtils
* Starting client
* Connecting to master process on port 8007
* Analyzing classpath: 
  - /home/wasp/Desktop/ICSE18/DiffTGen/drr/patches/D_correct/Lang20/patch1-Lang-20-Arja/patch1Lang20_arja/target/build/classes
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/myprinter.jar
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.lang3.StringUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 1251
  - Branch 1187
  - Exception 0
  - MutationFactory 1002
  - Output 376
  - Method 155
  - MethodNoException 155
  - CBranchFitnessFactory 1187
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1552258371768
* Starting evolution
[Progress:>                             3%] [Cov:=>                                 3%][Progress:>                             3%] [Cov:=>                                 5%][Progress:>                             3%] [Cov:=====>                             17%][Progress:>                             3%] [Cov:======>                            19%][Progress:>                             3%] [Cov:=======>                           21%][Progress:>                             3%] [Cov:========>                          25%][Progress:>                             3%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:>                                  2%][Progress:=>                            5%] [Cov:=>                                 3%][Progress:=>                            5%] [Cov:=====>                             16%][Progress:=>                            5%] [Cov:=====>                             17%][Progress:=>                            5%] [Cov:======>                            18%][Progress:=>                            5%] [Cov:=======>                           20%][Progress:=>                            5%] [Cov:=======>                           22%][Progress:==>                           8%] [Cov:>                                  2%][Progress:==>                           8%] [Cov:=>                                 4%][Progress:==>                           8%] [Cov:=====>                             17%][Progress:==>                           8%] [Cov:======>                            19%][Progress:==>                           8%] [Cov:=======>                           20%][Progress:==>                           8%] [Cov:========>                          23%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:===>                          13%] [Cov:>                                  1%][Progress:===>                          13%] [Cov:=>                                 3%][Progress:===>                          13%] [Cov:=====>                             15%][Progress:===>                          13%] [Cov:=====>                             16%][Progress:===>                          13%] [Cov:======>                            18%][Progress:===>                          13%] [Cov:=======>                           20%][Progress:===>                          13%] [Cov:=======>                           22%][Progress:===>                          13%] [Cov:========>                          23%][Progress:====>                         15%] [Cov:>                                  1%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:====>                              14%][Progress:====>                         15%] [Cov:=====>                             15%][Progress:====>                         15%] [Cov:=====>                             17%][Progress:====>                         15%] [Cov:======>                            19%][Progress:====>                         16%] [Cov:=>                                 3%][Progress:====>                         16%] [Cov:==>                                6%][Progress:====>                         16%] [Cov:======>                            18%][Progress:====>                         16%] [Cov:=======>                           21%][Progress:====>                         16%] [Cov:========>                          23%][Progress:====>                         16%] [Cov:=========>                         26%][Progress:====>                         16%] [Cov:==========>                        29%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:>                                  1%][Progress:=====>                        18%] [Cov:=>                                 3%][Progress:=====>                        18%] [Cov:=====>                             15%][Progress:=====>                        18%] [Cov:=====>                             16%][Progress:=====>                        18%] [Cov:=====>                             17%][Progress:=====>                        18%] [Cov:======>                            18%][Progress:=====>                        18%] [Cov:======>                            19%][Progress:======>                       20%] [Cov:>                                  2%][Progress:======>                       20%] [Cov:=>                                 3%][Progress:======>                       20%] [Cov:=====>                             16%][Progress:======>                       20%] [Cov:======>                            18%][Progress:======>                       20%] [Cov:=======>                           20%][Progress:======>                       20%] [Cov:========>                          23%][Progress:======>                       21%] [Cov:>                                  1%][Progress:======>                       21%] [Cov:>                                  2%][Progress:======>                       21%] [Cov:=====>                             15%][Progress:======>                       21%] [Cov:=====>                             17%][Progress:======>                       21%] [Cov:======>                            19%][Progress:======>                       21%] [Cov:=======>                           22%][Progress:======>                       23%] [Cov:>                                  0%][Progress:======>                       23%] [Cov:====>                              12%][Progress:======>                       23%] [Cov:====>                              14%][Progress:======>                       23%] [Cov:=====>                             15%][Progress:======>                       23%] [Cov:=====>                             17%][Progress:======>                       23%] [Cov:======>                            18%][Progress:========>                     28%] [Cov:>                                  0%][Progress:========>                     28%] [Cov:>                                  1%][Progress:========>                     28%] [Cov:====>                              13%][Progress:=========>                    30%] [Cov:>                                  1%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=====>                             15%][Progress:=========>                    30%] [Cov:=====>                             16%][Progress:=========>                    30%] [Cov:=====>                             17%][Progress:=========>                    30%] [Cov:=======>                           20%][Progress:=========>                    30%] [Cov:=======>                           22%][Progress:=========>                    30%] [Cov:========>                          23%][Progress:=========>                    31%] [Cov:>                                  1%][Progress:=========>                    31%] [Cov:>                                  2%][Progress:=========>                    31%] [Cov:=====>                             15%][Progress:=========>                    31%] [Cov:=====>                             16%][Progress:=========>                    31%] [Cov:======>                            18%][Progress:=========>                    31%] [Cov:=======>                           20%][Progress:=========>                    31%] [Cov:=======>                           21%][Progress:=========>                    33%] [Cov:>                                  2%][Progress:=========>                    33%] [Cov:=>                                 4%][Progress:=========>                    33%] [Cov:=====>                             17%][Progress:=========>                    33%] [Cov:======>                            18%][Progress:=========>                    33%] [Cov:=======>                           20%][Progress:=========>                    33%] [Cov:=======>                           22%][Progress:=========>                    33%] [Cov:========>                          25%][Progress:=========>                    33%] [Cov:=========>                         26%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 5%][Progress:==========>                   36%] [Cov:=====>                             17%][Progress:==========>                   36%] [Cov:======>                            19%][Progress:==========>                   36%] [Cov:=======>                           21%][Progress:==========>                   36%] [Cov:========>                          23%][Progress:==========>                   36%] [Cov:========>                          25%][Progress:============>                 40%] [Cov:>                                  2%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=====>                             16%][Progress:============>                 40%] [Cov:=====>                             17%][Progress:============>                 40%] [Cov:======>                            18%][Progress:============>                 40%] [Cov:=======>                           20%][Progress:============>                 40%] [Cov:=======>                           22%][Progress:============>                 43%] [Cov:>                                  1%][Progress:============>                 43%] [Cov:>                                  2%][Progress:============>                 43%] [Cov:=====>                             15%][Progress:============>                 43%] [Cov:=====>                             16%][Progress:============>                 43%] [Cov:=====>                             17%][Progress:============>                 43%] [Cov:======>                            19%][Progress:============>                 43%] [Cov:=======>                           20%][Progress:============>                 43%] [Cov:========>                          23%][Progress:============>                 43%] [Cov:=========>                         26%][Progress:==============>               48%] [Cov:>                                  2%][Progress:==============>               48%] [Cov:=>                                 4%][Progress:==============>               48%] [Cov:=====>                             17%][Progress:==============>               48%] [Cov:======>                            18%][Progress:==============>               48%] [Cov:=======>                           20%][Progress:==============>               48%] [Cov:========>                          23%][Progress:==============>               48%] [Cov:=========>                         27%][Progress:===============>              50%] [Cov:=>                                 3%][Progress:===============>              50%] [Cov:=>                                 5%][Progress:===============>              50%] [Cov:=====>                             17%][Progress:===============>              50%] [Cov:=======>                           20%][Progress:===============>              50%] [Cov:=======>                           21%][Progress:===============>              50%] [Cov:========>                          23%][Progress:===============>              50%] [Cov:=========>                         26%][Progress:===============>              51%] [Cov:>                                  2%][Progress:===============>              51%] [Cov:=>                                 4%][Progress:===============>              51%] [Cov:=====>                             16%][Progress:===============>              51%] [Cov:=====>                             17%][Progress:===============>              51%] [Cov:======>                            19%][Progress:===============>              51%] [Cov:=======>                           21%][Progress:===============>              51%] [Cov:========>                          24%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:====>                              14%][Progress:================>             56%] [Cov:=====>                             17%][Progress:================>             56%] [Cov:======>                            18%][Progress:================>             56%] [Cov:======>                            19%][Progress:================>             56%] [Cov:=======>                           22%][Progress:================>             56%] [Cov:========>                          24%][Progress:================>             56%] [Cov:========>                          25%][Progress:=================>            58%] [Cov:========>                          24%][Progress:=================>            58%] [Cov:========>                          25%][Progress:=================>            58%] [Cov:=========>                         26%][Progress:==================>           60%] [Cov:========>                          24%][Progress:==================>           60%] [Cov:========>                          25%][Progress:==================>           61%] [Cov:========>                          23%][Progress:==================>           61%] [Cov:========>                          24%][Progress:==================>           61%] [Cov:========>                          25%][Progress:==================>           61%] [Cov:=========>                         26%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:==========================>        77%][Progress:==================>           63%] [Cov:==========================>        77%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        77%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        77%][Progress:====================>         68%] [Cov:==========================>        77%][Progress:====================>         68%] [Cov:===========================>       78%][Progress:=====================>        70%] [Cov:==========================>        77%][Progress:=====================>        70%] [Cov:===========================>       78%][Progress:=====================>        71%] [Cov:==========================>        77%][Progress:=====================>        71%] [Cov:==========================>        77%][Progress:=====================>        71%] [Cov:===========================>       78%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:===========================>       78%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:===========================>       78%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:===========================>       78%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:===========================>       78%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:===========================>       78%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       78%][Progress:==========================>   88%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       78%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       78%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       78%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       78%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       78%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][MASTER] 23:54:00.000 [logback-1] WARN  ResetExecutor - Stopped resetting of classes due to timeout
[MASTER] 23:54:22.171 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 23034ms
[Progress:==============================100%] [Cov:==============================>    86%]
* Search finished after 87s and 7 generations, 12052 statements, best individual has fitness: 6368.091848119289
[MASTER] 23:54:23.180 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 27 seconds more than allowed.
* Minimizing test suite
[MASTER] 23:55:47.366 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 1251
* Number of covered goals: 1093
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 1187
* Number of covered goals: 981
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 13
* Number of covered goals: 13
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 73%
* Total number of goals: 1002
* Number of covered goals: 734
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 80%
* Total number of goals: 376
* Number of covered goals: 299
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 155
* Number of covered goals: 155
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 155
* Number of covered goals: 155
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 1187
* Number of covered goals: 843
* Generated 203 tests with total length 2493
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 23:56:42.855 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
[MASTER] 23:56:42.855 [logback-1] WARN  JUnitAnalyzer - Failing test: String string0 = null;
int int0 = Integer.MAX_VALUE;
String string1 = StringUtils.abbreviate((String) null, Integer.MAX_VALUE);
String string2 = null;
String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "Minimum abbreviation width with offset is 7", Integer.MAX_VALUE);
String string3 = StringUtils.join((Object[]) null, 'K');
String string4 = "";
String string5 = StringUtils.center(string4, int0);
String string6 = "";
String string7 = ")N";
String string8 = StringUtils.replaceOnce(string6, string6, string7);
int int1 = StringUtils.length(string7);
String string9 = StringUtils.abbreviate(string2, int1);
String string10 = StringUtils.join(stringArray0);
boolean boolean0 = StringUtils.isAsciiPrintable(string4);
int int2 = StringUtils.indexOfAnyBut((CharSequence) string2, (CharSequence) string0);
String[] stringArray1 = StringUtils.stripAll(stringArray0);
boolean boolean1 = StringUtils.isAllLowerCase(string0);
String string11 = null;
String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase(string11);
String string12 = null;
boolean boolean2 = StringUtils.containsNone((CharSequence) string5, string12);
String string13 = "...";
String string14 = "1.2";
String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string13, string14, int2);
String string15 = "";
String string16 = "kAp(s7d/0RTULi(";
String[] stringArray4 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string15, string16, int0);
boolean boolean3 = StringUtils.equals((CharSequence) string12, (CharSequence) string9);
int int3 = 2;
int int4 = StringUtils.lastOrdinalIndexOf(string14, string0, int3);

[MASTER] 23:56:47.576 [logback-1] WARN  Sandbox - Sandbox can be initalized only once
* Writing JUnit test case 'StringUtils_ESTest' to evosuite-tests
* Done!

* Computation finished
