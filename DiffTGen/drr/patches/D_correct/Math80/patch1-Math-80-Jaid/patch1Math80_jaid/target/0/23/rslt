* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.math.linear.EigenDecompositionImpl
* Starting client
* Connecting to master process on port 2753
* Analyzing classpath: 
  - /home/wasp/Desktop/ICSE18/DiffTGen/drr/patches/D_correct/Math80/patch1-Math-80-Jaid/patch1Math80_jaid/target/build/classes
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/myprinter.jar
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.linear.EigenDecompositionImpl
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 835
  - Branch 428
  - Exception 0
  - MutationFactory 209
  - Output 57
  - Method 12
  - MethodNoException 12
  - CBranchFitnessFactory 428
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1552342114583
* Starting evolution
[Progress:>                             0%] [Cov:>                                  1%][Progress:>                             0%] [Cov:====>                              13%][Progress:>                             0%] [Cov:====>                              14%][Progress:>                             1%] [Cov:=>                                 3%][Progress:>                             1%] [Cov:==>                                6%][Progress:>                             1%] [Cov:======>                            18%][Progress:>                             1%] [Cov:=======>                           21%][Progress:>                             1%] [Cov:========>                          24%][Progress:>                             1%] [Cov:========>                          25%][Progress:>                             1%] [Cov:=========>                         27%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  1%][Progress:>                             3%] [Cov:====>                              13%][Progress:>                             3%] [Cov:====>                              14%][Progress:>                             3%] [Cov:=======>                           22%][Progress:>                             3%] [Cov:=========>                         26%][Progress:>                             3%] [Cov:=========>                         27%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:>                                  0%][Progress:=>                            5%] [Cov:>                                  1%][Progress:=>                            5%] [Cov:====>                              13%][Progress:=>                            5%] [Cov:====>                              14%][Progress:=>                            5%] [Cov:=====>                             15%][Progress:=>                            5%] [Cov:=====>                             16%][Progress:=>                            5%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:==========>                        31%][Progress:=>                            6%] [Cov:===========>                       32%][Progress:=>                            6%] [Cov:============>                      36%][Progress:==>                           8%] [Cov:============>                      36%][Progress:===>                          10%] [Cov:============>                      37%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     39%][Progress:===>                          10%] [Cov:==============>                    40%][Progress:===>                          10%] [Cov:==============>                    40%][Progress:===>                          10%] [Cov:==============>                    41%][Progress:===>                          10%] [Cov:===============>                   43%][Progress:===>                          10%] [Cov:===============>                   45%][Progress:===>                          11%] [Cov:============>                      36%][Progress:===>                          11%] [Cov:==============>                    40%][Progress:===>                          11%] [Cov:==============>                    41%][Progress:===>                          11%] [Cov:==============>                    42%][Progress:===>                          13%] [Cov:==============>                    40%][Progress:===>                          13%] [Cov:==============>                    41%][Progress:===>                          13%] [Cov:==============>                    42%][Progress:===>                          13%] [Cov:================>                  48%][Progress:====>                         15%] [Cov:===============>                   44%][Progress:====>                         15%] [Cov:================>                  48%][Progress:====>                         16%] [Cov:=================>                 50%][Progress:====>                         16%] [Cov:=================>                 51%][Progress:====>                         16%] [Cov:==================>                52%][Progress:====>                         16%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:===================>               55%][Progress:=====>                        18%] [Cov:=================>                 50%][Progress:=====>                        18%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:==================>                54%][Progress:======>                       20%] [Cov:===================>               55%][Progress:======>                       20%] [Cov:===================>               56%][Progress:======>                       21%] [Cov:==================>                54%][Progress:======>                       21%] [Cov:===================>               55%][Progress:======>                       21%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:===================>               57%][Progress:======>                       23%] [Cov:====================>              58%][Progress:======>                       23%] [Cov:====================>              59%][Progress:======>                       23%] [Cov:=====================>             60%][Progress:=======>                      25%] [Cov:===================>               57%][Progress:=======>                      25%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:=======>                      26%] [Cov:=====================>             61%][Progress:========>                     28%] [Cov:====================>              59%][Progress:========>                     28%] [Cov:=====================>             60%][Progress:=========>                    30%] [Cov:=====================>             61%][Progress:=========>                    31%] [Cov:=====================>             61%][Progress:=========>                    31%] [Cov:=====================>             62%][Progress:=========>                    33%] [Cov:=====================>             60%][Progress:=========>                    33%] [Cov:=====================>             61%][Progress:==========>                   35%] [Cov:=====================>             60%][Progress:==========>                   35%] [Cov:=====================>             61%][Progress:==========>                   36%] [Cov:=====================>             61%][Progress:===========>                  38%] [Cov:=====================>             61%][Progress:===========>                  38%] [Cov:=====================>             62%][Progress:============>                 40%] [Cov:=====================>             62%][Progress:============>                 41%] [Cov:=====================>             62%][Progress:============>                 43%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:=====================>             62%][Progress:=============>                45%] [Cov:======================>            63%][Progress:=============>                46%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:=====================>             62%][Progress:==============>               48%] [Cov:======================>            63%][Progress:===============>              50%] [Cov:=====================>             62%][Progress:===============>              50%] [Cov:======================>            63%][Progress:===============>              51%] [Cov:======================>            63%][Progress:===============>              53%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            63%][Progress:================>             55%] [Cov:======================>            64%][Progress:================>             56%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:=================>            58%] [Cov:======================>            63%][Progress:==================>           60%] [Cov:======================>            63%][Progress:==================>           61%] [Cov:======================>            63%][Progress:==================>           61%] [Cov:======================>            64%][Progress:==================>           63%] [Cov:======================>            64%][Progress:===================>          65%] [Cov:======================>            63%][Progress:===================>          66%] [Cov:======================>            64%][Progress:====================>         68%] [Cov:======================>            63%][Progress:====================>         68%] [Cov:======================>            64%][Progress:=====================>        70%] [Cov:======================>            64%][Progress:=====================>        71%] [Cov:======================>            64%][Progress:=====================>        73%] [Cov:======================>            64%][Progress:======================>       75%] [Cov:======================>            64%][Progress:======================>       76%] [Cov:======================>            64%][Progress:=======================>      78%] [Cov:======================>            64%][Progress:=======================>      78%] [Cov:======================>            64%][Progress:========================>     80%] [Cov:======================>            64%][Progress:========================>     81%] [Cov:======================>            64%][Progress:========================>     83%] [Cov:======================>            64%][Progress:=========================>    85%] [Cov:======================>            64%][Progress:=========================>    85%] [Cov:======================>            64%][Progress:=========================>    86%] [Cov:======================>            64%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            64%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            64%][Progress:============================> 96%] [Cov:======================>            64%][Progress:============================> 96%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            65%][MASTER] 23:09:47.997 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 7813ms
[Progress:==============================100%] [Cov:=======================>           66%]
* Search finished after 70s and 16 generations, 10611 statements, best individual has fitness: 1253.1685527359596
[MASTER] 23:09:48.192 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 9 seconds more than allowed.
* Minimizing test suite
[MASTER] 23:10:57.101 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 80%
* Total number of goals: 835
* Number of covered goals: 670
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 71%
* Total number of goals: 428
* Number of covered goals: 302
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 52%
* Total number of goals: 209
* Number of covered goals: 108
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 16%
* Total number of goals: 57
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 12
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 83%
* Total number of goals: 12
* Number of covered goals: 10
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 428
* Number of covered goals: 302
* Generated 36 tests with total length 642
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 23:11:11.374 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.apache.commons.math.linear.InvalidMatrixException: 
[MASTER] 23:11:11.374 [logback-1] WARN  JUnitAnalyzer - Failing test: double[] doubleArray0 = new double[7];
doubleArray0[0] = 0.0;
doubleArray0[1] = 249.738;
doubleArray0[2] = (-1248.92143);
doubleArray0[3] = 0.0;
doubleArray0[4] = 0.0;
doubleArray0[5] = (-1688.25);
doubleArray0[6] = 633.106741535;
double[] doubleArray1 = new double[6];
doubleArray1[0] = (-1248.92143);
doubleArray1[1] = 249.738;
doubleArray1[2] = Double.NEGATIVE_INFINITY;
doubleArray1[3] = 0.0;
doubleArray1[4] = 782.806885806;
doubleArray1[5] = (-1688.25);
EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1688.25));
Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();

[MASTER] 23:11:11.809 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.apache.commons.math.linear.InvalidMatrixException: 
[MASTER] 23:11:11.810 [logback-1] WARN  JUnitAnalyzer - Failing test: double[] doubleArray0 = new double[7];
doubleArray0[1] = 249.738;
doubleArray0[2] = 0.0;
doubleArray0[4] = 0.0;
doubleArray0[5] = (-1688.25);
doubleArray0[6] = 633.106741535;
double[] doubleArray1 = new double[6];
doubleArray1[0] = 249.738;
doubleArray1[1] = 249.738;
doubleArray1[2] = Double.NEGATIVE_INFINITY;
doubleArray1[3] = 0.0;
doubleArray1[4] = 782.806885806;
doubleArray1[5] = (-1688.25);
EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1688.25));
DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();

[MASTER] 23:11:12.056 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.apache.commons.math.linear.InvalidMatrixException: 
[MASTER] 23:11:12.056 [logback-1] WARN  JUnitAnalyzer - Failing test: double[] doubleArray0 = new double[7];
doubleArray0[0] = 0.0;
doubleArray0[1] = 249.738;
doubleArray0[2] = (-1248.92143);
doubleArray0[4] = 0.0;
doubleArray0[5] = (-1688.25);
doubleArray0[6] = 633.106741535;
double[] doubleArray1 = new double[6];
doubleArray1[0] = (-1248.92143);
doubleArray1[1] = 249.738;
doubleArray1[2] = Double.NEGATIVE_INFINITY;
doubleArray1[3] = 0.0;
doubleArray1[4] = 2.2250738585072014E-308;
doubleArray1[5] = (-1688.25);
EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1688.25));
DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(2147466936);

[MASTER] 23:11:13.869 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.apache.commons.math.linear.InvalidMatrixException: 
[MASTER] 23:11:13.870 [logback-1] WARN  JUnitAnalyzer - Failing test: double[] doubleArray0 = new double[7];
doubleArray0[0] = 0.0;
doubleArray0[1] = 249.738;
doubleArray0[2] = (-1248.92143);
doubleArray0[4] = (-440.633946);
doubleArray0[5] = (-1688.25);
doubleArray0[6] = 249.738;
double[] doubleArray1 = new double[6];
doubleArray1[0] = (-1248.92143);
doubleArray1[1] = 249.738;
doubleArray1[2] = Double.NEGATIVE_INFINITY;
doubleArray1[3] = 0.0;
doubleArray1[4] = 782.806885806;
doubleArray1[5] = (-1688.25);
EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1688.25));
Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(2147466936);

[MASTER] 23:11:17.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.apache.commons.math.linear.InvalidMatrixException: 
[MASTER] 23:11:17.990 [logback-1] WARN  JUnitAnalyzer - Failing test: double[] doubleArray0 = new double[7];
doubleArray0[0] = 0.0;
doubleArray0[1] = 249.738;
doubleArray0[2] = (-1248.92143);
doubleArray0[4] = 0.0;
doubleArray0[5] = (-1688.25);
doubleArray0[6] = 633.106741535;
double[] doubleArray1 = new double[6];
doubleArray1[0] = (-1248.92143);
doubleArray1[1] = 249.738;
doubleArray1[2] = Double.NEGATIVE_INFINITY;
doubleArray1[3] = 0.0;
doubleArray1[4] = 782.806885806;
doubleArray1[5] = (-1688.25);
EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1688.25));
ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(2);
RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(2147466936);

[MASTER] 23:11:19.930 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.apache.commons.math.linear.InvalidMatrixException: 
[MASTER] 23:11:19.932 [logback-1] WARN  JUnitAnalyzer - Failing test: double[] doubleArray0 = new double[7];
doubleArray0[0] = (-10.1673289813143);
doubleArray0[1] = 249.738;
doubleArray0[2] = (-1248.92143);
doubleArray0[4] = 0.0;
doubleArray0[5] = (-1688.25);
doubleArray0[6] = 633.106741535;
double[] doubleArray1 = new double[6];
doubleArray1[0] = (-1248.92143);
doubleArray1[1] = 249.738;
doubleArray1[2] = Double.NEGATIVE_INFINITY;
doubleArray1[3] = (-10.1673289813143);
doubleArray1[4] = 782.806885806;
doubleArray0[1] = (-1688.25);
EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1688.25));
RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(2147466936);

* Writing JUnit test case 'EigenDecompositionImpl_ESTest' to evosuite-tests
* Done!

* Computation finished
