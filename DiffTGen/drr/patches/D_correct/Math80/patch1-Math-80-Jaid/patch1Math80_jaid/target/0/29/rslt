* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.math.linear.EigenDecompositionImpl
* Starting client
* Connecting to master process on port 16873
* Analyzing classpath: 
  - /home/wasp/Desktop/ICSE18/DiffTGen/drr/patches/D_correct/Math80/patch1-Math-80-Jaid/patch1Math80_jaid/target/build/classes
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/myprinter.jar
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.linear.EigenDecompositionImpl
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 835
  - Branch 428
  - Exception 0
  - MutationFactory 209
  - Output 57
  - Method 12
  - MethodNoException 12
  - CBranchFitnessFactory 428
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1552343188963
* Starting evolution
[Progress:>                             0%] [Cov:====>                              12%][Progress:>                             1%] [Cov:>                                  0%][Progress:>                             1%] [Cov:>                                  1%][Progress:>                             1%] [Cov:====>                              13%][Progress:>                             1%] [Cov:====>                              14%][Progress:>                             3%] [Cov:>                                  0%][Progress:>                             3%] [Cov:>                                  1%][Progress:>                             3%] [Cov:====>                              13%][Progress:>                             3%] [Cov:====>                              14%][Progress:>                             3%] [Cov:====>                              14%][Progress:=>                            5%] [Cov:====>                              14%][Progress:=>                            5%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:====>                              14%][Progress:==>                           8%] [Cov:====>                              14%][Progress:==>                           8%] [Cov:====>                              14%][Progress:==>                           8%] [Cov:====>                              14%][Progress:==>                           8%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          10%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          11%] [Cov:====>                              14%][Progress:===>                          13%] [Cov:=======>                           20%][Progress:===>                          13%] [Cov:========>                          24%][Progress:===>                          13%] [Cov:===========>                       33%][Progress:===>                          13%] [Cov:============>                      37%][Progress:====>                         15%] [Cov:=======>                           20%][Progress:====>                         15%] [Cov:========>                          25%][Progress:====>                         15%] [Cov:===========>                       34%][Progress:====>                         15%] [Cov:============>                      35%][Progress:====>                         15%] [Cov:=============>                     39%][Progress:====>                         15%] [Cov:==============>                    40%][Progress:====>                         16%] [Cov:============>                      35%][Progress:====>                         16%] [Cov:==============>                    40%][Progress:=====>                        18%] [Cov:==============>                    40%][Progress:=====>                        18%] [Cov:==============>                    41%][Progress:=====>                        18%] [Cov:==============>                    42%][Progress:======>                       20%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:============>                      37%][Progress:======>                       21%] [Cov:==============>                    42%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   44%][Progress:======>                       21%] [Cov:================>                  46%][Progress:======>                       21%] [Cov:================>                  47%][Progress:======>                       21%] [Cov:==================>                52%][Progress:======>                       23%] [Cov:============>                      37%][Progress:======>                       23%] [Cov:==============>                    42%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:===============>                   44%][Progress:======>                       23%] [Cov:===============>                   45%][Progress:======>                       23%] [Cov:================>                  46%][Progress:=======>                      25%] [Cov:==============>                    42%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:=======>                      25%] [Cov:===============>                   45%][Progress:=======>                      25%] [Cov:=================>                 49%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:==============>                    42%][Progress:=======>                      26%] [Cov:==================>                54%][Progress:========>                     28%] [Cov:==================>                53%][Progress:========>                     28%] [Cov:==================>                54%][Progress:=========>                    30%] [Cov:==================>                53%][Progress:=========>                    30%] [Cov:==================>                54%][Progress:=========>                    31%] [Cov:==================>                54%][Progress:=========>                    31%] [Cov:===================>               55%][Progress:=========>                    33%] [Cov:=================>                 49%][Progress:=========>                    33%] [Cov:===================>               55%][Progress:==========>                   35%] [Cov:==================>                54%][Progress:==========>                   35%] [Cov:===================>               55%][Progress:==========>                   36%] [Cov:===================>               55%][Progress:===========>                  38%] [Cov:===================>               55%][Progress:===========>                  38%] [Cov:===================>               55%][Progress:============>                 40%] [Cov:===================>               55%][Progress:============>                 41%] [Cov:==================>                54%][Progress:============>                 41%] [Cov:===================>               55%][Progress:============>                 43%] [Cov:==================>                54%][Progress:============>                 43%] [Cov:===================>               55%][Progress:=============>                45%] [Cov:=================>                 49%][Progress:=============>                45%] [Cov:==================>                54%][Progress:=============>                46%] [Cov:===================>               55%][Progress:=============>                46%] [Cov:===================>               55%][Progress:==============>               48%] [Cov:===================>               55%][Progress:===============>              50%] [Cov:===================>               55%][Progress:===============>              51%] [Cov:===================>               55%][Progress:===============>              53%] [Cov:===================>               55%][Progress:================>             55%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:================>             56%] [Cov:===================>               55%][Progress:=================>            58%] [Cov:===================>               55%][Progress:==================>           60%] [Cov:===================>               55%][Progress:==================>           61%] [Cov:=================>                 50%][Progress:==================>           61%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               55%][Progress:==================>           63%] [Cov:===================>               56%][Progress:==================>           63%] [Cov:===================>               57%][Progress:===================>          65%] [Cov:===================>               55%][Progress:===================>          65%] [Cov:===================>               56%][Progress:===================>          66%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:===================>               55%][Progress:====================>         68%] [Cov:====================>              58%][Progress:=====================>        70%] [Cov:====================>              58%][Progress:=====================>        70%] [Cov:====================>              59%][Progress:=====================>        71%] [Cov:====================>              58%][Progress:=====================>        73%] [Cov:====================>              58%][Progress:=====================>        73%] [Cov:====================>              59%][Progress:=====================>        73%] [Cov:=====================>             60%][Progress:======================>       75%] [Cov:====================>              58%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:=======================>      78%] [Cov:=====================>             62%][Progress:========================>     80%] [Cov:=====================>             62%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            64%][Progress:========================>     81%] [Cov:=====================>             62%][Progress:========================>     83%] [Cov:=====================>             62%][Progress:=========================>    85%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:======================>            64%][Progress:===========================>  91%] [Cov:======================>            63%][Progress:===========================>  91%] [Cov:======================>            64%][Progress:===========================>  93%] [Cov:======================>            64%][Progress:============================> 95%] [Cov:======================>            63%][Progress:============================> 95%] [Cov:======================>            64%][Progress:============================> 96%] [Cov:======================>            64%][Progress:=============================>98%] [Cov:======================>            64%][Progress:=============================>98%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            64%][Progress:==============================100%] [Cov:=======================>           66%][MASTER] 23:27:40.011 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 5759ms

* Search finished after 67s and 32 generations, 12545 statements, best individual has fitness: 1422.253593052239
[MASTER] 23:27:40.108 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 6 seconds more than allowed.
* Minimizing test suite
[MASTER] 23:28:47.751 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 77%
* Total number of goals: 835
* Number of covered goals: 646
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 281
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 47%
* Total number of goals: 209
* Number of covered goals: 99
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 14%
* Total number of goals: 57
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 12
* Number of covered goals: 11
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 12
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 281
* Generated 22 tests with total length 371
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 23:29:06.820 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.apache.commons.math.linear.InvalidMatrixException: 
[MASTER] 23:29:06.821 [logback-1] WARN  JUnitAnalyzer - Failing test: double[] doubleArray0 = new double[8];
doubleArray0[0] = (-1589.68959);
doubleArray0[1] = 0.0;
doubleArray0[2] = (-1589.68959);
doubleArray0[3] = (-1589.68959);
doubleArray0[4] = 0.0;
doubleArray0[5] = 0.0;
doubleArray0[6] = Double.NaN;
doubleArray0[7] = 491.7456744857889;
double[] doubleArray1 = new double[7];
doubleArray1[0] = (-585.005138993258);
doubleArray1[1] = (-1958.0394818045804);
doubleArray1[3] = (-436.81);
doubleArray1[4] = 491.7456744857889;
doubleArray1[5] = (-1958.0394818045804);
doubleArray1[6] = (-1958.0394818045804);
EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(3);
double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-1589.68959));
double double0 = eigenDecompositionImpl1.getImagEigenvalue(2347);

* Writing JUnit test case 'EigenDecompositionImpl_ESTest' to evosuite-tests
* Done!

* Computation finished
