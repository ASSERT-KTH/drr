* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.math.util.MathUtils
* Starting client
* Connecting to master process on port 6326
* Analyzing classpath: 
  - /home/wasp/Desktop/ICSE18/DiffTGen/drr/patches/D_correct/Math63/patch1-Math-63-SimFix/patch1Math63_simfix/target/build/classes
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/myprinter.jar
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.util.MathUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 480
  - Branch 465
  - Exception 0
  - MutationFactory 928
  - Output 184
  - Method 65
  - MethodNoException 65
  - CBranchFitnessFactory 465
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1552382996746
* Starting evolution
[Progress:>                             0%] [Cov:>                                  1%][Progress:>                             0%] [Cov:====>                              14%][Progress:=>                            6%] [Cov:=>                                 3%][Progress:=>                            6%] [Cov:=>                                 5%][Progress:=>                            6%] [Cov:=====>                             17%][Progress:=>                            6%] [Cov:======>                            19%][Progress:=>                            6%] [Cov:=======>                           21%][Progress:=>                            6%] [Cov:========>                          23%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:====>                         15%] [Cov:=>                                 3%][Progress:====>                         15%] [Cov:==>                                6%][Progress:====>                         15%] [Cov:======>                            18%][Progress:====>                         15%] [Cov:=======>                           21%][Progress:====>                         15%] [Cov:=======>                           22%][Progress:====>                         15%] [Cov:========>                          25%][Progress:====>                         15%] [Cov:=========>                         27%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:>                                  0%][Progress:======>                       23%] [Cov:====>                              13%][Progress:======>                       23%] [Cov:======>                            19%][Progress:======>                       23%] [Cov:=======>                           22%][Progress:======>                       23%] [Cov:========>                          24%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:>                                  2%][Progress:=========>                    33%] [Cov:=>                                 3%][Progress:=========>                    33%] [Cov:=====>                             15%][Progress:=========>                    33%] [Cov:=====>                             16%][Progress:=========>                    33%] [Cov:=====>                             17%][Progress:=========>                    33%] [Cov:=======>                           21%][Progress:=========>                    33%] [Cov:========>                          25%][Progress:=========>                    33%] [Cov:=========>                         27%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:============>                      37%][Progress:==========>                   35%] [Cov:>                                  2%][Progress:==========>                   35%] [Cov:=>                                 4%][Progress:==========>                   35%] [Cov:=====>                             16%][Progress:==========>                   35%] [Cov:======>                            18%][Progress:==========>                   35%] [Cov:=======>                           20%][Progress:==========>                   35%] [Cov:=======>                           21%][Progress:============>                 43%] [Cov:=>                                 3%][Progress:============>                 43%] [Cov:==>                                6%][Progress:============>                 43%] [Cov:======>                            18%][Progress:============>                 43%] [Cov:=======>                           21%][Progress:============>                 43%] [Cov:=======>                           22%][Progress:============>                 43%] [Cov:========>                          24%][Progress:============>                 43%] [Cov:=========>                         26%][Progress:============>                 43%] [Cov:=========>                         27%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=>                                 3%][Progress:===============>              51%] [Cov:=>                                 5%][Progress:===============>              51%] [Cov:======>                            18%][Progress:===============>              51%] [Cov:=======>                           20%][Progress:===============>              51%] [Cov:=======>                           21%][Progress:===============>              51%] [Cov:=======>                           22%][Progress:===============>              51%] [Cov:========>                          24%][Progress:===============>              51%] [Cov:=========>                         26%][Progress:===============>              51%] [Cov:=========>                         27%][Progress:==================>           60%] [Cov:>                                  2%][Progress:==================>           60%] [Cov:=>                                 4%][Progress:==================>           60%] [Cov:=====>                             17%][Progress:==================>           60%] [Cov:======>                            18%][Progress:==================>           60%] [Cov:=======>                           20%][Progress:==================>           60%] [Cov:=======>                           22%][Progress:==================>           60%] [Cov:========>                          23%][Progress:==================>           61%] [Cov:>                                  1%][Progress:==================>           61%] [Cov:=>                                 3%][Progress:==================>           61%] [Cov:=====>                             16%][Progress:==================>           61%] [Cov:=====>                             17%][Progress:==================>           61%] [Cov:======>                            18%][Progress:==================>           61%] [Cov:=======>                           20%][Progress:==================>           61%] [Cov:=======>                           22%][Progress:==================>           61%] [Cov:========>                          25%][Progress:==================>           61%] [Cov:==========>                        29%][Progress:==================>           61%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:=>                                 3%][Progress:=====================>        70%] [Cov:==>                                6%][Progress:=====================>        70%] [Cov:======>                            18%][Progress:=====================>        70%] [Cov:=======>                           20%][Progress:=====================>        70%] [Cov:=======>                           22%][Progress:=====================>        70%] [Cov:========>                          23%][Progress:=====================>        70%] [Cov:========>                          25%][Progress:=====================>        70%] [Cov:=========>                         26%][Progress:=====================>        70%] [Cov:==========>                        29%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:>                                  2%][Progress:=====================>        71%] [Cov:=>                                 5%][Progress:=====================>        71%] [Cov:=====>                             17%][Progress:=====================>        71%] [Cov:======>                            19%][Progress:=====================>        71%] [Cov:=======>                           20%][Progress:=====================>        71%] [Cov:=======>                           22%][Progress:=====================>        71%] [Cov:========>                          24%][Progress:=====================>        71%] [Cov:========>                          25%][Progress:=====================>        71%] [Cov:=========>                         26%][Progress:=====================>        71%] [Cov:=========>                         27%][Progress:=====================>        71%] [Cov:=========>                         28%][Progress:=====================>        71%] [Cov:============>                      37%][Progress:=====================>        73%] [Cov:=====>                             17%][Progress:=====================>        73%] [Cov:========>                          24%][Progress:=====================>        73%] [Cov:========>                          25%][Progress:========================>     81%] [Cov:=======>                           20%][Progress:========================>     81%] [Cov:=========>                         27%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        30%][Progress:========================>     81%] [Cov:==========>                        31%][Progress:========================>     81%] [Cov:===========>                       32%][Progress:========================>     81%] [Cov:============>                      35%][Progress:===========================>  90%] [Cov:========>                          25%][Progress:===========================>  90%] [Cov:=========>                         28%][Progress:===========================>  90%] [Cov:==========>                        30%][Progress:===========================>  90%] [Cov:============>                      37%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:==========================>        76%][Progress:===========================>  93%] [Cov:===========================>       78%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:==============================>    86%][MASTER] 10:31:24.063 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 21124ms

* Search finished after 84s and 3 generations, 5990 statements, best individual has fitness: 2665.7398457514173
[MASTER] 10:31:24.416 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 23 seconds more than allowed.
* Minimizing test suite
[MASTER] 10:32:46.274 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 480
* Number of covered goals: 402
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 79%
* Total number of goals: 465
* Number of covered goals: 368
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 30
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 79%
* Total number of goals: 928
* Number of covered goals: 735
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 184
* Number of covered goals: 136
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 75%
* Total number of goals: 465
* Number of covered goals: 351
* Generated 124 tests with total length 1144
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 10:33:26.431 [logback-1] WARN  Sandbox - Sandbox can be initalized only once
[MASTER] 10:33:26.432 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.runners.model.TestTimedOutException: test timed out after 4000 milliseconds
[MASTER] 10:33:26.432 [logback-1] WARN  JUnitAnalyzer - Failing test: double double0 = MathUtils.sinh((-155.93582523));
long long0 = MathUtils.binomialCoefficient(0, (-259));
byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)99;
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)43;
BigInteger bigInteger0 = new BigInteger(byteArray0);
BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
long long1 = 6402373705728000L;
BigInteger bigInteger2 = MathUtils.pow(bigInteger1, long1);

* Computation finished
