* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.math.util.MathUtils
* Starting client
* Connecting to master process on port 19531
* Analyzing classpath: 
  - /home/wasp/Desktop/ICSE18/DiffTGen/drr/patches/D_correct/Math63/patch1-Math-63-SimFix/patch1Math63_simfix/target/build/classes
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/myprinter.jar
  - /home/wasp/Desktop/ICSE18/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.util.MathUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 480
  - Branch 465
  - Exception 0
  - MutationFactory 928
  - Output 184
  - Method 65
  - MethodNoException 65
  - CBranchFitnessFactory 465
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1552379047550
* Starting evolution
[Progress:>                             0%] [Cov:>                                  2%][Progress:>                             0%] [Cov:=>                                 5%][Progress:>                             0%] [Cov:=====>                             17%][Progress:>                             0%] [Cov:======>                            19%][Progress:>                             0%] [Cov:=======>                           20%][Progress:>                             0%] [Cov:=======>                           22%][Progress:>                             0%] [Cov:========>                          25%][Progress:>                             0%] [Cov:=========>                         26%][Progress:>                             1%] [Cov:>                                  2%][Progress:>                             1%] [Cov:=>                                 4%][Progress:>                             1%] [Cov:=====>                             16%][Progress:>                             1%] [Cov:=====>                             17%][Progress:>                             1%] [Cov:======>                            19%][Progress:>                             1%] [Cov:=======>                           20%][Progress:>                             1%] [Cov:=======>                           21%][Progress:>                             3%] [Cov:=====>                             16%][Progress:>                             3%] [Cov:=====>                             17%][Progress:>                             3%] [Cov:======>                            18%][Progress:>                             3%] [Cov:=======>                           20%][Progress:>                             3%] [Cov:=======>                           21%][Progress:>                             3%] [Cov:=======>                           22%][Progress:>                             3%] [Cov:========>                          25%][Progress:>                             3%] [Cov:==========>                        30%][Progress:>                             3%] [Cov:============>                      36%][Progress:==>                           8%] [Cov:=>                                 4%][Progress:==>                           8%] [Cov:==>                                7%][Progress:===>                          10%] [Cov:======>                            19%][Progress:===>                          10%] [Cov:=======>                           22%][Progress:===>                          10%] [Cov:========>                          24%][Progress:===>                          10%] [Cov:=========>                         26%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:>                                  1%][Progress:====>                         15%] [Cov:====>                              14%][Progress:====>                         15%] [Cov:=====>                             15%][Progress:====>                         15%] [Cov:=====>                             16%][Progress:====>                         15%] [Cov:=====>                             17%][Progress:====>                         15%] [Cov:======>                            18%][Progress:====>                         15%] [Cov:=======>                           21%][Progress:====>                         15%] [Cov:=======>                           22%][Progress:====>                         15%] [Cov:========>                          23%][Progress:====>                         15%] [Cov:========>                          24%][Progress:====>                         16%] [Cov:>                                  2%][Progress:====>                         16%] [Cov:=>                                 3%][Progress:====>                         16%] [Cov:=====>                             16%][Progress:====>                         16%] [Cov:=====>                             17%][Progress:====>                         16%] [Cov:======>                            19%][Progress:====>                         16%] [Cov:=======>                           20%][Progress:====>                         16%] [Cov:=======>                           22%][Progress:======>                       21%] [Cov:>                                  0%][Progress:======>                       21%] [Cov:====>                              13%][Progress:======>                       21%] [Cov:=====>                             17%][Progress:======>                       21%] [Cov:======>                            19%][Progress:======>                       21%] [Cov:=======>                           21%][Progress:======>                       21%] [Cov:========>                          24%][Progress:======>                       21%] [Cov:=========>                         27%][Progress:======>                       23%] [Cov:>                                  2%][Progress:======>                       23%] [Cov:=>                                 4%][Progress:======>                       23%] [Cov:=====>                             17%][Progress:======>                       23%] [Cov:======>                            19%][Progress:======>                       23%] [Cov:=======>                           20%][Progress:======>                       23%] [Cov:=======>                           21%][Progress:======>                       23%] [Cov:=======>                           22%][Progress:======>                       23%] [Cov:========>                          24%][Progress:======>                       23%] [Cov:=========>                         26%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:=>                                 3%][Progress:=======>                      25%] [Cov:==>                                6%][Progress:=======>                      25%] [Cov:======>                            19%][Progress:=======>                      25%] [Cov:=======>                           22%][Progress:=======>                      25%] [Cov:========>                          24%][Progress:=======>                      25%] [Cov:=========>                         27%][Progress:=======>                      25%] [Cov:==========>                        30%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:==>                                6%][Progress:==========>                   35%] [Cov:======>                            19%][Progress:==========>                   35%] [Cov:=======>                           21%][Progress:==========>                   35%] [Cov:=======>                           22%][Progress:==========>                   35%] [Cov:========>                          24%][Progress:==========>                   35%] [Cov:=========>                         27%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 5%][Progress:==========>                   36%] [Cov:======>                            18%][Progress:==========>                   36%] [Cov:=======>                           20%][Progress:==========>                   36%] [Cov:=======>                           22%][Progress:==========>                   36%] [Cov:========>                          25%][Progress:==========>                   36%] [Cov:=========>                         27%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:==========>                        30%][Progress:==========>                   36%] [Cov:==========>                        31%][Progress:============>                 43%] [Cov:=>                                 4%][Progress:============>                 43%] [Cov:==>                                8%][Progress:============>                 43%] [Cov:=======>                           20%][Progress:============>                 43%] [Cov:========>                          24%][Progress:============>                 43%] [Cov:=========>                         26%][Progress:============>                 43%] [Cov:==========>                        29%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       33%][Progress:==============>               48%] [Cov:>                                  0%][Progress:==============>               48%] [Cov:====>                              13%][Progress:==============>               48%] [Cov:====>                              14%][Progress:==============>               48%] [Cov:=====>                             15%][Progress:==============>               48%] [Cov:=====>                             16%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:============>                      35%][Progress:===============>              50%] [Cov:=========>                         27%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:==========>                        31%][Progress:===============>              50%] [Cov:===========>                       33%][Progress:===============>              50%] [Cov:===========>                       34%][Progress:===============>              50%] [Cov:============>                      35%][Progress:===============>              50%] [Cov:============>                      36%][Progress:===============>              50%] [Cov:===========================>       78%][Progress:=================>            58%] [Cov:==========================>        77%][Progress:=================>            58%] [Cov:===========================>       78%][Progress:==================>           60%] [Cov:===========================>       78%][Progress:===================>          66%] [Cov:===========================>       78%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:===========================>       78%][Progress:====================>         68%] [Cov:===========================>       78%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       78%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       78%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       75%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      80%][Progress:=======================>      78%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      81%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      81%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      81%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      81%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      81%][Progress:=============================>98%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      81%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][MASTER] 09:25:25.841 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 8192ms
[Progress:==============================100%] [Cov:==============================>    86%]
* Search finished after 75s and 12 generations, 11164 statements, best individual has fitness: 2688.5673880123213
[MASTER] 09:25:26.233 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 14 seconds more than allowed.
* Minimizing test suite
[MASTER] 09:26:35.405 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 480
* Number of covered goals: 408
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 465
* Number of covered goals: 380
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 79%
* Total number of goals: 928
* Number of covered goals: 729
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 74%
* Total number of goals: 184
* Number of covered goals: 137
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 465
* Number of covered goals: 367
* Generated 147 tests with total length 1314
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 09:27:09.986 [logback-1] WARN  Sandbox - Sandbox can be initalized only once
[MASTER] 09:27:09.987 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.runners.model.TestTimedOutException: test timed out after 4000 milliseconds
[MASTER] 09:27:09.988 [logback-1] WARN  JUnitAnalyzer - Failing test: int int0 = MathUtils.sign(150);
double[] doubleArray0 = new double[2];
doubleArray0[0] = (double) 150;
doubleArray0[1] = (double) 150;
double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1);
int int1 = MathUtils.pow(150, 0);
int int2 = MathUtils.sign(579);
boolean boolean0 = MathUtils.equals(0.0, 150.0, (double) 1);
MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
MathUtils.checkOrder(doubleArray1, mathUtils_OrderDirection0, false);
int int3 = MathUtils.gcd(1, 150);
float float0 = MathUtils.indicator((float) 1);
float float1 = MathUtils.round((float) 1, 150, 0);
byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)14;
byteArray0[1] = (byte)2;
byteArray0[2] = (byte) (-16);
byteArray0[3] = (byte)0;
BigInteger bigInteger0 = new BigInteger(byteArray0);
BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);

* Computation finished
