* EvoSuite 1.0.2
* Going to generate test cases for class: org.apache.commons.lang3.StringUtils
* Starting client
* Connecting to master process on port 17395
* Analyzing classpath: 
  - /Users/sophie/Documents/defects4-repair-reloaded/DiffTGen/drr/patches/D_incorrect/Lang39/patch1-Lang-39-ACS-plausible/patch1Lang39_acs/target/build/classes
  - /Users/sophie/Documents/defects4-repair-reloaded/DiffTGen/lib/myprinter.jar
  - /Users/sophie/Documents/defects4-repair-reloaded/DiffTGen/lib/commons-lang3-3.5.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.lang3.StringUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 1129
  - Branch 1058
  - Exception 0
  - MutationFactory 874
  - Output 341
  - Method 143
  - MethodNoException 143
  - CBranchFitnessFactory 1058
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1565966300128
* Starting evolution
[Progress:>                             1%] [Cov:=>                                 3%][Progress:>                             1%] [Cov:==>                                6%][Progress:>                             1%] [Cov:======>                            18%][Progress:>                             1%] [Cov:=======>                           21%][Progress:>                             1%] [Cov:========>                          23%][Progress:>                             1%] [Cov:=========>                         27%][Progress:>                             1%] [Cov:==========>                        31%][Progress:=>                            5%] [Cov:=>                                 4%][Progress:=>                            5%] [Cov:==>                                7%][Progress:=>                            5%] [Cov:======>                            19%][Progress:=>                            5%] [Cov:========>                          23%][Progress:=>                            5%] [Cov:========>                          25%][Progress:=>                            5%] [Cov:==========>                        29%][Progress:=>                            5%] [Cov:===========>                       33%][Progress:=>                            6%] [Cov:=>                                 3%][Progress:=>                            6%] [Cov:=>                                 5%][Progress:=>                            6%] [Cov:=====>                             17%][Progress:=>                            6%] [Cov:======>                            19%][Progress:=>                            6%] [Cov:=======>                           20%][Progress:=>                            6%] [Cov:========>                          23%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         27%][Progress:==>                           8%] [Cov:>                                  2%][Progress:==>                           8%] [Cov:=>                                 5%][Progress:==>                           8%] [Cov:=====>                             17%][Progress:==>                           8%] [Cov:=======>                           20%][Progress:==>                           8%] [Cov:=======>                           22%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:==========>                        30%][Progress:==>                           8%] [Cov:==========>                        31%][Progress:===>                          10%] [Cov:=>                                 3%][Progress:===>                          10%] [Cov:=>                                 5%][Progress:===>                          10%] [Cov:======>                            18%][Progress:===>                          10%] [Cov:=======>                           20%][Progress:===>                          10%] [Cov:=======>                           21%][Progress:===>                          10%] [Cov:========>                          25%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:==========>                        29%][Progress:===>                          13%] [Cov:>                                  2%][Progress:===>                          13%] [Cov:=>                                 3%][Progress:===>                          13%] [Cov:=====>                             16%][Progress:===>                          13%] [Cov:=====>                             17%][Progress:===>                          13%] [Cov:======>                            18%][Progress:===>                          13%] [Cov:=======>                           21%][Progress:===>                          13%] [Cov:========>                          23%][Progress:===>                          13%] [Cov:========>                          24%][Progress:====>                         15%] [Cov:>                                  1%][Progress:====>                         15%] [Cov:>                                  2%][Progress:====>                         15%] [Cov:=====>                             15%][Progress:====>                         15%] [Cov:=====>                             16%][Progress:====>                         15%] [Cov:=====>                             17%][Progress:====>                         15%] [Cov:======>                            18%][Progress:====>                         15%] [Cov:=======>                           20%][Progress:====>                         15%] [Cov:=======>                           22%][Progress:====>                         15%] [Cov:========>                          25%][Progress:====>                         15%] [Cov:=========>                         26%][Progress:=====>                        18%] [Cov:=>                                 3%][Progress:=====>                        18%] [Cov:==>                                7%][Progress:=====>                        18%] [Cov:======>                            19%][Progress:=====>                        18%] [Cov:=======>                           22%][Progress:=====>                        18%] [Cov:========>                          24%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:===========>                       32%][Progress:=====>                        18%] [Cov:===========>                       33%][Progress:======>                       21%] [Cov:=>                                 4%][Progress:======>                       21%] [Cov:===>                               9%][Progress:======>                       21%] [Cov:=======>                           21%][Progress:======>                       21%] [Cov:=========>                         26%][Progress:======>                       21%] [Cov:==========>                        29%][Progress:======>                       21%] [Cov:===========>                       33%][Progress:======>                       21%] [Cov:=============>                     38%][Progress:======>                       21%] [Cov:=============>                     39%][Progress:======>                       23%] [Cov:=>                                 3%][Progress:======>                       23%] [Cov:==>                                6%][Progress:======>                       23%] [Cov:======>                            19%][Progress:======>                       23%] [Cov:=======>                           22%][Progress:======>                       23%] [Cov:========>                          24%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:===========>                       33%][Progress:=======>                      26%] [Cov:>                                  2%][Progress:=======>                      26%] [Cov:=>                                 5%][Progress:=======>                      26%] [Cov:=====>                             17%][Progress:=======>                      26%] [Cov:======>                            19%][Progress:=======>                      26%] [Cov:=======>                           21%][Progress:=======>                      26%] [Cov:========>                          23%][Progress:=======>                      26%] [Cov:========>                          25%][Progress:=======>                      26%] [Cov:=========>                         26%][Progress:========>                     28%] [Cov:=>                                 3%][Progress:========>                     28%] [Cov:=>                                 5%][Progress:========>                     28%] [Cov:======>                            18%][Progress:========>                     28%] [Cov:=======>                           20%][Progress:========>                     28%] [Cov:=======>                           22%][Progress:========>                     28%] [Cov:=========>                         26%][Progress:========>                     28%] [Cov:==========>                        29%][Progress:========>                     28%] [Cov:==========>                        30%][Progress:========>                     28%] [Cov:==========>                        31%][Progress:=========>                    30%] [Cov:=>                                 3%][Progress:=========>                    30%] [Cov:=>                                 5%][Progress:=========>                    30%] [Cov:======>                            18%][Progress:=========>                    30%] [Cov:=======>                           20%][Progress:=========>                    30%] [Cov:=======>                           22%][Progress:=========>                    30%] [Cov:========>                          25%][Progress:=========>                    30%] [Cov:==========>                        29%][Progress:=========>                    31%] [Cov:========>                          25%][Progress:=========>                    31%] [Cov:==========>                        29%][Progress:=========>                    31%] [Cov:===========>                       33%][Progress:=========>                    31%] [Cov:===========>                       34%][Progress:==========>                   35%] [Cov:=>                                 3%][Progress:==========>                   35%] [Cov:=>                                 5%][Progress:==========>                   35%] [Cov:======>                            18%][Progress:==========>                   35%] [Cov:=======>                           20%][Progress:==========>                   35%] [Cov:=======>                           21%][Progress:==========>                   35%] [Cov:========>                          24%][Progress:==========>                   35%] [Cov:=========>                         27%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=>                                 3%][Progress:==========>                   36%] [Cov:=>                                 5%][Progress:==========>                   36%] [Cov:=====>                             17%][Progress:==========>                   36%] [Cov:=======>                           20%][Progress:==========>                   36%] [Cov:=======>                           21%][Progress:==========>                   36%] [Cov:========>                          25%][Progress:==========>                   36%] [Cov:==========>                        29%][Progress:===========>                  38%] [Cov:>                                  2%][Progress:===========>                  38%] [Cov:=>                                 4%][Progress:===========>                  38%] [Cov:=====>                             17%][Progress:===========>                  38%] [Cov:======>                            18%][Progress:===========>                  38%] [Cov:=======>                           20%][Progress:===========>                  38%] [Cov:========>                          23%][Progress:===========>                  38%] [Cov:=========>                         26%][Progress:===========>                  38%] [Cov:=========>                         27%][Progress:============>                 40%] [Cov:=>                                 3%][Progress:============>                 40%] [Cov:=>                                 5%][Progress:============>                 40%] [Cov:======>                            18%][Progress:============>                 41%] [Cov:=======>                           20%][Progress:============>                 41%] [Cov:=======>                           22%][Progress:============>                 41%] [Cov:========>                          24%][Progress:============>                 41%] [Cov:=========>                         27%][Progress:============>                 41%] [Cov:=============>                     39%][Progress:============>                 43%] [Cov:=========>                         26%][Progress:============>                 43%] [Cov:=========>                         27%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:===========>                       33%][Progress:=============>                45%] [Cov:=====>                             15%][Progress:=============>                45%] [Cov:=========>                         26%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       33%][Progress:=============>                45%] [Cov:============>                      35%][Progress:=============>                46%] [Cov:=======>                           20%][Progress:=============>                46%] [Cov:===========>                       33%][Progress:=============>                46%] [Cov:===========>                       34%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:============================>      81%][Progress:===============>              50%] [Cov:============================>      80%][Progress:===============>              50%] [Cov:============================>      81%][Progress:===============>              53%] [Cov:============================>      80%][Progress:===============>              53%] [Cov:============================>      81%][Progress:===============>              53%] [Cov:============================>      81%][Progress:================>             55%] [Cov:============================>      80%][Progress:================>             55%] [Cov:============================>      81%][Progress:=================>            58%] [Cov:============================>      81%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      80%][Progress:==================>           63%] [Cov:============================>      81%][Progress:===================>          65%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      81%][Progress:====================>         68%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      81%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      81%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      81%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      80%][Progress:======================>       76%] [Cov:============================>      81%][Progress:======================>       76%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      80%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      81%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][MASTER] 07:39:24.880 [logback-1] WARN  ResetExecutor - Stopped resetting of classes due to timeout
[Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][MASTER] 07:39:38.092 [logback-1] WARN  TimeController - Operation 'update from archive' took too long: 12168ms
[Progress:==============================100%] [Cov:==============================>    88%]
* Search finished after 75s and 8 generations, 15433 statements, best individual has fitness: 5079.8530994843295
[MASTER] 07:39:39.461 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 15 seconds more than allowed.
* Minimizing test suite
[MASTER] 07:40:53.459 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 1129
* Number of covered goals: 1015
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 1058
* Number of covered goals: 917
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 76%
* Total number of goals: 874
* Number of covered goals: 667
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 341
* Number of covered goals: 279
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 143
* Number of covered goals: 143
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 143
* Number of covered goals: 143
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 74%
* Total number of goals: 1058
* Number of covered goals: 788
* Generated 195 tests with total length 2347
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Compiling and checking tests
[MASTER] 07:41:44.958 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 07:41:44.959 [logback-1] WARN  JUnitAnalyzer - Failing test: String string0 = "YKtz}jm[;__#G,ls<H";
String string1 = StringUtils.rightPad("YKtz}jm[;__#G,ls<H", 0, 'f');
boolean boolean0 = StringUtils.isAlphaSpace("YKtz}jm[;__#G,ls<H");
String string2 = "IllegalAccessException occurred during 1.6 backcompat code";
String string3 = StringUtils.center("IllegalAccessException occurred during 1.6 backcompat code", 0, "");
String string4 = "TQWZ.E*c #";
boolean boolean1 = StringUtils.containsOnly("TQWZ.E*c #", "");
String string5 = StringUtils.trimToEmpty("YKtz}jm[;__#G,ls<H");
int int0 = Integer.MAX_VALUE;
int int1 = StringUtils.lastIndexOf("CP$<", 'f', Integer.MAX_VALUE);
String string6 = StringUtils.left("IllegalAccessException occurred during 1.6 backcompat code", Integer.MAX_VALUE);
String string7 = StringUtils.defaultString((String) null);
boolean boolean2 = StringUtils.containsOnly((String) null, "");
String string8 = "8h(]sHvBfw<d+";
String string9 = StringUtils.leftPad(string8, int0, string0);
boolean boolean3 = StringUtils.isBlank(string5);
boolean boolean4 = StringUtils.endsWith(string4, string5);
String string10 = "";
int int2 = (-869);
String string11 = StringUtils.substring(string10, int2);
LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
Object[] objectArray0 = linkedList0.toArray();
char char0 = 'j';
String string12 = StringUtils.join((Iterable<?>) linkedList0, char0);
String string13 = null;
char char1 = '<';
int int3 = StringUtils.indexOf(string13, char1, int2);
String string14 = "";
String string15 = "J|q$d=^+(DE";
boolean boolean5 = StringUtils.equalsIgnoreCase(string14, string15);
int int4 = 2737;
int int5 = StringUtils.ordinalIndexOf(string14, string2, int4);

[MASTER] 07:41:45.983 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 07:41:45.985 [logback-1] WARN  JUnitAnalyzer - Failing test: Locale locale0 = Locale.CANADA_FRENCH;
Locale locale1 = (Locale)locale0.clone();
Locale locale2 = Locale.forLanguageTag("user.country");
String string0 = locale2.getDisplayCountry();
String string1 = locale0.getDisplayScript(locale2);
String string2 = StringUtils.lowerCase("user.country", locale0);
String[] stringArray0 = new String[5];
stringArray0[0] = "user.country";
stringArray0[1] = "user.country";
LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
Locale locale3 = new Locale("user.country", "");
Set<String> set0 = locale3.getUnicodeLocaleKeys();
Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
stringArray0[2] = "user.country";
stringArray0[3] = "";
String string3 = "6!";
stringArray0[4] = "6!";
int int0 = StringUtils.indexOfAny("", stringArray0);
String string4 = StringUtils.capitalize("");
String string5 = " vs ";
int int1 = Integer.MAX_VALUE;
char char0 = 'c';
String string6 = StringUtils.leftPad(string5, int1, char0);
boolean boolean0 = StringUtils.isBlank(string3);
String string7 = "(fk>*M189\"?flnIR$9i";
String string8 = "";
int int2 = 57;
String string9 = StringUtils.replace(string4, string7, string8, int2);
String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(string3);
String string10 = "yCNb{";
String string11 = StringUtils.replace(stringArray0[1], string10, string5);
String string12 = "Ka:g\\KJJ:gmF6%eP*";
int int3 = 405;
String string13 = StringUtils.leftPad(string12, int3);
String string14 = null;
String string15 = "";
String string16 = StringUtils.chomp(string14, string15);

* Writing JUnit test case 'StringUtils_ESTest' to evosuite-tests
* Done!

* Computation finished
