--- /src/com/google/javascript/jscomp/ControlFlowAnalysis.java
+++ /src/com/google/javascript/jscomp/ControlFlowAnalysis.java

@@ -33,6 +33,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.PriorityQueue;
+import sketch4j.request.Sketch4J;
 
 /**
  * This is a compiler pass that computes a control flow graph.
@@ -764,7 +765,7 @@
         } else if (parent.getLastChild() == node){
           if (cfa != null) {
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
+                cfa.createEdge(fromNode, ((Branch) Sketch4J.EXP(Branch.class, new String[] { "Branch.ON_TRUE", "Branch.ON_FALSE", "Branch.UNCOND", "Branch.ON_EX", "Branch.SYN_BLOCK" }, new Object[] { Branch.ON_TRUE, Branch.ON_FALSE, Branch.UNCOND, Branch.ON_EX, Branch.SYN_BLOCK }, 0, true, 1, 0)), finallyNode);
             }
           }
           return computeFollowNode(fromNode, parent, cfa);
