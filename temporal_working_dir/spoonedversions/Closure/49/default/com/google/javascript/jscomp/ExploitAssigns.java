

package com.google.javascript.jscomp;


class ExploitAssigns extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
	@java.lang.Override
	com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
		for (com.google.javascript.rhino.Node child = subtree.getFirstChild(); child != null;) {
			com.google.javascript.rhino.Node next = child.getNext();
			if (com.google.javascript.jscomp.NodeUtil.isExprAssign(child)) {
				collapseAssign(child.getFirstChild(), child, subtree);
			}
			child = next;
		}
		return subtree;
	}

	private void collapseAssign(com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node expr, com.google.javascript.rhino.Node exprParent) {
		com.google.javascript.rhino.Node leftValue = assign.getFirstChild();
		com.google.javascript.rhino.Node rightValue = leftValue.getNext();
		if ((isCollapsibleValue(leftValue, true)) && (collapseAssignEqualTo(expr, exprParent, leftValue))) {
			reportCodeChange();
		}else
			if ((isCollapsibleValue(rightValue, false)) && (collapseAssignEqualTo(expr, exprParent, rightValue))) {
				reportCodeChange();
			}else
				if ((rightValue.getType()) == (com.google.javascript.rhino.Token.ASSIGN)) {
					collapseAssign(rightValue, expr, exprParent);
				}
			
		
	}

	private boolean isCollapsibleValue(com.google.javascript.rhino.Node value, boolean isLValue) {
		switch (value.getType()) {
			case com.google.javascript.rhino.Token.GETPROP :
				return (!isLValue) || ((value.getFirstChild().getType()) == (com.google.javascript.rhino.Token.THIS));
			case com.google.javascript.rhino.Token.NAME :
				return true;
			default :
				return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value);
		}
	}

	private boolean collapseAssignEqualTo(com.google.javascript.rhino.Node expr, com.google.javascript.rhino.Node exprParent, com.google.javascript.rhino.Node value) {
		com.google.javascript.rhino.Node assign = expr.getFirstChild();
		com.google.javascript.rhino.Node parent = exprParent;
		com.google.javascript.rhino.Node next = expr.getNext();
		while (next != null) {
			switch (next.getType()) {
				case com.google.javascript.rhino.Token.AND :
				case com.google.javascript.rhino.Token.OR :
				case com.google.javascript.rhino.Token.HOOK :
				case com.google.javascript.rhino.Token.IF :
				case com.google.javascript.rhino.Token.RETURN :
				case com.google.javascript.rhino.Token.EXPR_RESULT :
					parent = next;
					next = next.getFirstChild();
					break;
				case com.google.javascript.rhino.Token.VAR :
					if (next.getFirstChild().hasChildren()) {
						parent = next.getFirstChild();
						next = parent.getFirstChild();
						break;
					}
					return false;
				case com.google.javascript.rhino.Token.GETPROP :
				case com.google.javascript.rhino.Token.NAME :
					if (next.isQualifiedName()) {
						java.lang.String nextName = next.getQualifiedName();
						if ((value.isQualifiedName()) && (nextName.equals(value.getQualifiedName()))) {
							if (!(isSafeReplacement(next, assign))) {
								return false;
							}
							exprParent.removeChild(expr);
							expr.removeChild(assign);
							parent.replaceChild(next, assign);
							return true;
						}
					}
					return false;
				case com.google.javascript.rhino.Token.ASSIGN :
					com.google.javascript.rhino.Node leftSide = next.getFirstChild();
					if (((leftSide.getType()) == (com.google.javascript.rhino.Token.NAME)) || (((leftSide.getType()) == (com.google.javascript.rhino.Token.GETPROP)) && ((leftSide.getFirstChild().getType()) == (com.google.javascript.rhino.Token.THIS)))) {
						parent = next;
						next = leftSide.getNext();
						break;
					}else {
						return false;
					}
				default :
					if ((com.google.javascript.jscomp.NodeUtil.isImmutableValue(next)) && (next.isEquivalentTo(value))) {
						exprParent.removeChild(expr);
						expr.removeChild(assign);
						parent.replaceChild(next, assign);
						return true;
					}
					return false;
			}
		} 
		return false;
	}

	private boolean isSafeReplacement(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node replacement) {
		if ((node.getType()) == (com.google.javascript.rhino.Token.NAME)) {
			return true;
		}
		com.google.common.base.Preconditions.checkArgument(((node.getType()) == (com.google.javascript.rhino.Token.GETPROP)));
		com.google.javascript.rhino.Node name = node.getFirstChild();
		if (((name.getType()) == (com.google.javascript.rhino.Token.NAME)) && (isNameAssignedTo(name.getString(), replacement))) {
			return false;
		}
		return true;
	}

	private boolean isNameAssignedTo(java.lang.String name, com.google.javascript.rhino.Node node) {
		for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
			if (isNameAssignedTo(name, c)) {
				return true;
			}
		}
		if ((node.getType()) == (com.google.javascript.rhino.Token.NAME)) {
			com.google.javascript.rhino.Node parent = node.getParent();
			if (((parent.getType()) == (com.google.javascript.rhino.Token.ASSIGN)) && ((parent.getFirstChild()) == node)) {
				if (name.equals(node.getString())) {
					return true;
				}
			}
		}
		return false;
	}
}

