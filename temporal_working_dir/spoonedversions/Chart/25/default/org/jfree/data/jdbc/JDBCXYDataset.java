

package org.jfree.data.jdbc;


public class JDBCXYDataset extends org.jfree.data.xy.AbstractXYDataset implements org.jfree.data.RangeInfo , org.jfree.data.xy.TableXYDataset , org.jfree.data.xy.XYDataset {
	private transient java.sql.Connection connection;

	private java.lang.String[] columnNames = new java.lang.String[]{  };

	private java.util.ArrayList rows;

	private double maxValue = 0.0;

	private double minValue = 0.0;

	private boolean isTimeSeries = false;

	private JDBCXYDataset() {
		org.jfree.data.jdbc.JDBCXYDataset.this.rows = new java.util.ArrayList();
	}

	public JDBCXYDataset(java.lang.String url, java.lang.String driverName, java.lang.String user, java.lang.String password) throws java.lang.ClassNotFoundException, java.sql.SQLException {
		this();
		java.lang.Class.forName(driverName);
		org.jfree.data.jdbc.JDBCXYDataset.this.connection = java.sql.DriverManager.getConnection(url, user, password);
	}

	public JDBCXYDataset(java.sql.Connection con) throws java.sql.SQLException {
		this();
		org.jfree.data.jdbc.JDBCXYDataset.this.connection = con;
	}

	public JDBCXYDataset(java.sql.Connection con, java.lang.String query) throws java.sql.SQLException {
		this(con);
		executeQuery(query);
	}

	public boolean isTimeSeries() {
		return org.jfree.data.jdbc.JDBCXYDataset.this.isTimeSeries;
	}

	public void setTimeSeries(boolean timeSeries) {
		org.jfree.data.jdbc.JDBCXYDataset.this.isTimeSeries = timeSeries;
	}

	public void executeQuery(java.lang.String query) throws java.sql.SQLException {
		executeQuery(org.jfree.data.jdbc.JDBCXYDataset.this.connection, query);
	}

	public void executeQuery(java.sql.Connection con, java.lang.String query) throws java.sql.SQLException {
		if (con == null) {
			throw new java.sql.SQLException("There is no database to execute the query.");
		}
		java.sql.ResultSet resultSet = null;
		java.sql.Statement statement = null;
		try {
			statement = con.createStatement();
			resultSet = statement.executeQuery(query);
			java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
			int numberOfColumns = metaData.getColumnCount();
			int numberOfValidColumns = 0;
			int[] columnTypes = new int[numberOfColumns];
			for (int column = 0; column < numberOfColumns; column++) {
				try {
					int type = metaData.getColumnType((column + 1));
					switch (type) {
						case java.sql.Types.NUMERIC :
						case java.sql.Types.REAL :
						case java.sql.Types.INTEGER :
						case java.sql.Types.DOUBLE :
						case java.sql.Types.FLOAT :
						case java.sql.Types.DECIMAL :
						case java.sql.Types.BIT :
						case java.sql.Types.DATE :
						case java.sql.Types.TIME :
						case java.sql.Types.TIMESTAMP :
						case java.sql.Types.BIGINT :
						case java.sql.Types.SMALLINT :
							++numberOfValidColumns;
							columnTypes[column] = type;
							break;
						default :
							columnTypes[column] = java.sql.Types.NULL;
							break;
					}
				} catch (java.sql.SQLException e) {
					columnTypes[column] = java.sql.Types.NULL;
					throw e;
				}
			}
			if (numberOfValidColumns <= 1) {
				throw new java.sql.SQLException("Not enough valid columns where generated by query.");
			}
			org.jfree.data.jdbc.JDBCXYDataset.this.columnNames = new java.lang.String[numberOfValidColumns - 1];
			int currentColumn = 0;
			for (int column = 1; column < numberOfColumns; column++) {
				if ((columnTypes[column]) != (java.sql.Types.NULL)) {
					org.jfree.data.jdbc.JDBCXYDataset.this.columnNames[currentColumn] = metaData.getColumnLabel((column + 1));
					++currentColumn;
				}
			}
			if ((org.jfree.data.jdbc.JDBCXYDataset.this.rows) != null) {
				for (int column = 0; column < (org.jfree.data.jdbc.JDBCXYDataset.this.rows.size()); column++) {
					java.util.ArrayList row = ((java.util.ArrayList) (org.jfree.data.jdbc.JDBCXYDataset.this.rows.get(column)));
					row.clear();
				}
				org.jfree.data.jdbc.JDBCXYDataset.this.rows.clear();
			}
			switch (columnTypes[0]) {
				case java.sql.Types.DATE :
				case java.sql.Types.TIME :
				case java.sql.Types.TIMESTAMP :
					org.jfree.data.jdbc.JDBCXYDataset.this.isTimeSeries = true;
					break;
				default :
					org.jfree.data.jdbc.JDBCXYDataset.this.isTimeSeries = false;
					break;
			}
			while (resultSet.next()) {
				java.util.ArrayList newRow = new java.util.ArrayList();
				for (int column = 0; column < numberOfColumns; column++) {
					java.lang.Object xObject = resultSet.getObject((column + 1));
					switch (columnTypes[column]) {
						case java.sql.Types.NUMERIC :
						case java.sql.Types.REAL :
						case java.sql.Types.INTEGER :
						case java.sql.Types.DOUBLE :
						case java.sql.Types.FLOAT :
						case java.sql.Types.DECIMAL :
						case java.sql.Types.BIGINT :
						case java.sql.Types.SMALLINT :
							newRow.add(xObject);
							break;
						case java.sql.Types.DATE :
						case java.sql.Types.TIME :
						case java.sql.Types.TIMESTAMP :
							newRow.add(new java.lang.Long(((java.util.Date) (xObject)).getTime()));
							break;
						case java.sql.Types.NULL :
							break;
						default :
							java.lang.System.err.println("Unknown data");
							columnTypes[column] = java.sql.Types.NULL;
							break;
					}
				}
				org.jfree.data.jdbc.JDBCXYDataset.this.rows.add(newRow);
			} 
			if ((org.jfree.data.jdbc.JDBCXYDataset.this.rows.size()) == 0) {
				java.util.ArrayList newRow = new java.util.ArrayList();
				for (int column = 0; column < numberOfColumns; column++) {
					if ((columnTypes[column]) != (java.sql.Types.NULL)) {
						newRow.add(new java.lang.Integer(0));
					}
				}
				org.jfree.data.jdbc.JDBCXYDataset.this.rows.add(newRow);
			}
			if ((org.jfree.data.jdbc.JDBCXYDataset.this.rows.size()) < 1) {
				org.jfree.data.jdbc.JDBCXYDataset.this.maxValue = 0.0;
				org.jfree.data.jdbc.JDBCXYDataset.this.minValue = 0.0;
			}else {
				java.util.ArrayList row = ((java.util.ArrayList) (org.jfree.data.jdbc.JDBCXYDataset.this.rows.get(0)));
				org.jfree.data.jdbc.JDBCXYDataset.this.maxValue = java.lang.Double.NEGATIVE_INFINITY;
				org.jfree.data.jdbc.JDBCXYDataset.this.minValue = java.lang.Double.POSITIVE_INFINITY;
				for (int rowNum = 0; rowNum < (org.jfree.data.jdbc.JDBCXYDataset.this.rows.size()); ++rowNum) {
					row = ((java.util.ArrayList) (org.jfree.data.jdbc.JDBCXYDataset.this.rows.get(rowNum)));
					for (int column = 1; column < numberOfColumns; column++) {
						java.lang.Object testValue = row.get(column);
						if (testValue != null) {
							double test = ((java.lang.Number) (testValue)).doubleValue();
							if (test < (org.jfree.data.jdbc.JDBCXYDataset.this.minValue)) {
								org.jfree.data.jdbc.JDBCXYDataset.this.minValue = test;
							}
							if (test > (org.jfree.data.jdbc.JDBCXYDataset.this.maxValue)) {
								org.jfree.data.jdbc.JDBCXYDataset.this.maxValue = test;
							}
						}
					}
				}
			}
			fireDatasetChanged();
		} finally {
			if (resultSet != null) {
				try {
					resultSet.close();
				} catch (java.lang.Exception e) {
				}
			}
			if (statement != null) {
				try {
					statement.close();
				} catch (java.lang.Exception e) {
				}
			}
		}
	}

	public java.lang.Number getX(int seriesIndex, int itemIndex) {
		java.util.ArrayList row = ((java.util.ArrayList) (org.jfree.data.jdbc.JDBCXYDataset.this.rows.get(itemIndex)));
		return ((java.lang.Number) (row.get(0)));
	}

	public java.lang.Number getY(int seriesIndex, int itemIndex) {
		java.util.ArrayList row = ((java.util.ArrayList) (org.jfree.data.jdbc.JDBCXYDataset.this.rows.get(itemIndex)));
		return ((java.lang.Number) (row.get((seriesIndex + 1))));
	}

	public int getItemCount(int seriesIndex) {
		return org.jfree.data.jdbc.JDBCXYDataset.this.rows.size();
	}

	public int getItemCount() {
		return getItemCount(0);
	}

	public int getSeriesCount() {
		return org.jfree.data.jdbc.JDBCXYDataset.this.columnNames.length;
	}

	public java.lang.Comparable getSeriesKey(int seriesIndex) {
		if ((seriesIndex < (org.jfree.data.jdbc.JDBCXYDataset.this.columnNames.length)) && ((org.jfree.data.jdbc.JDBCXYDataset.this.columnNames[seriesIndex]) != null)) {
			return org.jfree.data.jdbc.JDBCXYDataset.this.columnNames[seriesIndex];
		}else {
			return "";
		}
	}

	public void close() {
		try {
			org.jfree.data.jdbc.JDBCXYDataset.this.connection.close();
		} catch (java.lang.Exception e) {
			java.lang.System.err.println("JdbcXYDataset: swallowing exception.");
		}
	}

	public double getRangeLowerBound(boolean includeInterval) {
		return org.jfree.data.jdbc.JDBCXYDataset.this.minValue;
	}

	public double getRangeUpperBound(boolean includeInterval) {
		return org.jfree.data.jdbc.JDBCXYDataset.this.maxValue;
	}

	public org.jfree.data.Range getRangeBounds(boolean includeInterval) {
		return new org.jfree.data.Range(org.jfree.data.jdbc.JDBCXYDataset.this.minValue, org.jfree.data.jdbc.JDBCXYDataset.this.maxValue);
	}
}

