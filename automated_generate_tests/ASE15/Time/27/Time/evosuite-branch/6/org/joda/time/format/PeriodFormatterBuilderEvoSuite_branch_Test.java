/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:44:44 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;


public class PeriodFormatterBuilderEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = ">abT1tVI?>";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      linkedList0.addFirst(object0);
      assertEquals(2, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(2, linkedList0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append(periodFormatter0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      String string0 = "Resource not found: \"";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
  }

  @Test
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "weekyears";
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      long long0 = 1446L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 0;
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Composite0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "+0G";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(string0, string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder3.toFormatter();
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+0G\" is malformed at \"G\"
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      int int0 = 9;
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[9];
      int int1 = (-3474);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(stringArray0[3]);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int1, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string1, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Locale locale0 = null;
      int int2 = periodFormatterBuilder_Separator1.parseInto((ReadWritablePeriod) mutablePeriod0, stringArray0[2], int1, locale0);
      assertEquals((-3474), int2);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotSame(string1, string0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "+0G";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+0G\" is malformed at \"G\"
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "+0G";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string1 = "$<W<kNX[(7S$Pz%pl{";
      assertNotSame(string1, string0);
      
      String string2 = "td[?$k8o0!Gg[!:";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(string1, string2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder3.toFormatter();
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatter0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+0G\"
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "E].GtDMu4Y";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(stringArray0[0], boolean1);
      assertNotNull(mockFileOutputStream0);
      assertFalse(boolean1 == boolean0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) mockFileOutputStream0);
      assertNotNull(outputStreamWriter0);
      assertFalse(boolean1 == boolean0);
      
      long long0 = 0L;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period(long0, long0, (Chronology) gregorianChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Locale locale0 = new Locale(stringArray0[0], string0);
      assertNotNull(locale0);
      assertEquals("e].gtdmu4y", locale0.getLanguage());
      assertEquals("E].GTDMU4Y", locale0.getCountry());
      assertEquals("e].gtdmu4y_E].GTDMU4Y", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      periodFormatterBuilder_Separator1.printTo((Writer) outputStreamWriter0, (ReadablePeriod) period0, locale0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(8, period0.size());
      assertEquals("e].gtdmu4y", locale0.getLanguage());
      assertEquals("E].GTDMU4Y", locale0.getCountry());
      assertEquals("e].gtdmu4y_E].GTDMU4Y", locale0.toString());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "0TG";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      int int0 = 0;
      String string1 = "Fixing duplicate name key - ";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      Hours hours0 = Hours.hours(int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(hours0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(1, hours0.size());
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(mutablePeriod0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      
      String string2 = periodFormatter0.print((ReadablePeriod) mutablePeriod0);
      assertEquals("", string2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(string2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "0TG";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      int int0 = 0;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      Hours hours0 = Hours.hours(int1);
      assertNotNull(hours0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1, hours0.size());
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      
      String string1 = periodFormatter0.print((ReadablePeriod) mutablePeriod0);
      assertEquals("0.000", string1);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
  }

  @Test
  public void test11()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "1;";
      boolean boolean0 = false;
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatter0.getPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = (PeriodFormatterBuilder.Literal)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Literal1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      boolean boolean1 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1, boolean0, boolean1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) hours0, locale0);
      assertEquals(0, int0);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      String string0 = "America/Phoenix";
      Years years0 = Years.MIN_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatter0.getPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = false;
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = PeriodFormatterBuilder.Literal.EMPTY;
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Literal1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(stringArray0[0], string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1, boolean0, boolean0);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) years0, locale0);
      assertEquals(0, int0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1, years0.size());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
  }

  @Test
  public void test13()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "1;";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder3);
      
      boolean boolean0 = true;
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1, boolean0, boolean0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) hours0, locale0);
      assertEquals(6, int0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "1;";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1, boolean0, boolean1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) hours0, locale0);
      assertEquals(4, int0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, hours0.size());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "=a'I,#";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string1 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string1, string0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "A%R,eD8 R.";
      int int0 = (-567);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      boolean boolean0 = true;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = null;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      String[] stringArray0 = new String[8];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string1, string1, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "sl%WsjJ1+Y?z1";
      // Undeclared exception!
      try {
        Years years0 = Years.parseYears(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"sl%WsjJ1+Y?z1\"
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "+0G";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(string0, string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+0G\" is malformed at \"G\"
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "1;";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1, boolean0, boolean0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      // Undeclared exception!
      try {
        int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) hours0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "]8{'bu~voql*\\";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = 0;
      boolean boolean0 = true;
      int int1 = 1317;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int1, int0, boolean0, int1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[0], periodFormatterBuilder_FieldFormatterArray0[4], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, weeks0.size());
      
      Locale locale0 = new Locale(stringArray0[1], string0, stringArray0[1]);
      assertNotNull(locale0);
      assertEquals("]8{'BU~VOQL*\\", locale0.getCountry());
      assertEquals("]8{'bu~voql*\\_]8{'BU~VOQL*\\_]8{'bu~voql*\\", locale0.toString());
      assertEquals("]8{'bu~voql*\\", locale0.getVariant());
      assertEquals("]8{'bu~voql*\\", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) mutablePeriod0, int1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "]8{'bu~voql*\\";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = 0;
      boolean boolean0 = true;
      int int1 = 1317;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int2 = 7;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int2, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      periodFormatterBuilder_FieldFormatterArray0[3] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[3]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[3], periodFormatterBuilder_FieldFormatterArray0[4], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      
      Locale locale0 = new Locale(stringArray0[0], string0, stringArray0[0]);
      assertNotNull(locale0);
      assertEquals("]8{'BU~VOQL*\\", locale0.getCountry());
      assertEquals("]8{'bu~voql*\\", locale0.getVariant());
      assertEquals("]8{'bu~voql*\\_]8{'BU~VOQL*\\_]8{'bu~voql*\\", locale0.toString());
      assertEquals("]8{'bu~voql*\\", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        int int3 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) mutablePeriod0, int1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ".8{'Bu~vOqL*\\";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".8{'Bu~vOqL*\\\"
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = ".8{'Bu~vOqL*\\";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".8{'Bu~vOqL*\\\"
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "Id must not be null";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.parse(string0, int0);
      assertEquals(19, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int1, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      periodFormatterBuilder_FieldFormatterArray0[1] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[1]);
      
      ReadWritablePeriod readWritablePeriod0 = null;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      
      int int2 = periodFormatterBuilder_FieldFormatterArray0[1].parseInto(readWritablePeriod0, string0, int0, locale0);
      assertEquals((-20), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "0TG";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0TG\" is malformed at \"TG\"
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "9./}W|HiCd<vs";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, stringArray0[0], stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1, boolean0, boolean0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertFalse(periodFormatterBuilder_Composite0.equals((Object)periodFormatterBuilder_Composite1));
      
      Minutes minutes0 = Minutes.MIN_VALUE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertNotNull(periodFormatter0);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertFalse(periodFormatterBuilder_Composite0.equals((Object)periodFormatterBuilder_Composite1));
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Locale locale0 = periodFormatter0.getLocale();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertNull(locale0);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertFalse(periodFormatterBuilder_Composite0.equals((Object)periodFormatterBuilder_Composite1));
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) mockFileWriter0, (ReadablePeriod) minutes0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-2281);
      int int1 = 1117;
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      int int2 = 0;
      String string0 = "No printer or parser supplied";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int1, int1, int1, boolean0, int2, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("No printer or parser supplied", stringBuffer0.toString());
      assertEquals(45, stringBuffer0.capacity());
      assertEquals(29, stringBuffer0.length());
      
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(8, period0.size());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("No printer or parser suppliedNo printer or parser suppliedo printer or parser supplied", stringBuffer0.toString());
      assertEquals(1204, stringBuffer0.length());
      assertEquals(1502, stringBuffer0.capacity());
      assertEquals(8, period0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1079);
      Period period0 = new Period(int0, int1, int0, int0, int0, int0, int1, int0);
      assertNotNull(period0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(8, period0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.standardHoursIn((ReadablePeriod) period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-1079MT-1079S
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1079);
      Period period0 = new Period(int0, int1, int1, int1, int1, int0, int1, int1);
      assertNotNull(period0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, period0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.standardHoursIn((ReadablePeriod) period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-1079M-1079W-1079DT-1079H-1080.079S
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "1;";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = (PeriodFormatterBuilder.Separator)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1, boolean0, boolean0);
      assertNotSame(periodFormatterBuilder_Separator2, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_Separator2, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator2);
      assertNotSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator2);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator2);
      assertFalse(periodFormatterBuilder_Separator2.equals((Object)periodFormatterBuilder_Separator0));
      assertFalse(periodFormatterBuilder_Separator2.equals((Object)periodFormatterBuilder_Separator1));
      assertFalse(periodFormatterBuilder_Separator1.equals((Object)periodFormatterBuilder_Separator2));
      assertFalse(periodFormatterBuilder_Separator0.equals((Object)periodFormatterBuilder_Separator2));
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      // Undeclared exception!
      try {
        int int0 = periodFormatterBuilder_Separator2.calculatePrintedLength((ReadablePeriod) hours0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "1;";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      boolean boolean0 = true;
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1, boolean0, boolean0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) hours0, locale0);
      assertEquals(4, int0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, hours0.size());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "Z$xLfS<B";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      int int0 = 0;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[9];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[0], string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      periodFormatterBuilder_FieldFormatterArray0[3] = periodFormatterBuilder_FieldFormatterArray0[0];
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[3]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[3], periodFormatterBuilder_FieldFormatterArray0[1], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Hours hours0 = Hours.ONE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      
      int int1 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) seconds0, int0, locale0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "Zk4DC@";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 20503125;
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertEquals((-20503126), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "+0G";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string1 = "$<W<kNX[(7S$Pz[T%pl{";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(string1, string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+0G\" is malformed at \"0G\"
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = ".8{'Bu~vOqL*\\";
      String string1 = "]";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string1, int0);
      assertEquals((-2), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "vdsl`.l`f^G{K@";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String string1 = "hchYK H0ux{(ya)";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_PluralAffix0.parse(string1, int0);
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = ".8{'Bu~vOqL*\\";
      String string1 = "]";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertEquals((-16), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "}./";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 2817;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      periodFormatterBuilder_PluralAffix0.printTo((Writer) charArrayWriter0, int0);
      assertEquals(3, charArrayWriter0.size());
      assertEquals("}./", charArrayWriter0.toString());
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "=a'I,#";
      int int0 = 679;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try {
        periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "Vx|T2B2j:465AVSK[";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 1;
      int int1 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(int0);
      assertEquals(17, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = " h0uT6";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 5;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertEquals((-6), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "0ux{(y";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "5P`%x<Kj{q3rEW";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string1, int0);
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = ".8{'Bu~vOqL*\\";
      String string1 = ".nr!KP{y\"Z}-pFW#f";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
  }

  @Test
  public void test44()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "1;";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder_Composite0);
  }

  @Test
  public void test45()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = null;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(false, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
  }

  @Test
  public void test46()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "hchYK H0ux{(ya)";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(stringArray0[0], stringArray0[0], stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "1;";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendLiteral(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator(string0, string0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
  }

  @Test
  public void test48()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "1;";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparator(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "Zk4DC@";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[2];
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string0, stringArray0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix(stringArray0[1], stringArray0[5]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "hchyzk4dc@{(ya)";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "0TG";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "hchYK H0ux{(ya)";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test
  public void test56()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "hchyzk4dc@{(ya)";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Resource not found: \"";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      periodFormatterBuilder0.clear();
  }

  @Test
  public void test61()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      String string0 = "America/Phoenix";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatter0.getPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = false;
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = PeriodFormatterBuilder.Literal.EMPTY;
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Literal1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(stringArray0[0], string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1, boolean0, boolean0);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodParser periodParser0 = null;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, periodParser0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodParser periodParser1 = periodFormatterBuilder1.toParser();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNull(periodParser1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = "A%R,eD8 R.";
      int int0 = (-567);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      boolean boolean0 = true;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int1 = 4;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int1, boolean0, int1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      periodFormatterBuilder_FieldFormatterArray0[1] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[1]);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatterArray0[1], periodFormatterBuilder_PluralAffix0);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      Days days0 = Days.SEVEN;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Weeks weeks0 = days0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      int int2 = periodFormatterBuilder_FieldFormatter1.calculatePrintedLength((ReadablePeriod) period0, locale0);
      assertEquals(34, int2);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = "millisOfDay";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      int int0 = 0;
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) mockFileWriter0, int0);
  }

  @Test
  public void test64()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test65()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(boolean0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test66()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test67()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 679;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(int0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test68()  throws Throwable  {
      String string0 = "vdsl`.l`f^G{K@";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test69()  throws Throwable  {
      String string0 = "}./";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0, string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test70()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Vx|T2B2j:465AVSK[";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test71()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test72()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 1;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(int0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test73()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = "E].GtDMu4Y";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(stringArray0[0], boolean0);
      assertNotNull(mockFileOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) mockFileOutputStream0);
      assertNotNull(outputStreamWriter0);
      
      long long0 = 0L;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period(long0, long0, (Chronology) gregorianChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Locale locale0 = new Locale(stringArray0[2], string0);
      assertNotNull(locale0);
      assertEquals("e].gtdmu4y", locale0.getLanguage());
      assertEquals("E].GTDMU4Y", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("e].gtdmu4y_E].GTDMU4Y", locale0.toString());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) outputStreamWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test75()  throws Throwable  {
      String string0 = "'PGi=oRQ[>)]`Zk.XA ";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[0]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      ReadablePeriod readablePeriod0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, readablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
