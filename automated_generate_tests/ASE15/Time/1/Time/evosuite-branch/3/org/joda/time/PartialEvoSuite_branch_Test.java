/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:39:52 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class PartialEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = new Partial((Chronology) gregorianChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      
      String string1 = partial0.toString(string0, locale0);
      assertNotNull(string1);
      assertEquals(0, partial0.size());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("[]", string1);
  }

  @Test
  public void test01()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = "ZFr;+";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[1].getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[2].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[2].toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[3].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[3].toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[3];
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[4].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[4].getName());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[4];
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[5].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[5].getName());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[6].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[6].toString());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[7].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[7].toString());
      
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, partial0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, partial0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("--00", string0);
      
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, partial0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("--00", string1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 314;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields((Date) mockDate0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      assertEquals("2241-01-21", string0);
      
      String string1 = null;
      String string2 = partial0.toString(string1);
      assertNotNull(string2);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertEquals("2241-01-21", string2);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 10;
      MonthDay monthDay0 = new MonthDay(int0, int0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(2, monthDay0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, partial0.size());
      assertEquals(3, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      
      String string0 = partial1.toString();
      assertNotNull(string0);
      assertEquals(2, monthDay0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, partial0.size());
      assertEquals(3, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("[monthOfYear=10, dayOfMonth=10, hourOfHalfday=10]", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(0, partial0.size());
      assertEquals("[]", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 314;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields((Date) mockDate0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      assertEquals("2241-01-21", string0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Thu Jan 21 07:19:14 GMT 2241", mockDate0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      int int0 = 57;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.addToCopy(int0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertEquals(1, partial1.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      int int0 = 57;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      long long0 = 1256L;
      DateTime dateTime0 = new DateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(dateTime0);
      assertEquals(1256L, dateTime0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      assertEquals(1256L, dateTime0.getMillis());
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial((Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      long long0 = (-20L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight();
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(0, partial0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      long long0 = 1256L;
      DateTime dateTime0 = new DateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(dateTime0);
      assertEquals(1256L, dateTime0.getMillis());
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(1256L, dateTime0.getMillis());
      
      Partial partial1 = partial0.minus((ReadablePeriod) period0);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1256L, dateTime0.getMillis());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test13()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      long long0 = 1256L;
      int int0 = 0;
      int int1 = partial0.getValue(int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      DateTime dateTime0 = new DateTime(long0, (Chronology) iSOChronology0);
      assertNotNull(dateTime0);
      assertEquals(1256L, dateTime0.getMillis());
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(1256L, dateTime0.getMillis());
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) period0, int1);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals(1256L, dateTime0.getMillis());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test14()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.plus(readablePeriod0);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Period period0 = new Period((long) int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = period0.getFieldType(int0);
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotNull(partial1);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int0 = 13;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Period period0 = new Period((long) int0);
      assertNotNull(period0);
      
      int int1 = 0;
      DurationFieldType durationFieldType0 = period0.getFieldType(int1);
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotNull(partial1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = dateTimeFieldTypeArray0[0].getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      
      int[] intArray0 = new int[4];
      int int0 = 1348;
      intArray0[3] = int0;
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 1348}, intArray0);
      assertEquals(1, partial0.size());
      
      DurationFieldType durationFieldType0 = dateTimeFieldTypeArray0[0].getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, intArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      int int0 = 950;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = (-586);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      int int1 = 0;
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertFalse(int1 == int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      
      Partial partial2 = partial1.withField(dateTimeFieldType0, int0);
      assertNotNull(partial2);
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial2.size());
      assertEquals(1, partial0.size());
      assertFalse(int1 == int0);
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertFalse(partial2.equals((Object)partial1));
      assertTrue(partial2.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial2, partial0);
      assertNotSame(partial2, partial1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 20;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals(0, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test22()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldTypeArray0[0]);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test23()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 1559;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1559 for minuteOfDay must not be larger than 1439
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 1129;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1129 for era must not be larger than 1
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], intArray0[2]);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test26()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = new Partial((Chronology) gregorianChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 2314;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial((Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) copticChronology0);
      assertNotNull(partial1);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test28()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) buddhistChronology0);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test29()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      int int0 = partial0.compareTo((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(0, int0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(5, partial1.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = localDateTime0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals(4, localDateTime0.size());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType1);
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      
      int[] intArray0 = new int[3];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: yearOfCentury < year
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = localDateTime0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals(4, localDateTime0.size());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals(4, localDateTime0.size());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals(4, localDateTime0.size());
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[3];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year and year
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = 1066;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0, int0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", skipUndoDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = skipUndoDateTimeField0.getType();
      assertNotNull(dateTimeFieldType1);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", skipUndoDateTimeField0.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", skipUndoDateTimeField0.getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[2].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[2].getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[3].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[3].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[4].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[4].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[5].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[5].getName());
      
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: clockhourOfHalfday < centuryOfEra
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = localDateTime0.getFieldType(int0);
      assertNotNull(dateTimeFieldType1);
      assertEquals(4, localDateTime0.size());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals(4, localDateTime0.size());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      
      int[] intArray0 = new int[3];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: year < era
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("era", dateTimeFieldTypeArray0[5].toString());
      assertEquals("era", dateTimeFieldTypeArray0[5].getName());
      
      int[] intArray0 = new int[6];
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(strictChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate unsupported: era and era
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType1);
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals("era", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType2);
      assertEquals("yearOfCentury", dateTimeFieldType2.toString());
      assertEquals("yearOfCentury", dateTimeFieldType2.getName());
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType2, intArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType1);
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, intArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 2
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[6];
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[5];
      DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType1);
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, intArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: centuryOfEra and centuryOfEra
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0, int0);
      assertNotNull(julianChronology0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      int int0 = 57;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = (-586);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 54;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial((Chronology) buddhistChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      // Undeclared exception!
      try {
        int int1 = partial_Property0.compareTo((ReadablePartial) partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      int int0 = 57;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
  }

  @Test
  public void test46()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[14];
      int[] intArray0 = new int[11];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(14, partial0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldTypeArray0[0]);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(14, partial0.size());
      
      String string0 = "zcg+_\\m+}c";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = (-14);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial_Property0.getPartial();
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 20;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
      }
  }
}
