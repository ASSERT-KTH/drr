/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:37 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class PartialEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-2);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      String string0 = partial0.toStringList();
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("[weekyear=-2]", string0);
      assertNotNull(string0);
      
      String string1 = null;
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(locale0);
      
      String string2 = partial0.toString(string1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("-0002", string2);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
  }

  @Test
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toString();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("[centuryOfEra=0]", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      String string0 = partial0.toStringList();
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("[weekyear=0]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toStringList();
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertEquals("[monthOfYear=2, dayOfMonth=14]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, partial0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("0000", string1);
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) gregorianChronology0, readableDateTime0, readableDateTime0);
      assertNotNull(limitChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(limitChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(6, partial0.size());
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test06()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals(0, partial0.size());
      assertEquals("[]", string1);
      assertNotNull(string1);
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
  }

  @Test
  public void test08()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertEquals(2, partial0.size());
      assertEquals(2, monthDay0.size());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) monthDay0);
      assertEquals(2, partial0.size());
      assertEquals(2, monthDay0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Partial partial0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 32;
      Partial partial1 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial1.size());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(partial1);
      
      // Undeclared exception!
      try {
        boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 292272708;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      int int1 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int1);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      assertFalse(int1 == int0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0, (Chronology) copticChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertFalse(int0 == int1);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDateTime0);
      assertEquals(1, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertFalse(boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 11;
      Instant instant0 = new Instant((long) int0);
      assertEquals(11L, instant0.getMillis());
      assertNotNull(instant0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertEquals(11L, instant0.getMillis());
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, partial0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       JulianChronology julianChronology0 = JulianChronology.getInstance();
//       assertNotNull(julianChronology0);
//       
//       DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
//       assertEquals("minuteOfDay", dateTimeFieldType0.getName());
//       assertEquals("minuteOfDay", dateTimeFieldType0.toString());
//       assertNotNull(dateTimeFieldType0);
//       
//       dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
//       assertEquals("minuteOfDay", dateTimeFieldType0.getName());
//       assertEquals("minuteOfDay", dateTimeFieldType0.toString());
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].getName());
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].toString());
//       assertNotNull(dateTimeFieldTypeArray0[0]);
//       
//       dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[1].toString());
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[1].getName());
//       assertNotNull(dateTimeFieldTypeArray0[1]);
//       
//       dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[2].getName());
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[2].toString());
//       assertNotNull(dateTimeFieldTypeArray0[2]);
//       
//       dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[3].toString());
//       assertEquals("minuteOfDay", dateTimeFieldTypeArray0[3].getName());
//       assertNotNull(dateTimeFieldTypeArray0[3]);
//       
//       StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) julianChronology0);
//       assertNotNull(strictChronology0);
//       
//       DateTimeField dateTimeField0 = strictChronology0.monthOfYear();
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertNotNull(dateTimeField0);
//       
//       SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) julianChronology0, dateTimeField0);
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals(true, skipUndoDateTimeField0.isSupported());
//       assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
//       assertEquals(false, skipUndoDateTimeField0.isLenient());
//       assertEquals("monthOfYear", skipUndoDateTimeField0.getName());
//       assertNotNull(skipUndoDateTimeField0);
//       
//       DateTimeFieldType dateTimeFieldType1 = skipUndoDateTimeField0.getType();
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals(true, skipUndoDateTimeField0.isSupported());
//       assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
//       assertEquals(false, skipUndoDateTimeField0.isLenient());
//       assertEquals("monthOfYear", skipUndoDateTimeField0.getName());
//       assertEquals("monthOfYear", dateTimeFieldType1.getName());
//       assertEquals("monthOfYear", dateTimeFieldType1.toString());
//       assertNotNull(dateTimeFieldType1);
//       assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
//       assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
//       
//       dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
//       assertEquals("monthOfYear", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals(true, skipUndoDateTimeField0.isSupported());
//       assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
//       assertEquals(false, skipUndoDateTimeField0.isLenient());
//       assertEquals("monthOfYear", skipUndoDateTimeField0.getName());
//       assertEquals("monthOfYear", dateTimeFieldType1.getName());
//       assertEquals("monthOfYear", dateTimeFieldType1.toString());
//       assertEquals("monthOfYear", dateTimeFieldTypeArray0[4].toString());
//       assertEquals("monthOfYear", dateTimeFieldTypeArray0[4].getName());
//       assertNotNull(dateTimeFieldTypeArray0[4]);
//       
//       int[] intArray0 = new int[9];
//       int int0 = 721;
//       intArray0[7] = int0;
//       Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
//       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 721, 0}, intArray0);
//       assertEquals(6, partial0.size());
//       assertNotNull(partial0);
//       
//       Months months0 = Months.TEN;
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       // Undeclared exception!
//       try {
//         Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) months0, intArray0[7]);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Fields invalid for add
//          //
//       }
//   }

  @Test
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertNotNull(mutablePeriod0);
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) mutablePeriod0, int0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, weeks0.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-2);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-2);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-2);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      int int1 = 44;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 44 for era must be in the range [0,1]
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      int int1 = 226;
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      int int0 = 292272708;
      int int1 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int1);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertFalse(int1 == int0);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      
      Partial partial1 = partial0.with(dateTimeFieldType1, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(2, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int1 == int0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test24()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int int0 = 0;
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], int0);
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test26()  throws Throwable  {
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 2533;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test28()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) buddhistChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test29()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[1].getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[3].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[3].toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[4].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[4].toString());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[5].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[5].toString());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[6].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[6].toString());
      assertNotNull(dateTimeFieldTypeArray0[6]);
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[7].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[7].toString());
      assertNotNull(dateTimeFieldTypeArray0[7]);
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[8].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[8].getName());
      assertNotNull(dateTimeFieldTypeArray0[8]);
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[9].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[9].getName());
      assertNotNull(dateTimeFieldTypeArray0[9]);
      
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: dayOfYear and dayOfYear
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType2.toString());
      assertEquals("dayOfMonth", dateTimeFieldType2.getName());
      assertNotNull(dateTimeFieldType2);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType2;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfMonth", dateTimeFieldType2.toString());
      assertEquals("dayOfMonth", dateTimeFieldType2.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[3].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[3].toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[4].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[4].toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType1;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[5].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[5].toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[6].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[6].getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[6]);
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType1;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[7].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[7].toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[7]);
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[8].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[8].getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[8]);
      
      int[] intArray0 = new int[9];
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfWeek < dayOfMonth
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeZone dateTimeZone0 = null;
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType1 = yearMonth0.getFieldType(int0);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals(2, yearMonth0.size());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals(2, yearMonth0.size());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals(2, yearMonth0.size());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[3].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[3].getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].getName());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[5].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[5].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year and year
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], int0);
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[1], int0);
      assertEquals(2, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeZone dateTimeZone0 = null;
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType1 = yearMonth0.getFieldType(int0);
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals(2, yearMonth0.size());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals(2, yearMonth0.size());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType2.toString());
      assertEquals("millisOfDay", dateTimeFieldType2.getName());
      assertNotNull(dateTimeFieldType2);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      assertEquals("millisOfDay", dateTimeFieldType2.toString());
      assertEquals("millisOfDay", dateTimeFieldType2.getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[3].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[3].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[4].getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[5].getName());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[5].toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: millisOfDay < yearOfCentury
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[3].getName());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[3].toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[4];
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: halfdayOfDay < era
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      int[] intArray0 = new int[5];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate unsupported: era and era
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1504;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertEquals("Mon Jun 12 00:00:00 GMT 3533", mockDate0.toString());
      assertNotNull(mockDate0);
      
      MonthDay monthDay0 = MonthDay.fromDateFields((Date) mockDate0);
      assertEquals("Mon Jun 12 00:00:00 GMT 3533", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertEquals("Mon Jun 12 00:00:00 GMT 3533", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1504 for dayOfWeek must not be larger than 7
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[17];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-746);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Days days0 = Days.THREE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) days0);
      assertEquals(0, partial0.size());
      assertEquals(1, days0.size());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test
  public void test42()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.without(dateTimeFieldTypeArray0[0]);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test
  public void test44()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.plus(readablePeriod0);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 292272708;
      int int1 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int1);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      assertFalse(int1 == int0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 23;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        String string0 = partial_Property0.getAsString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test
  public void test48()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 18;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 76;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      String string0 = "Types array must not contain duplicate: ";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 23;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test51()  throws Throwable  {
      Partial partial0 = null;
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
