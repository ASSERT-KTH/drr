/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:06:15 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class GJChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Years years0 = Years.ZERO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int0 = (-5858);
      Years years1 = years0.plus(int0);
      assertNotNull(years1);
      assertFalse(years1.equals((Object)years0));
      assertFalse(years0.equals((Object)years1));
      assertEquals(1, years1.size());
      assertEquals(1, years0.size());
      assertNotSame(years1, years0);
      assertNotSame(years0, years1);
      
      int int1 = 29;
      long long0 = gJChronology0.add((ReadablePeriod) years1, (long) int0, int1);
      assertFalse(years1.equals((Object)years0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(years0.equals((Object)years1));
      assertEquals(1, years1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, years0.size());
      assertEquals((-5361067119530858L), long0);
      assertNotSame(years1, years0);
      assertNotSame(years0, years1);
  }

  @Test
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int1 = 99;
      long long0 = gJChronology0.add((ReadablePeriod) years0, (long) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, years0.size());
      assertEquals(12495430800004L, long0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, long0, (long) int0);
      assertNotNull(intArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1, years0.size());
      assertArrayEquals(new int[] {(-396)}, intArray0);
  }

  @Test
  public void test02()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int0 = 0;
      int int1 = 3665;
      Years years0 = Years.years(int1);
      assertNotNull(years0);
      assertFalse(int1 == int0);
      assertEquals(1, years0.size());
      
      Period period0 = years0.toPeriod();
      assertNotNull(period0);
      assertFalse(int1 == int0);
      assertEquals(1, years0.size());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, (long) int1, (long) int0);
      assertNotNull(intArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, years0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-3), (-665)}, intArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 3;
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      gJChronology0.validate((ReadablePartial) localDate0, intArray0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertArrayEquals(new int[] {3, 3, 3, 0, 0, 0}, intArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 16;
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Minutes minutes0 = Minutes.TWO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Period period0 = minutes0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, minutes0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withPeriodAdded((ReadablePeriod) period0, int0);
      assertNotNull(yearMonthDay1);
      assertTrue(yearMonthDay1.equals((Object)yearMonthDay0));
      assertTrue(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals(1, minutes0.size());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = (-1186L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1186L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-1186L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals((-1186L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals((-1186L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("GJChronology[UTC,cutover=1969-12-31T23:59:58.814Z]", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) dateTimeZone0, (Chronology) buddhistChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("GJChronology[Europe/London,cutover=2014-02-14]", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London]", string0);
  }

  @Test
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 1000000000L;
      long long1 = gJChronology0.gregorianToJulianByWeekyear(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(2209600000L, long1);
      
      Period period0 = new Period(long0, long1, (Chronology) gJChronology0);
      assertNotNull(period0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      boolean boolean0 = gJChronology0.equals((Object) period0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-5450);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:05.450", fixedDateTimeZone0.getID());
      assertEquals("-00:00:05.450", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("-00:00:05.450", fixedDateTimeZone0.getID());
      assertEquals("-00:00:05.450", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("-00:00:05.450", fixedDateTimeZone0.getID());
      assertEquals("-00:00:05.450", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(boolean0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 16;
      int int1 = 5821;
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertFalse(int0 == int1);
      assertEquals("+00:00:00.016", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.016", fixedDateTimeZone0.getID());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(int1);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(int1 == int0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      
      DateTime dateTime0 = yearMonthDay1.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertFalse(int0 == int1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(int1 == int0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("+00:00:00.016", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.016", fixedDateTimeZone0.getID());
      assertEquals((-182303308800016L), dateTime0.getMillis());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(634970638, int0);
      
      int int1 = 2;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int1, int0, int0, int0, int1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Value 634970638 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 16;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 16 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int0 = 11;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61793107124989L), long0);
  }

  @Test
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gJChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      DateTime dateTime0 = timeOfDay0.toDateTimeToday();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 91;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (long) int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 91
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = (-1);
      DateTime dateTime0 = dateMidnight0.toDateTime((Chronology) julianChronology0);
      assertNotNull(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      DateTime dateTime1 = dateTime0.withYear(int0);
      assertNotNull(dateTime1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals((-62164713600000L), dateTime1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateTime1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cutover too early. Must be on or after 0001-01-01.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = (-12219292800000L);
      int int0 = 2415;
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2415
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Years years0 = Years.ZERO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int0 = 91;
      Years years1 = years0.plus(int0);
      assertNotNull(years1);
      assertFalse(years1.equals((Object)years0));
      assertFalse(years0.equals((Object)years1));
      assertEquals(1, years1.size());
      assertEquals(1, years0.size());
      assertNotSame(years1, years0);
      assertNotSame(years0, years1);
      
      long long0 = gJChronology0.add((ReadablePeriod) years1, (long) int0, int0);
      assertFalse(years1.equals((Object)years0));
      assertFalse(years0.equals((Object)years1));
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1, years1.size());
      assertEquals(1, years0.size());
      assertEquals(261323110800091L, long0);
      assertNotSame(years1, years0);
      assertNotSame(years0, years1);
  }

  @Test
  public void test21()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 11;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = gJChronology0.set((ReadablePartial) localDate0, (long) int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392339600011L, long0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Interval interval0 = yearMonthDay0.toInterval((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(interval0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = (-1020L);
      long long1 = gJChronology0.julianToGregorianByWeekyear(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1209601020L), long1);
  }

  @Test
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 10;
      long long0 = lenientChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-61827407924990L), long0);
  }

  @Test
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 16;
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusDays(int0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gJChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      int int0 = 2362;
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(int0);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertFalse(timeOfDay0.equals((Object)timeOfDay1));
      assertEquals(4, timeOfDay1.size());
      assertEquals(4, timeOfDay0.size());
      assertNotSame(timeOfDay1, timeOfDay0);
      assertNotSame(timeOfDay0, timeOfDay1);
  }
}
