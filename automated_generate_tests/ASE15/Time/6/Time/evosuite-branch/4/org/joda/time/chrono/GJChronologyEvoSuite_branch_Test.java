/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:21:42 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class GJChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-2328);
      long long0 = 2629746000L;
      Period period0 = new Period((long) int0, long0, (Chronology) gJChronology0);
      assertNotNull(period0);
      
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7014504543
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      Years years0 = Years.TWO;
      //  // Unstable assertion: assertEquals(1, years0.size());
      //  // Unstable assertion: assertNotNull(years0);
      
      long long0 = 1105L;
      int int0 = (-1592);
      long long1 = gJChronology0.add((ReadablePeriod) years0, long0, int0);
      //  // Unstable assertion: assertEquals(1, years0.size());
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertEquals((-100478275198895L), long1);
      
      int int1 = gJChronology0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(110953517, int1);
      
      long long2 = gJChronology0.add((ReadablePeriod) years0, long1, int1);
      //  // Unstable assertion: assertEquals(1, years0.size());
      //  // Unstable assertion: assertFalse(long2 == long0);
      //  // Unstable assertion: assertFalse(long2 == long1);
      //  // Unstable assertion: assertFalse(long1 == long2);
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(long0 == long2);
      //  // Unstable assertion: assertEquals(7002609143011201105L, long2);
  }

  @Test
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      
      int int0 = 1426;
      YearMonthDay yearMonthDay2 = yearMonthDay1.minusYears(int0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay2.size());
      assertEquals(3, yearMonthDay1.size());
      assertNotNull(yearMonthDay2);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay2));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay2);
      assertNotSame(yearMonthDay2, yearMonthDay1);
      assertNotSame(yearMonthDay2, yearMonthDay0);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay1, yearMonthDay2);
  }

  @Test
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 9L;
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) gJChronology0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      long long1 = 15778800000L;
      Duration duration0 = Duration.standardHours(long1);
      assertEquals(56803680000000000L, duration0.getMillis());
      assertNotNull(duration0);
      assertFalse(long1 == long0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateMidnight0);
      assertEquals(56803680000000000L, duration0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(mutablePeriod0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      int int0 = (-2101);
      YearMonthDay yearMonthDay1 = yearMonthDay0.withYear(int0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test05()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) instant0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(dateMidnight0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(gJChronology0);
      
      long long0 = (-19L);
      YearMonth yearMonth0 = new YearMonth(long0, (Chronology) gJChronology0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(yearMonth0);
      
      int int0 = (-2360);
      Years years0 = Years.years(int0);
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      assertNotNull(durationFieldType0);
      
      YearMonth yearMonth1 = yearMonth0.withFieldAdded(durationFieldType0, int0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2, yearMonth1.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      assertNotNull(yearMonth1);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      
      YearMonth yearMonth2 = yearMonth1.plusMonths(int0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(2, yearMonth2.size());
      assertEquals(2, yearMonth1.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      assertNotNull(yearMonth2);
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Years years0 = Years.parseYears(string0);
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minus((ReadablePeriod) years0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1, years0.size());
      assertNotNull(yearMonthDay1);
      assertTrue(yearMonthDay1.equals((Object)yearMonthDay0));
      assertTrue(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test07()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(string0);
      assertEquals("GJChronology[UTC,cutover=2014-02-14T20:21:21.320Z]", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London,cutover=2014-02-14]", string0);
  }

  @Test
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[UTC]", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight();
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotSame(gJChronology1, gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) readableInstant0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      
      int int0 = 91;
      int int1 = 5;
      int int2 = 0;
      long long0 = gJChronology0.getDateTimeMillis(int0, int1, int1, int2, int2, int1, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-59284915119909L), long0);
  }

  @Test
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 25;
      int int1 = 2;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int0, int0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 29;
      int int1 = 2;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int0, int1, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 1732;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1732 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 11;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-61793107124989L), long0);
  }

  @Test
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(2, yearMonth0.size());
      assertNotNull(interval0);
  }

  @Test
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      
      DateTime dateTime0 = yearMonthDay1.toDateTimeAtMidnight();
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-802);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.802", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.802", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -802
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-12219292800000L);
      int int0 = (-2417);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2417
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 100;
      DateTime dateTime0 = new DateTime(int0, int0, int0, int0, int0, int0, (Chronology) lenientChronology0);
      assertEquals((-75878187425000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateTime0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cutover too early. Must be on or after 0001-01-01.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 91;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      long long0 = gJChronology0.add((ReadablePeriod) period0, (long) int0, int0);
      assertEquals(261323107200091L, long0);
      
      long long1 = gJChronology0.julianToGregorianByWeekyear(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(261316454400091L, long1);
  }

  @Test
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 9L;
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) gJChronology0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 29;
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int0);
      assertEquals((-61251724725000L), dateMidnight1.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
  }

  @Test
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  @Test
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      
      MonthDay monthDay0 = new MonthDay((long) int0, (Chronology) gJChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.minusDays(int0);
      assertEquals(2, monthDay1.size());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay1);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay0, monthDay1);
  }

  @Test
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
      }
  }
}
