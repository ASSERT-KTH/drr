/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:55:21 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class GJChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 9;
      int int1 = 0;
      long long0 = lenientChronology0.getDateTimeMillis(int1, int1, int0, int0, int0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-62169346185000L), long0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1073741824;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) instant0);
      assertNotNull(duration0);
      assertEquals(3930969891405824L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
      assertEquals(3930969891405824L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      long long0 = (-12219292800011L);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, long0, (long) int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {387, 3, 1, 1, 10, 15, 41, 835}, intArray0);
      assertEquals(3930969891405824L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-4620);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0, (Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 1312;
      LocalDate localDate1 = localDate0.minusYears(int0);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 87;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minus((ReadablePeriod) period0);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(yearMonthDay1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 3;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      DateTime dateTime0 = timeOfDay0.toDateTimeToday((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
      assertEquals(1392398481320L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
      assertEquals(1392398481320L, dateTime0.getMillis());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[+03:00,cutover=2014-02-14T17:21:21.320Z]", string0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
      assertEquals(1392398481320L, dateTime0.getMillis());
  }

  @Test
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London]", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJChronology0.halfdays();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      
      boolean boolean0 = gJChronology0.equals((Object) zonedChronology_ZonedDurationField0);
      assertFalse(boolean0);
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
  }

  @Test
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotNull(gJChronology1);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 87;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withYear(int0);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(yearMonthDay1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      
      DateTime dateTime0 = yearMonthDay1.toDateTimeAtMidnight();
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(dateTime0);
      assertEquals((-59421859125000L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
  }

  @Test
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 2;
      int int1 = (-82);
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -82 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 0;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 3;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
      
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-62067437999997L), long0);
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
  }

  @Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 87;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight();
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "XmEOi8gm9~{C,,$W+[";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      long long0 = 0L;
      int int0 = 1775;
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1775
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 0;
      int int1 = (-4552);
      MockDate mockDate0 = new MockDate(int0, int0, int0, int1, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(mockDate0);
      assertEquals("Wed Jun 21 02:52:08 GMT 1899", mockDate0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(localDateTime0);
      assertEquals("Wed Jun 21 02:52:08 GMT 1899", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = localDateTime0.toDateTime((ReadableInstant) instant0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(dateTime0);
      assertEquals("Wed Jun 21 02:52:08 GMT 1899", mockDate0.toString());
      assertEquals((-2225740072000L), dateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      
      long long0 = 26607895200000L;
      DateTime dateTime1 = dateTime0.withDurationAdded(long0, int1);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(int1 == int0);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(int0 == int1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertEquals("Wed Jun 21 02:52:08 GMT 1899", mockDate0.toString());
      assertEquals((-2225740072000L), dateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals((-121121364690472000L), dateTime1.getMillis());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cutover too early. Must be on or after 0001-01-01.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = (-12219292800000L);
      int int0 = (-1241);
      // Undeclared exception!
      try {
        GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1241
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-18);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.018", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("-00:00:00.018", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(int0);
      assertEquals(1209599982L, long0);
      assertEquals("-00:00:00.018", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Interval interval0 = yearMonth0.toInterval();
      assertNotNull(interval0);
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(2, yearMonth0.size());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(2, yearMonth0.size());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long1 = gJChronology0.add((ReadablePeriod) period0, long0, int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-46224000018L), long1);
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(2, yearMonth0.size());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.018", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test19()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = 0;
      int int1 = (-4552);
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Years years0 = Years.MAX_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (long) int1, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 4, 552}, intArray0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, years0.size());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = (-1252L);
      long long1 = gJChronology0.julianToGregorianByWeekyear(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1209601252L), long1);
  }

  @Test
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 9;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(int0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int1 = 2943;
      LocalDateTime localDateTime2 = localDateTime1.withDate(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0, (Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      int int0 = 1312;
      DateTime dateTime1 = dateTime0.withWeekyear(int0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals((-37899187125000L), dateTime1.getMillis());
  }

  @Test
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(634970638, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 9;
      long long0 = lenientChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-61861622324991L), long0);
  }

  @Test
  public void test25()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) gJChronology0, assembledChronology_Fields0.minuteOfHour);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
  }
}
