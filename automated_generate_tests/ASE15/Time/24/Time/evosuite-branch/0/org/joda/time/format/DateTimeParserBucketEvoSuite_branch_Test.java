/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:47 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Locale;




import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class DateTimeParserBucketEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.days();
      assertEquals(true, durationField0.isPrecise());
      assertEquals("days", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(durationField0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)ethiopicChronology0.eras();
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = DateTimeParserBucket.compareReverse(durationField0, unsupportedDurationField0);
      assertEquals(true, durationField0.isPrecise());
      assertEquals("days", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(1, int0);
  }

  @Test
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = 2880;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2880, (int)integer0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) integer0, (Chronology) gregorianChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      dateTimeParserBucket0.saveField(dateTimeField0, (int) integer0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = true;
      String string0 = "";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try {
        long long0 = dateTimeParserBucket0.computeMillis(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for yearOfEra is not supported
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = 2880;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2880, (int)integer0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) integer0, (Chronology) gregorianChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, (int) integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = true;
      String string0 = "";
      long long0 = dateTimeParserBucket0.computeMillis(boolean0, string0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertTrue(integer0.equals((Object)int0));
      assertEquals(28716854400000L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 2999L;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(strictChronology0);
      
      String string0 = ".}X=R?[CJ";
      Locale locale0 = new Locale(string0, string0);
      assertEquals(".}x=r?[cj_.}X=R?[CJ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(".}x=r?[cj", locale0.getLanguage());
      assertEquals(".}X=R?[CJ", locale0.getCountry());
      assertNotNull(locale0);
      
      Integer integer0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) strictChronology0, locale0, integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(".}x=r?[cj_.}X=R?[CJ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(".}x=r?[cj", locale0.getLanguage());
      assertEquals(".}X=R?[CJ", locale0.getCountry());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(".}x=r?[cj_.}X=R?[CJ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(".}x=r?[cj", locale0.getLanguage());
      assertEquals(".}X=R?[CJ", locale0.getCountry());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \".}X=R?[CJ\" for dayOfYear is not supported
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = (-2470L);
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = 14;
      ISOChronology iSOChronology0 = (ISOChronology)dateTime0.getChronology();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) iSOChronology0, locale0, (Integer) int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      String string0 = ";\"K<V{KM";
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \";\"K<V{KM\": Value \";\"K<V{KM\" for minuteOfHour is not supported
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 609L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = 2659;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2659, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0, (int) integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertNotNull(dateTimeParserBucket1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotSame(dateTimeParserBucket0, dateTimeParserBucket1);
      assertNotNull(dateTimeParserBucket_SavedState0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeParserBucket0.equals((Object)dateTimeParserBucket1));
      
      boolean boolean0 = dateTimeParserBucket1.restoreState((Object) dateTimeParserBucket_SavedState0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotSame(dateTimeParserBucket0, dateTimeParserBucket1);
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeParserBucket0.equals((Object)dateTimeParserBucket1));
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 609L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = 2659;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2659, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0, (int) integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = dateTimeParserBucket0.restoreState(object0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 13;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0, (Integer) int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateTimeParserBucket0);
      
      Integer integer0 = dateTimeParserBucket0.getPivotYear();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(13, (int)integer0);
      
      dateTimeParserBucket0.setOffset((int) integer0);
      assertEquals(13, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 3L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = (-857);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-857), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) buddhistChronology0, locale0, integer0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      Locale locale1 = dateTimeParserBucket0.getLocale();
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = 3L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = (-857);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-857), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) buddhistChronology0, locale0, integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTimeParserBucket0.getZone();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(cachedDateTimeZone0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = 2880;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2880, (int)integer0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) integer0, (Chronology) gregorianChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = true;
      long long0 = dateTimeParserBucket0.computeMillis(boolean0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2880L, long0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 13;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0, (Integer) int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertNotNull(dateTimeParserBucket0);
      
      Integer integer0 = dateTimeParserBucket0.getPivotYear();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(13, (int)integer0);
      
      dateTimeParserBucket0.setPivotYear(integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 4L;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) iSOChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = dateTimeParserBucket0.getOffset();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-2125L);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(strictChronology0);
      
      DateTimeField dateTimeField0 = strictChronology0.era();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      String string0 = null;
      Locale locale0 = null;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, string0, locale0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeParserBucket_SavedField0);
      
      int int0 = dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, int0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Locale locale1 = Locale.UK;
      assertEquals("en_GB", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertNotNull(locale1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) buddhistChronology0, locale1, (Integer) int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en_GB", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeParserBucket0);
      
      long long1 = dateTimeParserBucket0.computeMillis();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en_GB", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3602125L), long1);
  }

  @Test
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = 2880;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2880, (int)integer0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) integer0, (Chronology) gregorianChronology0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)dateTimeParserBucket0.getChronology();
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "4mDx$";
      // Undeclared exception!
      try {
        YearMonth yearMonth0 = YearMonth.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4mDx$\" is malformed at \"mDx$\"
         //
      }
  }
}
