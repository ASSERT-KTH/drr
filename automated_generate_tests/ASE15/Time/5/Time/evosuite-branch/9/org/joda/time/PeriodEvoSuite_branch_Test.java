/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:12:38 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Date;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.junit.runner.RunWith;


public class PeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1894);
      Period period0 = new Period(int0, int0, int0, int1, int0, int0, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(period0);
      
      Period period1 = period0.plusYears(int1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(period1);
      
      Days days0 = Days.MAX_VALUE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, days0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try {
        Period period2 = period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P-1894Y-1894D
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-32);
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withYears(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
      
      // Undeclared exception!
      try {
        Seconds seconds0 = period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardMinutes(long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, chronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) mutableDateTime0, periodType0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(period0);
      
      int int0 = 1;
      Period period1 = period0.withWeeks(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(period1);
      
      Period period2 = period1.multipliedBy(int0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(period2);
  }

  @Test
  public void test04()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Days days0 = seconds0.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minus((ReadablePeriod) seconds0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = PeriodType.MINUTE_INDEX;
      assertEquals(5, int0);
      
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      int int1 = period0.getSeconds();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Period period1 = period0.plusMillis(int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(period1);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 302L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = (-1430);
      Period period1 = period0.minusSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test09()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = (-1666);
      Period period1 = period0.minusHours(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test10()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.plusDays(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test11()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = (-1666);
      Period period1 = period0.minusWeeks(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 7L;
      Duration duration0 = Duration.standardDays(long0);
      assertEquals(604800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(604800000L, duration0.getMillis());
      assertNotNull(period0);
      
      int int0 = 515;
      Period period1 = period0.plusMonths(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(604800000L, duration0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 7L;
      Duration duration0 = Duration.standardDays(long0);
      assertEquals(604800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(604800000L, duration0.getMillis());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(604800000L, duration0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test14()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 302L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(period1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = PeriodType.MINUTE_INDEX;
      assertEquals(5, int0);
      
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.weekyear();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0, int0);
      assertEquals(-292269337, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(skipUndoDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(-292269337, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(-292269337, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNull(durationFieldType0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 2214;
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(period1);
  }

  @Test
  public void test18()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = (-1443);
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = (-417L);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(long0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = 417;
      Period period1 = period0.withField(durationFieldType0, int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(period1);
  }

  @Test
  public void test20()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test21()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod(periodType0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(period0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(period1);
  }

  @Test
  public void test22()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) yearMonthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-32);
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-38);
      Period period0 = Period.months(int0);
      assertNotNull(period0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 2214;
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(period0);
  }

  @Test
  public void test28()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusWeeks(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 1;
      Period period0 = new Period((long) int0);
      assertNotNull(period0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-2337);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
  }

  @Test
  public void test32()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = months0.toPeriod();
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Weeks weeks0 = period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
  }

  @Test
  public void test34()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = months0.toPeriod();
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Days days0 = period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 15;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withHours(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test36()  throws Throwable  {
      long long0 = 302L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusSeconds(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test37()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 0;
      Seconds seconds0 = Seconds.THREE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Days days0 = seconds0.toStandardDays();
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(period1);
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = 302L;
      YearMonth yearMonth0 = new YearMonth(long0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(period0);
  }

  @Test
  public void test40()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusHours(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test41()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardMinutes(long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, chronology0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) mutableDateTime0, periodType0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      int int0 = 1;
      Period period1 = period0.withDays(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0, (Chronology) buddhistChronology0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertNotNull(mutableInterval0);
      
      PeriodType periodType0 = null;
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertNotNull(period0);
  }

  @Test
  public void test43()  throws Throwable  {
      long long0 = (-17L);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(long0, long0, periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 2214;
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test45()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(period0);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 21;
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.minusDays(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = PeriodType.MINUTE_INDEX;
      assertEquals(5, int0);
      
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test48()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Instant instant0 = new Instant((Object) readableInstant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      MockDate mockDate0 = (MockDate)dateTime0.toDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test49()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = months0.toPeriod();
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertEquals(1, months0.size());
      assertNotNull(period1);
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 0;
      Seconds seconds0 = Seconds.THREE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Days days0 = seconds0.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period1);
  }

  @Test
  public void test52()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withMinutes(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test53()  throws Throwable  {
      long long0 = 302L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withMillis(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test54()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Period period0 = new Period((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test55()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = new Duration((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 2214;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
  }

  @Test
  public void test57()  throws Throwable  {
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(1, months0.size());
      assertNotNull(period0);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = (-2337);
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = (-38);
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)monthDay0.getChronology();
      assertEquals(2, monthDay0.size());
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, (Chronology) iSOChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(period0);
  }

  @Test
  public void test60()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Days days0 = seconds0.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period1);
  }

  @Test
  public void test61()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0, periodType0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      Period period1 = period0.negated();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test62()  throws Throwable  {
      long long0 = (-417L);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(long0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
  }

  @Test
  public void test63()  throws Throwable  {
      int int0 = (-38);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
  }

  @Test
  public void test64()  throws Throwable  {
      int int0 = (-4235);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
  }
}
