/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:51:27 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class PeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-146);
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P-146M
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 13;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Weeks weeks0 = period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 2349L;
      PeriodType periodType0 = null;
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      Period period0 = new Period(long0, periodType0, (Chronology) buddhistChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(period0);
      
      int int1 = 1;
      Period period1 = period0.multipliedBy(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(period1);
  }

  @Test
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      int int0 = 1595;
      Period period1 = period0.withMinutes(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period1);
      
      Period period2 = period1.multipliedBy(int0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period2);
  }

  @Test
  public void test04()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 2590;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = PeriodType.MILLI_INDEX;
      assertEquals(7, int0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test07()  throws Throwable  {
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.plusSeconds(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-420);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusHours(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 315;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusDays(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-420);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusWeeks(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1362;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.minusMonths(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 1000L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.plusYears(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1362;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-2232);
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1548;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Period period1 = period0.withFieldAdded(durationFieldType0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(period1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-4933);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1548;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(period1);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 1007;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = (-420);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(period1);
  }

  @Test
  public void test21()  throws Throwable  {
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = null;
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test23()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dateMidnight0.toGregorianCalendar();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(timeOfDay0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(period0);
  }

  @Test
  public void test24()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Object) readablePartial0, (Chronology) gregorianChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDate0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      MockDate mockDate0 = (MockDate)instant0.toDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(mockDate0);
      
      MonthDay monthDay0 = MonthDay.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)monthDay0.getChronology();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, monthDay0.size());
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(2, monthDay0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) partial0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-420);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusWeeks(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-2232);
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period1 = new Period((ReadableDuration) duration0, (ReadableInstant) dateMidnight0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = 1000L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
  }

  @Test
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriod(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test31()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = months0.toPeriod();
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Weeks weeks0 = period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-2648);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Days days0 = period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-2232);
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withHours(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period1);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = (-420);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = PeriodType.MILLI_INDEX;
      assertEquals(7, int0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 2590;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test37()  throws Throwable  {
      long long0 = 21L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      DateTime dateTime0 = new DateTime(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(21L, dateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(dateTime0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(21L, dateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(period0);
      
      int int0 = 3854;
      Period period1 = period0.withSeconds(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(21L, dateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(period1);
  }

  @Test
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      int int0 = 1595;
      Period period1 = period0.minusYears(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
  }

  @Test
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      int int0 = 1595;
      Period period1 = period0.minusHours(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period((ReadableDuration) duration0, readableInstant0, periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = (-2648);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Duration duration0 = period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test46()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0, periodType0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test47()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.minusDays(PeriodType.MILLI_INDEX);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = (-2648);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Chronology chronology0 = null;
      LocalTime localTime0 = new LocalTime((long) int0, chronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0, periodType0);
      assertEquals(4, localTime0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(period0);
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = (-2648);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(period1);
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Cannot have two adjacent separators\"
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 1362;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = 2590;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withMillis(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 59;
      Chronology chronology0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((long) int0, chronology0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      ReadableDuration readableDuration0 = null;
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, readableDuration0, periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test55()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0L, duration0.getMillis());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(period1);
  }

  @Test
  public void test56()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Chronology chronology0 = null;
      int int0 = period0.getDays();
      assertEquals(0, int0);
      
      Period period1 = new Period((long) int0, chronology0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test57()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = new Period((Object) period0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = (-2232);
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 0;
      Chronology chronology0 = null;
      Period period0 = new Period((long) int0, (long) int0, chronology0);
      assertNotNull(period0);
  }

  @Test
  public void test60()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test61()  throws Throwable  {
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      
      Period period1 = period0.negated();
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test62()  throws Throwable  {
      long long0 = (-1712L);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = (-3);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-03:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-03:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("-03:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-03:00", fixedDateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) gregorianChronology0);
      assertEquals("-03:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-03:00", fixedDateTimeZone0.getID());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals("-03:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-03:00", fixedDateTimeZone0.getID());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
  }

  @Test
  public void test63()  throws Throwable  {
      int int0 = 2590;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) dateMidnight0);
      assertEquals(223776000000L, duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(duration0);
      
      Period period1 = duration0.toPeriodFrom((ReadableInstant) dateMidnight0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(223776000000L, duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(period1);
  }

  @Test
  public void test64()  throws Throwable  {
      int int0 = (-2648);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
  }
}
