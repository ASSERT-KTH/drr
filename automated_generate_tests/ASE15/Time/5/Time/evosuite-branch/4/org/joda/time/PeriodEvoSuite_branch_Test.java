/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:19:34 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;




import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class PeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      String string0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) string0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Period period0 = new Period((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertNotNull(period0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Period period1 = period0.normalizedStandard();
      assertNotNull(period1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 554;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      
      // Undeclared exception!
      try {
        Period period1 = period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P554Y
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 1870;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withYears(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      // Undeclared exception!
      try {
        Seconds seconds0 = period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = (-28L);
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 269;
      Period period1 = period0.withMonths(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      // Undeclared exception!
      try {
        Days days0 = period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 1;
      Period period1 = period0.multipliedBy(int0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test05()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(4, localTime0.size());
      
      int int0 = period0.getWeeks();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
      
      Period period1 = new Period((long) int0);
      assertNotNull(period1);
      assertEquals(4, localTime0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      Period period2 = period1.negated();
      assertNotNull(period2);
      assertEquals(4, localTime0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period1.equals((Object)period2));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 2612L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test07()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      String string0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) string0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Period period0 = new Period((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertNotNull(period0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Hours hours0 = Hours.hoursBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertNotNull(hours0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, hours0.size());
      
      Period period1 = period0.minus((ReadablePeriod) hours0);
      assertNotNull(period1);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, hours0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test08()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = (-3048);
      Period period1 = period0.plusMillis(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = (-457L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = 6;
      Period period1 = period0.plusSeconds(int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 877;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.minusMinutes(int1);
      assertNotNull(period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test11()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      
      int int0 = 0;
      Period period1 = period0.minusHours(int0);
      assertNotNull(period1);
      assertEquals(2, yearMonth0.size());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      
      int int0 = 0;
      Period period1 = period0.plusDays(int0);
      assertNotNull(period1);
      assertEquals(2, yearMonth0.size());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test13()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.plusWeeks(int0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 877;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.minusMonths(int1);
      assertNotNull(period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 28;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-3578);
      int int1 = 9;
      YearMonth yearMonth0 = new YearMonth(int0, int1);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertNotNull(period1);
      assertEquals(2, yearMonth0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test17()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      assertNotNull(localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertNotNull(period1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 3;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(period1);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, PeriodType.MINUTE_INDEX, int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      
      int int0 = 0;
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(period1);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      long long0 = (-1690L);
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertNotNull(mutableInterval0);
      assertEquals((-1690L), mutableInterval0.getEndMillis());
      assertEquals((-1690L), mutableInterval0.getStartMillis());
      
      DateTime dateTime0 = mutableInterval0.getStart();
      assertNotNull(dateTime0);
      assertEquals((-1690L), mutableInterval0.getEndMillis());
      assertEquals((-1690L), mutableInterval0.getStartMillis());
      assertEquals((-1690L), dateTime0.getMillis());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTime0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals((-1690L), mutableInterval0.getEndMillis());
      assertEquals((-1690L), mutableInterval0.getStartMillis());
      assertEquals((-1690L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals((-1690L), mutableInterval0.getEndMillis());
      assertEquals((-1690L), mutableInterval0.getStartMillis());
      assertEquals((-1690L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Period period0 = new Period((Object) seconds0, periodType0, (Chronology) gJChronology0);
      assertNotNull(period0);
      assertEquals((-1690L), mutableInterval0.getEndMillis());
      assertEquals((-1690L), mutableInterval0.getStartMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, seconds0.size());
      assertEquals((-1690L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, hours0.size());
      
      DurationFieldType durationFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-457L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = 6;
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertNotNull(period1);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 2612L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotNull(period1);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = 1403L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       int int0 = (-475);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-475,MONTH=-475,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-475,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-475,HOUR_OF_DAY=-475,MINUTE=-475,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-78449309700000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=517,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=21,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=5,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ReadablePartial readablePartial0 = null;
//       // Undeclared exception!
//       try {
//         Period period0 = Period.fieldDifference((ReadablePartial) localDate0, readablePartial0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // ReadablePartial objects must not be null
//          //
//       }
//   }

  @Test
  public void test28()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 1870;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
  }

  @Test
  public void test31()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      
      int int0 = (-12);
      Period period1 = period0.minusWeeks(int0);
      assertNotNull(period1);
      assertEquals(2, yearMonth0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       int int0 = (-3048);
//       Duration duration0 = Duration.millis((long) int0);
//       assertNotNull(duration0);
//       assertEquals((-3048L), duration0.getMillis());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3048,MONTH=-3048,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3048,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3048,HOUR_OF_DAY=-3048,MINUTE=-3048,SECOND=-3048,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       LocalTime localTime0 = LocalTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
//       assertNotNull(iSOChronology0);
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       
//       DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) fixedDateTimeZone0);
//       assertNotNull(dateTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1392409272000L, dateTime0.getMillis());
//       
//       Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateTime0);
//       assertNotNull(period0);
//       assertEquals(4, localTime0.size());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals((-3048L), duration0.getMillis());
//       assertEquals(1392409272000L, dateTime0.getMillis());
//   }

  @Test
  public void test33()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
  }

  @Test
  public void test34()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      long long0 = 0L;
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 877;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
  }

  @Test
  public void test36()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      String string0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) string0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Period period0 = new Period((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertNotNull(period0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = 4;
      Period period1 = period0.withHours(int0);
      assertNotNull(period1);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(int0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test38()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withWeeks(int0);
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = 2612L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 400;
      Period period1 = period0.withSeconds(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      assertNotNull(localDateTime0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, localDateTime0.size());
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertNotNull(period0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, localDateTime0.size());
      
      Period period1 = period0.minusYears(int0);
      assertNotNull(period1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, localDateTime0.size());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test41()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      
      int int0 = (-12);
      Period period1 = period0.minusHours(int0);
      assertNotNull(period1);
      assertEquals(2, yearMonth0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       int int0 = (-3048);
//       Duration duration0 = Duration.millis((long) int0);
//       assertNotNull(duration0);
//       assertEquals((-3048L), duration0.getMillis());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3048,MONTH=-3048,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3048,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3048,HOUR_OF_DAY=-3048,MINUTE=-3048,SECOND=-3048,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       LocalTime localTime0 = LocalTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localTime0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, localTime0.size());
//       
//       ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
//       assertNotNull(iSOChronology0);
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       
//       DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) fixedDateTimeZone0);
//       assertNotNull(dateTime0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals(1392409272000L, dateTime0.getMillis());
//       assertEquals(4, localTime0.size());
//       
//       Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
//       assertNotNull(years0);
//       assertEquals(1, years0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, localTime0.size());
//       
//       PeriodType periodType0 = years0.getPeriodType();
//       assertNotNull(periodType0);
//       assertEquals(1, years0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Years", periodType0.getName());
//       assertEquals(1, periodType0.size());
//       assertEquals(4, localTime0.size());
//       
//       Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateTime0, periodType0);
//       assertNotNull(period0);
//       assertEquals(1, years0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-166645136328000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=3312,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=12,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Years", periodType0.getName());
//       assertEquals(1, periodType0.size());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals((-3048L), duration0.getMillis());
//       assertEquals(1392409272000L, dateTime0.getMillis());
//       assertEquals(4, localTime0.size());
//   }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test44()  throws Throwable  {
      long long0 = (-457L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals((-457L), duration0.getMillis());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-3048);
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 877;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
  }

  @Test
  public void test48()  throws Throwable  {
      long long0 = 1599L;
      Duration duration0 = Duration.standardHours(long0);
      assertNotNull(duration0);
      assertEquals(5756400000L, duration0.getMillis());
      
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
      assertEquals(5756400000L, duration0.getMillis());
      
      int int0 = (-475);
      Period period1 = period0.minusDays(int0);
      assertNotNull(period1);
      assertEquals(5756400000L, duration0.getMillis());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test49()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(4, localTime0.size());
      
      int int0 = 0;
      Period period1 = period0.minusMillis(int0);
      assertNotNull(period1);
      assertEquals(4, localTime0.size());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test50()  throws Throwable  {
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      Period period1 = period0.normalizedStandard();
      assertNotNull(period1);
      assertEquals(1, months0.size());
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = (-12);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      
      int int0 = (-12);
      Period period1 = period0.minusMonths(int0);
      assertNotNull(period1);
      assertEquals(2, yearMonth0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test54()  throws Throwable  {
      long long0 = (-457L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = 6;
      Period period1 = period0.withMinutes(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test55()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      int int0 = (-3048);
      Period period1 = period0.withMillis(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test56()  throws Throwable  {
      long long0 = (-124L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Period period0 = new Period(long0, long0, (Chronology) buddhistChronology0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Duration duration0 = period0.toDurationTo((ReadableInstant) mutableDateTime0);
      assertNotNull(duration0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      
      Period period1 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0, periodType0);
      assertNotNull(period1);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotNull(period1);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test58()  throws Throwable  {
      long long0 = 0L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Period period0 = new Period(long0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Period period1 = new Period((Object) mutablePeriod0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test60()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = null;
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period((long) PeriodType.DAY_INDEX, (long) PeriodType.DAY_INDEX, periodType0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.toPeriod();
      assertNotNull(period1);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test61()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(4, localTime0.size());
      
      Period period1 = period0.negated();
      assertNotNull(period1);
      assertEquals(4, localTime0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test62()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
  }

  @Test
  public void test63()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      String string0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) string0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ReadableDuration readableDuration0 = null;
      Period period0 = new Period((ReadableInstant) mutableDateTime0, readableDuration0);
      assertNotNull(period0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test64()  throws Throwable  {
      int int0 = 6;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
  }

  @Test
  public void test65()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
  }
}
