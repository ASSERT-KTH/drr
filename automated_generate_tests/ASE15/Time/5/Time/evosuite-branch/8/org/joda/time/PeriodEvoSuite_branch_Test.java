/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:02:03 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class PeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 85;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      int int1 = 0;
      periodType0.MONTH_INDEX = int1;
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = Period.years(int0);
      assertFalse(int0 == int1);
      assertNotNull(period0);
      
      PeriodType periodType1 = PeriodType.years();
      assertFalse(periodType1.equals((Object)periodType0));
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      
      // Undeclared exception!
      try {
        Period period1 = period0.normalizedStandard(periodType1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P85Y
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 85;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      
      int int1 = 128;
      Period period1 = period0.plusYears(int1);
      assertFalse(int1 == int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(int0 == int1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType0.equals((Object)periodType1));
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType0, periodType1);
      assertNotNull(periodType1);
      assertEquals("YearMonthDayNoYears", periodType1.getName());
      assertEquals(2, periodType1.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      Period period2 = period1.normalizedStandard(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(int1 == int0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(int0 == int1);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertNotSame(periodType1, periodType0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotNull(period2);
      assertEquals("YearMonthDayNoYears", periodType1.getName());
      assertEquals(2, periodType1.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      Period period1 = period0.multipliedBy(int0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Period period1 = period0.multipliedBy(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1982;
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test07()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test09()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      ReadableDuration readableDuration0 = null;
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      Period period0 = new Period(readableInstant0, readableDuration0, periodType0);
      assertNotNull(period0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      int int0 = 0;
      Period period1 = period0.plusSeconds(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      int int0 = 1925;
      Period period1 = period0.plusMinutes(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, months0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      int int1 = 20;
      Period period1 = period0.minusHours(int1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test12()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusDays(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 7L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.plusWeeks(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test14()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      int int0 = 1925;
      Period period1 = period0.plusMonths(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(1, months0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test16()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      int int0 = 41;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) instant0);
      assertNotNull(seconds0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1, seconds0.size());
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      
      Period period1 = period0.plus((ReadablePeriod) weeks0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 5;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      
      int int1 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-3738);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, PeriodType.MINUTE_INDEX);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Seconds seconds0 = Seconds.standardSecondsIn(readablePeriod0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      int int0 = 1997;
      Duration duration0 = seconds0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      PeriodType periodType0 = null;
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 7L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 7;
      Period period0 = new Period((long) int0, (long) int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-48);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test23()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Period period0 = days0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, days0.size());
      
      PeriodType periodType0 = null;
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(1, days0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-1306);
      YearMonth yearMonth0 = new YearMonth((long) int0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = Period.fieldDifference((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      int int0 = 41;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) instant0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period1 = period0.minusWeeks(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      Period period1 = new Period((ReadableDuration) duration0, readableInstant0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test30()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = 908L;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-48);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Weeks weeks0 = period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, days0.size());
  }

  @Test
  public void test34()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      int int0 = 1925;
      Period period1 = period0.withHours(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, months0.size());
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 5;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test36()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(PeriodType.HOUR_INDEX);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = null;
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Period period0 = new Period((Object) string0, (Chronology) gregorianChronology0);
      assertNotNull(period0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test38()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      int int0 = (-3532);
      Period period1 = period0.withSeconds(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = 7L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusYears(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 1;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay0);
      assertNotNull(period0);
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusHours(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test42()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 5;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTime dateTime0 = mutableDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(mutableInterval0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test46()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test47()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      int int0 = (-3532);
      Period period1 = period0.minusDays(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = (-768);
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test49()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) localDate0, periodType0);
      assertNotNull(period0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test
  public void test50()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      Period period1 = period0.normalizedStandard();
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, months0.size());
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 41;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "Can{ot onvert to ";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Can{ot onvert to \"
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test54()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
      
      int int0 = 1925;
      Period period1 = period0.withMinutes(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1, months0.size());
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = (-48);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.withMillis(int0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test56()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertNotNull(period0);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = (-3738);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 4;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Period period0 = new Period((long) int0, (Chronology) copticChronology0);
      assertNotNull(period0);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 1982;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
  }

  @Test
  public void test60()  throws Throwable  {
      Object object0 = null;
      Period period0 = new Period(object0);
      assertNotNull(period0);
  }

  @Test
  public void test61()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
  }

  @Test
  public void test62()  throws Throwable  {
      int int0 = (-1225);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, (Chronology) gregorianChronology0);
      assertNotNull(period0);
  }

  @Test
  public void test63()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      int int0 = 41;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) instant0);
      assertNotNull(seconds0);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(1, weeks0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test64()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.negated();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test65()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Period period0 = years0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      int int0 = 41;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) instant0);
      assertNotNull(seconds0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, seconds0.size());
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      
      Period period1 = new Period((ReadableInstant) instant0, (ReadableDuration) duration0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.041", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
  }
}
