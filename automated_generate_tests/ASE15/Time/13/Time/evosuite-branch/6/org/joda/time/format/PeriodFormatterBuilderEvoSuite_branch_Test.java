/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:43:30 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;



import org.evosuite.runtime.testdata.FileSystemHandling;;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;


public class PeriodFormatterBuilderEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "_FgPd6@-=t8PbWK";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "The field must not be null";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int1, (long) int1, periodType0, (Chronology) islamicChronology0);
      assertNotNull(mutablePeriod0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Composite0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int1, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(stringArray0[0], stringArray0[0], stringArray0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      Period period0 = periodFormatter0.parsePeriod(stringArray0[0]);
      assertNotNull(period0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = "qG0 \\";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer(stringArray0[3]);
      assertNotNull(stringBuffer0);
      assertEquals(5, stringBuffer0.length());
      assertEquals(21, stringBuffer0.capacity());
      assertEquals("qG0 \\", stringBuffer0.toString());
      
      ReadablePeriod readablePeriod0 = null;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, readablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "k}>j";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals(4, stringBuffer0.length());
      assertEquals("k}>j", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) years0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(1, years0.size());
      assertEquals(9, stringBuffer0.length());
      assertEquals("k}>j1k}>j", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test05()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String string0 = "k}>j";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("k}>j", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
      assertEquals(4, stringBuffer0.length());
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) years0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(1, years0.size());
      assertEquals("k}>j", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
      assertEquals(4, stringBuffer0.length());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
  }

  @Test
  public void test06()  throws Throwable  {
      Days days0 = Days.SIX;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, days0.size());
      
      String string0 = mutablePeriod0.toString();
      assertNotNull(string0);
      assertEquals("P6D", string0);
      assertEquals(1, days0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "qG0 \\";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      int int0 = 0;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[0], stringArray0[6]);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(stringArray0[0]);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[3] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[3]);
      
      periodFormatterBuilder_FieldFormatterArray0[4] = periodFormatterBuilder_FieldFormatterArray0[3];
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[4]);
      
      boolean boolean1 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[4], periodFormatterBuilder_FieldFormatter0, boolean1, boolean1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatterArray0[4], periodFormatterBuilder_FieldFormatterArray0[4]);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      int int1 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) mutablePeriod0, locale0);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertEquals(37, int1);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "K=Ns6gGv+";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[0]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean1, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      
      Minutes minutes0 = Minutes.ZERO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Locale locale0 = Locale.forLanguageTag(stringArray0[0]);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) minutes0, locale0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(18, int0);
      assertEquals(1, minutes0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Hours hours0 = Hours.SIX;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int0 = 1257;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) hours0, int0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "46V'8Bnrq";
      int int0 = 0;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      assertNotNull(periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      
      Months months0 = Months.TWO;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      
      int int1 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) months0, int0, locale0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, months0.size());
      assertSame(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal1);
      assertSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
  }

  @Test
  public void test11()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String string0 = "k}>j";
      String string1 = "a%q6";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string1);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "builder has created neither a priter nor pntarser";
      String string1 = null;
      String[] stringArray0 = new String[20];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string1, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Literal0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "_FgPd6@-=t8PbWK";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      PeriodPrinter periodPrinter0 = null;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodPrinter0, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      
      int int0 = 0;
      ReadWritablePeriod readWritablePeriod0 = null;
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int1 = periodFormatterBuilder_Separator1.parseInto(readWritablePeriod0, stringArray0[1], int0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-16), int1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "~qT]r;xo";
      int int0 = 1067;
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[2];
      char char0 = 's';
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, char0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, int0, int0);
      assertEquals(1, months0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "0i,*]6!c#lrl";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0i,*]6!c#lrl\" is malformed at \"i,*]6!c#lrl\"
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String string0 = "e)";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[2];
      assertNotNull(stringArray0[4]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      String string1 = "#u1+";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      int int1 = periodFormatterBuilder_Separator1.parseInto((ReadWritablePeriod) mutablePeriod0, string1, int0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int1);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "pmificgupaacana";
      // Undeclared exception!
      try {
        Years years0 = Years.parseYears(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pmificgupaacana\" is malformed at \"mificgupaacana\"
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "builder has created neithepnt priter nor a parser";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertNotNull(periodFormatter1);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(true, periodFormatter1.isPrinter());
      assertEquals(true, periodFormatter1.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter0, periodFormatter1);
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"builder has created neithepnt pr...\"
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "0i,*]6!c#lrl";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0i,*]6!c#lrl\" is malformed at \"i,*]6!c#lrl\"
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "~qT]r;xo";
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[2];
      int int0 = (-244);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      int int1 = periodFormatterBuilder_FieldFormatter0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int0, locale0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-244), int1);
      assertEquals(1, months0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-41);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      String string0 = mutablePeriod0.toString();
      assertNotNull(string0);
      assertEquals("P-41Y-41M-41W-41DT-41H-41M-41.041S", string0);
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = 1L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      
      Chronology chronology0 = null;
      DateTime dateTime0 = new DateTime(long0, chronology0);
      assertNotNull(dateTime0);
      assertEquals(1L, dateTime0.getMillis());
      
      Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) dateTime0);
      assertNotNull(duration0);
      assertEquals(1L, duration0.getMillis());
      assertEquals(1L, dateTime0.getMillis());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(1L, duration0.getMillis());
      assertEquals(1L, dateTime0.getMillis());
      
      String string0 = period0.toString();
      assertNotNull(string0);
      assertEquals("PT0.001S", string0);
      assertEquals(1L, duration0.getMillis());
      assertEquals(1L, dateTime0.getMillis());
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = (-36L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      int int0 = (-442);
      Period period1 = period0.plusMonths(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      // Undeclared exception!
      try {
        Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-442MT-0.036S
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      int int0 = (-2715);
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[6];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[3], stringArray0[3]);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean1, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(boolean1 == boolean0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      Locale locale0 = null;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatterArray0[1]);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertNotNull(period0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      periodFormatterBuilder_Separator1.printTo((Writer) pipedWriter0, (ReadablePeriod) seconds0, locale0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(1, seconds0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 236548278;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      int int1 = 0;
      String string0 = null;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int1, int0, int1, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Hours hours0 = Hours.MIN_VALUE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int2 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint((ReadablePeriod) hours0, int1, locale0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(0, int2);
      assertEquals(1, hours0.size());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String string1 = "((\\+4`!>o%st not be null";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string1, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "PNT";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 7;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-8), int1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix1);
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertFalse(periodFormatterBuilder_CompositeAffix0.equals((Object)periodFormatterBuilder_CompositeAffix1));
      assertNotSame(periodFormatterBuilder_CompositeAffix1, periodFormatterBuilder_CompositeAffix0);
      assertNotSame(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix1);
      
      int int2 = periodFormatterBuilder_CompositeAffix1.parse(string0, int1);
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(periodFormatterBuilder_CompositeAffix0.equals((Object)periodFormatterBuilder_CompositeAffix1));
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-8), int2);
      assertNotSame(periodFormatterBuilder_CompositeAffix1, periodFormatterBuilder_CompositeAffix0);
      assertNotSame(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix1);
  }

  @Test
  public void test28()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String string0 = "f?5.Gh.";
      String string1 = "YGw)zl2vPU:f";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix(string1, string0);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"f?5.Gh.\"
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "\\?";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendWeeks();
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendSuffix(string0, string0);
      assertNotNull(periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      
      String string1 = "B,,QD0+@CzQoX#L";
      assertNotSame(string1, string0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string1, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"B,,QD0+@CzQoX#L\"
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "0i,*]6!c#lrl";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-13), int1);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "";
      String string1 = "((\\+4`!>o%st not be null";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string1, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_PluralAffix0.parse(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "P[nx0&l=";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 1;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) outputStreamWriter0, int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "1CK\"ha5(uH8:";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(28, stringBuffer0.capacity());
      assertEquals("1CK\"ha5(uH8:", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
      
      int int0 = 1;
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, int0);
      assertEquals(28, stringBuffer0.capacity());
      assertEquals("1CK\"ha5(uH8:1CK\"ha5(uH8:", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "P[nx0&l=";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 1;
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(16, int1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "46V'8Bnrq";
      String string1 = "the";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string1);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "y/-c0\\t";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "/GOB8";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "The field must not be null";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String string1 = "8-*bg\"J*3qGW%)-~";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "9B)E[d";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String string1 = "9,";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "}O";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      int int0 = 9;
      Years years0 = Years.ZERO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      int int1 = periodFormatterBuilder_Literal0.countFieldsToPrint((ReadablePeriod) years0, int0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, years0.size());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int2 = periodFormatterBuilder_SimpleAffix0.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(1, years0.size());
  }

  @Test
  public void test40()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodParser periodParser0 = null;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, periodParser0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(false, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(stringArray0[0], string0, stringArray0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toPrinter();
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test42()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = null;
      LinkedList<PeriodFormatterBuilder.Composite> linkedList0 = new LinkedList<PeriodFormatterBuilder.Composite>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>((Collection<?>) linkedList0);
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(false, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "<sj/*;F -V*N@ >ynJq";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String string0 = "k}>j";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendMinutes();
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendSeparator(string0, string0);
      assertNotNull(periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
  }

  @Test
  public void test45()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "k}>j";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparator(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = " AU+gma-\"OoS(g1KP";
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string1, string0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "4k7";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 1;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      String string0 = "Sma";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatterArray0[0], periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_FieldFormatter1, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
      assertNotNull(periodFormatterBuilder1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = "[GoSV3zn=#JnJGP-";
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "k}>j";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "lz9J;2";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      String string0 = period0.toString();
      assertNotNull(string0);
      assertEquals("PT0S", string0);
  }

  @Test
  public void test58()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = null;
      PeriodParser periodParser0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, periodParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertNotNull(periodFormatterBuilder1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test61()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      periodFormatterBuilder0.clear();
  }

  @Test
  public void test62()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = null;
      LinkedList<PeriodFormatterBuilder.Composite> linkedList0 = new LinkedList<PeriodFormatterBuilder.Composite>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>((Collection<?>) linkedList0);
      assertNotNull(linkedList1);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatterBuilder1);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter1 = periodFormatterBuilder0.toPrinter();
      assertNull(periodPrinter1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = null;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = null;
      int int0 = 443;
      // Undeclared exception!
      try {
        periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test64()  throws Throwable  {
      String string0 = "P[nx0&l=";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = (-3431);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) outputStreamWriter0, int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test
  public void test65()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_PluralAffix0.parse(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        periodFormatterBuilder_SimpleAffix0.printTo(writer0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test67()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test68()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "\\?";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test69()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(boolean0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test70()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test71()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 1157;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(int0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test72()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "k}>j";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test73()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(stringArray0[0], string0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test74()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "k}>j";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test75()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test76()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 2053;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(int0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test
  public void test77()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test
  public void test78()  throws Throwable  {
      String string0 = "#WTu{g";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(stringArray0[0], stringArray0[0], stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringArray0[0]);
      assertNotNull(mockPrintWriter0);
      
      Hours hours0 = Hours.FOUR;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Duration duration0 = hours0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, hours0.size());
      assertEquals(14400000L, duration0.getMillis());
      
      long long0 = 1L;
      Chronology chronology0 = null;
      DateTime dateTime0 = new DateTime(long0, chronology0);
      assertNotNull(dateTime0);
      assertEquals(1L, dateTime0.getMillis());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(1, hours0.size());
      assertEquals(14400000L, duration0.getMillis());
      assertEquals(1L, dateTime0.getMillis());
      
      Locale locale0 = null;
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
