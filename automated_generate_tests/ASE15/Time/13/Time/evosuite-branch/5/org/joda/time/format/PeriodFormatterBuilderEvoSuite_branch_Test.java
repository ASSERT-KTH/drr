/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:32:43 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;



import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;


public class PeriodFormatterBuilderEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertFalse(periodFormatterBuilder_Composite0.equals((Object)periodFormatterBuilder_Composite1));
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
  }

  @Test
  public void test01()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "c2A.Lz%K< @C!yL";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>((Collection<?>) set0);
      assertNotNull(linkedList0);
      assertEquals("[unicode-1-1-utf-8, UTF8]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals("[unicode-1-1-utf-8, UTF8]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      
      String string0 = "";
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      char char0 = 'a';
      // Undeclared exception!
      try {
        int int0 = periodFormatterBuilder_Composite0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, (int) char0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Minutes";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Minutes\"
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      PeriodPrinter periodPrinter0 = null;
      int int0 = 0;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      int int1 = 686;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int1, int0, int0, boolean0, int1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodPrinter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertNotNull(mutablePeriod0);
      assertFalse(int0 == int1);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      int int2 = periodFormatterBuilder_Separator1.parseInto((ReadWritablePeriod) mutablePeriod0, stringArray0[5], int1, locale0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(686, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "1tau7~/se=n?\\";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      int int0 = (-19);
      Months months0 = Months.ONE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "";
      String string1 = "ISOChronology";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder1);
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string0.equals((Object)string1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string1);
      assertNotSame(string1, string0);
      assertNotNull(mockPrintStream0);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) mockPrintStream0, charsetEncoder0);
      assertNotSame(string1, string0);
      assertNotNull(outputStreamWriter0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      
      Hours hours0 = Hours.hours(int1);
      assertNotSame(string0, string1);
      assertNotNull(hours0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, hours0.size());
      
      periodFormatter0.printTo((Writer) outputStreamWriter0, (ReadablePeriod) hours0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1, hours0.size());
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = 59;
//       String string0 = "4#&_'z1L:6X9";
//       String[] stringArray0 = new String[1];
//       stringArray0[0] = string0;
//       assertNotNull(stringArray0[0]);
//       
//       PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
//       assertNotNull(periodFormatterBuilder_Literal0);
//       
//       boolean boolean0 = false;
//       PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
//       assertNotNull(periodFormatterBuilder_Separator0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer(stringArray0[0]);
//       assertNotNull(stringBuffer0);
//       assertEquals(28, stringBuffer0.capacity());
//       assertEquals(12, stringBuffer0.length());
//       assertEquals("4#&_'z1L:6X9", stringBuffer0.toString());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=59,MONTH=59,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=59,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       LocalTime localTime0 = LocalTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localTime0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60145372800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=64,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=28,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, localTime0.size());
//       
//       Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
//       assertNotNull(days0);
//       assertEquals(1, days0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60145372800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=64,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=28,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, localTime0.size());
//       
//       Minutes minutes0 = days0.toStandardMinutes();
//       assertNotNull(minutes0);
//       assertEquals(1, minutes0.size());
//       assertEquals(1, days0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60145372800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=64,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=28,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, localTime0.size());
//       
//       Locale locale0 = Locale.ROOT;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getISO3Language());
//       
//       // Undeclared exception!
//       try {
//         periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) minutes0, locale0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "^2y{%/bP";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[0]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Hours hours0 = Hours.SIX;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) hours0, locale0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(16, int0);
      assertEquals(1, hours0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
  }

  @Test
  public void test09()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = ",iteral mut not be nulV";
      long long0 = 637L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      String string1 = periodFormatter0.print((ReadablePeriod) period0);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(string1);
      assertEquals("0,iteral mut not be nulV", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
  }

  @Test
  public void test10()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "^v";
      String string1 = "Ip)~D]xY{$^vA";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[1];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "1tau7~/se=n?\\";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      int int0 = 28181250;
      Months months0 = Months.ONE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      int int1 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int0, locale0);
      assertEquals((-28181251), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      int int0 = 0;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int1 = (-1117);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int1, int1, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int1, int1, int0);
      assertNotNull(mutablePeriod0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      periodFormatterBuilder_FieldFormatterArray0[0].setFieldValue(mutablePeriod0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      int int0 = 0;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      ReadWritablePeriod readWritablePeriod0 = null;
      // Undeclared exception!
      try {
        periodFormatterBuilder_FieldFormatter0.setFieldValue(readWritablePeriod0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      int int0 = 0;
      Hours hours0 = Hours.hours(int0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      String string0 = periodFormatter0.print((ReadablePeriod) hours0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = (-708);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[12];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      Days days0 = Days.FIVE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) days0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      String string0 = "1tau7=n?\\em\\.q";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1tau7=n?\\em\\.q\" is malformed at \"tau7=n?\\em\\.q\"
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "5Z^;P3\"=?9)ihB";
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5Z^;P3\"=?9)ihB\" is malformed at \"Z^;P3\"=?9)ihB\"
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "pwefi not followed by field";
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.parseWeeks(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pwefi not followed by field\" is malformed at \"wefi not followed by field\"
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      PeriodPrinter periodPrinter0 = null;
      int int0 = 0;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodPrinter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertNotNull(mutablePeriod0);
      
      int int1 = 20;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, stringArray0[5], int1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = ",iteral mut not be nulV";
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",iteral mut not be nulV\"
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "";
      String string1 = "ISOChronology";
      assertNotSame(string1, string0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string0.equals((Object)string1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string1);
      assertNotSame(string1, string0);
      assertNotNull(mockPrintStream0);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) mockPrintStream0, charsetEncoder0);
      assertNotSame(string1, string0);
      assertNotNull(outputStreamWriter0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      
      Hours hours0 = Hours.hours(int1);
      assertNotSame(string0, string1);
      assertNotNull(hours0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(1, hours0.size());
      
      periodFormatter0.printTo((Writer) outputStreamWriter0, (ReadablePeriod) hours0);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(1, hours0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
  }

  @Test
  public void test23()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try {
        Days days0 = Days.standardDaysIn((ReadablePeriod) mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P4M
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      int int0 = 0;
      Hours hours0 = Hours.hours(int0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      String string1 = periodFormatter0.print((ReadablePeriod) hours0);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, hours0.size());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "";
      int int0 = (-292269020);
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[3] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[3]);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[3], periodFormatterBuilder_FieldFormatterArray0[1], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Seconds seconds0 = Seconds.ONE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int1 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) seconds0, int0, locale0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, seconds0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotSame(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix1);
      assertNotSame(periodFormatterBuilder_CompositeAffix1, periodFormatterBuilder_CompositeAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix1);
      assertFalse(periodFormatterBuilder_CompositeAffix0.equals((Object)periodFormatterBuilder_CompositeAffix1));
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      
      int int0 = (-708);
      int int1 = periodFormatterBuilder_CompositeAffix1.parse(string0, int0);
      assertNotSame(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix1);
      assertNotSame(periodFormatterBuilder_CompositeAffix1, periodFormatterBuilder_CompositeAffix0);
      assertEquals((-708), int1);
      assertTrue(int0 == int1);
      assertFalse(periodFormatterBuilder_CompositeAffix0.equals((Object)periodFormatterBuilder_CompositeAffix1));
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertTrue(int1 == int0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "1tau7=n?\\em\\.q";
      String string1 = "Literal must not be null";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[0]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string1, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int0 = 670;
      Locale locale0 = null;
      int int1 = periodFormatterBuilder_Separator1.countFieldsToPrint((ReadablePeriod) years0, int0, locale0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, years0.size());
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int2 = periodFormatterBuilder_PluralAffix0.scan(stringArray0[0], int1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1, years0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "1tau7=n?\\em\\.q";
      int int0 = 670;
      String string1 = "T7/(";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = periodFormatterBuilder_PluralAffix0.scan(string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-671), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "1tau7=n?\\em\\.q";
      String string1 = "Literal must not be null";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[0]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string1, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int0 = 670;
      Locale locale0 = null;
      int int1 = periodFormatterBuilder_Separator1.countFieldsToPrint((ReadablePeriod) years0, int0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, years0.size());
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int2 = periodFormatterBuilder_PluralAffix0.parse(stringArray0[0], int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(15, int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(1, years0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "1tau7=n?\\em\\.q";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[0]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      int int0 = 670;
      Locale locale0 = null;
      int int1 = periodFormatterBuilder_Separator1.countFieldsToPrint((ReadablePeriod) years0, int0, locale0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, years0.size());
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, stringArray0[0]);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int2 = periodFormatterBuilder_PluralAffix0.parse(string0, int1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(15, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, years0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "1tau7=n?\\em\\.q";
      int int0 = 670;
      String string1 = "T7/(";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = periodFormatterBuilder_PluralAffix0.parse(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-671), int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "Invalid e|ncoding";
      int int0 = 1900;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertEquals((-1901), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotSame(periodFormatterBuilder_CompositeAffix1, periodFormatterBuilder_CompositeAffix0);
      assertNotSame(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix1);
      assertNotNull(periodFormatterBuilder_CompositeAffix1);
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertFalse(periodFormatterBuilder_CompositeAffix0.equals((Object)periodFormatterBuilder_CompositeAffix1));
      
      int int2 = periodFormatterBuilder_CompositeAffix1.calculatePrintedLength(int1);
      assertNotSame(periodFormatterBuilder_CompositeAffix1, periodFormatterBuilder_CompositeAffix0);
      assertNotSame(periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix1);
      assertEquals(51, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(periodFormatterBuilder_CompositeAffix0.equals((Object)periodFormatterBuilder_CompositeAffix1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "770.<63t'r2";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 5;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string0, int0);
      assertEquals((-6), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "pmefi not ollowed by field";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 70;
      int int1 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(int0);
      assertEquals(26, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = "org.joda.timr2bte])rxt'y=0%sueexception";
      assertNotSame(string1, string0);
      
      int int2 = periodFormatterBuilder_SimpleAffix0.scan(string1, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-27), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "1tau7~/s=n?\\.q";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 6;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertEquals((-7), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "0DCiX(RO}-euv=s";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 5;
      String string1 = "k{mb}8.";
      assertNotSame(string1, string0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-6), int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "ISOChronology";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String string1 = ",CO}rGf]m(l}[!dqNN";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "ISOChronology";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFoatterBuilder$Lieral";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      PeriodPrinter periodPrinter0 = null;
      int int0 = (-42);
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodPrinter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertNotNull(mutablePeriod0);
      
      int int1 = 0;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      int int2 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, stringArray0[5], int1, locale0);
      assertEquals((-49), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = ",iteral mut not be nulV";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
  }

  @Test
  public void test41()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodPrinter periodPrinter0 = null;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(false, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
  }

  @Test
  public void test42()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) periodFormatterBuilder_FieldFormatter0, (PeriodParser) periodFormatterBuilder_FieldFormatter0);
      assertNotNull(periodFormatter0);
      assertEquals(false, periodFormatter0.isPrinter());
      assertEquals(false, periodFormatter0.isParser());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      assertEquals(false, periodFormatter0.isPrinter());
      assertEquals(false, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        PeriodFormatter periodFormatter1 = periodFormatterBuilder0.toFormatter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Builder has created neither a printer nor a parser
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "org.joda.time.DateTime$Property";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.append(periodFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
  }

  @Test
  public void test45()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "ReadablePartial objects must have matching field types";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      String[] stringArray0 = new String[11];
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0, string0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "?\\349>vH]]0[6ex;@";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "org.joda.time.base.BaseDateTime";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 604800;
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[10];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter1;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray1 = new PeriodFormatterBuilder.FieldFormatter[5];
      assertNotSame(periodFormatterBuilder_FieldFormatterArray1, periodFormatterBuilder_FieldFormatterArray0);
      assertFalse(periodFormatterBuilder_FieldFormatterArray1.equals((Object)periodFormatterBuilder_FieldFormatterArray0));
      
      periodFormatterBuilder_FieldFormatterArray1[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray1[0]);
      
      periodFormatterBuilder_FieldFormatterArray0[9] = periodFormatterBuilder_FieldFormatterArray0[0];
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[9]);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_FieldFormatterArray0[9], (PeriodParser) periodFormatterBuilder_FieldFormatterArray1[0]);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_FieldFormatterArray1);
      assertNotSame(periodFormatterBuilder_FieldFormatterArray1, periodFormatterBuilder_FieldFormatterArray0);
      assertNotNull(periodFormatterBuilder1);
      assertFalse(periodFormatterBuilder_FieldFormatterArray0.equals((Object)periodFormatterBuilder_FieldFormatterArray1));
      assertFalse(periodFormatterBuilder_FieldFormatterArray1.equals((Object)periodFormatterBuilder_FieldFormatterArray0));
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Values array must be the same length as the types array";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Values array must be the same length as the types array";
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "No formatter supplied";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "?\\349>vH]]0[6ex;@";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test
  public void test55()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "ysi";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      periodFormatterBuilder0.clear();
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = "ReadablePartial objects must have matching field types";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = 0;
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, int0);
      assertEquals(110, stringBuffer0.capacity());
      assertEquals("ReadablePartial objects must have matching field typesReadablePartial objects must have matching field types", stringBuffer0.toString());
      assertEquals(108, stringBuffer0.length());
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = "No field to apply suffix to";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = (-2878);
      int int1 = periodFormatterBuilder_PluralAffix0.scan(string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(2877, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertFalse(string0.equals((Object)string1));
      
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(outputStream0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(bufferedOutputStream0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) bufferedOutputStream0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(outputStreamWriter0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) outputStreamWriter0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = "";
      String string1 = "gA1R)r][3d5v9+)?u4o";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertFalse(string0.equals((Object)string1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string1);
      assertNotSame(string1, string0);
      assertNotNull(mockPrintStream0);
      assertFalse(string1.equals((Object)string0));
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) mockPrintStream0);
      assertNotSame(string1, string0);
      assertNotNull(outputStreamWriter0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) outputStreamWriter0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test64()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test65()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test66()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test67()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test68()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test69()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(boolean0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test70()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test71()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 0;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(int0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test72()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test73()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = "h";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_PluralAffix0.scan(string0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(int1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test75()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test76()  throws Throwable  {
      String string0 = "I7<wJ@*X# J8,i<";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[3]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(stringArray0[7], boolean0);
      assertNotNull(mockFileWriter0);
      
      char char0 = 'l';
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) mockFileWriter0, boolean0);
      assertNotNull(mockPrintWriter0);
      
      Duration duration0 = new Duration((long) char0);
      assertNotNull(duration0);
      assertEquals(108L, duration0.getMillis());
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(108L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      
      Hours hours0 = seconds0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(108L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) hours0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test77()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      String string0 = mutablePeriod0.toString();
      assertNotNull(string0);
      assertEquals("PT0S", string0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }
}
