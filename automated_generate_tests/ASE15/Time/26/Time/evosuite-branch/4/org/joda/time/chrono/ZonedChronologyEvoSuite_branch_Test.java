/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:07 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicDayOfYearDateTimeField;
import org.joda.time.chrono.BasicWeekyearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJDayOfWeekDateTimeField;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class ZonedChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = 2;
      long long0 = zonedChronology_ZonedDateTimeField0.roundHalfFloor((long) int0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = (-1875L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1875L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gJChronology0.monthOfYear();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)julianChronology0.seconds();
      assertNotNull(preciseDurationField0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      
      long long1 = zonedChronology_ZonedDateTimeField1.getDifferenceAsLong(long0, long0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = (-1875L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1875L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-1875L), instant0.getMillis());
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(0, int0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gJChronology0.monthOfYear();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-1875L), instant0.getMillis());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)julianChronology0.seconds();
      assertNotNull(preciseDurationField0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      
      int int1 = zonedChronology_ZonedDateTimeField1.getDifference((long) int0, (long) int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
  }

  @Test
  public void test03()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 0L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      int int0 = (-1);
      long long1 = zonedChronology_ZonedDateTimeField0.addWrapField(long0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals((-3600000L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test04()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getMaxMonth();
      assertEquals(13, int0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.minutes();
      assertNotNull(durationField0);
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      long long0 = zonedChronology_ZonedDateTimeField0.add((long) int0, (long) int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(26L, long0);
  }

  @Test
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = (GJDayOfWeekDateTimeField)gregorianChronology0.dayOfWeek();
      assertNotNull(gJDayOfWeekDateTimeField0);
      assertEquals(true, gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(false, gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zonedChronology0.weeks();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertEquals("weeks", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      
      long long0 = 31536000000L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("weeks", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(false, gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      
      long long1 = zonedChronology_ZonedDateTimeField0.add(long0, long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("weeks", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(false, gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(2724710431536000000L, long1);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(long1 == long0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
  }

  @Test
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 0L;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)julianChronology0.minuteOfDay();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      int int0 = 1963;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) buddhistChronology0, (DateTimeField) zonedChronology_ZonedDateTimeField0, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals("minuteOfDay", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)skipDateTimeField0.getRangeDurationField();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("minuteOfDay", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      
      long long1 = zonedChronology_ZonedDateTimeField1.add(long0, int0);
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(117780000L, long1);
      assertFalse(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      //  // Unstable assertion: assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      //  // Unstable assertion: assertNotNull(fixedDateTimeZone0);
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(julianChronology0);
      
      DurationField durationField0 = buddhistChronology0.seconds();
      //  // Unstable assertion: assertNotNull(durationField0);
      //  // Unstable assertion: assertEquals(true, durationField0.isPrecise());
      //  // Unstable assertion: assertEquals("seconds", durationField0.getName());
      //  // Unstable assertion: assertEquals(true, durationField0.isSupported());
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(julianChronology0, durationField0);
      //  // Unstable assertion: assertNotNull(basicDayOfYearDateTimeField0);
      //  // Unstable assertion: assertEquals(true, durationField0.isPrecise());
      //  // Unstable assertion: assertEquals("seconds", durationField0.getName());
      //  // Unstable assertion: assertEquals(true, durationField0.isSupported());
      //  // Unstable assertion: assertEquals(1000L, basicDayOfYearDateTimeField0.getUnitMillis());
      //  // Unstable assertion: assertEquals(false, basicDayOfYearDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals(true, basicDayOfYearDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicDayOfYearDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      //  // Unstable assertion: assertNotNull(zonedChronology_ZonedDateTimeField0);
      //  // Unstable assertion: assertEquals(true, durationField0.isPrecise());
      //  // Unstable assertion: assertEquals("seconds", durationField0.getName());
      //  // Unstable assertion: assertEquals(true, durationField0.isSupported());
      //  // Unstable assertion: assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals(1000L, basicDayOfYearDateTimeField0.getUnitMillis());
      //  // Unstable assertion: assertEquals(false, basicDayOfYearDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals(true, basicDayOfYearDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      //  // Unstable assertion: assertNotNull(strictChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) strictChronology0, (DateTimeZone) fixedDateTimeZone0);
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = zonedChronology0.hashCode();
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals(1254579, int0);
      
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong((long) int0, long0);
       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = 0L;
      long long1 = (-9L);
      long long2 = zonedChronology_ZonedDateTimeField0.remainder(long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0L, long2);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.halfdays, cachedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long3 = zonedChronology_ZonedDurationField0.subtract(long1, long2);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals((-9L), long3);
      assertTrue(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long3);
      assertFalse(long1 == long2);
  }

  @Test
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zonedChronology0.weeks();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      
      long long0 = 31536000000L;
      long long1 = zonedChronology_ZonedDurationField1.getDifferenceAsLong(long0, long0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(long1 == long0);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = (-1875L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1875L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, int0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)julianChronology0.seconds();
      assertNotNull(preciseDurationField0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(true, preciseDurationField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(true, preciseDurationField0.isSupported());
      
      long long1 = zonedChronology_ZonedDurationField0.add((long) int0, (long) int0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-1875L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1875L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, int0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)julianChronology0.seconds();
      assertNotNull(preciseDurationField0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertNotNull(mutableInterval0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals((-1875L), mutableInterval0.getEndMillis());
      assertEquals((-1875L), mutableInterval0.getStartMillis());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int1 = 65;
      assertFalse(int1 == int0);
      
      long long1 = zonedChronology_ZonedDurationField0.getMillis(int1, (long) int0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(65000L, long1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals((-1875L), mutableInterval0.getEndMillis());
      assertEquals((-1875L), mutableInterval0.getStartMillis());
      assertEquals(8, period0.size());
      assertFalse(long0 == long1);
      
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, long1);
      assertNotNull(intArray0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals((-1875L), mutableInterval0.getEndMillis());
      assertEquals((-1875L), mutableInterval0.getStartMillis());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(8, period0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1, 5, 0}, intArray0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getMaxMonth();
      assertEquals(13, int0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      
      Duration duration0 = Duration.millis((long) int0);
      assertNotNull(duration0);
      assertEquals(13L, duration0.getMillis());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      
      Period period0 = duration0.toPeriod((Chronology) ethiopicChronology1);
      assertNotNull(period0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(8, period0.size());
      assertEquals(13L, duration0.getMillis());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
  }

  @Test
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      int int0 = 1;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, int0);
      assertNotNull(julianChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)julianChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(unsupportedDurationField0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      boolean boolean0 = zonedChronology0.equals((Object) zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      boolean boolean0 = zonedChronology0.equals((Object) zonedChronology_ZonedDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      zonedChronology0.assemble(assembledChronology_Fields0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test17()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
      assertFalse(zonedChronology0.equals((Object)zonedChronology1));
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotSame(zonedChronology0, zonedChronology1);
  }

  @Test
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      //  // Unstable assertion: assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = null;
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone(dateTimeZone0);
      //  // Unstable assertion: assertNotNull(zonedChronology1);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      //  // Unstable assertion: assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      //  // Unstable assertion: assertNotSame(zonedChronology1, zonedChronology0);
      //  // Unstable assertion: assertNotSame(zonedChronology0, zonedChronology1);
  }

  @Test
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Chronology chronology0 = null;
      int int0 = 86399992;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+23:59:59.992", fixedDateTimeZone0.getID());
      assertEquals("+23:59:59.992", fixedDateTimeZone0.toString());
      
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, (DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(strictChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = (-966);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) strictChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      try {
        long long0 = zonedChronology0.getDateTimeMillis(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -966 for millisOfDay must be in the range [0,86400000]
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = (-1875L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1875L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      String string0 = zonedChronology0.toString();
      assertNotNull(string0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("ZonedChronology[JulianChronology[UTC], UTC]", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      long long0 = 13L;
      int int0 = (-3064);
      try {
        long long1 = iSOChronology0.getDateTimeMillis(long0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3064 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = (ZonedChronology)iSOChronology0.getBase();
      assertNotNull(zonedChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance((Chronology) zonedChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotSame(zonedChronology0, zonedChronology1);
  }

  @Test
  public void test27()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)julianChronology0.era();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("era", zonedChronology_ZonedDateTimeField0.getName());
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(zonedChronology_ZonedDateTimeField0, julianChronology0);
      assertNotNull(gJYearOfEraDateTimeField0);
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("era", zonedChronology_ZonedDateTimeField0.getName());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(iSOChronology0, gJYearOfEraDateTimeField0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("era", zonedChronology_ZonedDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)islamicChronology0.days();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("era", zonedChronology_ZonedDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, dateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("era", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField1.getName());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      
      long long0 = 0L;
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDurationField1.getMillis(long0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zonedChronology0.weeks();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      
      long long0 = 31536000000L;
      int int0 = zonedChronology_ZonedDurationField1.getValue(long0, long0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(52, int0);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
  }

  @Test
  public void test29()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 18L;
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.halfdays, cachedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      
      long long1 = zonedChronology_ZonedDurationField0.getValueAsLong(long0, long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      
      long long0 = (-1875L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1875L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)julianChronology0.seconds();
      assertNotNull(preciseDurationField0);
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap((long) int0);
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(1000L, preciseDurationField0.getUnitMillis());
      assertEquals("seconds", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals((-1875L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      long long0 = 31536000000L;
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfYear, fixedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.weeks, assembledChronology_Fields0.weekyears);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(long0);
      assertNotNull(string0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("1", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      OffsetDateTimeField offsetDateTimeField0 = (OffsetDateTimeField)julianChronology0.weekyearOfCentury();
      assertNotNull(offsetDateTimeField0);
      assertEquals(100, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)gJChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(offsetDateTimeField0, dateTimeZone0, unsupportedDurationField0, unsupportedDurationField0, unsupportedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(100, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      LocalTime localTime0 = timeOfDay0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, timeOfDay0.size());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(100, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(4, timeOfDay0.size());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(1, int0);
  }

  @Test
  public void test33()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 0L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue(long0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1, int0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(yearMonthDay0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int[] intArray0 = new int[7];
      intArray0[2] = int0;
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int[] intArray1 = zonedChronology_ZonedDateTimeField0.add((ReadablePartial) localDate0, int0, intArray0, intArray0[2]);
      assertNotNull(intArray1);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertArrayEquals(new int[] {0, 1, 1, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 1, 1, 0, 0, 0, 0}, intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
  }

  @Test
  public void test34()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DurationField durationField0 = buddhistChronology0.seconds();
      assertNotNull(durationField0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(julianChronology0, durationField0);
      assertNotNull(basicDayOfYearDateTimeField0);
      assertEquals(false, basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals(true, basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicDayOfYearDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(false, basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals(true, basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(long0, long0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(long1);
      assertNotNull(string0);
      assertEquals(false, basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals(true, basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("353", string0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test35()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(2, int0);
  }

  @Test
  public void test36()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getMaxMonth();
      assertEquals(13, int0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.minutes();
      assertNotNull(durationField0);
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int1 = zonedChronology_ZonedDateTimeField0.getLeapAmount((long) int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test37()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = (-1);
      int int1 = zonedChronology_ZonedDateTimeField0.getMinimumValue((long) int0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      MockDate mockDate0 = new MockDate(int1, int1, int0, int0, int1);
      assertNotNull(mockDate0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Tue Jan 29 23:01:00 GMT 1901", mockDate0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields((Date) mockDate0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Tue Jan 29 23:01:00 GMT 1901", mockDate0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Tue Jan 29 23:01:00 GMT 1901", mockDate0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(12, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test38()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfHalfday, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.centuries, assembledChronology_Fields0.months);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = (-1);
      int int1 = zonedChronology_ZonedDateTimeField0.getMaximumValue((long) int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(12, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)iSOChronology0.weeks();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      
      long long0 = (-7L);
      String string0 = "org.joda.time.chrono.GJDayOfWeekDateTimeField";
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDateTimeField0.set(long0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.minutes();
      assertNotNull(durationField0);
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      int int0 = (-966);
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(int0, locale0);
      assertNotNull(string0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("-966", string0);
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      OffsetDateTimeField offsetDateTimeField0 = (OffsetDateTimeField)julianChronology0.weekyearOfCentury();
      assertNotNull(offsetDateTimeField0);
      assertEquals(100, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(false, offsetDateTimeField0.isLenient());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)gJChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(offsetDateTimeField0, dateTimeZone0, unsupportedDurationField0, unsupportedDurationField0, unsupportedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(100, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(100, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(3, int0);
  }

  @Test
  public void test42()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gJChronology0.yearOfCentury();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertNotNull(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(true, basicWeekyearDateTimeField0.isSupported());
      
      DurationField durationField0 = basicWeekyearDateTimeField0.getDurationField();
      assertNotNull(durationField0);
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", durationField0.getName());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(true, basicWeekyearDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", durationField0.getName());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(true, basicWeekyearDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      
      int int0 = (-279);
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string0 = zonedChronology_ZonedDateTimeField1.getAsText(int0, locale0);
      assertNotNull(string0);
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", durationField0.getName());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(true, basicWeekyearDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("-279", string0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }
}
