/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:03:01 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BasicYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class ZonedChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long0 = 1L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.eras, assembledChronology_Fields0.weekyears);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(long0, long0);
      assertEquals(0, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try {
        int int1 = zonedChronology_ZonedDateTimeField0.getDifference((long) int0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.eras, assembledChronology_Fields0.weekyears);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = (-654L);
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(long0, long0);
      assertEquals(0, int0);
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long0 = 1L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.eras, assembledChronology_Fields0.weekyears);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(long0, long0);
      assertEquals(0, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long1 = zonedChronology_ZonedDateTimeField0.roundHalfEven((long) int0);
      assertEquals((-7200000L), long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.clockhourOfDay();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = julianChronology0.getDaysInMonthMax();
      assertEquals(31, int0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)zonedChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, unsupportedDurationField0, assembledChronology_Fields0.centuries, assembledChronology_Fields0.eras);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      long long0 = zonedChronology_ZonedDateTimeField1.roundHalfEven((long) int0);
      assertEquals(0L, long0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1968;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)copticChronology0.minuteOfDay();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      assertNotNull(basicYearDateTimeField0);
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType0 = basicYearDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) zonedChronology_ZonedDateTimeField0, dateTimeFieldType0);
      assertNotNull(zeroIsMaxDateTimeField0);
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zeroIsMaxDateTimeField0.getRangeDurationField();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      long long0 = zonedChronology_ZonedDateTimeField1.getDifferenceAsLong((long) int0, (long) int0);
      assertEquals(0L, long0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)ethiopicChronology0.minuteOfHour();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 168;
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)iSOChronology0.years();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      
      int int1 = zonedChronology_ZonedDateTimeField1.getDifference((long) int0, (long) int0);
      assertEquals(0, int1);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
  }

  @Test
  public void test06()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)iSOChronology0.minuteOfDay();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      long long0 = (-446L);
      int int0 = 47;
      long long1 = zonedChronology_ZonedDateTimeField1.addWrapField(long0, int0);
      assertEquals(2819554L, long1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 1968;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)copticChronology0.minuteOfDay();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      assertNotNull(basicYearDateTimeField0);
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = basicYearDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) zonedChronology_ZonedDateTimeField0, dateTimeFieldType0);
      assertNotNull(zeroIsMaxDateTimeField0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zeroIsMaxDateTimeField0.getRangeDurationField();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long0 = zonedChronology_ZonedDateTimeField1.add((long) int0, (long) int0);
      assertEquals(118081968L, long0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test08()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      long long0 = (-2037L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gJChronology0.hourOfHalfday();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)iSOChronology0.halfdays();
      assertNotNull(preciseDurationField0);
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      int int0 = islamicChronology0.getDayOfYear(long0);
      assertEquals(287, int0);
      
      long long1 = zonedChronology_ZonedDateTimeField1.add((long) int0, int0);
      assertEquals(1033200287L, long1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test09()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      long long0 = 0L;
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DurationField durationField0 = islamicChronology0.millis();
      assertNotNull(durationField0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      
      long long1 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(long0, long0);
      assertEquals(0L, long1);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long0 = 1L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.eras, assembledChronology_Fields0.weekyears);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(long0, long0);
      assertEquals(0, int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      long long1 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong((long) int0, long0);
      assertEquals(0L, long1);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)lenientChronology0.millis();
      assertNotNull(millisDurationField0);
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int1 = zonedChronology_ZonedDurationField0.getDifference((long) int0, (long) int0);
      assertEquals(0, int1);
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = zonedChronology_ZonedDurationField0.subtract((long) int1, (long) int0);
      assertEquals(0L, long0);
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = (-2037L);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals((-2037000L), duration0.getMillis());
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-2037000L), duration0.getMillis());
  }

  @Test
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      int int0 = 168;
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Period period0 = minutes0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1, minutes0.size());
      
      int[] intArray0 = ethiopicChronology0.get((ReadablePeriod) period0, (long) int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 168}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, period0.size());
      assertEquals(1, minutes0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) iSOChronology0);
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.weeks, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      
      boolean boolean0 = zonedChronology_ZonedDurationField0.isPrecise();
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
  }

  @Test
  public void test15()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)iSOChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(unsupportedDurationField0, cachedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean0 = zonedChronology0.equals((Object) zonedChronology0);
      assertTrue(boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test17()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = zonedChronology0.equals((Object) dateTimeFieldType0);
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      zonedChronology0.assemble(assembledChronology_Fields0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      //  // Unstable assertion: assertNotNull(buddhistChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      //  // Unstable assertion: assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = null;
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone(dateTimeZone0);
      //  // Unstable assertion: assertNotSame(zonedChronology0, zonedChronology1);
      //  // Unstable assertion: assertNotSame(zonedChronology1, zonedChronology0);
      //  // Unstable assertion: assertNotNull(zonedChronology1);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      //  // Unstable assertion: assertTrue(zonedChronology1.equals((Object)zonedChronology0));
  }

  @Test
  public void test20()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      ZonedChronology zonedChronology0 = (ZonedChronology)julianChronology0.getBase();
      assertNotNull(zonedChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) zonedChronology0);
      assertNotNull(strictChronology0);
      
      int int0 = 545;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.545", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.545", fixedDateTimeZone0.toString());
      
      StrictChronology strictChronology1 = (StrictChronology)strictChronology0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertNotSame(strictChronology0, strictChronology1);
      assertNotSame(strictChronology1, strictChronology0);
      assertNotNull(strictChronology1);
      assertEquals("+00:00:00.545", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.545", fixedDateTimeZone0.toString());
      assertFalse(strictChronology0.equals((Object)strictChronology1));
      assertFalse(strictChronology1.equals((Object)strictChronology0));
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 7;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+07:00", fixedDateTimeZone0.toString());
      assertEquals("+07:00", fixedDateTimeZone0.getID());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+07:00", fixedDateTimeZone0.toString());
      assertEquals("+07:00", fixedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+07:00", fixedDateTimeZone0.toString());
      assertEquals("+07:00", fixedDateTimeZone0.getID());
      
      long long0 = zonedChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-79066047599993L), long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+07:00", fixedDateTimeZone0.toString());
      assertEquals("+07:00", fixedDateTimeZone0.getID());
  }

  @Test
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      String string0 = zonedChronology0.toString();
      assertEquals("ZonedChronology[BuddhistChronology[UTC], Europe/London]", string0);
      assertNotNull(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test25()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      LocalDate localDate0 = new LocalDate((Object) readablePeriod0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
//       assertNotNull(ethiopicChronology0);
//       
//       int int0 = 84;
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
//       
//       ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) fixedDateTimeZone0);
//       assertNotNull(zonedChronology0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
//       
//       int int1 = zonedChronology0.hashCode();
//       assertEquals((-74375316), int1);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = zonedChronology0.getDateTimeMillis((long) int0, int0, int0, int0, int0);
      assertEquals((-3600000L), long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test28()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = julianChronology0.getYearMillis(int0);
      assertEquals((-62167392000000L), long0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) long0, (Chronology) zonedChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test29()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)lenientChronology0.millis();
      assertNotNull(millisDurationField0);
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isSupported());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int1 = zonedChronology_ZonedDurationField0.getDifference((long) int0, (long) int0);
      assertEquals(0, int1);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = zonedChronology_ZonedDurationField0.getValueAsLong((long) int1, (long) int0);
      assertEquals(0L, long0);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test30()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      long long0 = (-132L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals((-132L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)mutableDateTime0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-132L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)gregorianChronology0.days();
      assertNotNull(preciseDurationField0);
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-132L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      
      int int0 = (-310);
      long long1 = zonedChronology_ZonedDurationField0.getMillis(int0, (long) int0);
      assertEquals((-26784000000L), long1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-132L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      
      DurationField durationField0 = gJMonthOfYearDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      
      int int0 = 84;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
      
      int int1 = zonedChronology_ZonedDurationField0.getValue((long) int0, (long) int0);
      assertEquals(0, int1);
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test32()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) iSOChronology0);
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.weeks, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = zonedChronology_ZonedDurationField0.add((long) int0, (long) int0);
      assertEquals(0L, long0);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long1 = zonedChronology_ZonedDurationField0.getMillis(long0, (long) int0);
      assertEquals(0L, long1);
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test33()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)iSOChronology0.centuries();
      assertNotNull(scaledDurationField0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals("centuries", scaledDurationField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, scaledDurationField0, scaledDurationField0, scaledDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals("centuries", scaledDurationField0.getName());
      
      long long0 = 1L;
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap(long0);
      assertFalse(boolean0);
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals("centuries", scaledDurationField0.getName());
  }

  @Test
  public void test34()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      long long0 = 0L;
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      Days days0 = Days.MIN_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, days0.size());
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertNotNull(unsupportedDurationField0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(1, days0.size());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.monthOfYear();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, unsupportedDurationField0, assembledChronology_Fields0.weeks, assembledChronology_Fields0.centuries);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(1, days0.size());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      String string0 = zonedChronology_ZonedDateTimeField1.getAsShortText(long0);
      assertEquals("Jan", string0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(1, days0.size());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test35()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)lenientChronology0.days();
      assertNotNull(preciseDurationField0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      
      int int0 = 27;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=27,MONTH=27,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=27,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=27,HOUR_OF_DAY=27,MINUTE=27,SECOND=27,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(localDate0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61242035553000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=29,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=118,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=27,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
      
      int int1 = zonedChronology_ZonedDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      assertEquals(1, int1);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61242035553000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=29,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=118,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=27,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals(3, localDate0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 1968;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)copticChronology0.minuteOfDay();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      assertNotNull(basicYearDateTimeField0);
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = basicYearDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) zonedChronology_ZonedDateTimeField0, dateTimeFieldType0);
      assertNotNull(zeroIsMaxDateTimeField0);
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zeroIsMaxDateTimeField0.getRangeDurationField();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = zonedChronology_ZonedDateTimeField1.getAsText((long) int0, locale0);
      assertEquals("60", string0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(string0);
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test37()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      
      DurationField durationField0 = gJMonthOfYearDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      
      int int0 = 84;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJMonthOfYearDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, durationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0, (Chronology) ethiopicChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      
      int int1 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) localTime0);
      assertEquals(13, int1);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(4, localTime0.size());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.084", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test38()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) julianChronology0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.weekyearOfCentury, cachedDateTimeZone0, assembledChronology_Fields0.hours, assembledChronology_Fields0.days, assembledChronology_Fields0.years);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(3, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)julianChronology0.seconds();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 2192L;
      int int0 = zonedChronology_ZonedDateTimeField0.getLeapAmount(long0);
      assertEquals(0, int0);
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 1968;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)copticChronology0.minuteOfDay();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      assertNotNull(basicYearDateTimeField0);
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = basicYearDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) zonedChronology_ZonedDateTimeField0, dateTimeFieldType0);
      assertNotNull(zeroIsMaxDateTimeField0);
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zeroIsMaxDateTimeField0.getRangeDurationField();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      int int1 = zonedChronology_ZonedDateTimeField1.getMaximumValue((long) int0);
      assertEquals(1439, int1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertEquals("+00:00:01.968", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.968", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(false, zeroIsMaxDateTimeField0.isLenient());
      assertEquals(true, zeroIsMaxDateTimeField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(true, basicYearDateTimeField0.isSupported());
      assertEquals("year", basicYearDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test41()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)ethiopicChronology0.minuteOfHour();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 168;
      int int1 = ethiopicChronology0.getDayOfMonth(int0, int0, int0);
      assertEquals(650361, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)iSOChronology0.years();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      Locale locale0 = null;
      String string0 = zonedChronology_ZonedDateTimeField1.getAsText(int0, locale0);
      assertEquals("168", string0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(int0 == int1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      // Undeclared exception!
      try {
        long long0 = zonedChronology_ZonedDateTimeField1.set((long) int1, string0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 168 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)ethiopicChronology0.minuteOfHour();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = 168;
      int int1 = ethiopicChronology0.getDayOfMonth(int0, int0, int0);
      assertEquals(650361, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)iSOChronology0.years();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = zonedChronology_ZonedDateTimeField1.getAsShortText(int1, locale0);
      assertEquals("650361", string0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(string0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField1.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(int0 == int1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(int1 == int0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test43()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(lenientChronology0);
      
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) lenientChronology0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.clockhourOfDay, cachedDateTimeZone0, assembledChronology_Fields0.centuries, assembledChronology_Fields0.weeks, assembledChronology_Fields0.minutes);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 2643L;
      long long1 = zonedChronology_ZonedDateTimeField0.remainder(long0);
      assertEquals(2643L, long1);
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gregorianChronology0.secondOfMinute();
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfMinute", zonedChronology_ZonedDateTimeField0.getName());
      
      Hours hours0 = Hours.ONE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertNotNull(unsupportedDurationField0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("seconds", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, dateTimeZone0, unsupportedDurationField0, unsupportedDurationField0, unsupportedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals("secondOfMinute", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("seconds", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfMinute", zonedChronology_ZonedDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      String string0 = "8b=(B(=";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumTextLength(locale0);
      assertEquals(2, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(1, seconds0.size());
      assertEquals("secondOfMinute", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("seconds", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfMinute", zonedChronology_ZonedDateTimeField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test45()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = (-20);
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, int0);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)julianChronology0.weeks();
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicMonthOfYearDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try {
        int[] intArray1 = zonedChronology_ZonedDateTimeField0.set((ReadablePartial) yearMonthDay0, int0, intArray0, intArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = julianChronology0.getDaysInMonthMax();
      assertEquals(31, int0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) julianChronology0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.weekyearOfCentury, cachedDateTimeZone0, assembledChronology_Fields0.days, assembledChronology_Fields0.weeks, assembledChronology_Fields0.years);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int1 = zonedChronology_ZonedDateTimeField0.getMinimumValue((long) int0);
      assertEquals(1, int1);
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }
}
