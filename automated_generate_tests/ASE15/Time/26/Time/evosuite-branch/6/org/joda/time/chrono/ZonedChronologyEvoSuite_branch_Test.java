/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:10:55 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;


public class ZonedChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.halfdayOfDay();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DurationField durationField0 = islamicChronology0.hours();
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDateTimeField1.roundHalfEven(long0);
      assertEquals(0L, long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      
      long long2 = zonedChronology_ZonedDateTimeField1.getDifferenceAsLong(long1, long1);
      assertEquals(0L, long2);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long0 == long2);
      assertTrue(long0 == long1);
  }

  @Test
  public void test01()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.halfdayOfDay();
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, assembledChronology_Fields0.seconds, assembledChronology_Fields0.seconds, assembledChronology_Fields0.seconds);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDateTimeField1.roundHalfEven(long0);
      assertEquals(0L, long1);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      
      long long2 = zonedChronology_ZonedDateTimeField1.getDifferenceAsLong(long1, long1);
      assertEquals(0L, long2);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      assertTrue(long0 == long2);
  }

  @Test
  public void test02()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gregorianChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 1238;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      int int1 = 7;
      long long0 = zonedChronology0.getDateTimeMillis(int0, int1, int1, int0);
      assertEquals((-40218681598762L), long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.minuteOfDay, fixedDateTimeZone0, assembledChronology_Fields0.eras, assembledChronology_Fields0.months, assembledChronology_Fields0.minutes);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int2 = zonedChronology_ZonedDateTimeField0.getDifference(long0, (long) int0);
      assertEquals((-670311360), int2);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test03()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = (GJMonthOfYearDateTimeField)gregorianChronology0.monthOfYear();
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertNotNull(gJMonthOfYearDateTimeField0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)LenientDateTimeField.getInstance((DateTimeField) gJMonthOfYearDateTimeField0, (Chronology) gregorianChronology0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("monthOfYear", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertNotNull(lenientDateTimeField0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(lenientChronology0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)lenientChronology0.hours();
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(3600000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertNotNull(preciseDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(lenientDateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("monthOfYear", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(3600000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = (-1713L);
      int int0 = 1013;
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDateTimeField0.set(long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1013 for monthOfYear is not supported: Illegal instant due to time zone offset transition: 2053-05-31T23:59:58.287 (UTC)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gregorianChronology0.hourOfHalfday();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      long long0 = 100000000L;
      int int0 = 679;
      long long1 = zonedChronology_ZonedDateTimeField1.addWrapField(long0, int0);
      assertEquals(82000000L, long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(long0 == long1);
  }

  @Test
  public void test05()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.halfdayOfDay();
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DurationField durationField0 = islamicChronology0.hours();
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDateTimeField1.roundHalfEven(long0);
      assertEquals(0L, long1);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long2 = zonedChronology_ZonedDateTimeField1.add(long0, long1);
      assertEquals(0L, long2);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertTrue(long0 == long1);
      assertTrue(long0 == long2);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test06()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) iSOChronology0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = (-122);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.weeks, cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int1 = zonedChronology_ZonedDurationField0.getValue((long) int0, (long) int0);
      assertEquals(0, int1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.dayOfMonth, cachedDateTimeZone0, assembledChronology_Fields0.millis, assembledChronology_Fields0.months, assembledChronology_Fields0.weekyears);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.add((long) int0, int1);
      assertEquals((-122L), long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = (-2224);
      LocalDate localDate0 = new LocalDate((long) int0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Seconds seconds0 = Seconds.ONE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(1, seconds0.size());
      assertEquals(1000L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      assertEquals(1, seconds0.size());
      assertEquals(3, period0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(period0);
  }

  @Test
  public void test08()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)julianChronology0.hourOfHalfday();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 1000000000000000000L;
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(zonedChronology_ZonedDateTimeField0, julianChronology0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertNotNull(gJYearOfEraDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJYearOfEraDateTimeField0.getRangeDurationField();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      
      long long1 = zonedChronology_ZonedDurationField1.getDifferenceAsLong(long0, long0);
      assertEquals(0L, long1);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
  }

  @Test
  public void test09()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      long long0 = 3900L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(3900L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test10()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gregorianChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.weekyears, fixedDateTimeZone0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = (-805L);
      long long1 = zonedChronology_ZonedDurationField0.subtract(long0, long0);
      assertEquals(25403417999195L, long1);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test11()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      long long0 = 10061L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, long0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 10, 61}, intArray0);
      assertEquals(8, period0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(intArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)buddhistChronology0.eras();
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertNotNull(unsupportedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(unsupportedDurationField0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.halfdayOfDay();
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, assembledChronology_Fields0.hours, assembledChronology_Fields0.hours, assembledChronology_Fields0.hours);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumShortTextLength(locale0);
      assertEquals(2, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) zonedChronology0, (DateTimeField) zonedChronology_ZonedDateTimeField0, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotNull(skipUndoDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      boolean boolean0 = zonedChronology0.equals((Object) skipUndoDateTimeField0);
      assertFalse(boolean0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test14()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      zonedChronology0.assemble(assembledChronology_Fields0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      //  // Unstable assertion: assertNotNull(lenientChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) lenientChronology0, (DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone1.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone1.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone1.getID());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone1);
      //  // Unstable assertion: assertNotSame(cachedDateTimeZone1, cachedDateTimeZone0);
      //  // Unstable assertion: assertTrue(cachedDateTimeZone1.equals((Object)cachedDateTimeZone0));
      
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone((DateTimeZone) cachedDateTimeZone1);
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone1.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone1.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone1.getID());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(zonedChronology1);
      //  // Unstable assertion: assertNotSame(zonedChronology0, zonedChronology1);
      //  // Unstable assertion: assertNotSame(cachedDateTimeZone1, cachedDateTimeZone0);
      //  // Unstable assertion: assertNotSame(zonedChronology1, zonedChronology0);
      //  // Unstable assertion: assertNotSame(cachedDateTimeZone0, cachedDateTimeZone1);
      //  // Unstable assertion: assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      //  // Unstable assertion: assertTrue(cachedDateTimeZone1.equals((Object)cachedDateTimeZone0));
      //  // Unstable assertion: assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      //  // Unstable assertion: assertTrue(cachedDateTimeZone0.equals((Object)cachedDateTimeZone1));
  }

  @Test
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) lenientChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      int int0 = (-2224);
      String string0 = "Adding time zone offset caused overflow";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Adding time zone offset caused overflow", simpleTimeZone0.getID());
      assertEquals(-2224, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Adding time zone offset caused overflow,offset=-2224,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Adding time zone offset caused overflow", simpleTimeZone0.getID());
      assertEquals(-2224, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Adding time zone offset caused overflow,offset=-2224,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LenientChronology lenientChronology1 = (LenientChronology)zonedChronology0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Adding time zone offset caused overflow", simpleTimeZone0.getID());
      assertEquals(-2224, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Adding time zone offset caused overflow,offset=-2224,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(lenientChronology1);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertNotSame(lenientChronology0, lenientChronology1);
      assertFalse(lenientChronology1.equals((Object)lenientChronology0));
      assertFalse(lenientChronology0.equals((Object)lenientChronology1));
  }

  @Test
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gJChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, (DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      String string0 = zonedChronology0.toString();
      assertEquals("ZonedChronology[JulianChronology[UTC], UTC]", string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      //  // Unstable assertion: assertNotNull(julianChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) fixedDateTimeZone0);
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      
      int int0 = zonedChronology0.hashCode();
      //  // Unstable assertion: assertEquals(1255048, int0);
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      long long0 = (-935L);
      int int0 = (-5);
      try {
        long long1 = iSOChronology0.getDateTimeMillis(long0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)iSOChronology0.halfdays();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, fixedDateTimeZone0);
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDurationField1.getValueAsLong(long0, long0);
      assertEquals(0L, long1);
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
  }

  @Test
  public void test23()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      
      DurationField durationField0 = islamicChronology0.weekyears();
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int0 = 0;
      long long0 = zonedChronology_ZonedDurationField0.getMillis(int0, (long) int0);
      assertEquals(0L, long0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.halfdays();
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertNotNull(durationField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 1245L;
      long long1 = zonedChronology_ZonedDurationField0.getMillis(long0, long0);
      assertEquals(53784000000L, long1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test25()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.weekyear, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.minutes);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 0L;
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue(long0);
      assertEquals(292279536, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap((long) int0);
      assertTrue(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
  }

  @Test
  public void test26()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(iSOChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) iSOChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = (-2224);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.year, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.days, assembledChronology_Fields0.weekyears);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((long) int0);
      assertEquals("1970", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(string0);
  }

  @Test
  public void test27()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = (GJYearOfEraDateTimeField)gregorianChronology0.yearOfEra();
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gJYearOfEraDateTimeField0);
      
      DurationField durationField0 = ethiopicChronology0.weekyears();
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJYearOfEraDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      ReadablePartial readablePartial0 = null;
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue(readablePartial0);
      assertEquals(1, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = (GJYearOfEraDateTimeField)gregorianChronology0.yearOfEra();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertNotNull(gJYearOfEraDateTimeField0);
      
      DurationField durationField0 = ethiopicChronology0.weekyears();
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJYearOfEraDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals("weekyears", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      ReadablePartial readablePartial0 = null;
      int int0 = 1981;
      int[] intArray0 = new int[5];
      intArray0[4] = int0;
      // Undeclared exception!
      try {
        int[] intArray1 = zonedChronology_ZonedDateTimeField0.addWrapPartial(readablePartial0, int0, intArray0, intArray0[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1981
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) buddhistChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.weekyear, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.minutes);
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 0L;
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(long0);
      assertEquals("2513", string0);
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(string0);
  }

  @Test
  public void test30()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.halfdayOfDay();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, assembledChronology_Fields0.centuries, assembledChronology_Fields0.centuries, assembledChronology_Fields0.centuries);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDateTimeField1.roundHalfEven(long0);
      assertEquals(0L, long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      MonthDay monthDay0 = new MonthDay(long1, (Chronology) zonedChronology0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumValue((ReadablePartial) monthDay0);
      assertEquals(1, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, monthDay0.size());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test31()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "-Summer";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertNotNull(gJMonthOfYearDateTimeField0);
      
      DurationField durationField0 = gJMonthOfYearDateTimeField0.getDurationField();
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("months", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("months", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfMinute", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 0L;
      // Undeclared exception!
      try {
        int int0 = zonedChronology_ZonedDateTimeField0.getLeapAmount(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zonedChronology0.minutes();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertEquals("minutes", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gregorianChronology0.weekyear();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertEquals("minutes", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      long long0 = 0L;
      String string0 = "TDP@I21u^F'1g";
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDateTimeField1.set(long0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"TDP@I21u^F'1g\" for weekyear is not supported
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)julianChronology0.hourOfHalfday();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 1000000000000000000L;
      int int0 = julianChronology0.getWeekOfWeekyear(long0);
      assertEquals(41, int0);
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(zonedChronology_ZonedDateTimeField0, julianChronology0);
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(gJYearOfEraDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJYearOfEraDateTimeField0.getRangeDurationField();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(gJYearOfEraDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields((Date) mockDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(yearMonthDay0);
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(dateMidnight0);
      
      DateTime dateTime0 = dateMidnight0.toDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(dateTime0);
      
      LocalDate localDate0 = dateTime0.toLocalDate();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDate0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField1.getAsShortText((ReadablePartial) localDate0, int0, locale0);
      assertEquals("41", string0);
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(string0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test34()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = (GJMonthOfYearDateTimeField)iSOChronology0.monthOfYear();
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertNotNull(gJMonthOfYearDateTimeField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.years();
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertNotNull(durationField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJMonthOfYearDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 3946L;
      long long1 = zonedChronology_ZonedDateTimeField0.remainder(long0);
      assertEquals(3946L, long1);
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)iSOChronology0.hourOfHalfday();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)strictChronology0.years();
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumTextLength(locale0);
      assertEquals(2, int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
  }

  @Test
  public void test36()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)julianChronology0.hourOfHalfday();
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(zonedChronology_ZonedDateTimeField0, julianChronology0);
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(gJYearOfEraDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJYearOfEraDateTimeField0.getRangeDurationField();
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(gJYearOfEraDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromDateFields((Date) mockDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(yearMonthDay0);
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTime dateTime0 = dateMidnight0.toDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateTime0);
      
      LocalDate localDate0 = dateTime0.toLocalDate();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(localDate0);
      
      int[] intArray0 = new int[7];
      int int0 = zonedChronology_ZonedDateTimeField1.getMinimumValue((ReadablePartial) localDate0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals(false, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("halfdays", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
  }

  @Test
  public void test37()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeField dateTimeField0 = gJChronology0.dayOfMonth();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      String string0 = "zN,,`gJ5-/N_&";
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) julianChronology0, dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertNotNull(skipDateTimeField0);
      
      DurationField durationField0 = skipDateTimeField0.getRangeDurationField();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("months", durationField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("months", durationField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      ReadablePartial readablePartial0 = null;
      int int0 = (-3191);
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("zn,,`gj5-/n_&_ZN,,`GJ5-/N_&_zN,,`gJ5-/N_&", locale0.toString());
      assertEquals("zN,,`gJ5-/N_&", locale0.getVariant());
      assertEquals("ZN,,`GJ5-/N_&", locale0.getCountry());
      assertEquals("zn,,`gj5-/n_&", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = zonedChronology_ZonedDateTimeField0.getAsText(readablePartial0, int0, locale0);
      assertEquals("-3191", string1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals("zn,,`gj5-/n_&_ZN,,`GJ5-/N_&_zN,,`gJ5-/N_&", locale0.toString());
      assertEquals("zN,,`gJ5-/N_&", locale0.getVariant());
      assertEquals("ZN,,`GJ5-/N_&", locale0.getCountry());
      assertEquals("zn,,`gj5-/n_&", locale0.getLanguage());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("months", durationField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test38()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) iSOChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = (-2224);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.year, cachedDateTimeZone0, assembledChronology_Fields0.months, assembledChronology_Fields0.days, assembledChronology_Fields0.weekyears);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int1 = zonedChronology_ZonedDateTimeField0.getMinimumValue((long) int0);
      assertEquals((-292275054), int1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }
}
