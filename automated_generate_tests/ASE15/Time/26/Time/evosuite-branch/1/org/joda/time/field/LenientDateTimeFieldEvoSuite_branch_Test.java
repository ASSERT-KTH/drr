/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:13:53 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class LenientDateTimeFieldEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      assertNotNull(strictDateTimeField0);
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", strictDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)LenientDateTimeField.getInstance((DateTimeField) strictDateTimeField0, (Chronology) copticChronology0);
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", strictDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", lenientDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
  }

  @Test
  public void test1()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, (Chronology) ethiopicChronology0);
      assertNull(dateTimeField1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test2()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, gregorianChronology0);
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      LenientDateTimeField lenientDateTimeField1 = (LenientDateTimeField)LenientDateTimeField.getInstance((DateTimeField) lenientDateTimeField0, (Chronology) gregorianChronology0);
      assertNotNull(lenientDateTimeField1);
      assertSame(lenientDateTimeField0, lenientDateTimeField1);
      assertSame(lenientDateTimeField1, lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField1.isSupported());
      assertEquals("weekOfWeekyear", lenientDateTimeField1.getName());
      assertEquals(true, lenientDateTimeField1.isLenient());
  }

  @Test
  public void test3()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, gregorianChronology0);
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", lenientDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = (-1174);
      long long0 = lenientDateTimeField0.set((long) int0, int0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", lenientDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals((-720313201174L), long0);
  }
}
