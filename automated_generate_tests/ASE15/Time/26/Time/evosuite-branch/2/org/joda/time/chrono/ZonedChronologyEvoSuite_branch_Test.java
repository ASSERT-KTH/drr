/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:24:31 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class ZonedChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(islamicChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = islamicChronology0.halfdays();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.yearOfEra();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)gregorianChronology0.millis();
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(millisDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, millisDurationField0, millisDurationField0, durationField0);
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 43200000L;
      long long1 = zonedChronology_ZonedDateTimeField1.roundCeiling(long0);
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(long1 == long0);
      assertEquals(5788800000L, long1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.secondOfDay();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      DurationField durationField0 = strictChronology0.years();
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 0L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, durationField0, zonedChronology_ZonedDurationField0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long1 = zonedChronology_ZonedDateTimeField1.roundFloor(long0);
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test02()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)ethiopicChronology0.millisOfSecond();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(gJMonthOfYearDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJMonthOfYearDateTimeField0.getRangeDurationField();
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      int int0 = zonedChronology_ZonedDateTimeField1.getLeapAmount(long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals(0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      
      long long1 = zonedChronology_ZonedDateTimeField1.getDifferenceAsLong(long0, (long) int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
  }

  @Test
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.secondOfDay();
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      DurationField durationField0 = strictChronology0.years();
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 0L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, durationField0, zonedChronology_ZonedDurationField0);
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getDifference(long0, long0);
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test04()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) iSOChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.secondOfDay();
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      DurationField durationField0 = strictChronology0.years();
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 0L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, durationField0, zonedChronology_ZonedDurationField0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      int int0 = (-1990);
      long long1 = zonedChronology_ZonedDateTimeField1.addWrapField(long0, int0);
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("secondOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(84410000L, long1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test06()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)ethiopicChronology0.millisOfSecond();
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(gJMonthOfYearDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJMonthOfYearDateTimeField0.getRangeDurationField();
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDateTimeField1.add(long0, long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(0L, long1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.hourOfHalfday();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMinimumValue();
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      
      long long0 = zonedChronology_ZonedDateTimeField1.add((long) int0, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(0L, long0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)lenientChronology0.millis();
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(millisDurationField0);
      
      BasicWeekOfWeekyearDateTimeField basicWeekOfWeekyearDateTimeField0 = new BasicWeekOfWeekyearDateTimeField(gregorianChronology0, millisDurationField0);
      assertEquals(true, basicWeekOfWeekyearDateTimeField0.isSupported());
      assertEquals(1L, basicWeekOfWeekyearDateTimeField0.getUnitMillis());
      assertEquals(false, basicWeekOfWeekyearDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", basicWeekOfWeekyearDateTimeField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(basicWeekOfWeekyearDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = basicWeekOfWeekyearDateTimeField0.getType();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(true, basicWeekOfWeekyearDateTimeField0.isSupported());
      assertEquals(1L, basicWeekOfWeekyearDateTimeField0.getUnitMillis());
      assertEquals(false, basicWeekOfWeekyearDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", basicWeekOfWeekyearDateTimeField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(dateTimeFieldType0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, (DurationField) millisDurationField0);
      assertEquals("weekOfWeekyear", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals(false, unsupportedDateTimeField0.isLenient());
      assertEquals(false, unsupportedDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(true, basicWeekOfWeekyearDateTimeField0.isSupported());
      assertEquals(1L, basicWeekOfWeekyearDateTimeField0.getUnitMillis());
      assertEquals(false, basicWeekOfWeekyearDateTimeField0.isLenient());
      assertEquals("weekOfWeekyear", basicWeekOfWeekyearDateTimeField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(unsupportedDateTimeField0);
      
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = null;
      try {
        zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(unsupportedDateTimeField0, cachedDateTimeZone0, millisDurationField0, millisDurationField0, millisDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-1);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DurationField durationField0 = islamicChronology0.seconds();
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("seconds", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int1 = zonedChronology_ZonedDurationField0.getDifference((long) int0, (long) int0);
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      BasicWeekOfWeekyearDateTimeField basicWeekOfWeekyearDateTimeField0 = new BasicWeekOfWeekyearDateTimeField(islamicChronology0, zonedChronology_ZonedDurationField0);
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1000L, basicWeekOfWeekyearDateTimeField0.getUnitMillis());
      assertEquals(false, basicWeekOfWeekyearDateTimeField0.isLenient());
      assertEquals(true, basicWeekOfWeekyearDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", basicWeekOfWeekyearDateTimeField0.getName());
      assertFalse(int0 == int1);
      assertNotNull(basicWeekOfWeekyearDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekOfWeekyearDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, zonedChronology_ZonedDurationField0);
      assertEquals("weekOfWeekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1000L, basicWeekOfWeekyearDateTimeField0.getUnitMillis());
      assertEquals(false, basicWeekOfWeekyearDateTimeField0.isLenient());
      assertEquals(true, basicWeekOfWeekyearDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", basicWeekOfWeekyearDateTimeField0.getName());
      assertFalse(int0 == int1);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong((long) int1, (long) int1);
      assertEquals("weekOfWeekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("seconds", durationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1000L, basicWeekOfWeekyearDateTimeField0.getUnitMillis());
      assertEquals(false, basicWeekOfWeekyearDateTimeField0.isLenient());
      assertEquals(true, basicWeekOfWeekyearDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", basicWeekOfWeekyearDateTimeField0.getName());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test10()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.yearOfCentury();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.weekyears();
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumValue(long0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals(100, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, fixedDateTimeZone0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("weekyears", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      
      long long1 = zonedChronology_ZonedDurationField1.getDifferenceAsLong((long) int0, (long) int0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("weekyears", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
  }

  @Test
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)julianChronology0.millis();
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isPrecise());
      assertNotNull(millisDurationField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 0L;
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, cachedDateTimeZone0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long1 = zonedChronology_ZonedDurationField0.subtract(long0, long0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isPrecise());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)gJChronology0.halfdays();
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertNotNull(preciseDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumTextLength(locale0);
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(2, int0);
      
      long long0 = zonedChronology_ZonedDurationField0.add((long) int0, (long) int0);
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(86400002L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      long long0 = (-127L);
      Duration duration0 = new Duration(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      long long1 = (-476L);
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, long0, long1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-349)}, intArray0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(intArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)gJChronology0.halfdays();
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertNotNull(preciseDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(preciseDurationField0, fixedDateTimeZone0);
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      boolean boolean0 = zonedChronology_ZonedDurationField0.isPrecise();
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals("halfdays", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      long long0 = (-127L);
      long long1 = (-1559L);
      Duration duration0 = new Duration(long0, long1);
      assertEquals((-1432L), duration0.getMillis());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals((-1432L), duration0.getMillis());
      assertEquals(7, period0.size());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(period0);
  }

  @Test
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)iSOChronology0.eras();
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertNotNull(unsupportedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(unsupportedDurationField0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      int int0 = (-1);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      boolean boolean0 = zonedChronology0.equals((Object) zonedChronology0);
      assertEquals("-00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.001", fixedDateTimeZone0.getID());
      assertTrue(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) islamicChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(strictChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      boolean boolean0 = zonedChronology0.equals((Object) strictChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) islamicChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)strictChronology0.dayOfWeek();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      assembledChronology_Fields0.monthOfYear = (DateTimeField) zonedChronology_ZonedDateTimeField0;
      assertEquals("dayOfWeek", assembledChronology_Fields0.monthOfYear.getName());
      assertEquals(false, assembledChronology_Fields0.monthOfYear.isLenient());
      assertEquals(true, assembledChronology_Fields0.monthOfYear.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(assembledChronology_Fields0.monthOfYear);
      
      assembledChronology_Fields0.dayOfYear = (DateTimeField) zonedChronology_ZonedDateTimeField0;
      assertEquals(false, assembledChronology_Fields0.dayOfYear.isLenient());
      assertEquals(true, assembledChronology_Fields0.dayOfYear.isSupported());
      assertEquals("dayOfWeek", assembledChronology_Fields0.dayOfYear.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(assembledChronology_Fields0.dayOfYear);
      
      zonedChronology0.assemble(assembledChronology_Fields0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)zonedChronology0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertFalse(buddhistChronology0.equals((Object)buddhistChronology1));
      assertNotSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(buddhistChronology0, buddhistChronology1);
      assertNotNull(buddhistChronology1);
  }

  @Test
  public void test21()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      //  // Unstable assertion: assertNotNull(iSOChronology0);
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) iSOChronology0, readableDateTime0, readableDateTime0);
      //  // Unstable assertion: assertNotNull(limitChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)limitChronology0.getZone();
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone(dateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      //  // Unstable assertion: assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      //  // Unstable assertion: assertNotSame(zonedChronology0, zonedChronology1);
      //  // Unstable assertion: assertNotSame(zonedChronology1, zonedChronology0);
      //  // Unstable assertion: assertNotNull(zonedChronology1);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Object object0 = null;
      Instant instant0 = new Instant(object0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Chronology chronology0 = null;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, (DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.halfdayOfDay();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, assembledChronology_Fields0.centuries, assembledChronology_Fields0.centuries, assembledChronology_Fields0.centuries);
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue();
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, int0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      try {
        long long0 = zonedChronology0.getDateTimeMillis(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gJChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      String string0 = zonedChronology0.toString();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("ZonedChronology[GJChronology[UTC], UTC]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test26()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) iSOChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//       assertNotNull(gJChronology0);
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertNotNull(fixedDateTimeZone0);
//       
//       ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gJChronology0, (DateTimeZone) fixedDateTimeZone0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertNotNull(zonedChronology0);
//       
//       int int0 = zonedChronology0.hashCode();
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(1255041, int0);
//   }

  @Test
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gJChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      GJChronology gJChronology1 = (GJChronology)zonedChronology0.withUTC();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertSame(gJChronology1, gJChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(gJChronology1);
  }

  @Test
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.yearOfCentury();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.weekyears();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumValue(long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals(100, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, fixedDateTimeZone0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotNull(zonedChronology_ZonedDurationField1);
      
      long long1 = zonedChronology_ZonedDurationField1.getValueAsLong((long) int0, (long) int0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertTrue(long0 == long1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
  }

  @Test
  public void test30()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.millis();
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertEquals("millis", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotNull(zonedChronology_ZonedDurationField1);
      
      long long0 = 2205L;
      long long1 = zonedChronology_ZonedDurationField1.getMillis(long0, long0);
      assertEquals("millis", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertEquals(2205L, long1);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
  }

  @Test
  public void test31()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)copticChronology0.weekyears();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, fixedDateTimeZone0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotNull(zonedChronology_ZonedDurationField1);
      
      long long0 = (-4544L);
      int int0 = zonedChronology_ZonedDurationField1.getValue(long0, long0);
      assertEquals("weekyears", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertEquals(0, int0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
  }

  @Test
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      DurationField durationField0 = strictChronology0.years();
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int0 = 0;
      long long0 = zonedChronology_ZonedDurationField0.getMillis(int0, (long) int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(0L, long0);
  }

  @Test
  public void test33()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(ethiopicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)ethiopicChronology0.millisOfSecond();
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(gJMonthOfYearDateTimeField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJMonthOfYearDateTimeField0.getRangeDurationField();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      boolean boolean0 = zonedChronology_ZonedDateTimeField1.isLeap(long0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(boolean0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test34()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(millisDurationField0);
      
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(iSOChronology0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)iSOChronology0.millisOfDay();
      assertEquals(1L, preciseDateTimeField0.getUnitMillis());
      assertEquals("millisOfDay", preciseDateTimeField0.getName());
      assertEquals(86399999, preciseDateTimeField0.getMaximumValue());
      assertEquals(86400000, preciseDateTimeField0.getRange());
      assertEquals(false, preciseDateTimeField0.isLenient());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(true, preciseDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(preciseDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(preciseDateTimeField0, fixedDateTimeZone0, millisDurationField0, millisDurationField0, millisDurationField0);
      assertEquals(1L, preciseDateTimeField0.getUnitMillis());
      assertEquals("millisOfDay", preciseDateTimeField0.getName());
      assertEquals(86399999, preciseDateTimeField0.getMaximumValue());
      assertEquals(86400000, preciseDateTimeField0.getRange());
      assertEquals(false, preciseDateTimeField0.isLenient());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(true, preciseDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((long) int0, locale0);
      assertEquals(1L, preciseDateTimeField0.getUnitMillis());
      assertEquals("millisOfDay", preciseDateTimeField0.getName());
      assertEquals(86399999, preciseDateTimeField0.getMaximumValue());
      assertEquals(86400000, preciseDateTimeField0.getRange());
      assertEquals(false, preciseDateTimeField0.isLenient());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(true, preciseDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test
  public void test35()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)julianChronology0.millis();
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(millisDurationField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 0L;
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(millisDurationField0, cachedDateTimeZone0);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      SkipDateTimeField skipDateTimeField0 = (SkipDateTimeField)julianChronology0.weekyear();
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("weekyear", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-292269055, skipDateTimeField0.getMinimumValue());
      assertNotNull(skipDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, millisDurationField0);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("weekyear", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-292269055, skipDateTimeField0.getMinimumValue());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(long0, locale0);
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(true, millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(true, millisDurationField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("weekyear", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-292269055, skipDateTimeField0.getMinimumValue());
      assertEquals("1969", string0);
      assertNotNull(string0);
  }

  @Test
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(islamicChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = islamicChronology0.halfdays();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.yearOfEra();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumShortTextLength(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(9, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, assembledChronology_Fields0.weekyears, assembledChronology_Fields0.weekyears, assembledChronology_Fields0.weekyears);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      LocalTime localTime0 = new LocalTime((long) int0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[6];
      int int1 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(4, localTime0.size());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(24, int1);
  }

  @Test
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      DurationField durationField0 = strictChronology0.years();
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 0L;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      int int0 = 0;
      long long1 = zonedChronology0.getDateTimeMillis(long0, int0, int0, int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      String string0 = "";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = zonedChronology_ZonedDateTimeField0.getAsShortText(int0, locale0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      
      long long2 = zonedChronology_ZonedDateTimeField0.set(long1, string1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertTrue(long0 == long1);
      assertTrue(long0 == long2);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, long2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test39()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.halfdayOfDay();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, assembledChronology_Fields0.seconds, assembledChronology_Fields0.seconds, assembledChronology_Fields0.seconds);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = (-41L);
      long long1 = zonedChronology_ZonedDateTimeField0.remainder(long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(43199959L, long1);
  }

  @Test
  public void test40()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.dayOfWeek();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = 70;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+70:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+70:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("+70:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+70:00", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zonedChronology0.years();
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("+70:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+70:00", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("+70:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+70:00", fixedDateTimeZone0.getID());
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      int int1 = cachedDateTimeZone0.getStandardOffset((long) int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[8];
      int[] intArray1 = zonedChronology_ZonedDateTimeField1.addWrapField((ReadablePartial) monthDay0, int1, intArray0, int0);
      assertArrayEquals(new int[] {7, 1, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {7, 1, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(2, monthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("+70:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+70:00", fixedDateTimeZone0.getID());
      assertFalse(int0 == int1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(int1 == int0);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotNull(intArray1);
  }

  @Test
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)iSOChronology0.eras();
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertNotNull(unsupportedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, unsupportedDurationField0, unsupportedDurationField0, unsupportedDurationField0);
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = (-1688);
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(int0, locale0);
      assertEquals("millisOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals("-1688", string0);
      assertNotNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      DurationField durationField0 = strictChronology0.years();
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = 0L;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, zonedChronology_ZonedDurationField0, durationField0, zonedChronology_ZonedDurationField0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(long0, long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertEquals(0, int0);
      
      int int1 = zonedChronology_ZonedDateTimeField0.getMinimumValue((long) int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("years", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("years", zonedChronology_ZonedDurationField0.getName());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }
}
