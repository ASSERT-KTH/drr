/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:52:07 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;



import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.junit.runner.RunWith;


public class LenientDateTimeFieldEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      LenientChronology lenientChronology1 = LenientChronology.getInstance((Chronology) lenientChronology0);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertNotSame(lenientChronology0, lenientChronology1);
      assertNotNull(lenientChronology1);
      assertFalse(lenientChronology1.equals((Object)lenientChronology0));
      assertFalse(lenientChronology0.equals((Object)lenientChronology1));
  }

  @Test
  public void test1()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = null;
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, (Chronology) gJChronology0);
      assertNull(dateTimeField1);
  }

  @Test
  public void test2()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      assertNotNull(strictDateTimeField0);
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals("centuryOfEra", strictDateTimeField0.getName());
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)LenientDateTimeField.getInstance((DateTimeField) strictDateTimeField0, (Chronology) gJChronology0);
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals("centuryOfEra", strictDateTimeField0.getName());
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("centuryOfEra", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
  }

  @Test
  public void test3()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, islamicChronology0);
      assertNotNull(lenientDateTimeField0);
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      
      long long0 = 24L;
      int int0 = (-33);
      long long1 = lenientDateTimeField0.set(long0, int0);
      assertEquals((-32976L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("secondOfMinute", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
  }
}
