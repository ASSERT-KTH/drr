/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:01:54 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Locale;



import org.evosuite.runtime.mock.java.io.MockFileWriter;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;


public class DateTimeFormatterEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      String string0 = "Australia/Sydney";
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(string0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(mutableDateTime0);
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals((-36000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "cuas<MEj\\A";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(string0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  @Test
  public void test02()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimePrinter dateTimePrinter0 = null;
      int int0 = (-1359);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "";
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertNull(dateTimeZone0);
      assertEquals("{=UTC}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      String string1 = "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.format.DateTimeFor...\"
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      String string1 = "Pri\"ting not supported";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pri\"ting not supported\"
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 1398;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      String string0 = "The partial must note null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime(string0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTime0);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "cuas<MEj\\A";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime(string0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTime0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "0^$%LJ4d ^76";
      // Undeclared exception!
      try {
        Instant instant0 = Instant.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0^$%LJ4d ^76\" is malformed at \"^$%LJ4d ^76\"
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Instant instant0 = Instant.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-2887);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "";
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = hashMap0.put(string0, dateTimeZone0);
      assertNull(dateTimeZone1);
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
      assertNotNull(localTime0);
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(4, localTime0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "65^7";
      // Undeclared exception!
      try {
        YearMonth yearMonth0 = YearMonth.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"65^7\" is malformed at \"^7\"
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1398;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      String string0 = "The partial must note null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      long long0 = dateTimeFormatter0.parseMillis(string0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-3600000L), long0);
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      String string0 = "1](*$|k &NUkgf-V\"G";
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((Object) string0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1](*$|k &NUkgf-V\"G\" is malformed at \"](*$|k &NUkgf-V\"G\"
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "PoF.Xz//;WvmK";
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((Object) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PoF.Xz//;WvmK\"
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 1376;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0);
      assertNotNull(mutableDateTime0);
      assertEquals(1376L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      String string0 = "The partial must not be null";
      int int1 = dateTimeFormatter1.parseInto((ReadWritableInstant) mutableDateTime0, string0, int0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(3601376L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1377), int1);
  }

  @Test
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1393;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0);
      assertNotNull(mutableDateTime0);
      assertEquals(1393L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      String string0 = "The partialdmust note nul";
      int int1 = dateTimeFormatter1.parseInto((ReadWritableInstant) mutableDateTime0, string0, int0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(1393L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1394), int1);
  }

  @Test
  public void test16()  throws Throwable  {
      char char0 = '?';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      ReadWritableInstant readWritableInstant0 = null;
      String string0 = "vO7Y0=X6";
      // Undeclared exception!
      try {
        int int0 = dateTimeFormatter0.parseInto(readWritableInstant0, string0, (int) char0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1398;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1398L, mutableDateTime0.getMillis());
      
      String string0 = "The partial must note null";
      int int1 = dateTimeFormatter0.parseInto((ReadWritableInstant) mutableDateTime0, string0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1398L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1399), int1);
      
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      // Undeclared exception!
      try {
        String string1 = dateTimeFormatter1.print((long) int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 44;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "cDdSto:";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("cDdSto:", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.capacity());
      
      long long0 = (-1391L);
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, long0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("cDdSto:", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.capacity());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
  }

  @Test
  public void test19()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertNotNull(partial0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      long long0 = 9223372036854775807L;
      String string0 = dateTimeFormatter0.print(long0);
      assertNotNull(string0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("292278994-08-17", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      int int0 = 46;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      char char0 = 'V';
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) char0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo(writer0, (ReadablePartial) localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        String string0 = dateTimeFormatter0.print(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1398;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(int0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1398L, mutableDateTime0.getMillis());
      
      String string0 = "The partial must note null";
      int int1 = dateTimeFormatter1.parseInto((ReadWritableInstant) mutableDateTime0, string0, int0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1398L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertEquals((-1399), int1);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) int1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1398L, mutableDateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
  }

  @Test
  public void test24()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      
      int int0 = 18;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(18, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(int0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertEquals(false, dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(false, dateTimeFormatter2.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
  }

  @Test
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter0.getZone();
      assertNull(dateTimeZone0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 44;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = "cDdSto:";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      Chronology chronology0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "Instant mult not be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(true, dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  @Test
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 1398;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertFalse(boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertTrue(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "The partial must note null";
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertFalse(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      String string0 = "^]:\"J}yJo9\\Xam";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      long long0 = (-14L);
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, long0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "cuas<MEj\\A";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      int int0 = 455;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(int0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(455, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 44;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      String string0 = "cDdSto:";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("cDdSto:", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals(23, stringBuffer0.capacity());
      
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (long) int0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("cDdSto:", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals(23, stringBuffer0.capacity());
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNull(chronology0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1398;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      String string0 = "The partial must note null";
      // Undeclared exception!
      try {
        LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The partial must note null\"
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      ReadableInstant readableInstant0 = null;
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, readableInstant0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("Instant mult ot be null", charArrayWriter0.toString());
      assertEquals(23, charArrayWriter0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1393;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      Integer integer0 = dateTimeFormatter0.getPivotYear();
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
  }

  @Test
  public void test41()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertNotNull(partial0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      
      Locale locale0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotNull(dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      ReadableInstant readableInstant0 = null;
      dateTimeFormatter0.printTo((Appendable) charArrayWriter0, readableInstant0);
      assertEquals(23, charArrayWriter0.size());
      assertEquals("Instant mult ot be null", charArrayWriter0.toString());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "Instant mult ot be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      Chronology chronology0 = dateTimeFormatter0.getChronolgy();
      assertNull(chronology0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2000, int0);
  }

  @Test
  public void test45()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      String string0 = "VO]WcTO-+vc";
      // Undeclared exception!
      try {
        YearMonth yearMonth0 = YearMonth.parse(string0, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      char char0 = 'V';
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) char0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) localTime0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(1, stringBuffer0.length());
      assertEquals("\uFFFD", stringBuffer0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals(4, localTime0.size());
  }
}
