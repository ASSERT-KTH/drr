/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:00:35 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;


public class BaseSingleFieldPeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Months months0 = Months.THREE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = (-1787);
      Months months1 = months0.dividedBy(int0);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertNotNull(months1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      
      int int1 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(months0.equals((Object)months1));
      assertEquals((-1), int1);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
  }

  @Test
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      int int0 = 0;
      Minutes minutes1 = minutes0.multipliedBy(int0);
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes1);
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(minutes0.equals((Object)minutes1));
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
      
      int int1 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertFalse(int0 == int1);
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(int1 == int0);
      assertFalse(minutes0.equals((Object)minutes1));
      assertEquals(1, int1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
  }

  @Test
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(1, days0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(days0);
      
      // Undeclared exception!
      try {
        int int0 = minutes0.compareTo((BaseSingleFieldPeriod) days0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Days
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      int int0 = 0;
      Minutes minutes1 = minutes0.multipliedBy(int0);
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes1);
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(minutes0.equals((Object)minutes1));
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
      
      boolean boolean0 = minutes1.equals((Object) minutes0);
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(boolean0);
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 3031L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Seconds seconds0 = Seconds.ZERO;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      boolean boolean0 = seconds0.equals((Object) localDate0);
      assertEquals(1, seconds0.size());
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-1282);
      Hours hours0 = Hours.hours(int0);
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) hours0);
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      boolean boolean0 = hours0.equals((Object) mutablePeriod0);
      assertEquals(1, hours0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      boolean boolean0 = seconds0.equals((Object) hours0);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Months months0 = Months.NINE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, months0.size());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, months0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(1, seconds0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertEquals(1, seconds0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = hours0.get(durationFieldType0);
      assertEquals(1, seconds0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int0 = (-1282);
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Days days0 = Days.daysBetween((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      // Undeclared exception!
      try {
        int int1 = days0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1282
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1518);
      Months months0 = Months.MAX_VALUE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = months0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1518
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = 0L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, chronology0);
      assertNotNull(period0);
      
      int int0 = (-743);
      Period period1 = period0.minusMonths(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      // Undeclared exception!
      try {
        Days days0 = Days.standardDaysIn((ReadablePeriod) period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P743M
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 0L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, chronology0);
      assertNotNull(period0);
      
      Days days0 = Days.standardDaysIn((ReadablePeriod) period0);
      assertEquals(1, days0.size());
      assertNotNull(days0);
  }

  @Test
  public void test16()  throws Throwable  {
      Years years0 = null;
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) years0);
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
  }

  @Test
  public void test17()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Weeks weeks1 = Weeks.standardWeeksIn((ReadablePeriod) weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks1.size());
      assertNotNull(weeks1);
      assertSame(weeks0, weeks1);
      assertSame(weeks1, weeks0);
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-1072L);
      DateTimeZone dateTimeZone0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, dateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-7);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-7,MONTH=-7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-7,HOUR_OF_DAY=-7,MINUTE=-7,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62407436820000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=9,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=144,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=53,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(timeOfDay0);
      
      YearMonth yearMonth0 = YearMonth.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(2, yearMonth0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62407436820000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=9,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=144,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=53,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(yearMonth0);
      
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) timeOfDay0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 3031L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) localDate0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Years years0 = Years.yearsBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      ReadableInstant readableInstant0 = null;
      DateTime dateTime0 = yearMonthDay0.toDateTime(readableInstant0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTime0);
      
      // Undeclared exception!
      try {
        Years years0 = Years.yearsBetween((ReadableInstant) dateTime0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 7;
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0);
      assertEquals(7L, mutableInterval0.getStartMillis());
      assertEquals(7L, mutableInterval0.getEndMillis());
      assertNotNull(mutableInterval0);
      
      Hours hours0 = Hours.hoursIn((ReadableInterval) mutableInterval0);
      assertEquals(1, hours0.size());
      assertEquals(7L, mutableInterval0.getStartMillis());
      assertEquals(7L, mutableInterval0.getEndMillis());
      assertNotNull(hours0);
  }

  @Test
  public void test24()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Years years0 = Years.THREE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(1, years0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test26()  throws Throwable  {
      Years years0 = Years.THREE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Period period0 = years0.toPeriod();
      assertEquals(1, years0.size());
      assertNotNull(period0);
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       Months months0 = Months.NINE;
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       int int0 = months0.hashCode();
//       assertEquals(1, months0.size());
//       assertEquals(12637, int0);
//   }
}
