/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:39:38 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;




import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;


public class BaseSingleFieldPeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Days days0 = Days.ONE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Days days1 = Days.SEVEN;
      assertFalse(days1.equals((Object)days0));
      assertNotSame(days1, days0);
      assertNotNull(days1);
      assertEquals(1, days1.size());
      
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days1);
      assertFalse(days1.equals((Object)days0));
      assertFalse(days0.equals((Object)days1));
      assertNotSame(days1, days0);
      assertNotSame(days0, days1);
      assertEquals(1, days1.size());
      assertEquals(1, days0.size());
      assertEquals((-1), int0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 2441;
      Weeks weeks0 = Weeks.weeks(int0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Weeks weeks1 = Weeks.MIN_VALUE;
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotSame(weeks1, weeks0);
      assertNotNull(weeks1);
      assertEquals(1, weeks1.size());
      
      int int1 = weeks0.compareTo((BaseSingleFieldPeriod) weeks1);
      assertFalse(weeks0.equals((Object)weeks1));
      assertFalse(weeks1.equals((Object)weeks0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(weeks0, weeks1);
      assertNotSame(weeks1, weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks1.size());
      assertEquals(1, int1);
  }

  @Test
  public void test02()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      // Undeclared exception!
      try {
        int int0 = days0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Days cannot be compared to class org.joda.time.Hours
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Days days0 = Days.ONE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, days0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1776;
      Weeks weeks0 = Weeks.weeks(int0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      
      Period period0 = minutes0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      
      Minutes minutes1 = period0.toStandardMinutes();
      assertTrue(minutes1.equals((Object)minutes0));
      assertTrue(minutes0.equals((Object)minutes1));
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
      assertNotNull(minutes1);
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      
      boolean boolean0 = minutes0.equals((Object) minutes1);
      assertTrue(minutes1.equals((Object)minutes0));
      assertTrue(minutes0.equals((Object)minutes1));
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Days days0 = Days.SIX;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      boolean boolean0 = years0.equals((Object) days0);
      assertEquals(1, days0.size());
      assertEquals(1, years0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      boolean boolean0 = days0.equals((Object) days0);
      assertEquals(1, days0.size());
      assertTrue(boolean0);
      
      String string0 = null;
      Interval interval0 = Interval.parse(string0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) interval0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) seconds0);
      assertNotNull(minutes0);
      assertEquals(1, seconds0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1, minutes0.size());
      
      boolean boolean1 = minutes0.equals((Object) boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1, minutes0.size());
      assertFalse(boolean1);
  }

  @Test
  public void test07()  throws Throwable  {
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Days days1 = days0.minus(days0);
      assertFalse(days1.equals((Object)days0));
      assertFalse(days0.equals((Object)days1));
      assertNotSame(days1, days0);
      assertNotSame(days0, days1);
      assertNotNull(days1);
      assertEquals(1, days1.size());
      assertEquals(1, days0.size());
      
      boolean boolean0 = days1.equals((Object) days0);
      assertFalse(days1.equals((Object)days0));
      assertFalse(days0.equals((Object)days1));
      assertNotSame(days1, days0);
      assertNotSame(days0, days1);
      assertEquals(1, days1.size());
      assertEquals(1, days0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Days days0 = Days.standardDaysIn(readablePeriod0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Days days0 = Days.standardDaysIn(readablePeriod0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1, days0.size());
      
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertEquals(1, weeks0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1, days0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      Seconds seconds0 = Seconds.seconds(int0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Days days0 = Days.MIN_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      int int1 = seconds0.get(durationFieldType0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(0, int1);
  }

  @Test
  public void test11()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(2, yearMonth0.size());
      
      int int0 = 1684;
      // Undeclared exception!
      try {
        int int1 = months0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1684
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 103;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = years0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 103
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try {
        Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P9M
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) hours0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 1166;
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(4, localDateTime0.size());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) int0, (Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 12;
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0, int0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) timeOfDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      int int0 = years0.get(durationFieldType0);
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(Integer.MIN_VALUE, int0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0);
      assertNotNull(yearMonthDay0);
      assertEquals(1, years0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      YearMonthDay yearMonthDay1 = null;
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) iSOChronology0, readableDateTime0, readableDateTime0);
      assertNotNull(limitChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)limitChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) readableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(2, yearMonth0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      assertEquals(2, yearMonth0.size());
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       Days days0 = Days.THREE;
//       assertNotNull(days0);
//       assertEquals(1, days0.size());
//       
//       int int0 = days0.hashCode();
//       assertEquals(1, days0.size());
//       assertEquals(12475, int0);
//   }
}
