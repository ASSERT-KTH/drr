/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:00:21 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class DateTimeZoneEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 1855L;
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(57722400000L, long1);
      
      boolean boolean0 = true;
      long long2 = cachedDateTimeZone0.adjustOffset(long1, boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(57722400000L, long2);
  }

  @Test
  public void test01()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-376L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(57722400000L, long1);
      
      boolean boolean0 = false;
      long long2 = cachedDateTimeZone0.adjustOffset(long1, boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(57718800000L, long2);
  }

  @Test
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775808L);
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-9223372036854775808L), long1);
  }

  @Test
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 3230L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-88L);
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-88L), long1);
      
      long long2 = cachedDateTimeZone0.getMillisKeepLocal((DateTimeZone) cachedDateTimeZone0, long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long0 == long2);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals((-88L), long2);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 655;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = null;
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (long) int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.toString());
      assertEquals((-3598690L), long0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "-00:00:00.005";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try {
        long long1 = fixedDateTimeZone0.convertLocalToUTC(long0, boolean0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 3230L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0, int0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long1 = cachedDateTimeZone0.getMillisKeepLocal((DateTimeZone) fixedDateTimeZone0, (long) int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(3600000L, long1);
      
      boolean boolean0 = true;
      long long2 = cachedDateTimeZone0.convertLocalToUTC(long1, boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(0L, long2);
  }

  @Test
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 3230L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.convertLocalToUTC((long) int0, boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3600000L), long1);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = (-509L);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
  }

  @Test
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = (-4294967316L);
      Chronology chronology0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, chronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-4323600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(dateMidnight0);
      
      Months months0 = Months.THREE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = (-2757);
      Months months1 = months0.minus(int0);
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertNotNull(months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) months1);
      assertEquals((-7262438325000L), dateMidnight1.getMillis());
      assertEquals(1, months0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-4323600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1, months1.size());
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(months0.equals((Object)months1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(months1.equals((Object)months0));
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(months0, months1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(months1, months0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 655;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.getID());
      assertTrue(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 3230L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 655;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ReadableInstant readableInstant0 = null;
      int int1 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.655", fixedDateTimeZone0.toString());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(655, int1);
  }

  @Test
  public void test16()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 1490L;
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      DateTime dateTime0 = new DateTime((long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      int int1 = fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0L, dateTime0.getMillis());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775808L);
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getName(long0, locale0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("-00:01:15", string0);
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775808L);
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getShortName(long0, locale0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("-00:01:15", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 2615605;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:43:35.605", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertEquals("+00:43:35.605", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.toString());
      assertEquals("+00:43:35.605", string0);
      assertNotNull(string0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertEquals("+00:43:35.605", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.toString());
      assertEquals("java.util.SimpleTimeZone[id=+00:43:35.605,offset=2615605,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2615605, simpleTimeZone0.getRawOffset());
      assertEquals("+00:43:35.605", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals("+00:43:35.605", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.toString());
      assertEquals("+00:43", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:43", fixedDateTimeZone1.getID());
      assertEquals("java.util.SimpleTimeZone[id=+00:43:35.605,offset=2615605,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2615605, simpleTimeZone0.getRawOffset());
      assertEquals("+00:43:35.605", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotNull(fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone1.useDaylightTime());
      assertEquals(2615605, simpleTimeZone1.getRawOffset());
      assertEquals("+00:43:35.605", simpleTimeZone1.getID());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:43:35.605,offset=2615605,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.toString());
      assertTrue(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertNotNull(simpleTimeZone1);
      assertNotSame(simpleTimeZone1, simpleTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone1);
      assertEquals(false, simpleTimeZone1.useDaylightTime());
      assertEquals(2615605, simpleTimeZone1.getRawOffset());
      assertEquals("+00:43:35.605", simpleTimeZone1.getID());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:43:35.605,offset=2615605,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:43:35.605", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone2.isFixed());
      assertEquals("+00:43", fixedDateTimeZone2.getID());
      assertEquals("+00:43", fixedDateTimeZone2.toString());
      assertTrue(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone2));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertNotNull(fixedDateTimeZone2);
      assertNotSame(simpleTimeZone1, simpleTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone2);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
  }

  @Test
  public void test20()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test22()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-292269337);
      String string0 = "X";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=X,offset=-292269337,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-292269337, simpleTimeZone0.getRawOffset());
      assertEquals("X", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-81:11\" is malformed at \"81:11\"
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 1490L;
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, int0);
      
      String string0 = "No parser supplied";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=No parser supplied,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("No parser supplied", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=No parser supplied,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("No parser supplied", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test
  public void test25()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      String string0 = cachedDateTimeZone0.toString();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", string0);
      assertNotNull(string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zoneInfo0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Europe/London' is not recognised
         //
      }
  }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(cachedDateTimeZone0);
//       
//       String string0 = cachedDateTimeZone0.toString();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", string0);
//       assertNotNull(string0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", zoneInfo0.getID());
//       assertEquals(false, cachedDateTimeZone1.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone1.toString());
//       assertEquals("Europe/London", cachedDateTimeZone1.getID());
//       assertNotNull(cachedDateTimeZone1);
//       assertSame(cachedDateTimeZone0, cachedDateTimeZone1);
//       assertSame(cachedDateTimeZone1, cachedDateTimeZone0);
//   }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-2068);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-2);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = 990;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 990
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 2;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertEquals("+00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("+00:00:00.002", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("+00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.002", fixedDateTimeZone1.getID());
      assertEquals("+00:00:00.002", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 1L;
      String string0 = fixedDateTimeZone0.getShortName(long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeZone.setDefault((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(cachedDateTimeZone0);
//       
//       long long0 = (-88L);
//       boolean boolean0 = true;
//       long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertTrue(long1 == long0);
//       assertTrue(long0 == long1);
//       assertEquals((-88L), long1);
//       
//       String string0 = cachedDateTimeZone0.getName(long1);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertTrue(long1 == long0);
//       assertTrue(long0 == long1);
//       assertEquals("\u82F1\u56FD\u590F\u6642\u9593", string0);
//       assertNotNull(string0);
//   }

  @Test
  public void test37()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
  }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertEquals(false, set0.isEmpty());
//       assertEquals(572, set0.size());
//       assertNotNull(set0);
//   }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 486;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+486:00", fixedDateTimeZone0.getID());
      assertEquals("+486:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test
  public void test41()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "-00:00:00.005";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      Object object0 = fixedDateTimeZone0.writeReplace();
      assertEquals("-00:00:00.005", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.005", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(object0);
  }
}
