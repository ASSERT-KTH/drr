/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:59:37 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;


public class FieldUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = null;
      boolean boolean0 = FieldUtils.equals(object0, object1);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Object object0 = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = FieldUtils.equals(object0, object1);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "Multiplication overflows an int: ";
      boolean boolean0 = FieldUtils.equals((Object) string0, (Object) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals((Object) dateTimeFieldType0, object0);
      assertFalse(boolean0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-593);
      int int1 = 0;
      int int2 = (-1);
      int int3 = FieldUtils.getWrappedValue(int0, int1, int2, int1);
      assertEquals((-1), int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      assertFalse(int2 == int0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 14;
      String string0 = "";
      int int1 = 13;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for  must be in the range [13,13]
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "S";
      int int0 = 0;
      int int1 = 4462;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int1);
      assertEquals(0, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      FieldUtils.verifyValueBounds(string0, int0, int0, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      String string0 = "[<G\\c!; (HO([ ";
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for [<G\\c!; (HO([  must be in the range [0,0]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 399;
      int int1 = (-283);
      int int2 = FieldUtils.safeMultiply(int1, int0);
      assertEquals((-112917), int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 399 for monthOfYear must be in the range [-283,-112917]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      int int0 = 0;
      FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = (-5L);
      long long1 = FieldUtils.safeAdd(long0, long0);
      assertEquals((-10L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      int int0 = FieldUtils.safeToInt(long1);
      assertEquals((-10), int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals((-20), int1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -20 for dayOfWeek must be in the range [-10,-20]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 157;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      try {
        long long0 = islamicChronology0.getDateTimeMillis((long) int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 157 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      int int0 = 0;
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 95;
      int int1 = FieldUtils.safeMultiply(int0, int0);
      assertEquals(9025, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      DateTimeField dateTimeField0 = null;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = 1209599983L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1463132118873600289
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-177L);
      long long1 = 5097600050L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -902275208850
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 21859200000L;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 21859200000 * 21859200000
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      long long0 = FieldUtils.safeMultiply((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 14;
      long long0 = 1L;
      long long1 = FieldUtils.safeMultiply(long0, (long) int0);
      assertEquals(14L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 317351893;
      long long0 = 1L;
      long long1 = FieldUtils.safeMultiply(long0, int0);
      assertEquals(317351893L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      long long2 = FieldUtils.safeMultiply(long1, long0);
      assertEquals(317351893L, long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 15778800019L;
      int int0 = (-2147483571);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 15778800019 * -2147483571
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 34;
      int int1 = 1;
      long long0 = FieldUtils.safeMultiply((long) int0, int1);
      assertEquals(34L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 15778800019L;
      int int0 = 0;
      long long1 = FieldUtils.safeMultiply(long0, int0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      long long0 = FieldUtils.safeMultiply((long) int0, int1);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 422;
      int int1 = (-2147483638);
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertEquals((-2147483216), int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try {
        int int3 = FieldUtils.safeMultiply(int2, int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483216 * -2147483216
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 34;
      int int1 = (-799);
      int int2 = FieldUtils.getWrappedValue(int0, int1, int0);
      assertEquals(34, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      
      int int3 = (-2147483626);
      assertFalse(int3 == int2);
      
      // Undeclared exception!
      try {
        int int4 = FieldUtils.safeMultiply(int2, int3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 34 * -2147483626
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = (-2433L);
      long long1 = 9223372036854775802L;
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2433 - 9223372036854775802
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = 0;
      int int1 = FieldUtils.safeMultiplyToInt(long0, (long) int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long1 = FieldUtils.safeSubtract((long) int1, (long) int0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertTrue(int0 == int1);
      assertFalse(long1 == long0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = 11;
      int int2 = 4462;
      int int3 = FieldUtils.getWrappedValue(int0, int1, int2);
      assertEquals(4452, int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      
      long long0 = FieldUtils.safeSubtract((long) int0, (long) int3);
      assertEquals((-4452L), long0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      
      long long1 = (-9223372036854775780L);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeAdd(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -4452 + -9223372036854775780
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = 4462;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int1);
      assertEquals(0, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      long long0 = (-9223372036854775780L);
      long long1 = FieldUtils.safeAdd((long) int2, long0);
      assertEquals((-9223372036854775780L), long1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(long1 == long0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(long0 == long1);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 2147483626;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeAdd(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483626 + 2147483626
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = (-593);
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
