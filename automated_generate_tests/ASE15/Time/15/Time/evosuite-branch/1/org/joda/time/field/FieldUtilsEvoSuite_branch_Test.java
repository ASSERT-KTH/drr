/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:02 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.TimeZone;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.chrono.GJChronology;
import org.joda.time.field.FieldUtils;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class FieldUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      long long0 = 40L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals(object0, (Object) long0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals((Object) dateTimeField0, object0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = null;
      boolean boolean0 = FieldUtils.equals(object0, (Object) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      long long0 = (-1L);
      int int1 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = FieldUtils.getWrappedValue(int1, int0, int2);
      assertEquals(Integer.MIN_VALUE, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1083;
      int int1 = FieldUtils.safeNegate(int0);
      assertEquals((-1083), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = FieldUtils.getWrappedValue(int0, int1, int0);
      assertEquals(1083, int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "dY_cdI~2:kE";
      int int0 = 124;
      int int1 = (-10);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 124 for dY_cdI~2:kE must be in the range [-10,-10]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "";
      int int0 = 2484;
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      int int0 = Integer.MIN_VALUE;
      long long0 = (-1L);
      int int1 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483648 for  must be in the range [1,1]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 3724;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      int int1 = (-2);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3724 for dayOfYear must be in the range [3724,-2]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 3724;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 13L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(169, int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int1 = (-696);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -696 for weekyear must be in the range [169,169]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1611;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1611 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      assertNotNull(dateTimeField0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("monthOfYear", dateTimeField0.getName());
      
      int int0 = (-1931);
      int int1 = 0;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1931 for monthOfYear must be in the range [0,0]
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 9223372036854775729L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeToInt(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 9223372036854775729
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeMultiply(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1296;
      long long0 = (-9223372036854775794L);
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiplyToInt((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1296 * -9223372036854775794
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = 0L;
      long long1 = FieldUtils.safeMultiply(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      long long2 = (-5968L);
      assertFalse(long2 == long1);
      
      long long3 = FieldUtils.safeMultiply(long2, long1);
      assertEquals(0L, long3);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      assertFalse(long2 == long0);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long0 == long3);
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long1 == long2);
      assertTrue(long1 == long0);
      assertTrue(long1 == long3);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 1L;
      long long1 = 21859200010L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 21859200010
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 1;
      long long0 = FieldUtils.safeMultiply((long) int0, (long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 31083597720006L;
      int int0 = (-2147483585);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 31083597720006 * -2147483585
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = 0L;
      long long1 = FieldUtils.safeMultiply(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = (-1);
      long long2 = FieldUtils.safeMultiply(long1, int0);
      assertEquals(0L, long2);
      assertTrue(long1 == long2);
      assertTrue(long1 == long0);
      assertTrue(long0 == long2);
      assertTrue(long0 == long1);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 1083;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1172889L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 2147483642;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiply(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483642 * 2147483642
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 2484;
      int int1 = FieldUtils.safeMultiply(int0, int0);
      assertEquals(6170256, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 2147483631;
      int int1 = (-1507);
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483631 * -1507
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = 40L;
      long long1 = (-9223372036854775804L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 40 - -9223372036854775804
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = 845L;
      int int0 = 0;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long1 = FieldUtils.safeSubtract(long0, (long) int1);
      assertEquals(845L, long1);
      assertTrue(int1 == int0);
      assertTrue(long0 == long1);
      assertTrue(int0 == int1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      long long0 = (-14L);
      long long1 = FieldUtils.safeAdd((long) int0, long0);
      assertEquals((-14L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      long long2 = (-9223372036854775806L);
      assertFalse(long2 == long1);
      
      // Undeclared exception!
      try {
        long long3 = FieldUtils.safeAdd(long2, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775806 + -14
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = (-519L);
      long long1 = (-1159L);
      long long2 = FieldUtils.safeSubtract(long0, long1);
      assertEquals(640L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Instant instant1 = instant0.plus(long2);
      assertNotNull(instant1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(instant0.equals((Object)instant1));
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
      assertEquals((-12219292799360L), instant1.getMillis());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-1730);
      int int1 = (-2147483632);
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeAdd(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1730 + -2147483632
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 2484;
      int int1 = (-2147483632);
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertEquals((-2147481148), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-143);
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals((-286), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = FieldUtils.getWrappedValue(int0, int1, int1, int0);
      assertEquals((-285), int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }
}
