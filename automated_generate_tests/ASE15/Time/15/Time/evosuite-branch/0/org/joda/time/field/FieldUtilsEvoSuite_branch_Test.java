/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:41 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.FieldUtils;
import org.joda.time.field.LenientDateTimeField;
import org.junit.runner.RunWith;


public class FieldUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = null;
      boolean boolean0 = FieldUtils.equals(object0, (Object) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Object object0 = null;
      int int0 = (-499);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-499), (int)integer0);
      
      boolean boolean0 = FieldUtils.equals(object0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Multiplication overflows allong: ";
      String string1 = "V";
      assertNotSame(string1, string0);
      
      boolean boolean0 = FieldUtils.equals((Object) string1, (Object) string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 1L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(1, int0);
      
      int int1 = (-1835);
      assertFalse(int1 == int0);
      
      int int2 = 6;
      assertFalse(int2 == int0);
      
      int int3 = FieldUtils.getWrappedValue(int1, int0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertEquals(1, int3);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "Z0} -1]S8'_BIyI";
      int int0 = (-499);
      int int1 = (-1052);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -499 for Z0} -1]S8'_BIyI must be in the range [-499,-1052]
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "Multiplication overflows allong: ";
      int int0 = 0;
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = (-236);
      String string0 = "";
      int int1 = 1835;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -236 for  must be in the range [1835,-236]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-47);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int1 = 0;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-46), int2);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int2, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -46 for hourOfDay must be in the range [-47,-47]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 7;
      int int1 = (-5615);
      int int2 = FieldUtils.getWrappedValue(int0, int0, int1, int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-5609), int2);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(int0, int2, int0, int0, int2, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5609 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = 7L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(7, int0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.minuteOfDay();
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("minuteOfDay", lenientDateTimeField0.getName());
      
      int int1 = 4019;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds((DateTimeField) lenientDateTimeField0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4019 for minuteOfDay must be in the range [7,7]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      int int0 = (-2184);
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 2013L;
      long long1 = FieldUtils.safeSubtract(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      int int0 = FieldUtils.safeToInt(long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0, int0);
      
      int int1 = (-4);
      assertFalse(int1 == int0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4 for millisOfSecond must be in the range [0,0]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-2147483668L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4611686104326734224
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-3295);
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(10857025, int1);
      
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiplyToInt((long) int0, (long) int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -35773897375
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-9223372036854775792L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775792 * -9223372036854775792
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-2184);
      long long0 = 0L;
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      long long0 = FieldUtils.safeMultiply((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 1;
      int int1 = (-992);
      long long0 = FieldUtils.safeMultiply((long) int0, (long) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-992L), long0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 1L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(1, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 9223372036854775807L;
      int int0 = 17971861;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775807 * 17971861
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 1;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 0L;
      long long1 = FieldUtils.safeSubtract(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
      
      int int0 = FieldUtils.safeToInt(long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0, int0);
      
      long long2 = FieldUtils.safeMultiply((long) int0, int0);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertTrue(long0 == long2);
      assertTrue(long0 == long1);
      assertEquals(0L, long2);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-3345);
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-6690), int1);
      
      long long0 = FieldUtils.safeMultiply((long) int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(22378050L, long0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 236548221;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiply(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 236548221 * 236548221
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-3345);
      int int1 = 2615651;
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -3345 * 2615651
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = (-9223372036854775798L);
      long long1 = 2038L;
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775798 - 2038
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 365;
      long long0 = 2629799984L;
      long long1 = FieldUtils.safeSubtract((long) int0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-2629799619L), long1);
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = 9223372036854775797L;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeAdd(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775797 + 9223372036854775797
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2449);
      long long0 = FieldUtils.safeAdd((long) int0, (long) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-2449L), long0);
  }

  @Test
  public void test32()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      long long0 = (-2455L);
      Instant instant1 = instant0.minus(long0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant0.equals((Object)instant1));
      assertEquals(1392409283775L, instant1.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-2449);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeAdd(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2449 + -2147483648
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeMultiply(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Integer.MIN_VALUE;
      assertFalse(int2 == int1);
      
      int int3 = FieldUtils.safeAdd(int1, int2);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int3);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-3345);
      int int1 = FieldUtils.safeNegate(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3345, int1);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = (-47);
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
