/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:07:47 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;


public class FieldUtilsEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = FieldUtils.equals(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object0, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object0.equals((Object)object1));
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals((Object) dateTimeField0, object0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 4214;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(4214, (int)integer0);
      
      Object object0 = null;
      boolean boolean0 = FieldUtils.equals((Object) integer0, object0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-895);
      int int1 = (-14);
      int int2 = FieldUtils.getWrappedValue(int0, int0, int0, int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-26), int2);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      int int2 = Integer.MIN_VALUE;
      int int3 = FieldUtils.getWrappedValue(int1, int1, int2, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertEquals(Integer.MIN_VALUE, int3);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-1);
      int int1 = Integer.MIN_VALUE;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int1, int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-2), int2);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 86400034;
      String string0 = "'-3gfpC(o{";
      int int1 = (-1580);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 86400034 for '-3gfpC(o{ must be in the range [86400034,-1580]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 86400034;
      String string0 = "'-3gfpC(o{";
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "OS-jT";
      int int0 = 22;
      int int1 = 3133;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 22 for OS-jT must be in the range [3133,22]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1);
      DateTimeFieldType dateTimeFieldType0 = null;
      int int1 = 0;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int1, int1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      int int0 = (-416);
      int int1 = 0;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(int0, int1, int1, int1, int1, int1, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-292275064);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
      
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfDay", dateTimeField0.getName());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-3413);
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(11648569, int1);
      
      DateTimeField dateTimeField0 = null;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int1, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1;
      DateTimeField dateTimeField0 = null;
      int int1 = (-1);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int1, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 4214;
      long long0 = 1000000000001L;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiplyToInt((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4214000000004214
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 31556952032L;
      long long1 = (-1133L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -35754026652256
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-9223372036854775738L);
      int int0 = 584;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 584 * -9223372036854775738
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      long long0 = (-508L);
      int int1 = FieldUtils.safeMultiplyToInt(long0, (long) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 4214;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(4214, (int)integer0);
      
      int int1 = 0;
      int int2 = FieldUtils.safeMultiplyToInt((long) int1, (long) integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(0, int2);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 1L;
      int int0 = 0;
      long long1 = FieldUtils.safeMultiply(long0, (long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-1L);
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals((-1), int0);
      
      long long1 = FieldUtils.safeMultiply((long) int0, int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1L, long1);
      
      long long2 = FieldUtils.safeMultiply((long) int0, long1);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-1L), long2);
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 9223372036854775713L;
      long long1 = (-10L);
      long long2 = FieldUtils.safeAdd(long0, long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(9223372036854775703L, long2);
      
      int int0 = (-1870);
      // Undeclared exception!
      try {
        long long3 = FieldUtils.safeMultiply(long2, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775703 * -1870
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = 2147483688L;
      int int0 = 1;
      long long1 = FieldUtils.safeMultiply(long0, int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(2147483688L, long1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 4214;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(4214, (int)integer0);
      
      int int1 = 0;
      long long0 = FieldUtils.safeMultiply((long) integer0, int1);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int0 == int1);
      assertEquals(0L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = (-1L);
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals((-1), int0);
      
      int int1 = FieldUtils.safeMultiply(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-292275064);
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiply(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -292275064 * -292275064
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 2612;
      int int1 = (-2147483646);
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2612 * -2147483646
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = 16L;
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 16 - -9223372036854775808
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-292275064);
      long long0 = FieldUtils.safeSubtract((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-3413);
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(11648569, int1);
      
      long long0 = FieldUtils.safeSubtract((long) int1, (long) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0L, long0);
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = (-310L);
      long long1 = (-9223372036854775801L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeAdd(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -310 + -9223372036854775801
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = (-3413);
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(11648569, int1);
      
      long long0 = FieldUtils.safeMultiply((long) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-39756565997L), long0);
      
      long long1 = FieldUtils.safeAdd((long) int1, long0);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertEquals((-39744917428L), long1);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 2612;
      int int1 = (-2831);
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-219), int2);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 2147483640;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeAdd(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483640 + 2147483640
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 2612;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(5224, int1);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 4214;
      int int1 = FieldUtils.safeNegate(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-4214), int1);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
