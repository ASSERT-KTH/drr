/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:00:55 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class DateTimeZoneEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 55L;
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(55L, long1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-174);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-174:00", fixedDateTimeZone0.getID());
      assertEquals("-174:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-174,MONTH=-174,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-174,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-174,HOUR_OF_DAY=-174,MINUTE=-174,SECOND=-174,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-68131875414000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=191,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-68131875414000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=191,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=6,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("-174:00", fixedDateTimeZone0.getID());
      assertEquals("-174:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 28265637;
      String string0 = "ervs";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(28265637, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ervs,offset=28265637,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("ervs", simpleTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(28265637, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ervs,offset=28265637,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("ervs", simpleTimeZone0.getID());
      assertEquals("+07:51", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+07:51", fixedDateTimeZone0.getID());
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal((DateTimeZone) fixedDateTimeZone0, (long) int0);
      assertEquals(28265637, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ervs,offset=28265637,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("ervs", simpleTimeZone0.getID());
      assertEquals("+07:51", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+07:51", fixedDateTimeZone0.getID());
      assertEquals(28265637L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "^Ft!#";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      long long0 = 2L;
      long long1 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-3599998L), long1);
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 9223372036854775807L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = 19;
      boolean boolean0 = false;
      long long0 = cachedDateTimeZone0.convertLocalToUTC((long) int0, boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-3599981L), long0);
      
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-3599981L), long1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = 1L;
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset(long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 3310L;
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 1540;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.540", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.540", fixedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      int int1 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.540", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.540", fixedDateTimeZone0.getID());
      assertEquals(1540, int1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName";
      int int0 = (-38);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-38:00", fixedDateTimeZone0.getID());
      assertEquals("-38:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("org.joda.time.format.datetimeformatterbuilder$timezonename_ORG.JODA.TIME.FORMAT.DATETIMEFORMATTERBUILDER$TIMEZONENAME", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ORG.JODA.TIME.FORMAT.DATETIMEFORMATTERBUILDER$TIMEZONENAME", locale0.getCountry());
      assertEquals("org.joda.time.format.datetimeformatterbuilder$timezonename", locale0.getLanguage());
      
      String string1 = fixedDateTimeZone0.getName((long) int0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("-38:00", fixedDateTimeZone0.getID());
      assertEquals("-38:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("org.joda.time.format.datetimeformatterbuilder$timezonename_ORG.JODA.TIME.FORMAT.DATETIMEFORMATTERBUILDER$TIMEZONENAME", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ORG.JODA.TIME.FORMAT.DATETIMEFORMATTERBUILDER$TIMEZONENAME", locale0.getCountry());
      assertEquals("org.joda.time.format.datetimeformatterbuilder$timezonename", locale0.getLanguage());
      assertEquals("-38:00", string1);
  }

  @Test
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = (-1923L);
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      
      String string0 = cachedDateTimeZone0.getName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Heure d'\u00E9t\u00E9 britannique", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = 3310L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, int0);
      
      String string0 = "--Sc^v6y m0aocy";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=--Sc^v6y m0aocy,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("--Sc^v6y m0aocy", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=--Sc^v6y m0aocy,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("--Sc^v6y m0aocy", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=--Sc^v6y m0aocy,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("--Sc^v6y m0aocy", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
  }

  @Test
  public void test13()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test15()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "UTC";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test18()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 726L;
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3600000, int0);
      
      int int1 = (-2434);
      assertFalse(int1 == int0);
      
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2434
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      int int1 = 24;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int1);
      assertNotNull(fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:24", fixedDateTimeZone0.toString());
      assertEquals("+00:24", fixedDateTimeZone0.getID());
  }

  @Test
  public void test20()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 726L;
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3600000, int0);
      
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 3600000
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-394);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.394", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.394", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("-00:00:00.394", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.394", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("-00:00:00.394", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("-00:00:00.394", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.394", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.394", fixedDateTimeZone1.toString());
      assertEquals("-00:00:00.394", fixedDateTimeZone1.getID());
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "GMT";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
      assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = 3415L;
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      String string1 = fixedDateTimeZone0.getShortName(long0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
      assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00", string1);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
      assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "UTC";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-394);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.394", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.394", fixedDateTimeZone0.toString());
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.394", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.394", fixedDateTimeZone0.toString());
      
      TimeZone timeZone0 = null;
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("-00:00:00.394", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.394", fixedDateTimeZone1.toString());
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       String string0 = "GMT";
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
//       
//       long long0 = 3415L;
//       String string1 = fixedDateTimeZone0.getName(long0);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
//       assertEquals("+00:00", string1);
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       String string0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", zoneInfo0.getID());
//   }

  @Test
  public void test29() {}
//   @Test
//   public void test29()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertNotNull(set0);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(567, set0.size());
//   }

  @Test
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = 556L;
      DateTime dateTime0 = new DateTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(556L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(556L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, int0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
      assertEquals(556L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       String string0 = cachedDateTimeZone0.toString();
//       assertNotNull(string0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", string0);
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       
//       long long0 = 55L;
//       String string0 = cachedDateTimeZone0.getShortName(long0);
//       assertNotNull(string0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("BST", string0);
//   }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 10000;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:10", fixedDateTimeZone0.toString());
      assertEquals("+00:00:10", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Object object0 = fixedDateTimeZone0.writeReplace();
      assertNotNull(object0);
      assertEquals("+00:00:10", fixedDateTimeZone0.toString());
      assertEquals("+00:00:10", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }
}
