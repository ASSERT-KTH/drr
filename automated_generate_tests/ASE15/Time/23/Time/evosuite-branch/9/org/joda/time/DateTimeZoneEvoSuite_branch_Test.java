/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:11:36 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class DateTimeZoneEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 25;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      boolean boolean0 = true;
      long long0 = cachedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals(25L, long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = 0;
      MonthDay monthDay0 = new MonthDay((long) int0, (Chronology) strictChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      int int1 = 2013;
      LocalDate localDate0 = monthDay0.toLocalDate(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, monthDay0.size());
      assertEquals(1356998400000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(dateMidnight0);
      
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, monthDay0.size());
      assertEquals(1356998400000L, dateTime0.getMillis());
      assertEquals(1356998400000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTime0);
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, monthDay0.size());
      assertEquals(1356998400000L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(1356998400000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, monthDay0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1356998400000L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(1356998400000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 0L;
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0, dateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dateMidnight0.toGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(zoneInfo0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long1 = cachedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-8);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.008", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.008", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = true;
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) int0, boolean0);
      assertEquals(0L, long0);
      assertEquals("-00:00:00.008", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.008", fixedDateTimeZone0.getID());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 0L;
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0, dateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 0;
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(int0);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals((-2208988800000L), dateMidnight1.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
  }

  @Test
  public void test06()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 0L;
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0, dateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dateMidnight0.toGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(zoneInfo0);
      
      int int0 = 0;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      int int1 = cachedDateTimeZone0.getOffsetFromLocal((long) int0);
      assertEquals(3600000, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test08()  throws Throwable  {
      byte byte0 = (byte)0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes((int) byte0, (int) byte0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((long) byte0);
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = (-116);
      boolean boolean0 = false;
      long long0 = cachedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals((-116L), long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean1 = cachedDateTimeZone0.isStandardOffset(long0);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 48;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+48:00", fixedDateTimeZone0.getID());
      assertEquals("+48:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ReadableInstant readableInstant0 = null;
      int int1 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertEquals(172800000, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+48:00", fixedDateTimeZone0.getID());
      assertEquals("+48:00", fixedDateTimeZone0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 0L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = cachedDateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
      assertEquals(3600000, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-116);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.116", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.116", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertEquals("-00:00:00.116", string0);
      assertEquals("-00:00:00.116", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.116", fixedDateTimeZone0.getID());
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 0L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertEquals(57722400000L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getName(long1, locale0);
      assertEquals("Heure du m\u00E9ridien de Greenwich", string0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 623191202;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+173:06:31.202", fixedDateTimeZone0.getID());
      assertEquals("+173:06:31.202", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertEquals("+173:06:31.202", string0);
      assertEquals("+173:06:31.202", fixedDateTimeZone0.getID());
      assertEquals("+173:06:31.202", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 0L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getShortName(long0, locale0);
      assertEquals("BST", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-8);
      String string0 = "rXI(Cpi{z2bsS~C";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=rXI(Cpi{z2bsS~C,offset=-8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("rXI(Cpi{z2bsS~C", simpleTimeZone0.getID());
      assertEquals(-8, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=rXI(Cpi{z2bsS~C,offset=-8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("rXI(Cpi{z2bsS~C", simpleTimeZone0.getID());
      assertEquals(-8, simpleTimeZone0.getRawOffset());
      assertNotNull(fixedDateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.008", fixedDateTimeZone1.toString());
      assertEquals("-00:00:00.008", fixedDateTimeZone1.getID());
      assertNotNull(fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      
      String string1 = fixedDateTimeZone1.toString();
      assertEquals("-00:00:00.008", string1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.008", fixedDateTimeZone1.toString());
      assertEquals("-00:00:00.008", fixedDateTimeZone1.getID());
      assertNotNull(string1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(string1, string0);
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forID(string1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.008", fixedDateTimeZone1.toString());
      assertEquals("-00:00:00.008", fixedDateTimeZone1.getID());
      assertEquals("-00:00:00.008", fixedDateTimeZone2.toString());
      assertEquals("-00:00:00.008", fixedDateTimeZone2.getID());
      assertEquals(true, fixedDateTimeZone2.isFixed());
      assertNotNull(fixedDateTimeZone2);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone2);
      assertNotSame(string1, string0);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone2, fixedDateTimeZone1);
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-12219292800000L);
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertEquals((-12219292800000L), mutableInterval0.getEndMillis());
      assertEquals((-12219292800000L), mutableInterval0.getStartMillis());
      assertNotNull(mutableInterval0);
      
      DateTime dateTime0 = mutableInterval0.getStart();
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), mutableInterval0.getEndMillis());
      assertEquals((-12219292800000L), mutableInterval0.getStartMillis());
      assertNotNull(dateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTime0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), mutableInterval0.getEndMillis());
      assertEquals((-12219292800000L), mutableInterval0.getStartMillis());
      assertNotNull(cachedDateTimeZone0);
      
      String string0 = cachedDateTimeZone0.getName(long0);
      assertEquals("-00:01:15", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals((-12219292800000L), dateTime0.getMillis());
      assertEquals((-12219292800000L), mutableInterval0.getEndMillis());
      assertEquals((-12219292800000L), mutableInterval0.getStartMillis());
      assertNotNull(string0);
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = 0L;
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(long0, dateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dateMidnight0.toGregorianCalendar();
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals("Europe/London", cachedDateTimeZone1.getID());
      assertEquals("Europe/London", cachedDateTimeZone1.toString());
      assertEquals(false, cachedDateTimeZone1.isFixed());
      assertNotNull(cachedDateTimeZone1);
      assertSame(cachedDateTimeZone1, cachedDateTimeZone0);
  }

  @Test
  public void test19()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-2702);
      String string0 = "GMT-Greenwich Mean Time";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-2702, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=GMT-Greenwich Mean Time,offset=-2702,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("GMT-Greenwich Mean Time", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-Greenwich Mean Time\" is malformed at \"Greenwich Mean Time\"
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 865;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 865
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-1000);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1000
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = 59;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes((int) byte0, int0);
      assertEquals("+00:59", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:59", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-8);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-08:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-08:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals("-08:00", string0);
      assertEquals("-08:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-08:00", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("-08:00", fixedDateTimeZone1.toString());
      assertEquals("-08:00", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-08:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-08:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals("+00:00:00.001", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", fixedDateTimeZone1.toString());
      assertEquals("+00:00:00.001", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertEquals("UTC", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-8);
      String string0 = "rXI(Cpi{z2bsS~C";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=rXI(Cpi{z2bsS~C,offset=-8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-8, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("rXI(Cpi{z2bsS~C", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=rXI(Cpi{z2bsS~C,offset=-8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-8, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("rXI(Cpi{z2bsS~C", simpleTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=rXI(Cpi{z2bsS~C,offset=-8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-8, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("rXI(Cpi{z2bsS~C", simpleTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(cachedDateTimeZone0);
//       
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertEquals(false, cachedDateTimeZone1.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone1.getID());
//       assertEquals("Europe/London", cachedDateTimeZone1.toString());
//       assertNotNull(cachedDateTimeZone1);
//       assertSame(cachedDateTimeZone1, cachedDateTimeZone0);
//   }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "Duration";
      int int0 = 10209375;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(10209375, simpleTimeZone0.getRawOffset());
      assertEquals("Duration", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Duration,offset=10209375,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+02:50", fixedDateTimeZone0.toString());
      assertEquals("+02:50", fixedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(10209375, simpleTimeZone0.getRawOffset());
      assertEquals("Duration", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Duration,offset=10209375,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test33()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(false, set0.isEmpty());
      assertEquals(567, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test34()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      assertNotNull(zoneInfoProvider0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Object object0 = fixedDateTimeZone0.writeReplace();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(object0);
  }
}
