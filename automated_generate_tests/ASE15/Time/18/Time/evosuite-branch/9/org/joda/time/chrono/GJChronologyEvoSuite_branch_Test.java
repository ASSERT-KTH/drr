/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:14:58 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class GJChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      long long0 = 30962844000000L;
      long long1 = 4546L;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) period0, long0, long1);
      assertNotNull(intArray0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertArrayEquals(new int[] {(-981), (-2), 0, (-4), (-5), (-59), (-55), (-454)}, intArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = (-5);
      int int1 = (-2168);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int1, int0, int1, int1, int0, int1, int1);
      assertNotNull(mutablePeriod0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = (-42521587200000L);
      long long1 = lenientChronology0.add((ReadablePeriod) mutablePeriod0, long0, int1);
      assertEquals(13089532401249224L, long1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 1000000000000000L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(1000000000000000L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(1000000000000000L, instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(1000000000000000L, instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long1 = 0L;
      MutableInterval mutableInterval0 = new MutableInterval(long1, long0, (Chronology) gJChronology0);
      assertNotNull(mutableInterval0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1000000000000000L, instant0.getMillis());
      assertEquals(1000000000000000L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Period period0 = mutableInterval0.toPeriod();
      assertNotNull(period0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1000000000000000L, instant0.getMillis());
      assertEquals(1000000000000000L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-2168);
      long long0 = (-42521587200000L);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears(int0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, yearMonthDay0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(int0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 1000000000000000L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(1000000000000000L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(1000000000000000L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(1000000000000000L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      LocalDate localDate0 = new LocalDate(long0, (Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(1000000000000000L, instant0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 4;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4L, mutableDateTime0.getMillis());
      
      DateTime dateTime0 = mutableDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4L, mutableDateTime0.getMillis());
      assertEquals(4L, dateTime0.getMillis());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      
      LocalDate localDate0 = dateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4L, mutableDateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(4L, dateTime0.getMillis());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      
      DateTime dateTime1 = dateTime0.withDurationAdded((long) int0, int0);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(20L, dateTime1.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4L, mutableDateTime0.getMillis());
      assertEquals(4L, dateTime0.getMillis());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime1, int0);
      assertNotNull(gJChronology0);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals(20L, dateTime1.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4L, mutableDateTime0.getMillis());
      assertEquals(4L, dateTime0.getMillis());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.004", fixedDateTimeZone0.getID());
      
      // Undeclared exception!
      try {
        long long0 = gJChronology0.set((ReadablePartial) localDate0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfMonth is not supported
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = 775;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(int0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      // Undeclared exception!
      try {
        YearMonthDay yearMonthDay2 = yearMonthDay1.withDayOfMonth(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 775 for dayOfMonth must be in the range [1,28]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Europe/London,cutover=2014-02-14T20:21:21.320Z]", string0);
      assertNotNull(string0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Europe/London,cutover=2014-02-14]", string0);
      assertNotNull(string0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }

  @Test
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Europe/London]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 775;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(int0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Interval interval0 = yearMonthDay1.toInterval();
      assertNotNull(interval0);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay1.size());
      assertEquals((-23063702325000L), interval0.getStartMillis());
      assertEquals((-23063615925000L), interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 29;
      int int1 = 2;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int0, int0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-5092);
      int int1 = 2;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int1, int1, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5092 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 24;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 24 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Interval interval0 = yearMonthDay0.toInterval();
      assertNotNull(interval0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 6;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0, (Chronology) iSOChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(6L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTime dateTime0 = mutableDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(6L, dateTime0.getMillis());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals(6L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0, int0);
      assertNotNull(gJChronology0);
      assertEquals(6L, dateTime0.getMillis());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals(6L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-61964524800000L), long0);
      assertEquals(6L, dateTime0.getMillis());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals(6L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = 30962844000000L;
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = (-19);
      long long0 = (-12219292800000L);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -19
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-2026);
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Years years0 = Years.ZERO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      long long0 = 18L;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, (long) int0, long0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, years0.size());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 12;
      long long0 = gJChronology0.julianToGregorianByWeekyear(int0);
      assertEquals((-1209599988L), long0);
  }

  @Test
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 775;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int0);
      assertNotNull(dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals((-37706169525000L), dateMidnight1.getMillis());
  }

  @Test
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      //  // Unstable assertion: assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertNotNull(gJChronology0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(302621044, int0);
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  @Test
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 1073741824;
      YearMonthDay yearMonthDay1 = yearMonthDay0.plusDays(int0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      int int0 = 5;
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      DateTime dateTime0 = new DateTime(int0, int0, int0, int0, int0, int0, int0, (Chronology) lenientChronology0);
      assertNotNull(dateTime0);
      assertEquals((-79103069694995L), dateTime0.getMillis());
  }

  @Test
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 588L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields((Chronology) gJChronology0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
  }
}
