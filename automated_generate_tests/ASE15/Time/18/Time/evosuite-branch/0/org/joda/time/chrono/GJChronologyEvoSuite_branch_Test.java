/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:01 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Locale;
import java.util.TimeZone;




import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class GJChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      int int0 = (-2474);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) int0, long0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, instant0.getMillis());
      assertEquals(1, months0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      byte byte0 = (byte) (-123);
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) byte0, (int) byte0);
      assertEquals((-2911158000123L), long0);
      assertEquals(1, months0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-1724);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      long long0 = buddhistChronology0.add((ReadablePeriod) months0, (long) int0, int0);
      assertEquals((-45336758401724L), long0);
      assertEquals(1, months0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      TimeZone timeZone0 = null;
      long long0 = 2067L;
      int int0 = ethiopicChronology0.getWeekOfWeekyear(long0);
      assertEquals(17, int0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      byte byte0 = (byte)84;
      long long1 = gJChronology0.add((ReadablePeriod) months0, (long) int0, (int) byte0);
      assertEquals(1987030800017L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, months0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-1724);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      LocalTime localTime0 = new LocalTime((long) int0, (Chronology) buddhistChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392422398276L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTime dateTime1 = dateTime0.plusYears(int0);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertEquals((-53011756726724L), dateTime1.getMillis());
      assertEquals(1392422398276L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      TimeZone timeZone0 = null;
      long long0 = 2067L;
      int int0 = ethiopicChronology0.getWeekOfWeekyear(long0);
      assertEquals(17, int0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      byte byte0 = (byte)84;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) int0, (long) byte0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, months0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      int int0 = 7;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) gJChronology0, assembledChronology_Fields0.hourOfHalfday, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      
      long long0 = skipDateTimeField0.roundHalfFloor((long) int0);
      assertEquals(0L, long0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
  }

  @Test
  public void test07()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      int int0 = 7;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) gJChronology0, assembledChronology_Fields0.hourOfHalfday, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      
      int int1 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        long long0 = skipDateTimeField0.set((long) int1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for hourOfHalfday is not supported
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0, (Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      int int0 = 11;
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      gJChronology0.validate((ReadablePartial) localDate0, intArray0);
      assertArrayEquals(new int[] {11, 11, 11, 0, 0, 0}, intArray0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[UTC,cutover=2014-02-14T20:21:21.320Z]", string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test10()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[UTC]", string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      byte byte0 = (byte) (-9);
      int int0 = 2;
      LocalDate localDate0 = new LocalDate((int) byte0, int0, int0, (Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals((-62417087925000L), dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int1 = 2;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int0, int0, int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,29]
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 0;
      byte byte0 = (byte) (-9);
      try {
        long long0 = gJChronology0.getDateTimeMillis((int) byte0, int0, (int) byte0, int0, (int) byte0, (int) byte0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -9 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 11;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-61793107124989L), long0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1724);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (long) int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1724
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      long long0 = (-12219292800000L);
      int int0 = 1892;
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1892
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0, (Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Days days0 = Days.ZERO;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, days0.size());
      
      int int0 = 11;
      LocalDate localDate1 = localDate0.withPeriodAdded((ReadablePeriod) mutablePeriod0, int0);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(1, days0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, localDate1.size());
  }

  @Test
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 25;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      long long0 = gJChronology0.set((ReadablePartial) partial0, (long) int0);
      assertEquals((-61378127999975L), long0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      long long0 = (-12219292800000L);
      long long1 = gJChronology0.set((ReadablePartial) localDate0, long0);
      assertEquals(1392422325000L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gJChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) zonedChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      long long1 = gJChronology0.julianToGregorianByWeekyear(long0);
      assertEquals((-1209600000L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(302621044, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      int int0 = 7;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) gJChronology0, assembledChronology_Fields0.hourOfHalfday, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      int int1 = skipDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(2, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
  }

  @Test
  public void test25()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      int int0 = 7;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) gJChronology0, assembledChronology_Fields0.hourOfHalfday, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      
      int int1 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      long long0 = skipDateTimeField0.getDifferenceAsLong((long) int1, (long) int0);
      assertEquals(0L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
  }

  @Test
  public void test26()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      int int0 = 7;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) gJChronology0, assembledChronology_Fields0.hourOfHalfday, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      
      ReadablePartial readablePartial0 = null;
      int int1 = skipDateTimeField0.getMinimumValue(readablePartial0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
  }

  @Test
  public void test27()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      int int0 = 7;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) gJChronology0, assembledChronology_Fields0.hourOfHalfday, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      int int1 = skipDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
  }

  @Test
  public void test28()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(strictChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) strictChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("GMT", zoneInfo0.getID());
      
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0, (Chronology) strictChronology0);
      assertNotNull(localDate0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3, localDate0.size());
      
      Interval interval0 = localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(interval0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = interval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minus((ReadablePeriod) period0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(86400000L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(3, yearMonthDay1.size());
  }

  @Test
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      int[] intArray0 = new int[4];
      gJChronology0.validate((ReadablePartial) localTime0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
  }
}
