/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:31:21 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;




import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class GJChronologyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 6801;
      Minutes minutes0 = Minutes.ONE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Period period0 = minutes0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, minutes0.size());
      
      Period period1 = period0.plusMonths(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, minutes0.size());
      
      int int1 = (-3150);
      long long0 = gJChronology0.add((ReadablePeriod) period1, (long) int0, int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, minutes0.size());
      assertEquals((-56338567471718199L), long0);
  }

  @Test
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int0 = 60;
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-60270048000000L), dateMidnight1.getMillis());
      
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadablePeriod) months0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotNull(dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-60285945600000L), dateMidnight2.getMillis());
      assertEquals(1, months0.size());
      assertEquals((-60270048000000L), dateMidnight1.getMillis());
  }

  @Test
  public void test02()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = 2081L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2081L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 84;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(2081L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      long long1 = (-12219292800000L);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, long1, (long) int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {387, 2, 2, 0, 1, 1, 15, 84}, intArray0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(2081L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      long long0 = (-12219292800000L);
      long long1 = gJChronology0.set((ReadablePartial) yearMonthDay0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392422325000L, long1);
  }

  @Test
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) evoSuiteFile0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 375;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.minus((ReadablePeriod) period0);
      assertTrue(yearMonthDay1.equals((Object)yearMonthDay0));
      assertTrue(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 0L;
      int int0 = 2;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, long0, int0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("GJChronology[Europe/London,cutover=1970-01-01,mdfw=2]", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = 1847;
      int int1 = 2;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (long) int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      String string0 = gJChronology0.toString();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("GJChronology[Europe/London,cutover=1970-01-01T00:00:01.847Z,mdfw=2]", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London]", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) evoSuiteFile0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Interval interval0 = yearMonthDay0.toInterval();
      assertNotNull(interval0);
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      
      int int0 = 28;
      int int1 = 2;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = 854;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 854 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      
      int int0 = 2;
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-62101468724998L), long0);
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = (-2145L);
      YearMonth yearMonth0 = new YearMonth(long0, (Chronology) gJChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Interval interval0 = yearMonth0.toInterval();
      assertNotNull(interval0);
      assertEquals(2674800000L, interval0.getEndMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals(2, yearMonth0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 97;
      int int1 = 3;
      YearMonthDay yearMonthDay0 = new YearMonthDay(int0, int1, int1, (Chronology) gJChronology0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(dateTime0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-59100969525000L), dateTime0.getMillis());
  }

  @Test
  public void test14()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = (-12219292800000L);
      int int0 = (-1072);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1072
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gJChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      int int0 = 1847;
      long long0 = gJChronology0.set((ReadablePartial) timeOfDay0, (long) int0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(69681320L, long0);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1847
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 6801;
      Minutes minutes0 = Minutes.ONE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Period period0 = minutes0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, minutes0.size());
      
      Period period1 = period0.plusMonths(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(1, minutes0.size());
      
      long long0 = gJChronology0.add((ReadablePeriod) period1, (long) int0, int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(1, minutes0.size());
      assertEquals(121635222628866801L, long0);
  }

  @Test
  public void test17()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = 2081L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2081L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 84;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(2081L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, long0, (long) int0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-1), (-997)}, intArray0);
      assertEquals(2081L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-3690);
      long long0 = gJChronology0.julianToGregorianByWeekyear(int0);
      assertEquals((-1209603690L), long0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth(long0, (Chronology) gJChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      int int0 = (-3712);
      YearMonth yearMonth1 = yearMonth0.plusYears(int0);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertNotNull(yearMonth1);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth1.size());
      
      YearMonth yearMonth2 = yearMonth1.minusYears(int0);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertNotNull(yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth2, yearMonth0);
      assertNotSame(yearMonth2, yearMonth1);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth2.size());
  }

  @Test
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      //  // Unstable assertion: assertEquals(302621044, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 168L;
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) lenientChronology0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      
      long long1 = cachedDateTimeZone0.previousTransition(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-59004000001L), long1);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(timeOfDay0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(4, timeOfDay0.size());
      
      DateTime dateTime0 = yearMonthDay0.toDateTime(timeOfDay0, (DateTimeZone) cachedDateTimeZone0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals(3599999L, dateTime0.getMillis());
  }

  @Test
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) evoSuiteFile0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 375;
      // Undeclared exception!
      try {
        YearMonthDay yearMonthDay1 = yearMonthDay0.withMonthOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 375 for monthOfYear must be in the range [1,12]
         //
      }
  }
}
