/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:51 GMT 2014
 */

package org.joda.time.tz;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.ZoneInfoCompiler;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class ZoneInfoCompilerEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = ">%*MBaVMg)0";
      String string1 = "3g2";
      assertNotSame(string1, string0);
      
      boolean boolean0 = false;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string1, string0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = ">%*MBaVMg)0";
      String string1 = "3gw";
      assertNotSame(string1, string0);
      
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string1, string0, boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(3, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // g
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "gM,sS1d3";
      String string1 = "2";
      assertNotSame(string1, string0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
  }

  @Test
  public void test03()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      String string0 = "Rule nme mixsma7ch";
      StringReader stringReader0 = new StringReader(string0);
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) stringReader0);
      assertEquals(true, bufferedReader0.markSupported());
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) bufferedReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(true, bufferedReader0.markSupported());
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertNotNull(lineNumberReader0);
      
      // Undeclared exception!
      try {
        zoneInfoCompiler0.parseDataFile((BufferedReader) lineNumberReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"mixsma7ch\"
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[10];
      char char0 = '\u001F';
      charArray0[0] = char0;
      char char1 = 'm';
      charArray0[1] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u001F', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertNotNull(charArrayReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'\u001F', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, bufferedReader0.markSupported());
      assertNotNull(bufferedReader0);
      
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
      assertArrayEquals(new char[] {'\u001F', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(false, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, bufferedReader0.markSupported());
  }

  @Test
  public void test05()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[10];
      char char0 = 'm';
      charArray0[1] = char0;
      char char1 = '#';
      charArray0[3] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'm', '\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertNotNull(charArrayReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'm', '\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, bufferedReader0.markSupported());
      assertNotNull(bufferedReader0);
      
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
      assertArrayEquals(new char[] {'\u0000', 'm', '\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(false, charArrayReader0.ready());
      assertEquals(true, bufferedReader0.markSupported());
  }

  @Test
  public void test06()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[10];
      char char0 = '&';
      charArray0[0] = char0;
      char char1 = '#';
      charArray0[0] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertNotNull(charArrayReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, bufferedReader0.markSupported());
      assertNotNull(bufferedReader0);
      
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(false, charArrayReader0.ready());
      assertEquals(true, bufferedReader0.markSupported());
  }

  @Test
  public void test07()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      String string0 = "lasat";
      String string1 = ">%*MBaVMg)0";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockFile0);
      
      String string2 = "";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      File[] fileArray0 = new File[1];
      fileArray0[0] = (File) mockFile0;
      assertEquals(1392409281320L, fileArray0[0].lastModified());
      assertEquals(false, fileArray0[0].isDirectory());
      assertEquals(true, fileArray0[0].setReadOnly());
      assertEquals(false, fileArray0[0].mkdir());
      assertEquals("/tmp", fileArray0[0].getParent());
      assertEquals(false, fileArray0[0].isHidden());
      assertEquals(false, fileArray0[0].canWrite());
      assertEquals(true, fileArray0[0].canRead());
      assertEquals(false, fileArray0[0].canExecute());
      assertEquals(0L, fileArray0[0].getUsableSpace());
      assertEquals(0L, fileArray0[0].length());
      assertEquals(0L, fileArray0[0].getFreeSpace());
      assertEquals(true, fileArray0[0].createNewFile());
      assertEquals("lasat0>%*MBaVMg)0", fileArray0[0].getName());
      assertEquals(true, fileArray0[0].exists());
      assertEquals(true, fileArray0[0].isAbsolute());
      assertEquals("/tmp/lasat0>%*MBaVMg)0", fileArray0[0].toString());
      assertEquals(true, fileArray0[0].isFile());
      assertEquals(0L, fileArray0[0].getTotalSpace());
      assertNotNull(fileArray0[0]);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/lasat0>%*MBaVMg)0");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      MockFile mockFile1 = null;
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile1, fileArray0);
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertNotNull(map0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "last";
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = ZoneInfoCompiler.test(string0, fixedDateTimeZone0);
      assertTrue(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "gM,sS1d3";
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      boolean boolean0 = true;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateTimeZoneBuilder0.toDateTimeZone(string0, boolean0);
      assertEquals("gM,sS1d3", fixedDateTimeZone0.getID());
      assertEquals("gM,sS1d3", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean1 = ZoneInfoCompiler.test(string0, fixedDateTimeZone0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("gM,sS1d3", fixedDateTimeZone0.getID());
      assertEquals("gM,sS1d3", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test10()  throws Throwable  {
      char char0 = 'z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test11()  throws Throwable  {
      char char0 = 'O';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      
      char char2 = ZoneInfoCompiler.parseZoneChar(char1);
      assertEquals('w', char2);
      assertTrue(char2 == char1);
      assertFalse(char2 == char0);
      assertTrue(char1 == char2);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertFalse(char0 == char2);
  }

  @Test
  public void test12()  throws Throwable  {
      char char0 = 'u';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertTrue(char1 == char0);
      assertTrue(char0 == char1);
  }

  @Test
  public void test13()  throws Throwable  {
      char char0 = 's';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('s', char1);
      assertTrue(char0 == char1);
      assertTrue(char1 == char0);
  }

  @Test
  public void test14()  throws Throwable  {
      char char0 = 'g';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
  }

  @Test
  public void test15()  throws Throwable  {
      char char0 = 'Z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test16()  throws Throwable  {
      char char0 = 'W';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('w', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
  }

  @Test
  public void test17()  throws Throwable  {
      char char0 = 'U';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test18()  throws Throwable  {
      char char0 = 'S';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('s', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
  }

  @Test
  public void test19()  throws Throwable  {
      char char0 = 'G';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "7sd+6q} Fae&4$ ]";
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals(25200000, int0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "-9,2uQdcoQ5?";
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals((-32400000), int0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "Bi^";
      // Undeclared exception!
      try {
        int int0 = ZoneInfoCompiler.parseTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bi^
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "Bi^";
      String string1 = ZoneInfoCompiler.parseOptional(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("Bi^", string1);
      assertNotNull(string1);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "only";
      int int0 = 59;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(59, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "maximum";
      int int0 = (-1270);
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "max";
      int int0 = (-1752);
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "minimum";
      int int0 = 2001;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "UTC";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) mockFileOutputStream0);
      assertEquals(0, dataOutputStream0.size());
      assertNotNull(dataOutputStream0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string1 = "org.joda.time.YearMonthDay";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("UTC", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", zoneInfo0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string1, (DateTimeZone) fixedDateTimeZone0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("{org.joda.time.YearMonthDay=UTC}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("{org.joda.time.YearMonthDay=UTC, UTC=UTC}", hashMap0.toString());
      assertNull(dateTimeZone1);
      
      ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("{org.joda.time.YearMonthDay=UTC, UTC=UTC}", hashMap0.toString());
      assertEquals(45, dataOutputStream0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/last0last/last");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      String string0 = "last";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile((File) mockFile0, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertNotNull(mockFile1);
      
      File[] fileArray0 = null;
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile1, fileArray0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test
  public void test30()  throws Throwable  {
      LenientChronology lenientChronology0 = (LenientChronology)ZoneInfoCompiler.getLenientISOChronology();
      assertNotNull(lenientChronology0);
      
      LenientChronology lenientChronology1 = (LenientChronology)ZoneInfoCompiler.getLenientISOChronology();
      assertSame(lenientChronology1, lenientChronology0);
      assertNotNull(lenientChronology1);
  }

  @Test
  public void test31()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
      assertSame(zoneInfoCompiler_DateTimeOfYear1, zoneInfoCompiler_DateTimeOfYear0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear1);
  }

  @Test
  public void test32()  throws Throwable  {
      char char0 = 'W';
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      zoneInfoCompiler_DateTimeOfYear0.addCutover(dateTimeZoneBuilder0, (int) char0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "max";
      int int0 = (-1752);
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      zoneInfoCompiler_DateTimeOfYear0.addRecurring(dateTimeZoneBuilder0, string0, int0, int0, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "gM,sS1d3";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      String string1 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(string1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        int int0 = ZoneInfoCompiler.parseDayOfWeek(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "min";
      int int0 = 2493;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = "-the partial must not be null";
      assertNotSame(string1, string0);
      
      boolean boolean0 = ZoneInfoCompiler.verbose();
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      assertTrue(boolean1 == boolean0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer(string1, string0, boolean1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(5, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = null;
      int int2 = 0;
      assertFalse(int2 == int1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      int int3 = 0;
      assertFalse(int3 == int1);
      
      char char0 = 'k';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('w', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
  }
}
