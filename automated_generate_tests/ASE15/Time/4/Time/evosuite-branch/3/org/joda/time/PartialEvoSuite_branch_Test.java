/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:08:45 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class PartialEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[1];
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      String string0 = null;
      String string1 = partial0.toString(string0, locale0);
      assertNotNull(string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, partial0.size());
      assertEquals("[secondOfDay=0]", string1);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = (-1918L);
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      assertEquals("1970-01", string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string1 = partial0.toString(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("1970-01", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test02()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = "Types array must be in order largest-smallest: ";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = (-1918L);
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      assertEquals("1970-01", string0);
      
      String string1 = partial0.toString();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      assertEquals("1970-01", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test04()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(0, partial0.size());
      assertEquals("[]", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertEquals(1, partial0.size());
      assertEquals("[secondOfDay=0]", string1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNull(dateTimeFormatter0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 122;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int1 = 353;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Partial partial1 = new Partial(dateTimeFieldType0, int1, (Chronology) iSOChronology0);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertFalse(boolean0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test07()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      int int0 = 122;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].getName());
      
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], intArray0[3]);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = partial_Property0.get();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, partial0.size());
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].toString());
      
      int[] intArray0 = new int[9];
      int int0 = 0;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) period0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(3, partial1.size());
      assertEquals(3, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[1];
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = 0;
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) years0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals(1, years0.size());
      assertEquals(1, partial1.size());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       long long0 = 0L;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       LocalTime localTime0 = new LocalTime(long0, (DateTimeZone) cachedDateTimeZone0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertNotNull(partial0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       DurationFieldType durationFieldType0 = DurationFieldType.millis();
//       assertNotNull(durationFieldType0);
//       assertEquals("millis", durationFieldType0.getName());
//       assertEquals("millis", durationFieldType0.toString());
//       
//       int int0 = 0;
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
//       assertSame(partial1, partial0);
//       assertSame(partial0, partial1);
//       assertNotNull(partial1);
//       assertEquals(4, partial1.size());
//       assertEquals("millis", durationFieldType0.getName());
//       assertEquals("millis", durationFieldType0.toString());
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//   }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       long long0 = 0L;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       LocalTime localTime0 = new LocalTime(long0, (DateTimeZone) cachedDateTimeZone0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       int int0 = (-4374);
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertNotNull(partial0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       DurationFieldType durationFieldType0 = DurationFieldType.millis();
//       assertNotNull(durationFieldType0);
//       assertEquals("millis", durationFieldType0.getName());
//       assertEquals("millis", durationFieldType0.toString());
//       
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//       assertNotNull(partial1);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(4, partial1.size());
//       assertEquals("millis", durationFieldType0.getName());
//       assertEquals("millis", durationFieldType0.toString());
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//   }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-1938L);
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      int int0 = partial0.compareTo((ReadablePartial) partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      assertEquals(0, int0);
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      assertEquals(2, partial1.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-1938L);
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, partial0.size());
      assertEquals(2, yearMonth0.size());
      
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      int int0 = (-1288);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(1, months0.size());
      assertEquals(2, partial1.size());
      assertEquals(2, partial0.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(2, yearMonth0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      int int0 = 122;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      int int0 = 122;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, readableInstant0);
      assertNotNull(gJChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      
      Partial partial2 = partial1.withField(dateTimeFieldType0, int0);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial1, partial2);
      assertNotNull(partial2);
      assertEquals(1, partial0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial2.size());
      assertEquals(1, partial1.size());
      assertTrue(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial1));
      assertTrue(partial2.equals((Object)partial0));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial1.equals((Object)partial2));
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial partial1 = partial0.without(dateTimeFieldTypeArray0[0]);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = (-1938L);
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, partial0.size());
      assertEquals(2, yearMonth0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(2, partial1.size());
      assertEquals(2, partial0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2, yearMonth0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], intArray0[0]);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-1938L);
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      int int0 = (-1288);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1288 for centuryOfEra must not be smaller than 0
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      //  // Unstable assertion: assertNotNull(dateTimeFieldType0);
      //  // Unstable assertion: assertEquals("secondOfDay", dateTimeFieldType0.getName());
      //  // Unstable assertion: assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      //  // Unstable assertion: assertNotNull(dateTimeFieldTypeArray0[0]);
      //  // Unstable assertion: assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].toString());
      //  // Unstable assertion: assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].getName());
      //  // Unstable assertion: assertEquals("secondOfDay", dateTimeFieldType0.getName());
      //  // Unstable assertion: assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      //  // Unstable assertion: assertNotNull(partial0);
      //  // Unstable assertion: assertEquals(1, partial0.size());
      //  // Unstable assertion: assertArrayEquals(new int[] {0}, intArray0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      //  // Unstable assertion: assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      //  // Unstable assertion: assertNotNull(dateTimeFieldType1);
      //  // Unstable assertion: assertEquals("secondOfMinute", dateTimeFieldType1.getName());
      //  // Unstable assertion: assertEquals("secondOfMinute", dateTimeFieldType1.toString());
      //  // Unstable assertion: assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], intArray0[0]);
      //  // Unstable assertion: assertNotSame(partial1, partial0);
      //  // Unstable assertion: assertNotSame(partial0, partial1);
      //  // Unstable assertion: assertNotNull(partial1);
      //  // Unstable assertion: assertEquals(2, partial1.size());
      //  // Unstable assertion: assertEquals(1, partial0.size());
      //  // Unstable assertion: assertArrayEquals(new int[] {0}, intArray0);
      //  // Unstable assertion: assertFalse(partial1.equals((Object)partial0));
      //  // Unstable assertion: assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test24()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[1];
      int int0 = 19;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test25()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = partial0.indexOf(dateTimeFieldType0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals((-1), int0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      Interval interval0 = yearMonthDay0.toInterval();
      assertNotNull(interval0);
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals(82800000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = interval0.getStart();
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals(82800000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)dateTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals(82800000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) iSOChronology0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals(82800000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial1.size());
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = (-1938L);
      YearMonth yearMonth0 = new YearMonth(long0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, partial0.size());
      assertEquals(2, yearMonth0.size());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) julianChronology0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(2, partial0.size());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test28()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[2].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[2].toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[2];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[3].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[3].getName());
      
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: centuryOfEra
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertNotNull(delegatedDateTimeField0);
      assertEquals(false, delegatedDateTimeField0.isLenient());
      assertEquals(true, delegatedDateTimeField0.isSupported());
      assertEquals("secondOfMinute", delegatedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = delegatedDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals(false, delegatedDateTimeField0.isLenient());
      assertEquals(true, delegatedDateTimeField0.isSupported());
      assertEquals("secondOfMinute", delegatedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].toString());
      assertEquals(false, delegatedDateTimeField0.isLenient());
      assertEquals(true, delegatedDateTimeField0.isSupported());
      assertEquals("secondOfMinute", delegatedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("secondOfMinute", dateTimeField0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfMinute < secondOfDay
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: era
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int0, (Chronology) ethiopicChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(4, timeOfDay0.size());
      assertEquals(5, partial1.size());
      assertEquals(4, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].toString());
      
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfDay < dayOfWeek
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[1];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], intArray0[0]);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals(2, partial1.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[1];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[1];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-76);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(0, partial0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.plus(readablePeriod0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial partial1 = partial_Property0.addToCopy(intArray0[0]);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test
  public void test41()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldTypeArray0[0]);
      assertNotNull(partial_Property0);
      assertEquals(3, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = partial0.indexOf(dateTimeFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertEquals((-1), int0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertEquals("[year=2014, monthOfYear=2, dayOfMonth=14, millisOfDay=73281320]", string0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertArrayEquals(new int[] {0}, intArray0);
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(intArray0[0]);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
  }
}
