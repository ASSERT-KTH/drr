/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:52 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class MutableDateTimeEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setDate((ReadableInstant) instant0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(69681320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 2059L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getMonthOfYear();
      assertEquals(1, int0);
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.addMillis(int0);
      assertEquals(2060L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test04()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addMillis(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test05()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 2201;
      mutableDateTime0.addSeconds(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392411482320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test06()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addSeconds(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test07()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = (-1785);
      mutableDateTime0.addMinutes(int0);
      assertEquals(1392302181320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test08()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addMinutes(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test09()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 7;
      mutableDateTime0.addHours(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392434481320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 0;
      mutableDateTime0.addHours(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test11()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.addDays(int0);
      assertEquals(1392841281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test12()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addDays(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getYearOfCentury();
      assertEquals(6, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.addWeeks(int0);
      assertEquals(1396038081320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) strictChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 0;
      mutableDateTime0.addWeeks(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2337L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 2254;
      mutableDateTime0.addMonths(int0);
      assertEquals(5927475602337L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      mutableDateTime0.addMonths(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getYearOfCentury();
      assertEquals(6, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.addWeekyears(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1581711681320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test18()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.addWeekyears(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
      
      int int0 = 2254;
      mutableDateTime0.addYears(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(71129322002337L, mutableDateTime0.getMillis());
  }

  @Test
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) strictChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 0;
      mutableDateTime0.addYears(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test21()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      int int0 = 0;
      mutableDateTime0.add(durationFieldType0, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        mutableDateTime0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      mutableDateTime0.add(durationFieldType0, int0);
      assertEquals(1550262081320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        mutableDateTime0.set(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      int int0 = mutableDateTime0.getCenturyOfEra();
      assertEquals(15, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try {
        mutableDateTime0.set(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setZoneRetainFields((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test27()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 2037;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:02.037", fixedDateTimeZone0.getID());
      assertEquals("+00:00:02.037", fixedDateTimeZone0.toString());
      
      mutableDateTime0.setZoneRetainFields((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409279283L, mutableDateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:02.037", fixedDateTimeZone0.getID());
      assertEquals("+00:00:02.037", fixedDateTimeZone0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      
      mutableDateTime0.setZone((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test29()  throws Throwable  {
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getHourOfDay();
      assertEquals(20, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      ReadablePeriod readablePeriod0 = null;
      mutableDateTime0.add(readablePeriod0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2337L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 2254;
      ReadableDuration readableDuration0 = null;
      mutableDateTime0.add(readableDuration0, int0);
      assertEquals(2337L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test31()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(4, localDateTime0.size());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(strictChronology0);
      assertEquals(4, localDateTime0.size());
      
      DateTimeField dateTimeField0 = strictChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(4, localDateTime0.size());
      
      int int0 = 5;
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392422400000L, mutableDateTime0.getMillis());
      assertEquals(5, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = 4;
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(1392408000000L, mutableDateTime0.getMillis());
      assertEquals(4, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeField dateTimeField0 = julianChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = 2;
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals(3600000L, mutableDateTime0.getMillis());
      assertEquals(2, mutableDateTime0.getRoundingMode());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = 2059L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 0;
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = (-1L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals((-1L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeField dateTimeField0 = julianChronology0.dayOfWeek();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      
      int int0 = 217;
      // Undeclared exception!
      try {
        mutableDateTime0.setRounding(dateTimeField0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: 217
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      long long0 = (-1809L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals((-1809L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTimeField dateTimeField0 = null;
      int int0 = (-600);
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals((-1809L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test37()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test40()  throws Throwable  {
      long long0 = 2059L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2059L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals("secondOfMinute", mutableDateTime_Property0.getName());
  }

  @Test
  public void test41()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertNull(dateTimeField0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = (-466);
      // Undeclared exception!
      try {
        mutableDateTime0.setTime(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -466 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      String string0 = mutableDateTime0.toString();
      assertNotNull(string0);
      assertEquals("2014-02-14T20:21:21.320Z", string0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test44()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("minuteOfDay", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
  }

  @Test
  public void test45()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setMillisOfSecond(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281005L, mutableDateTime0.getMillis());
  }

  @Test
  public void test46()  throws Throwable  {
      long long0 = (-1809L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-1809L), mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-1809L), mutableDateTime0.getMillis());
      assertEquals("millisOfSecond", mutableDateTime_Property0.getName());
  }

  @Test
  public void test47()  throws Throwable  {
      long long0 = 2059L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getMonthOfYear();
      assertEquals(1, int0);
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.setDayOfYear(int0);
      assertEquals(2059L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test48()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("secondOfDay", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test49()  throws Throwable  {
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getHourOfDay();
      assertEquals(20, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      // Undeclared exception!
      try {
        mutableDateTime0.setMonthOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 20 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = (-1785);
      // Undeclared exception!
      try {
        mutableDateTime0.setDateTime(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1785 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.setZone(dateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test52()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 2201;
      mutableDateTime0.setSecondOfDay(int0);
      assertEquals(1392338201320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test53()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = 7;
      mutableDateTime0.setHourOfDay(int0);
      assertEquals(1392362481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test54()  throws Throwable  {
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getHourOfDay();
      assertEquals(20, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setYear(int0);
      assertEquals((-61532192243680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test55()  throws Throwable  {
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("hourOfDay", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test56()  throws Throwable  {
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("year", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test57()  throws Throwable  {
      Object object0 = null;
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(object0, chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getMillisOfDay();
      assertEquals(73281320, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      // Undeclared exception!
      try {
        mutableDateTime0.setMinuteOfHour(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 73281320 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotNull(mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test59()  throws Throwable  {
      long long0 = (-1809L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals((-1809L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = (-600);
      // Undeclared exception!
      try {
        mutableDateTime0.setDayOfWeek(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -600 for dayOfWeek must be in the range [1,7]
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      long long0 = 2370L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2370L, mutableDateTime0.getMillis());
      
      int int0 = 2265;
      mutableDateTime0.setMillisOfDay(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-3597735L), mutableDateTime0.getMillis());
  }

  @Test
  public void test61()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.setWeekOfWeekyear(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1391199681320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test62()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      long long0 = 2662L;
      Duration duration0 = Duration.standardHours(long0);
      assertNotNull(duration0);
      assertEquals(9583200000L, duration0.getMillis());
      
      mutableDateTime0.add((ReadableDuration) duration0);
      assertEquals(9583200000L, duration0.getMillis());
      assertEquals(1401992481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test63()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      mutableDateTime0.setMinuteOfDay(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336021320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test64()  throws Throwable  {
      int int0 = 1;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      mutableDateTime0.setDayOfMonth(int0);
      assertEquals(1391286081320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) strictChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setRounding(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(1, mutableDateTime0.getRoundingMode());
      assertEquals(1392408000000L, mutableDateTime0.getMillis());
  }

  @Test
  public void test66()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setSecondOfMinute(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409265320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test67()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      mutableDateTime0.setMillis((ReadableInstant) instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test68()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test69()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("millisOfDay", mutableDateTime_Property0.getName());
  }

  @Test
  public void test70()  throws Throwable  {
      long long0 = 142L;
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = new DateTime(long0);
      assertNotNull(dateTime0);
      assertEquals(142L, dateTime0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) dateTime0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(142L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(142L, dateTime0.getMillis());
  }

  @Test
  public void test71()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test72()  throws Throwable  {
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test73()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = (-847);
      mutableDateTime0.setWeekyear(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-88892134643680L), mutableDateTime0.getMillis());
  }

  @Test
  public void test74()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("dayOfMonth", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test75()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(2337L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(2337L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("minuteOfHour", mutableDateTime_Property0.getName());
  }

  @Test
  public void test76()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      mutableDateTime0.setDate(int0, int0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-61998579443680L), mutableDateTime0.getMillis());
  }

  @Test
  public void test77()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime(dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Years years0 = Years.TWO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      mutableDateTime0.add((ReadablePeriod) years0);
      assertEquals(1, years0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1455481281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test78()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test79()  throws Throwable  {
      String string0 = "0{2*.nD\"c W}7rxJ";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0{2*.nD\"c W}7rxJ\" is malformed at \"{2*.nD\"c W}7rxJ\"
         //
      }
  }

  @Test
  public void test80()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.add((long) int0);
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
  }

  @Test
  public void test81()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("yearOfEra", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
      
      int int0 = 2254;
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(int0);
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals(8962189202337L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("yearOfEra", mutableDateTime_Property0.getName());
      assertEquals(8962189202337L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test82()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableDateTime_Property0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test83()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime1.getMillis());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test84()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(1391299200000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1391299200000L, mutableDateTime1.getMillis());
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
  }

  @Test
  public void test85()  throws Throwable  {
      long long0 = 2337L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2337L, mutableDateTime0.getMillis());
      assertEquals("yearOfEra", mutableDateTime_Property0.getName());
      
      String string0 = "7W7Y.y?Cn!,`";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"7W7Y.y?Cn!,`\" for yearOfEra is not supported
         //
      }
  }

  @Test
  public void test86()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = (-1785);
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.addWrapField(int0);
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test87()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("weekOfWeekyear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfEven();
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals("weekOfWeekyear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392595200000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392595200000L, mutableDateTime1.getMillis());
  }

  @Test
  public void test88()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      String string0 = mutableDateTime_Property0.getAsText();
      assertNotNull(string0);
      assertEquals("45", string0);
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test89()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1419811200000L, mutableDateTime0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1419811200000L, mutableDateTime1.getMillis());
  }

  @Test
  public void test90()  throws Throwable  {
      long long0 = (-1809L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-1809L), mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-1809L), mutableDateTime0.getMillis());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-1809L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-1809L), mutableDateTime1.getMillis());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
  }

  @Test
  public void test91()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("era", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals((-62135596800000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals((-62135596800000L), mutableDateTime1.getMillis());
      assertEquals("era", mutableDateTime_Property0.getName());
  }

  @Test
  public void test92()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.add(int0);
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392841281320L, mutableDateTime0.getMillis());
      assertEquals(1392841281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
  }
}
