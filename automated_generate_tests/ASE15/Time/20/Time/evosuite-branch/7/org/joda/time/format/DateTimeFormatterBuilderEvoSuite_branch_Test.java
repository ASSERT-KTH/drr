/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:59:27 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;


public class DateTimeFormatterBuilderEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "9R\\2F";
      // Undeclared exception!
      try {
        MonthDay monthDay0 = MonthDay.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9R\\2F\" is malformed at \"R\\2F\"
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = (-222);
      boolean boolean0 = true;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, int0, boolean0, int0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[10];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_PaddedNumber0;
      assertNotNull(dateTimeParserArray0[0]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(-222, dateTimeParserArray0[0].estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      Chronology chronology0 = null;
      Locale locale0 = null;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-222), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = "7P5M`xum\"O@";
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(221, int1);
  }

  @Test
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 76;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(int0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      assertNotNull(dateTimeParserArray0[0]);
      assertEquals(0, dateTimeParserArray0[0].estimateParsedLength());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite1 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder1.toParser();
      assertNotNull(dateTimeFormatterBuilder_Composite1);
      assertNotSame(dateTimeFormatterBuilder_Composite1, dateTimeFormatterBuilder_Composite0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertFalse(dateTimeFormatterBuilder_Composite1.equals((Object)dateTimeFormatterBuilder_Composite0));
  }

  @Test
  public void test003()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeZone dateTimeZone0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo((Writer) stringWriter0, (ReadablePartial) localDateTime0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      StringBuffer stringBuffer0 = null;
      MonthDay monthDay0 = MonthDay.now((Chronology) ethiopicChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test005()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "UniversalNo parsers supplied";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      long long0 = 3600L;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 15;
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockPrintWriter0, long0, (Chronology) lenientChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "org.joda.time.chrono.CopticChronology";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals("org.joda.time.chrono.CopticChronology", stringBuffer0.toString());
      assertEquals(53, stringBuffer0.capacity());
      assertEquals(37, stringBuffer0.length());
      
      int int0 = 0;
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (long) int0, (Chronology) islamicChronology0, int0, dateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      
      long long0 = 1662L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = (-1618);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1618), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0, integer0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 0;
      String string0 = "No parsers supplied";
      int int2 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = (-222);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) stringWriter0, (long) int0, (Chronology) julianChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("UTC", stringWriter0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      long long0 = 1662L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      
      int int0 = (-1618);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1618), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0, integer0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertTrue(integer0.equals((Object)int0));
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateTimeParserBucket0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertTrue(integer0.equals((Object)int0));
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertTrue(integer0.equals((Object)int0));
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) integer0, (Chronology) copticChronology0, (int) integer0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(3, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("UTC", stringBuffer0.toString());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = 58;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      String string0 = "US/HawaiiNo parsers supplied";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) cachedDateTimeZone0);
      assertNull(dateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, hashMap0.size());
      assertEquals("{US/HawaiiNo parsers supplied=Europe/London}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, hashMap0.size());
      assertEquals("{US/HawaiiNo parsers supplied=Europe/London}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0, (Integer) int1, int1);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, hashMap0.size());
      assertEquals("{US/HawaiiNo parsers supplied=Europe/London}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1, hashMap0.size());
      assertEquals("{US/HawaiiNo parsers supplied=Europe/London}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-21), int2);
  }

  @Test
  public void test011()  throws Throwable  {
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = hashMap0.containsKey((Object) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
      
      String string0 = "bFn";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      Chronology chronology0 = null;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockFileWriter0, (long) int0, chronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test012()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder1.toPrinter();
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
  }

  @Test
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 13;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "halfdays";
      int int0 = 1073741824;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=halfdays,offset=1073741824,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1073741824, simpleTimeZone0.getRawOffset());
      assertEquals("halfdays", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+M8:15\" is malformed at \"M8:15\"
         //
      }
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "No parsers supplied";
      boolean boolean0 = false;
      int int0 = 366;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      Chronology chronology0 = null;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-367), int1);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "No parsers supplied";
      boolean boolean0 = false;
      int int0 = 43;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, (long) int0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(32, int0);
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      String string1 = ")V*;`l";
      assertNotSame(string1, string0);
      
      File file0 = null;
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string1, file0);
      assertNotNull(mockFile0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = (-1);
      assertFalse(int1 == int0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int1, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-01:32", fixedDateTimeZone0.getID());
      assertEquals("-01:32", fixedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Instant instant0 = new Instant((long) int0);
      assertNotNull(instant0);
      assertEquals(32L, instant0.getMillis());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertFalse(int0 == int1);
      
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime(chronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(32L, instant0.getMillis());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(32L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertFalse(int0 == int1);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(32L, instant0.getMillis());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(32L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-01:32", fixedDateTimeZone0.getID());
      assertEquals("-01:32", fixedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) gJChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(32L, instant0.getMillis());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(32L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-01:32", fixedDateTimeZone0.getID());
      assertEquals("-01:32", fixedDateTimeZone0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "No parsers supplied";
      boolean boolean0 = false;
      int int0 = 43;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      int int1 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      LocalDate localDate0 = LocalDate.parse(string0, dateTimeFormatter0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertFalse(int0 == int1);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("+20:00", fixedDateTimeZone0.getID());
      assertEquals("+20:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(int1 == int0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-72000000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("+20:00", fixedDateTimeZone0.getID());
      assertEquals("+20:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string1 = dateTimeFormatter0.print((ReadableInstant) dateTime0);
      assertNotNull(string1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals((-72000000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("+20:00", fixedDateTimeZone0.getID());
      assertEquals("+20:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("+200000000", string1);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "No parsers supplied";
      boolean boolean0 = false;
      int int0 = 43;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      int int1 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(20, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=No parsers supplied,offset=20,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("No parsers supplied", simpleTimeZone0.getID());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertFalse(int1 == int0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(35, stringBuffer0.capacity());
      assertEquals("No parsers supplied", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(20, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=No parsers supplied,offset=20,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("No parsers supplied", simpleTimeZone0.getID());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertFalse(int1 == int0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) int1, (Chronology) gJChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(20, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=No parsers supplied,offset=20,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("No parsers supplied", simpleTimeZone0.getID());
      assertEquals(35, stringBuffer0.capacity());
      assertEquals(29, stringBuffer0.length());
      assertEquals("No parsers supplied+000000020", stringBuffer0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      int int0 = 43;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(13, int1);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+43:00", fixedDateTimeZone0.toString());
      assertEquals("+43:00", fixedDateTimeZone0.getID());
      assertFalse(int0 == int1);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) int0, (Chronology) gJChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("+00:00:00.013", stringBuffer0.toString());
      assertEquals(13, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+43:00", fixedDateTimeZone0.toString());
      assertEquals("+43:00", fixedDateTimeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      int int0 = 43;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneOffset0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertNotNull(dateTimeFormatter1);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      LocalDate localDate0 = LocalDate.parse(string0, dateTimeFormatter1);
      assertNotNull(localDate0);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(3, localDate0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(3, localDate0.size());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals((-46800000L), dateTime0.getMillis());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(int1 == int0);
      
      String string1 = dateTimeFormatter1.print((ReadableInstant) dateTime0);
      assertNotNull(string1);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(3, localDate0.size());
      assertEquals("+13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+13:00", fixedDateTimeZone0.getID());
      assertEquals((-46800000L), dateTime0.getMillis());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotSame(string0, string1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(string1, string0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertTrue(string0.equals((Object)string1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(int1 == int0);
      assertEquals("", string1);
  }

  @Test
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      String string0 = "Cq\"z]S60\"!.:.lsS@";
      boolean boolean0 = false;
      int int1 = 3594;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string0, string0, boolean0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int1 = 48;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int1, int1);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertFalse(int1 == int0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int1, (Chronology) ethiopicChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(int1 == int0);
      
      String string0 = "R*MFhK_|6A)UO";
      int int2 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-1), int2);
  }

  @Test
  public void test024()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 4138;
      boolean boolean0 = true;
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[4];
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      assertNotNull(dateTimeParserArray0[0]);
      assertEquals(4, dateTimeParserArray0[0].estimateParsedLength());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_UnpaddedNumber0;
      assertNotNull(dateTimeParserArray0[1]);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(4138, dateTimeParserArray0[1].estimateParsedLength());
      
      Chronology chronology0 = null;
      dateTimeParserArray0[2] = dateTimeParserArray0[0];
      assertNotNull(dateTimeParserArray0[2]);
      assertEquals(4, dateTimeParserArray0[2].estimateParsedLength());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      assertNotNull(dateTimeParserArray0[3]);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeParserArray0[3].estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "L.;";
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-4139), int1);
  }

  @Test
  public void test025()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = yearMonthDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      int int1 = 34;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = "*";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("*", locale0.getLanguage());
      assertEquals("*", locale0.getCountry());
      assertEquals("*_*_*", locale0.toString());
      assertEquals("*", locale0.getVariant());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (ReadablePartial) yearMonthDay0, locale0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("*", locale0.getLanguage());
      assertEquals("*", locale0.getCountry());
      assertEquals("*_*_*", locale0.toString());
      assertEquals("*", locale0.getVariant());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test026()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = yearMonthDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string0 = "e-80~~KX,-y,sxt";
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
      
      int int1 = (-1116);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Chronology chronology0 = null;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(int0 == int1);
      
      int int2 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1115, int2);
      
      dateTimeFormatterBuilder_Fraction0.iMinDigits = int1;
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      StringWriter stringWriter0 = new StringWriter(int2);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, stringWriter0, int0, islamicChronology0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("0", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 43;
      String string0 = dateTimeFieldType0.toString();
      assertNotNull(string0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", string0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      char char0 = 'q';
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("clockhourofday", locale0.getLanguage());
      assertEquals("CLOCKHOUROFDAY", locale0.getCountry());
      assertEquals("clockhourOfDay", locale0.getVariant());
      assertEquals("clockhourofday_CLOCKHOUROFDAY_clockhourOfDay", locale0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      String string1 = "Singapore";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string1);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Asia/Singapore", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Singapore", cachedDateTimeZone0.toString());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (long) char0, (Chronology) gJChronology0, (int) char0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("Asia/Singapore", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Singapore", cachedDateTimeZone0.toString());
      assertEquals("clockhourofday", locale0.getLanguage());
      assertEquals("CLOCKHOUROFDAY", locale0.getCountry());
      assertEquals("clockhourOfDay", locale0.getVariant());
      assertEquals("clockhourofday_CLOCKHOUROFDAY_clockhourOfDay", locale0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test028()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = (-217);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) ethiopicChronology0, dateTimeField0, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(0, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("millisOfDay", skipDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(0, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("millisOfDay", skipDateTimeField0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(0, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("millisOfDay", skipDateTimeField0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-217), (int)integer0);
      
      char char0 = 'B';
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) ethiopicChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = "!ZXIYA:6}`9\\B*Gkz";
      int int1 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, string0, (int) char0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(0, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("millisOfDay", skipDateTimeField0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-67), int1);
  }

  @Test
  public void test029()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      Chronology chronology0 = null;
      String string0 = ",snXJvu.5B";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals(",snxjvu.5b_,SNXJVU.5B_,snXJvu.5B", locale0.toString());
      assertEquals(",snxjvu.5b", locale0.getLanguage());
      assertEquals(",SNXJVU.5B", locale0.getCountry());
      assertEquals(",snXJvu.5B", locale0.getVariant());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(",snxjvu.5b_,SNXJVU.5B_,snXJvu.5B", locale0.toString());
      assertEquals(",snxjvu.5b", locale0.getLanguage());
      assertEquals(",SNXJVU.5B", locale0.getCountry());
      assertEquals(",snXJvu.5B", locale0.getVariant());
      
      int int1 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(",snxjvu.5b_,SNXJVU.5B_,snXJvu.5B", locale0.toString());
      assertEquals(",snxjvu.5b", locale0.getLanguage());
      assertEquals(",SNXJVU.5B", locale0.getCountry());
      assertEquals(",snXJvu.5B", locale0.getVariant());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test030() {}
//   @Test
//   public void test030()  throws Throwable  {
//       YearMonthDay yearMonthDay0 = new YearMonthDay();
//       assertNotNull(yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       
//       int int0 = 0;
//       DateTimeFieldType dateTimeFieldType0 = yearMonthDay0.getFieldType(int0);
//       assertNotNull(dateTimeFieldType0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       
//       StringBuffer stringBuffer0 = new StringBuffer();
//       assertNotNull(stringBuffer0);
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       
//       boolean boolean0 = false;
//       DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_TextField0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       
//       Locale locale0 = null;
//       dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonthDay0, locale0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(4, stringBuffer0.length());
//       assertEquals("2014", stringBuffer0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//   }

  @Test
  public void test031()  throws Throwable  {
      long long0 = 1662L;
      int int0 = 1158;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1158, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0, integer0, (int) integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(integer0.equals((Object)int0));
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateTimeParserBucket0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(integer0.equals((Object)int0));
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      StringWriter stringWriter0 = new StringWriter((int) integer0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertTrue(integer0.equals((Object)int0));
      
      dateTimeFormatterBuilder_TextField0.printTo((Writer) stringWriter0, (long) int0, (Chronology) copticChronology0, (int) integer0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("0", stringWriter0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test032()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TextField0;
      assertNotNull(dateTimeParserArray0[0]);
      assertEquals(6, dateTimeParserArray0[0].estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
  }

  @Test
  public void test033()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      String string0 = "";
      int int0 = (-593);
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      String string1 = "US/Hawaii";
      assertNotSame(string1, string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1);
      assertNotNull(mockFileWriter0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(2, yearMonth0.size());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "im'PTX;soD>";
      boolean boolean0 = false;
      char char0 = 'e';
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, char0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      LocalTime localTime0 = new LocalTime((long) char0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test
  public void test035()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      int int0 = (-1618);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1618), (int)integer0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (int) integer0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(integer0.equals((Object)int0));
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
      assertEquals(0, partial0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("\uFFFD\uFFFD", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "im'PTX;soD>";
      boolean boolean0 = false;
      int int0 = 1429;
      char char0 = 'e';
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockPrintWriter0, (long) char0, (Chronology) ethiopicChronology0, (int) char0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test037()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) gregorianChronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = ")Eo63\"{^:";
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test038()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "sJo}Ax";
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test039()  throws Throwable  {
      int int0 = 58;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      String string0 = "US/HawaiiNo parsers supplied";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0, (Integer) int1, int1);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-21), int2);
  }

  @Test
  public void test040()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      int int0 = (-593);
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2, int1);
  }

  @Test
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      boolean boolean0 = true;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      int int1 = dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertTrue(int0 == int1);
      
      String string0 = "@Nw~d7\\+g\\[(2_WWeY";
      DateTimeParserBucket dateTimeParserBucket0 = null;
      int int2 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test
  public void test042()  throws Throwable  {
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      int int1 = (-1);
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertFalse(int1 == int0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int0 == int1);
      
      String string0 = "6y0G377]Gwh";
      int int2 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0, int2);
  }

  @Test
  public void test043() {}
//   @Test
//   public void test043()  throws Throwable  {
//       StringWriter stringWriter0 = new StringWriter();
//       assertNotNull(stringWriter0);
//       assertEquals("", stringWriter0.toString());
//       
//       GJChronology gJChronology0 = GJChronology.getInstance();
//       assertNotNull(gJChronology0);
//       
//       LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       
//       int int0 = 0;
//       DateTimeFieldType dateTimeFieldType0 = localTime0.getFieldType(int0);
//       assertNotNull(dateTimeFieldType0);
//       assertEquals(4, localTime0.size());
//       assertEquals("hourOfDay", dateTimeFieldType0.getName());
//       assertEquals("hourOfDay", dateTimeFieldType0.toString());
//       
//       boolean boolean0 = false;
//       DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
//       assertEquals(4, localTime0.size());
//       assertEquals("hourOfDay", dateTimeFieldType0.getName());
//       assertEquals("hourOfDay", dateTimeFieldType0.toString());
//       
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       
//       dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0, locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals(4, localTime0.size());
//       assertEquals("20", stringWriter0.toString());
//       assertEquals("hourOfDay", dateTimeFieldType0.getName());
//       assertEquals("hourOfDay", dateTimeFieldType0.toString());
//   }

  @Test
  public void test044() {}
//   @Test
//   public void test044()  throws Throwable  {
//       DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
//       assertNotNull(dateTimeFormatterBuilder0);
//       
//       boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
//       assertFalse(boolean0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       
//       int int0 = 120;
//       DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       
//       int int1 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertTrue(int0 == int1);
//       assertTrue(int1 == int0);
//       assertEquals(120, int1);
//       
//       DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertTrue(int0 == int1);
//       
//       String string0 = dateTimeFieldType0.getName();
//       assertNotNull(string0);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals("yearOfEra", string0);
//       
//       MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
//       assertNotNull(mockFileWriter0);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=120,MONTH=120,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=120,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertTrue(int0 == int1);
//       assertTrue(int1 == int0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDateTime0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58054579200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=130,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertTrue(int0 == int1);
//       assertTrue(int1 == int0);
//       
//       Locale locale0 = Locale.US;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_US", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("US", locale0.getCountry());
//       
//       dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_US", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("US", locale0.getCountry());
//       assertEquals(4, localDateTime0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58054579200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=130,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertTrue(int0 == int1);
//       assertTrue(int1 == int0);
//   }

  @Test
  public void test045()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 43;
      String string0 = dateTimeFieldType0.toString();
      assertNotNull(string0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", string0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourofday", locale0.getLanguage());
      assertEquals("clockhourofday_CLOCKHOUROFDAY_clockhourOfDay", locale0.toString());
      assertEquals("CLOCKHOUROFDAY", locale0.getCountry());
      assertEquals("clockhourOfDay", locale0.getVariant());
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      int int1 = 0;
      DateTimeFieldType dateTimeFieldType1 = yearMonth0.getFieldType(int1);
      assertNotNull(dateTimeFieldType1);
      assertEquals(2, yearMonth0.size());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType1, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(2, yearMonth0.size());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(int0 == int1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(int1 == int0);
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(4, localTime0.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, yearMonth0.size());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("clockhourofday", locale0.getLanguage());
      assertEquals("clockhourofday_CLOCKHOUROFDAY_clockhourOfDay", locale0.toString());
      assertEquals("CLOCKHOUROFDAY", locale0.getCountry());
      assertEquals("clockhourOfDay", locale0.getVariant());
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(int0 == int1);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(int1 == int0);
  }

  @Test
  public void test046()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      int int0 = 1566;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      MonthDay monthDay0 = MonthDay.now();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Locale locale0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "+sit[#/";
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+sit[#/\"
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "CE";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
      assertEquals(2, int0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) julianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      int int2 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(2, int2);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = "WET";
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      int int0 = 1158;
      DateTimeFormatterBuilder.printUnknownString(mockFileWriter0, int0);
  }

  @Test
  public void test050()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      String string0 = "@Nw~d7\\+g\\[(2_WWeY";
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(4, localTime0.size());
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(58, stringBuffer0.length());
      assertEquals("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", stringBuffer0.toString());
      assertEquals(74, stringBuffer0.capacity());
      
      int int0 = 156;
      DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, int0);
      assertEquals(302, stringBuffer0.capacity());
      assertEquals(214, stringBuffer0.length());
      assertEquals("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringBuffer0.toString());
  }

  @Test
  public void test052()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      String string0 = "@Nw~d7\\+g\\[(2_WWeY";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(18, stringBuffer0.length());
      assertEquals(34, stringBuffer0.capacity());
      assertEquals("@Nw~d7\\+g\\[(2_WWeY", stringBuffer0.toString());
      
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals(18, stringBuffer0.length());
      assertEquals(34, stringBuffer0.capacity());
      assertEquals("@Nw~d7\\+g\\[(2_WWeY", stringBuffer0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertTrue(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int0 = (-2371);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      int int0 = 120;
      int int1 = 1221;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int1, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertFalse(int1 == int0);
      
      int int2 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1221, int2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(int2, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      int int0 = 120;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = (-222);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -222
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-2758);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      int int0 = 120;
      int int1 = 1221;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, int1, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test062()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 84;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 'R';
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (int) char0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test064()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = 2928;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "US/Pacific-NewNo parsers supplied";
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-2929), int1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -2929
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = yearMonthDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[4];
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Fraction0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = (DateTimeFormatterBuilder.TextField)dateTimeFormatterBuilder1.toPrinter();
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 'R';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-222);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      dateTimeFormatterBuilder0.clear();
  }

  @Test
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      String string0 = "Cq\"z]S60\"!.:.lsS@";
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string0, string0, boolean0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 23;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "K;";
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern(string0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-222);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 't';
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) char0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 76;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "CE";
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern(string0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test085()  throws Throwable  {
      int int0 = 4138;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[4];
      Chronology chronology0 = null;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "L.;";
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(4138, int1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(int1, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-222);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      int int0 = 4138;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(int0);
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 84;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 58;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(58, stringBuffer0.capacity());
      
      YearMonth yearMonth0 = new YearMonth((long) int0, (Chronology) ethiopicChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(58, stringBuffer0.capacity());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, yearMonth0.size());
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = 10;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char char0 = '8';
      Chronology chronology0 = null;
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) stringWriter0, (long) char0, chronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("", stringWriter0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = 0;
      String string0 = "@Nw~d7\\+g\\[(2_WWeY";
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(4, localTime0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
  }

  @Test
  public void test095()  throws Throwable  {
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      boolean boolean0 = hashMap0.containsKey((Object) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertFalse(boolean0);
      
      String string0 = "bFn";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      Chronology chronology0 = null;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      int int1 = dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char char0 = 'E';
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertTrue(int0 == int1);
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) mockFileWriter0, (long) int1, chronology0, (int) char0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test096()  throws Throwable  {
      long long0 = 1662L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = (-1618);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1618), (int)integer0);
      
      int int1 = 326565;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gJChronology0, locale0, integer0, int1);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateTimeParserBucket0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      StringWriter stringWriter0 = new StringWriter(int1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertFalse(int1 == int0);
      
      dateTimeFormatterBuilder_TextField0.printTo((Writer) stringWriter0, (long) int1, (Chronology) copticChronology0, (int) integer0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("5", stringWriter0.toString());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = "Parsing is not supported";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      
      LocalDate localDate0 = new LocalDate((long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      Locale locale0 = null;
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      String string0 = "@Nw~d7\\+g\\[(2_WWeY";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals("@Nw~d7\\+g\\[(2_WWeY", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
      assertEquals(34, stringBuffer0.capacity());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) int0, (Chronology) gJChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(34, stringBuffer0.capacity());
      assertEquals(19, stringBuffer0.length());
      assertEquals("@Nw~d7\\+g\\[(2_WWeY\uFFFD", stringBuffer0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test
  public void test099() {}
//   @Test
//   public void test099()  throws Throwable  {
//       YearMonthDay yearMonthDay0 = new YearMonthDay();
//       assertNotNull(yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       
//       int int0 = 0;
//       DateTimeFieldType dateTimeFieldType0 = yearMonthDay0.getFieldType(int0);
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals(3, yearMonthDay0.size());
//       
//       StringBuffer stringBuffer0 = new StringBuffer();
//       assertNotNull(stringBuffer0);
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       
//       boolean boolean0 = true;
//       DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_TextField0);
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals(3, yearMonthDay0.size());
//       
//       Locale locale0 = null;
//       dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonthDay0, locale0);
//       assertEquals("2014", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(4, stringBuffer0.length());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals(3, yearMonthDay0.size());
//   }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "halfdays";
      boolean boolean0 = false;
      int int0 = 1073741824;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test101()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      
      char char0 = 'B';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      int int0 = 0;
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0, (Chronology) ethiopicChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "im'PTX;soD>";
      char char0 = 'e';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (long) char0, (Chronology) gJChronology0, (int) char0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test
  public void test103()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = yearMonthDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string0 = "*";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("*", locale0.getCountry());
      assertEquals("*_*_*", locale0.toString());
      assertEquals("*", locale0.getLanguage());
      assertEquals("*", locale0.getVariant());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Chronology chronology0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("*", locale0.getCountry());
      assertEquals("*_*_*", locale0.toString());
      assertEquals("*", locale0.getLanguage());
      assertEquals("*", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("*", locale0.getCountry());
      assertEquals("*_*_*", locale0.toString());
      assertEquals("*", locale0.getLanguage());
      assertEquals("*", locale0.getVariant());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(int0 == int1);
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) int0, (Chronology) ethiopicChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("*", locale0.getCountry());
      assertEquals("*_*_*", locale0.toString());
      assertEquals("*", locale0.getLanguage());
      assertEquals("*", locale0.getVariant());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(4, stringBuffer0.length());
      assertEquals("1962", stringBuffer0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test104()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 114;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      String string0 = "US/East-Indiana";
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) iSOChronology0, int0, dateTimeZone0, locale0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("0", charArrayWriter0.toString());
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "org.joda.time.format.DateTimeFormatterBuilder$TextField";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) stringWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals("org.joda.time.format.DateTimeFormatterBuilder$TextField", stringWriter0.toString());
      assertEquals(4, localTime0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = null;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      long long0 = (-884L);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = 4885;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(4885, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, long0, (Chronology) iSOChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("null", stringBuffer0.toString());
      assertEquals(4885, stringBuffer0.capacity());
      assertEquals(4, stringBuffer0.length());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = 114;
      String string0 = "US/East-Indiana";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) iSOChronology0, int0, dateTimeZone0, locale0);
      assertEquals("US/East-Indiana", charArrayWriter0.toString());
      assertEquals(15, charArrayWriter0.size());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "27u";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"27u\" is malformed at \"u\"
         //
      }
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "/.)poJ\\5lU*";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(false, charBuffer0.isDirect());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) charBuffer0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(false, charBuffer0.isDirect());
      
      MonthDay monthDay0 = MonthDay.now();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Locale locale0 = null;
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      assertEquals(12, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("/.)poJ\\5lU*", stringBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(2, monthDay0.size());
  }

  @Test
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      int int0 = (-593);
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2, int1);
  }

  @Test
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      StringBuffer stringBuffer0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(4, timeOfDay0.size());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneId();
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertTrue(boolean0);
  }

  @Test
  public void test113()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 43;
      String string0 = dateTimeFieldType0.toString();
      assertNotNull(string0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", string0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourofday", locale0.getLanguage());
      assertEquals("CLOCKHOUROFDAY", locale0.getCountry());
      assertEquals("clockhourofday_CLOCKHOUROFDAY_clockhourOfDay", locale0.toString());
      assertEquals("clockhourOfDay", locale0.getVariant());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(4, localTime0.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourofday", locale0.getLanguage());
      assertEquals("CLOCKHOUROFDAY", locale0.getCountry());
      assertEquals("clockhourofday_CLOCKHOUROFDAY_clockhourOfDay", locale0.toString());
      assertEquals("clockhourOfDay", locale0.getVariant());
  }

  @Test
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = "US/Central";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = (-3071);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) copticChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test115()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      String string0 = mutableInterval0.toString();
      assertNotNull(string0);
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals("1970-01-01T01:00:00.000+01:00/1970-01-01T01:00:00.000+01:00", string0);
  }

  @Test
  public void test116()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      String string0 = timeOfDay0.toString();
      assertNotNull(string0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("T20:21:21.320", string0);
  }
}
