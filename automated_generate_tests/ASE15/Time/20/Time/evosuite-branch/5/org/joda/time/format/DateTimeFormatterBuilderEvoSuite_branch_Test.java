/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:36:45 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class DateTimeFormatterBuilderEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      long long0 = 4592L;
      Chronology chronology0 = null;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, chronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "SingaporeUniversal";
      int int0 = 2026;
      // Undeclared exception!
      try {
        int int1 = dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, string0, int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Writer writer0 = null;
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo(writer0, readablePartial0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "aWVNrFTwr0\"\\JTK@*r";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("aWVNrFTwr0\"\\JTK@*r", stringBuffer0.toString());
      assertEquals(35, stringBuffer0.capacity());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(yearMonth0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(2, yearMonth0.size());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "Singapore";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      char char0 = '9';
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Chronology chronology0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockPrintWriter0, (long) int0, chronology0, (int) char0, (DateTimeZone) cachedDateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      long long0 = 2893L;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) ethiopicChronology0, locale0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = "nPe.| @0";
      int int1 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = 0;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      String string0 = "aA\"~R\\I{ -2d$X).f";
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockFileWriter0, (long) int0, (Chronology) strictChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test
  public void test006()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      int int1 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int1);
      assertFalse(int1 == int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertNotNull(julianChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) int0, (Chronology) julianChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(13, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("+00:00:00.006", stringBuffer0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("+00:00:00.006", stringWriter0.toString());
  }

  @Test
  public void test007()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      Object object0 = null;
      MutableInterval mutableInterval0 = new MutableInterval(object0);
      assertNotNull(mutableInterval0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter0.getZone();
      assertNull(dateTimeZone0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) int0, (Chronology) iSOChronology0, int0, dateTimeZone0, locale0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = 1968;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      
      String string0 = "ROKnPe.| @0";
      DateTimeZone dateTimeZone1 = hashMap0.put(string0, dateTimeZone0);
      assertNull(dateTimeZone1);
      assertEquals("{ROKnPe.| @0=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("roknpe.| @0_ROKNPE.| @0", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ROKNPE.| @0", locale0.getCountry());
      assertEquals("roknpe.| @0", locale0.getLanguage());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("roknpe.| @0_ROKNPE.| @0", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ROKNPE.| @0", locale0.getCountry());
      assertEquals("roknpe.| @0", locale0.getLanguage());
      
      String string1 = "k&QP2IoLo\\+|\"h~";
      assertNotSame(string1, string0);
      
      int int1 = 0;
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string1, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-1), int2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("{ROKnPe.| @0=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("roknpe.| @0_ROKNPE.| @0", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ROKNPE.| @0", locale0.getCountry());
      assertEquals("roknpe.| @0", locale0.getLanguage());
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 1968;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      
      String string0 = "ROKnPe.| @0";
      DateTimeZone dateTimeZone1 = hashMap0.put(string0, dateTimeZone0);
      assertNull(dateTimeZone1);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{ROKnPe.| @0=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("roknpe.| @0", locale0.getLanguage());
      assertEquals("ROKNPE.| @0", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("roknpe.| @0_ROKNPE.| @0", locale0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("roknpe.| @0", locale0.getLanguage());
      assertEquals("ROKNPE.| @0", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("roknpe.| @0_ROKNPE.| @0", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = 0;
      int int2 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string0, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(11, int2);
      assertEquals("roknpe.| @0", locale0.getLanguage());
      assertEquals("ROKNPE.| @0", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("roknpe.| @0_ROKNPE.| @0", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{ROKnPe.| @0=null}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
  }

  @Test
  public void test010()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertNotNull(dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "9s _\"&tA:s*a;/sd";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = null;
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0);
      assertFalse(int0 == int1);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int1, hashMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      Object object0 = null;
      MutableInterval mutableInterval0 = new MutableInterval(object0);
      assertNotNull(mutableInterval0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      
      String string1 = timeOfDay0.toString();
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("T00:00:00.000", string1);
      assertNotSame(string1, string0);
      assertEquals(4, timeOfDay0.size());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(zoneInfo0);
      assertNotSame(string1, string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, timeOfDay0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fixedDateTimeZone0);
      assertNotSame(string1, string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, timeOfDay0.size());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) int1, (Chronology) iSOChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "9s _\"&tA:s*a;/sd";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = null;
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0);
      assertFalse(int0 == int1);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertFalse(int0 == int1);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string1 = timeOfDay0.toString();
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("T00:00:00.000", string1);
      assertNotSame(string1, string0);
      assertEquals(4, timeOfDay0.size());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(zoneInfo0);
      assertNotSame(string1, string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, timeOfDay0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fixedDateTimeZone0);
      assertNotSame(string1, string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, timeOfDay0.size());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) int1, (Chronology) ethiopicChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(5, stringBuffer0.length());
      assertEquals("\u5354\u5B9A\u4E16\u754C\u6642", stringBuffer0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(4, timeOfDay0.size());
  }

  @Test
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test014()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder0.toParser();
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = 1900;
      String string0 = "]jr(OhEb\"?d5";
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) int0, (Chronology) copticChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "UniversalnPe.| @0";
      boolean boolean0 = true;
      int int0 = 23118750;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      int int1 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int1);
      assertFalse(int1 == int0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) buddhistChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(17, charArrayWriter0.size());
      assertEquals("UniversalnPe.| @0", charArrayWriter0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test017()  throws Throwable  {
      int int0 = 1900;
      String string0 = "]jr(OhEb\"?d5";
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) int0, (Chronology) copticChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "+I";
      boolean boolean0 = false;
      int int0 = 1232;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals("+I", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(18, stringBuffer0.capacity());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:01.232", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      int int1 = 1000;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) int0, (Chronology) ethiopicChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+I+000001000", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.capacity());
      assertEquals(12, stringBuffer0.length());
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "+I";
      boolean boolean0 = true;
      int int0 = 1232;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("+I", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.capacity());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:01.232", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) int0, (Chronology) ethiopicChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("+00:00:01.232", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("+I+00:00:01.232", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertEquals(18, stringBuffer0.capacity());
  }

  @Test
  public void test020()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
      String string0 = "+I";
      String string1 = "[$u?H40[{GO";
      assertNotSame(string1, string0);
      
      boolean boolean0 = false;
      int int0 = 1232;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string1, string0, boolean0, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      assertNotNull(dateTimeParserArray0[2]);
      assertEquals(11, dateTimeParserArray0[2].estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
  }

  @Test
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "omZwNgo=X";
      boolean boolean0 = false;
      int int0 = 515;
      int int1 = (-3187);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string0, string0, boolean0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      String string0 = "\uFFFD";
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string0, boolean0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test023()  throws Throwable  {
      char char0 = '?';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
      assertEquals(1, int0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) iSOChronology0, locale0, (Integer) int0, (int) char0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = "US/East-IndiananPe.| @0";
      int int1 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
  }

  @Test
  public void test024()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 50;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      String string0 = "org.joda.time.chrono.JulianChronology";
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) ethiopicChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      
      int int1 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-51), int1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
  }

  @Test
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      int int0 = (-1535);
      int int1 = (-2225);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      Writer writer0 = null;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Fraction0.printTo(writer0, (long) int0, (Chronology) copticChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test026()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = 0;
      int int1 = 1280;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      int int2 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, int2);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:01.280", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.280", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Chronology chronology0 = null;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) int0, chronology0, int2, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals("00011407", stringWriter0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("00011407", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("+00:00:01.280", fixedDateTimeZone0.getID());
      assertEquals("+00:00:01.280", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test027()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      int int0 = (-4);
      int int1 = 1758;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      StringWriter stringWriter0 = new StringWriter(int1);
      assertFalse(int1 == int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) stringWriter0, (long) int1, (Chronology) gregorianChronology0, int1, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("0293", stringWriter0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test028()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 44;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, charArrayWriter0, int0, julianChronology0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(44, charArrayWriter0.size());
      assertEquals("00000000000000000000000000000000000000000000", charArrayWriter0.toString());
  }

  @Test
  public void test029()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      long long0 = (-1325L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) ethiopicChronology0, locale0, integer0, (int) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string0 = "org.joda.time.chrono.GJDayOfWeekDateTimeField";
      int int1 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, string0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
  }

  @Test
  public void test030()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "JfN!Ngl!Mu";
      int int1 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
  }

  @Test
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 1;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeek(int0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder2.toFormatter();
      assertNotNull(dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
  }

  @Test
  public void test032()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      String string0 = "Mfh";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0, boolean0);
      assertNotNull(mockFileWriter0);
      
      LocalTime localTime0 = new LocalTime(int0, int0, int0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(4, localTime0.size());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
  }

  @Test
  public void test033()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("\uFFFD\uFFFD", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(4, timeOfDay0.size());
  }

  @Test
  public void test034() {}
//   @Test
//   public void test034()  throws Throwable  {
//       String string0 = "}&2!";
//       ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
//       assertNotNull(iSOChronology0);
//       
//       LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
//       assertNotNull(lenientChronology0);
//       
//       LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.dayOfWeek();
//       assertNotNull(lenientDateTimeField0);
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       
//       SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) iSOChronology0, (DateTimeField) lenientDateTimeField0);
//       assertNotNull(skipUndoDateTimeField0);
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isSupported());
//       assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
//       assertEquals("dayOfWeek", skipUndoDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isLenient());
//       
//       DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("dayOfWeek", dateTimeFieldType0.getName());
//       assertEquals("dayOfWeek", dateTimeFieldType0.toString());
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isSupported());
//       assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
//       assertEquals("dayOfWeek", skipUndoDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isLenient());
//       
//       int int0 = (-1172);
//       boolean boolean0 = false;
//       DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
//       assertEquals("dayOfWeek", dateTimeFieldType0.getName());
//       assertEquals("dayOfWeek", dateTimeFieldType0.toString());
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isSupported());
//       assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
//       assertEquals("dayOfWeek", skipUndoDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isLenient());
//       
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertNotNull(stringBuffer0);
//       assertEquals("}&2!", stringBuffer0.toString());
//       assertEquals(5, stringBuffer0.length());
//       assertEquals(21, stringBuffer0.capacity());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1172,MONTH=-1172,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1172,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1172,HOUR_OF_DAY=-1172,MINUTE=-1172,SECOND=-1172,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(localDate0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-102340770692000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1275,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=359,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=8,SECOND=28,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(3, localDate0.size());
//       
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       
//       dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
//       assertEquals("dayOfWeek", dateTimeFieldType0.getName());
//       assertEquals("dayOfWeek", dateTimeFieldType0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-102340770692000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1275,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=359,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=8,SECOND=28,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals(7, stringBuffer0.length());
//       assertEquals(21, stringBuffer0.capacity());
//       assertEquals("}&2!03", stringBuffer0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals(true, lenientDateTimeField0.isSupported());
//       assertEquals(true, lenientDateTimeField0.isLenient());
//       assertEquals("dayOfWeek", lenientDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isSupported());
//       assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
//       assertEquals("dayOfWeek", skipUndoDateTimeField0.getName());
//       assertEquals(true, skipUndoDateTimeField0.isLenient());
//   }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 1000;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (long) int0, (Chronology) islamicChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test036()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int0 = 2;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "US/Michigan";
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-3), int1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test037()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 2;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "W-SU";
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-3), int1);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      int int0 = 2;
      boolean boolean0 = false;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTwoDigitYear(int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder2.toParser();
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
  }

  @Test
  public void test039()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      int int0 = (-19);
      String string0 = "[>Vc#,>/l]";
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(36, int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = "Singapore";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      char char0 = '9';
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, char0, boolean0, char0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonthDay0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = "9s _\"&tA:s*a;/sd";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = null;
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0);
      assertFalse(int0 == int1);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, int0, boolean0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) timeOfDay0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(4, timeOfDay0.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test042()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 50;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      String string0 = "org.joda.time.chrono.JulianChronology";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int1 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, yearMonth0.size());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
  }

  @Test
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = 1900;
      String string0 = "]jr(OhEb\"?d5";
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(strictChronology0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) strictChronology0, locale0, (Integer) int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1901), int1);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      StringBuffer stringBuffer0 = null;
      LocalDate localDate0 = new LocalDate((long) int0);
      assertFalse(int0 == int1);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int1, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = 1232;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.getID());
      
      char char0 = '+';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = fixedDateTimeZone0.getShortName((long) char0, locale0);
      assertFalse(int0 == int1);
      assertNotNull(string0);
      assertEquals("+00:00:01.232", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int1, boolean0);
      assertFalse(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeParserBucket dateTimeParserBucket0 = null;
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertEquals((-1), int3);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.232", fixedDateTimeZone0.getID());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
  }

  @Test
  public void test045()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = (-19);
      boolean boolean0 = true;
      String string0 = "[>Vc#,>/l]";
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      // Undeclared exception!
      try {
        int int1 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -19
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "4&";
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4&\" is malformed at \"&\"
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      char char0 = 'E';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      assertNotNull(dateTimeParserArray0[0]);
      assertEquals(1, dateTimeParserArray0[0].estimateParsedLength());
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = null;
      Integer integer0 = new Integer((int) char0);
      assertEquals(69, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) char0, (Chronology) gJChronology0, locale0, integer0, (int) integer0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      String string0 = "beGlVK}'#jG29tq]u";
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, string0, (int) char0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(69, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test
  public void test048()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = 1646;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int1 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(18, int1);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      String string0 = ":";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertFalse(int0 == int1);
      assertNotNull(simpleTimeZone0);
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertFalse(int0 == int1);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertFalse(int0 == int1);
      assertNotNull(islamicChronology0);
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      StringWriter stringWriter0 = new StringWriter(int0);
      assertFalse(int0 == int1);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) stringWriter0, (long) int0, (Chronology) islamicChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringWriter0.toString());
  }

  @Test
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try {
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = (-2474);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 7701;
      int int1 = (-292269054);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test053()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int1 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
  }

  @Test
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = "W-SU";
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-3), int1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -3
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 1;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(int0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 43;
      int int1 = 346;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int1 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(2, int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
  }

  @Test
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-825);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimePrinter dateTimePrinter0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional((DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimePrinter dateTimePrinter0 = dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 7701;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      dateTimeFormatterBuilder0.clear();
  }

  @Test
  public void test069()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int1 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int1, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
  }

  @Test
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = (DateTimeFormatterBuilder.TextField)dateTimeFormatterBuilder0.toPrinter();
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
  }

  @Test
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 43;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "nPe.| @0";
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 1;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "JfN!Ngl!Mu";
      // Undeclared exception!
      try {
        DateTime dateTime0 = DateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"JfN!Ngl!Mu\"
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test080()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-2707);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 2;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 464;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(int0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 464;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(int0, int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
      assertFalse(boolean0);
  }

  @Test
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(int0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "9s _\"&tA:s*a;/sd";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeParserBucket dateTimeParserBucket0 = null;
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertFalse(int0 == int1);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertFalse(int0 == int1);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter0.getZone();
      assertFalse(int0 == int1);
      assertNull(dateTimeZone0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) int1, (Chronology) ethiopicChronology0, int0, dateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      String string0 = "US/CentralnPe.| @0";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertNotNull(dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      Locale locale0 = dateTimeFormatter0.getLocale();
      assertNull(locale0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockPrintWriter0, (long) int1, (Chronology) gJChronology0, int1, dateTimeZone0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 1900;
      String string0 = "]jr(OhEb\"?d5";
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      ReadablePartial readablePartial0 = null;
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockPrintWriter0, readablePartial0, locale0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
  }

  @Test
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      int int0 = (-19);
      boolean boolean0 = true;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, int0, boolean0, int0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      String string0 = "[>Vc#,>/l]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) gregorianChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test094()  throws Throwable  {
      char char0 = '?';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
      assertEquals(1, int0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((int) char0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeZone dateTimeZone0 = null;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) iSOChronology0, int0, dateTimeZone0, locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test
  public void test095()  throws Throwable  {
      boolean boolean0 = false;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_TextField0.printTo((Writer) stringWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals("\uFFFD", stringWriter0.toString());
  }

  @Test
  public void test096() {}
//   @Test
//   public void test096()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       
//       int int0 = 0;
//       boolean boolean0 = true;
//       DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
//       assertNotNull(dateTimeFormatterBuilder_TextField0);
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       
//       IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
//       assertNotNull(islamicChronology0);
//       
//       StringWriter stringWriter0 = new StringWriter();
//       assertNotNull(stringWriter0);
//       assertEquals("", stringWriter0.toString());
//       
//       StringBuffer stringBuffer0 = stringWriter0.getBuffer();
//       assertNotNull(stringBuffer0);
//       assertEquals("", stringWriter0.toString());
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = null;
//       DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0);
//       assertNotNull(dateTimeParserBucket0);
//       assertEquals(0, dateTimeParserBucket0.getOffset());
//       
//       Locale locale1 = dateTimeParserBucket0.getLocale();
//       assertNotNull(locale1);
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("", locale1.getISO3Language());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getLanguage());
//       assertEquals("", locale1.toString());
//       assertEquals(0, dateTimeParserBucket0.getOffset());
//       
//       dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) int0, (Chronology) islamicChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale1);
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("1389", stringWriter0.toString());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("", locale1.getISO3Language());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getLanguage());
//       assertEquals("", locale1.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals(0, dateTimeParserBucket0.getOffset());
//       assertEquals(4, stringBuffer0.length());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals("1389", stringBuffer0.toString());
//   }

  @Test
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals("\uFFFD", stringWriter0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("\uFFFD", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(4, localTime0.size());
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "UniversalnPe.| @0";
      boolean boolean0 = true;
      int int0 = 23118750;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals(4, timeOfDay0.size());
  }

  @Test
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      
      int int0 = 10;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = "Universal";
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      
      MonthDay monthDay0 = MonthDay.parse(string0, dateTimeFormatter0);
      assertNotNull(monthDay0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2, monthDay0.size());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      
      Locale locale0 = null;
      char char0 = '0';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) stringWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("0", stringWriter0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
  }

  @Test
  public void test100()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTimeFormatter dateTimeFormatter0 = null;
      String string0 = instant0.toString(dateTimeFormatter0);
      assertNotNull(string0);
      assertEquals("2014-02-14T20:21:21.320Z", string0);
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      int int0 = 1900;
      String string0 = "]jr(OhEb\"?d5";
      boolean boolean0 = false;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Integer integer0 = Integer.getInteger(string0, (Integer) int0);
      assertEquals(1900, (int)integer0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (int) integer0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) copticChronology0, (int) integer0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "Singapore";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      DateTimeZone dateTimeZone0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonthDay0, locale0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "No formatter supplied";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      char[] charArray0 = new char[7];
      char char0 = '-';
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((int) char0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.045", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.045", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) charArray0[0], (Chronology) gregorianChronology0, (int) charArray0[2], (DateTimeZone) fixedDateTimeZone0, locale0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("+00:00:00.045", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.045", fixedDateTimeZone0.toString());
      assertEquals(34, stringBuffer0.capacity());
      assertEquals("No formatter supplied", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.length());
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 50;
      String string0 = "org.joda.time.chrono.JulianChronology";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) mockPrintWriter0, (long) int0, (Chronology) gregorianChronology0, int0, dateTimeZone0, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "No formatter supplied";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      
      char[] charArray0 = new char[7];
      char char0 = '-';
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((int) charArray0[4]);
      assertNotNull(fixedDateTimeZone0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      LocalDate localDate0 = new LocalDate((long) char0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      
      TimeOfDay timeOfDay0 = dateTime0.toTimeOfDay();
      assertNotNull(timeOfDay0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(4, timeOfDay0.size());
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) timeOfDay0, locale0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(34, stringBuffer0.capacity());
      assertEquals(21, stringBuffer0.length());
      assertEquals("No formatter supplied", stringBuffer0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(4, timeOfDay0.size());
  }

  @Test
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      int int0 = 2;
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTwoDigitYear(int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder2.toParser();
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      int int0 = 10;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = "Universal";
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      MonthDay monthDay0 = MonthDay.parse(string0, dateTimeFormatter0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      Locale locale0 = null;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) stringWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals("", stringWriter0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
  }

  @Test
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, readablePartial0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
  }

  @Test
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional((DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
  }

  @Test
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
      assertEquals(32, int0);
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
  }

  @Test
  public void test111()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      int int0 = 0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      
      Writer writer0 = null;
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Fraction0.printTo(writer0, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 1646;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      String string0 = ":";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = null;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) int0, (Chronology) islamicChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1646, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=:,offset=1646,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(":", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringBuffer0.toString());
      assertEquals(2302, stringBuffer0.capacity());
      assertEquals(1646, stringBuffer0.length());
  }
}
