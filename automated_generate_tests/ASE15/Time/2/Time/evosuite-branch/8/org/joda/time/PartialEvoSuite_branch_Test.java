/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:24:13 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Locale;




import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;


public class PartialEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "must not be smaller than ";
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(string1);
      assertEquals("2014-02-14", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "Values array must not be null";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "is not supported";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int[] intArray0 = new int[10];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(2, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toStringList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0);
      
      String string0 = partial0.toString();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(string0);
      assertEquals("[era=0]", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2;
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(string1);
      assertEquals("--02", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "is not supported";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int[] intArray0 = new int[10];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(2, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(2, partial0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test07()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toString();
      assertEquals(0, partial0.size());
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNull(dateTimeFormatter1);
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-5121);
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
      
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial1);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0, (Chronology) buddhistChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateMidnight0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(partial0);
      
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 14;
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertNotNull(mutablePeriod0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) mutablePeriod0);
      assertEquals(3, partial0.size());
      assertEquals(3, partial1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Months months0 = Months.ONE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) months0, int0);
      assertEquals(1, partial0.size());
      assertEquals(1, months0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.minus(readablePeriod0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test18()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-5121);
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(0, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Partial partial2 = partial1.withFieldAddWrapped(durationFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial2.size());
      assertEquals(0, partial0.size());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial0, partial2);
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial2.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial0.equals((Object)partial2));
      assertNotNull(partial2);
  }

  @Test
  public void test19()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertEquals(2, partial0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertEquals(2, partial0.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test20()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-5121);
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial1, int1);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial_Property0);
      
      Partial partial2 = partial_Property0.addWrapFieldToCopy(int1);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial2.size());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(partial2.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial2);
      
      Partial partial3 = partial2.withFieldAdded(durationFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(1, partial2.size());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals(1, partial3.size());
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial3);
      assertNotSame(partial2, partial0);
      assertNotSame(partial0, partial3);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial3);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial3, partial0);
      assertNotSame(partial3, partial2);
      assertNotSame(partial3, partial1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(partial2.equals((Object)partial3));
      assertTrue(partial2.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial3));
      assertFalse(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial3));
      assertTrue(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial3.equals((Object)partial0));
      assertFalse(partial3.equals((Object)partial2));
      assertFalse(partial3.equals((Object)partial1));
      assertNotNull(partial3);
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      int int1 = (-66);
      intArray0[0] = int1;
      Partial partial1 = new Partial(partial0, intArray0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertArrayEquals(new int[] {(-66), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
      
      Partial partial2 = partial1.withField(dateTimeFieldType0, int0);
      assertEquals(1, partial2.size());
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial1, partial2);
      assertArrayEquals(new int[] {(-66), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(partial2.equals((Object)partial1));
      assertTrue(partial2.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertTrue(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial1.equals((Object)partial2));
      assertNotNull(partial2);
  }

  @Test
  public void test23()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 14;
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(3, localDate0.size());
      assertEquals(4, partial1.size());
      assertEquals(3, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
      
      Partial partial2 = partial1.without(dateTimeFieldType0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial2.size());
      assertEquals(4, partial1.size());
      assertEquals(3, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial0, partial2);
      assertFalse(partial2.equals((Object)partial1));
      assertTrue(partial2.equals((Object)partial0));
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertTrue(partial0.equals((Object)partial2));
      assertNotNull(partial2);
  }

  @Test
  public void test24()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals(3, localDate0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(3, partial1.size());
      assertEquals(3, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      int int1 = 2996;
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertEquals(1, partial1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(0, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test28()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 18;
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      assertEquals(1, partial1.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test30()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) gregorianChronology0);
      assertEquals(3, partial0.size());
      assertEquals(3, partial1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
  }

  @Test
  public void test31()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("yearOfEra", dateTimeFieldTypeArray0[0].toString());
      assertEquals("yearOfEra", dateTimeFieldTypeArray0[0].getName());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType2.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType2.getName());
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType2);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[2].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[2].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType2.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType2.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must not be smaller than 1
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[0].toString());
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.getName());
      assertEquals("minuteOfDay", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[2].getName());
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[3].getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[3].toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[3];
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[4].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[4].getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[1];
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[5].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[5].getName());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: minuteOfHour < minuteOfDay
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(3, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, intArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: dayOfYear and dayOfYear
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[1].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[1].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[3].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[3].toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[4].getName());
      assertEquals("year", dateTimeFieldTypeArray0[4].toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[3];
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[5].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[5].toString());
      assertNotNull(dateTimeFieldTypeArray0[5]);
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[6].getName());
      assertEquals("year", dateTimeFieldTypeArray0[6].toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[6]);
      
      int[] intArray0 = new int[7];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: clockhourOfHalfday < year
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear and year
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      int[] intArray0 = new int[9];
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[22];
      int[] intArray0 = new int[9];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[9];
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test
  public void test42()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Months months0 = Months.ONE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) months0);
      assertEquals(1, partial1.size());
      assertEquals(1, months0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertEquals(1, partial1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.addToCopy(int0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotNull(partial1);
  }

  @Test
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      int int1 = partial_Property0.get();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test46()  throws Throwable  {
      long long0 = 0L;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(long0, (Chronology) islamicChronology0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      String string0 = "org.joda.time.Partial$Property";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.Partial$Property\" for hourOfDay is not supported
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(2, yearMonth0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(yearMonth0);
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertEquals(2, yearMonth0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(2, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(2, yearMonth0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(2, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertEquals(2, yearMonth0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(2, partial1.size());
      assertEquals(2, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }
}
