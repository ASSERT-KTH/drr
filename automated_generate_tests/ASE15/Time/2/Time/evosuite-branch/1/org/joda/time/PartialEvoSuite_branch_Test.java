/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:57:55 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class PartialEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = "}@P-c:u@Ck'2NFVwwf";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "Pacific/Apia";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 45;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("0045", string1);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(1, partial0.size());
      assertNotNull(string1);
      
      String string2 = partial0.toString();
      assertTrue(string2.equals((Object)string1));
      assertEquals("0045", string2);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotSame(string2, string1);
      assertNotNull(string2);
  }

  @Test
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        String string0 = partial0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals("[]", string1);
      assertEquals(0, partial0.size());
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 45;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("0045", string1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1348);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.addToCopy(int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(boolean0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 3271;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1348);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1348);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertFalse(boolean0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1348);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      ReadableInstant readableInstant0 = null;
      DateTime dateTime0 = partial0.toDateTime(readableInstant0);
      assertEquals(1, partial0.size());
      assertEquals((-104702125043680L), dateTime0.getMillis());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTime0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertTrue(boolean0);
      assertEquals(1, partial0.size());
      assertEquals((-104702125043680L), dateTime0.getMillis());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = 0;
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) months0, int0);
      assertEquals(0, partial1.size());
      assertEquals(1, months0.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.withPeriodAdded(readablePeriod0, int0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, partial1.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 20;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-2930L);
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = localDate0.getFieldType(int0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTimeFieldType0);
      
      int int1 = 10209375;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int1, (Chronology) islamicChronology0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year must be in the range [1,292271022]
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals(0, partial1.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test20()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      int int1 = 2810;
      MockDate mockDate0 = new MockDate(int0, int0, int1, int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Wed Sep 11 00:46:50 GMT 1907", mockDate0.toString());
      assertNotNull(mockDate0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields((Date) mockDate0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Wed Sep 11 00:46:50 GMT 1907", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(4, partial0.size());
      assertEquals("Wed Sep 11 00:46:50 GMT 1907", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("Wed Sep 11 00:46:50 GMT 1907", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2810 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = 1L;
      MonthDay monthDay0 = new MonthDay(long0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 96;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(3, partial1.size());
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test23()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1436;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1436 for dayOfMonth must not be larger than 31
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = (-2L);
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertEquals((-2L), mutableInterval0.getEndMillis());
      assertEquals((-2L), mutableInterval0.getStartMillis());
      assertNotNull(mutableInterval0);
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertEquals((-2L), mutableInterval0.getEndMillis());
      assertEquals((-2L), mutableInterval0.getStartMillis());
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals((-2L), mutableInterval0.getEndMillis());
      assertEquals((-2L), mutableInterval0.getStartMillis());
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals((-2L), mutableInterval0.getEndMillis());
      assertEquals((-2L), mutableInterval0.getStartMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.era();
      assertEquals((-2L), mutableInterval0.getEndMillis());
      assertEquals((-2L), mutableInterval0.getStartMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      int int0 = 40;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) iSOChronology0, dateTimeField0, int0);
      assertEquals((-2L), mutableInterval0.getEndMillis());
      assertEquals((-2L), mutableInterval0.getStartMillis());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("era", skipDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals((-2L), mutableInterval0.getEndMillis());
      assertEquals((-2L), mutableInterval0.getStartMillis());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("era", skipDateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("era", dateTimeField0.getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 40 for era must not be larger than 1
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields((Date) mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 62;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType1 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Chronology chronology0 = null;
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test28()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year and year
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("dayOfMonth", dateTimeFieldType1.getName());
      assertEquals("dayOfMonth", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfMonth", dateTimeFieldType1.getName());
      assertEquals("dayOfMonth", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].toString());
      assertEquals("dayOfMonth", dateTimeFieldTypeArray0[3].getName());
      assertEquals("dayOfMonth", dateTimeFieldType1.getName());
      assertEquals("dayOfMonth", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[4].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[4].getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      int[] intArray0 = new int[5];
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: clockhourOfDay < dayOfMonth
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 104;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDate0);
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals(3, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[3].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[3].getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[0];
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[4].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[4].getName());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      int[] intArray0 = new int[5];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: dayOfWeek and dayOfWeek
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      int[] intArray0 = new int[13];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[5];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      byte byte0 = (byte)23;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 20;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Years years0 = Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, years0.size());
      assertNotNull(mutablePeriod0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) mutablePeriod0);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals(1, years0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) copticChronology0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 45;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test
  public void test39()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) months0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(1, months0.size());
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1348);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1348);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      String string0 = partial_Property0.getAsShortText();
      assertEquals("-1348", string0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(string0);
  }

  @Test
  public void test42()  throws Throwable  {
      long long0 = (-2930L);
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = localDate0.getFieldType(int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTimeFieldType0);
      
      int int1 = 10209375;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int1, (Chronology) islamicChronology0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertFalse(int0 == int1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test
  public void test43()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = (-34);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      String string0 = "!|F/5";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 61;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields((Date) mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertEquals(4, partial0.size());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(4, partial0.size());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
  }
}
