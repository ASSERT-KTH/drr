/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:44:07 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;


public class BasePeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try {
        mutablePeriod0.add((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      mutablePeriod0.add((ReadableInterval) mutableInterval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      ReadablePeriod readablePeriod0 = null;
      mutablePeriod0.add(readablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Weeks weeks0 = Weeks.THREE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      mutablePeriod0.mergePeriod((ReadablePeriod) weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      Years years0 = Years.TWO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      assertEquals(8, mutablePeriod0.size());
      
      ReadablePeriod readablePeriod0 = null;
      mutablePeriod0.mergePeriod(readablePeriod0);
      assertEquals(1, years0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = period0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(8, period0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      DurationFieldType durationFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 3405;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      int int1 = 0;
      mutablePeriod0.add(durationFieldType0, int1);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 3405;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int1 = mutablePeriod0.getMonths();
      assertEquals(0, int1);
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      mutablePeriod0.addMinutes(int1);
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 1714L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(1714000L, duration0.getMillis());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Period period0 = duration0.toPeriod((Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1714000L, duration0.getMillis());
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(1714000L, duration0.getMillis());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = 10000000000L;
      PeriodType periodType0 = null;
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 4;
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      // Undeclared exception!
      try {
        mutablePeriod0.setHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 3405;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int1 = mutablePeriod0.getMonths();
      assertEquals(0, int1);
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Period period0 = Period.seconds(int1);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(int1 == int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      MockDate mockDate0 = (MockDate)localDate0.toDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(3, localDate0.size());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) partial0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(2, yearMonth0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      YearMonth yearMonth1 = null;
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1, period0.size());
      assertEquals(1, months0.size());
      assertEquals(4, localTime0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
  }

  @Test
  public void test17()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertNotNull(dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      
      DateTime dateTime1 = null;
      Period period0 = new Period((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(4, localTime0.size());
      assertEquals(8, period0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
  }

  @Test
  public void test19()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      
      ReadableInstant readableInstant0 = null;
      Duration duration0 = mutablePeriod0.toDurationFrom(readableInstant0);
      assertNotNull(duration0);
      assertEquals((-7730941132800000L), duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      Years years0 = Years.TWO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 4;
      mutablePeriod0.setHours(int0);
      assertEquals(1, years0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) string0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      Years years0 = Years.TWO;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
      
      int int0 = 4;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTime dateTime0 = new DateTime((long) int0, (Chronology) ethiopicChronology0);
      assertNotNull(dateTime0);
      assertEquals(4L, dateTime0.getMillis());
      
      Duration duration0 = Duration.standardMinutes((long) int0);
      assertNotNull(duration0);
      assertEquals(240000L, duration0.getMillis());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
      
      PeriodType periodType0 = period0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
      
      Period period1 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0, periodType0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(4L, dateTime0.getMillis());
      assertEquals(8, period1.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(240000L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 3405;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertNotNull(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'eras'
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 3405;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int1 = mutablePeriod0.getMonths();
      assertEquals(0, int1);
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Period period0 = Period.seconds(int1);
      assertNotNull(period0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ReadableInstant readableInstant0 = null;
      Duration duration0 = period0.toDurationTo(readableInstant0);
      assertNotNull(duration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test26()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      int int0 = 0;
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = (-4040);
      // Undeclared exception!
      try {
        mutablePeriod0.setValue(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4040
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-4040);
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      PeriodType periodType0 = years0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, years0.size());
      
      Period period0 = null;
      try {
        period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime();
      assertNotNull(mutableDateTime0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableDuration0, (ReadableInstant) mutableDateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }
}
