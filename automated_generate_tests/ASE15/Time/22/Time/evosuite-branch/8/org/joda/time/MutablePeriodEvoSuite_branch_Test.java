/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:39:24 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class MutablePeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 6897;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, mutablePeriod0.size());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertNotNull(minutes0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1, minutes0.size());
      
      Duration duration0 = minutes0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0L, duration0.getMillis());
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1, minutes0.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals(3, mutablePeriod0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      ReadableDuration readableDuration0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, readableDuration0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      mutablePeriod0.add(readableDuration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(3, mutablePeriod0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
      assertEquals(3, mutablePeriod0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, long0);
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(3, mutablePeriod0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      mutablePeriod0.add((ReadableInterval) mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(3, mutablePeriod0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 1023;
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = (-12219292800000L);
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.setPeriod(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = (-3L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Interval interval0 = dateMidnight0.toInterval();
      assertNotNull(interval0);
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setHours(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 1;
      mutablePeriod0.addDays(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "Clone error";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Clone error\"
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getYears();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setValue(int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 30617280288L;
      DateTimeZone dateTimeZone0 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = new DateTime(long0, dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(30617280288L, dateTime0.getMillis());
      
      int int0 = (-637);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(30617280288L, dateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      
      mutablePeriod0.setMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(30617280288L, dateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1023;
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      mutablePeriod0.setMonths(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-3L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.clear();
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setMillis(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.addSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1023;
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Minutes minutes0 = Minutes.THREE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, minutes0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      mutablePeriod0.addMinutes(int0);
      assertEquals(1, minutes0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-12219292800000L);
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 2650;
      mutablePeriod0.addWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 30617280288L;
      DateTimeZone dateTimeZone0 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = new DateTime(long0, dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(30617280288L, dateTime0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(30617280288L, dateTime0.getMillis());
      
      mutablePeriod0.setPeriod(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(30617280288L, dateTime0.getMillis());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.toMutablePeriod();
      assertNotNull(mutablePeriod1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
  }

  @Test
  public void test21()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) readableDuration0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableDuration0, (ReadableInstant) dateMidnight0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int0 = (-391);
      mutablePeriod0.setWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test22()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      DateMidnight dateMidnight1 = dateMidnight0.withYear(int0);
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals((-62163417525000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-62163417525000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 30617280288L;
      DateTimeZone dateTimeZone0 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = new DateTime(long0, dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(30617280288L, dateTime0.getMillis());
      
      int int0 = (-637);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(30617280288L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      
      mutablePeriod0.addMonths(int0);
      assertEquals(30617280288L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 1023;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      long long0 = (-12219292800000L);
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = (-12219292800000L);
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 2650;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:02.650", fixedDateTimeZone0.toString());
      assertEquals("+00:00:02.650", fixedDateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:02.650", fixedDateTimeZone0.toString());
      assertEquals("+00:00:02.650", fixedDateTimeZone0.getID());
      
      mutablePeriod0.add(long0, (Chronology) ethiopicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:02.650", fixedDateTimeZone0.toString());
      assertEquals("+00:00:02.650", fixedDateTimeZone0.getID());
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = (-3L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 853;
      Minutes minutes0 = Minutes.ZERO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Hours hours0 = minutes0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      
      Days days0 = hours0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, days0.size());
      
      mutablePeriod0.set(durationFieldType0, int0);
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, days0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.addMillis(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.add((long) int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-391);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, mutablePeriod0.size());
      
      mutablePeriod0.mergePeriod((ReadablePeriod) mutablePeriod0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, mutablePeriod0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = (-12219292800000L);
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.addYears(PeriodType.MILLI_INDEX);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = (-12219292800000L);
      PeriodType periodType0 = null;
      Duration duration0 = new Duration(long0);
      assertNotNull(duration0);
      assertEquals((-12219292800000L), duration0.getMillis());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-12219292800000L), duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test35()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertNotNull(mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test37()  throws Throwable  {
      long long0 = (-1941L);
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (long) PeriodType.SECOND_INDEX, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setDays(PeriodType.SECOND_INDEX);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = mutablePeriod0.getYears();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = (-3L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 853;
      mutablePeriod0.addHours(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test40()  throws Throwable  {
      long long0 = (-1941L);
      int int0 = (-1112);
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (long) int0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setYears(PeriodType.SECOND_INDEX);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test41()  throws Throwable  {
      long long0 = (-3L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
  }

  @Test
  public void test42()  throws Throwable  {
      Object object0 = null;
      int int0 = 0;
      Weeks weeks0 = Weeks.weeks(int0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, weeks0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, weeks0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test43()  throws Throwable  {
      long long0 = (-3L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = PeriodType.MILLI_INDEX;
      assertEquals(7, int0);
      
      mutablePeriod0.setSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test44()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(6, mutablePeriod0.size());
      
      int int0 = 0;
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(6, mutablePeriod0.size());
  }

  @Test
  public void test45()  throws Throwable  {
      long long0 = (-1941L);
      int int0 = (-1112);
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (long) int0, chronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Duration duration0 = Duration.millis(long0);
      assertNotNull(duration0);
      assertEquals((-1941L), duration0.getMillis());
      
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-1941L), duration0.getMillis());
  }
}
