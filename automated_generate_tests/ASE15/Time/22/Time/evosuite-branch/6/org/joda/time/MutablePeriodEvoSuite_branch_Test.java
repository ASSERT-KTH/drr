/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:54:33 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class MutablePeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      int int0 = 205;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationFrom(readableInstant0);
      assertEquals(7150519705205L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertEquals(7150519705205L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(7150519705205L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, mutablePeriod0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableDuration readableDuration0 = null;
      mutablePeriod0.add(readableDuration0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 26607895200000L;
      Minutes minutes0 = Minutes.THREE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Interval interval0 = new Interval(long0, long0);
      assertEquals(26607895200000L, interval0.getStartMillis());
      assertEquals(26607895200000L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(26607895200000L, interval0.getStartMillis());
      assertEquals(26607895200000L, interval0.getEndMillis());
      assertEquals(1, minutes0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
  }

  @Test
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      long long0 = (-804L);
      int int0 = 85;
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, long0, periodType0, (Chronology) ethiopicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Instant instant0 = new Instant(long0);
      assertEquals((-804L), instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals((-804L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-804L), instant0.getMillis());
      assertNotNull(mutableDateTime0);
      
      mutablePeriod0.setPeriod((ReadableInstant) mutableDateTime0, (ReadableInstant) instant0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-804L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-804L), instant0.getMillis());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 0L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Interval interval0 = new Interval(long0, long0, (Chronology) julianChronology0);
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) interval0);
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Interval interval1 = null;
      mutablePeriod0.setPeriod((ReadableInterval) interval1);
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 0L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Interval interval0 = new Interval(long0, long0, (Chronology) julianChronology0);
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) interval0);
      assertEquals(1, seconds0.size());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(1, seconds0.size());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = (-94L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      Chronology chronology0 = null;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(fixedDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) chronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(dateMidnight0);
      
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.setHours(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = 0L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) julianChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = 1209600000L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-3899);
      mutablePeriod0.addDays(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 0L;
      int int0 = 798;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) iSOChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setValue(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 798
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      PeriodType periodType0 = mutablePeriod0.getPeriodType();
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
  }

  @Test
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 2;
      mutablePeriod0.setMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 2;
      mutablePeriod0.setMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.clear();
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.size();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, int0);
      
      mutablePeriod0.addSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 31083663600000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Interval interval0 = new Interval(long0, long0, (Chronology) julianChronology0);
      assertEquals(31083663600000L, interval0.getStartMillis());
      assertEquals(31083663600000L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) interval0);
      assertEquals(1, seconds0.size());
      assertEquals(31083663600000L, interval0.getStartMillis());
      assertEquals(31083663600000L, interval0.getEndMillis());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, seconds0.size());
      assertEquals(31083663600000L, interval0.getStartMillis());
      assertEquals(31083663600000L, interval0.getEndMillis());
      assertNotNull(mutablePeriod0);
      
      int int0 = 10;
      mutablePeriod0.addMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, seconds0.size());
      assertEquals(31083663600000L, interval0.getStartMillis());
      assertEquals(31083663600000L, interval0.getEndMillis());
  }

  @Test
  public void test20()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 2;
      mutablePeriod0.addWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 31083663600000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Interval interval0 = new Interval(long0, long0, (Chronology) julianChronology0);
      assertEquals(31083663600000L, interval0.getEndMillis());
      assertEquals(31083663600000L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) interval0);
      assertEquals(1, seconds0.size());
      assertEquals(31083663600000L, interval0.getEndMillis());
      assertEquals(31083663600000L, interval0.getStartMillis());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(31083663600000L, interval0.getEndMillis());
      assertEquals(31083663600000L, interval0.getStartMillis());
      assertNotNull(mutablePeriod0);
      
      int int0 = 10;
      mutablePeriod0.setWeeks(int0);
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(31083663600000L, interval0.getEndMillis());
      assertEquals(31083663600000L, interval0.getStartMillis());
  }

  @Test
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      long long0 = (-1082L);
      mutablePeriod0.setPeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) dateTimeZone0, (Chronology) ethiopicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-2215);
      mutablePeriod0.addMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.size();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, int0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
  }

  @Test
  public void test25()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.size();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, int0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      mutablePeriod0.add((long) int0, (Chronology) gJChronology0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.getMillis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.set(durationFieldType0, int0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = 0L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Interval interval0 = new Interval(long0, long0, (Chronology) julianChronology0);
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) interval0);
      assertEquals(1, seconds0.size());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertNotNull(mutablePeriod0);
      
      int int0 = 10;
      mutablePeriod0.addMillis(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = 1209600000L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add(long0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      Days days0 = Days.SIX;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(1, days0.size());
      assertEquals(518400000L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, readableInstant0);
      assertEquals(1, days0.size());
      assertEquals(518400000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) days0);
      assertEquals(1, days0.size());
      assertEquals(518400000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = (-117L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-2514);
      mutablePeriod0.addYears(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 0;
      Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(14400000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(duration0);
      
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateMidnight0, periodType0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(1, hours0.size());
      assertEquals(14400000L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertNotNull(mutablePeriod1);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = (-94L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertNotNull(mutablePeriod1);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 168;
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setDays(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Months months0 = Months.ONE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = (-986);
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 0;
      int int1 = PeriodType.WEEK_INDEX;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int1, int0, int0, int0, int1, int0);
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 1;
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) gregorianChronology0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addHours(int0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, mutablePeriod0.size());
  }

  @Test
  public void test37()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 2;
      mutablePeriod0.setYears(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test38()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      String string0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) string0, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test39()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      String string0 = mutablePeriod0.toString();
      assertEquals(8, mutablePeriod0.size());
      assertEquals("PT0S", string0);
      assertNotNull(string0);
      
      MutablePeriod mutablePeriod1 = MutablePeriod.parse(string0);
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertNotNull(mutablePeriod1);
  }

  @Test
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      int int1 = mutablePeriod0.getWeeks();
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      mutablePeriod0.add(int0, int0, int1, int1, int1, int0, int0, PeriodType.MILLI_INDEX);
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableDuration readableDuration0 = null;
      mutablePeriod0.setPeriod(readableDuration0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test42()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(readableInstant0);
      assertEquals(0L, duration0.getMillis());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
  }
}
