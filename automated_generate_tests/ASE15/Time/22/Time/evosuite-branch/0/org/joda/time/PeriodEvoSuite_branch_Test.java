/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:56 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;


public class PeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      long long0 = 86400L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      int int0 = 10;
      Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertNotNull(period0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, period0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Period period1 = period0.withMonths(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, period0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      PeriodType periodType0 = null;
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotNull(period2);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, period0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, period1.size());
      assertEquals(8, period2.size());
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-647);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Weeks weeks0 = Weeks.ONE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, weeks0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(1, period1.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-213);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      // Undeclared exception!
      try {
        Duration duration0 = period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-682);
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusMonths(int0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      
      // Undeclared exception!
      try {
        Hours hours0 = period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 20;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-647);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-647);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int1 = 0;
      Period period1 = period0.plusMillis(int1);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusSeconds(int0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       long long0 = 86400L;
//       GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//       assertNotNull(gJChronology0);
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       
//       LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) fixedDateTimeZone0);
//       assertNotNull(localDateTime0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       
//       Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
//       assertNotNull(period0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, period0.size());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       
//       int int0 = 0;
//       Period period1 = period0.minusMinutes(int0);
//       assertNotNull(period1);
//       assertSame(period1, period0);
//       assertSame(period0, period1);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, period1.size());
//       assertEquals(4, period0.size());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//   }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusHours(int0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusDays(int0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusWeeks(int0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-647);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int1 = 0;
      Period period1 = period0.plusMonths(int1);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, period0.size());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      int int0 = 0;
      Period period1 = period0.plusYears(int0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, period1.size());
      assertEquals(7, period0.size());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 23118750;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, period0.size());
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(7, period1.size());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, period0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-1893);
      Weeks weeks0 = Weeks.weeks(int0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      int int1 = 0;
      Period period1 = period0.withFieldAdded(durationFieldType0, int1);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 20;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-647);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test19()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      ReadableDuration readableDuration0 = null;
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      Period period0 = new Period(readableInstant0, readableDuration0, periodType0);
      assertNotNull(period0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = PeriodType.SECOND_INDEX;
      assertEquals(6, int0);
      
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period((long) int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 122;
      Chronology chronology0 = null;
      Period period0 = new Period((long) int0, chronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = null;
      Period period1 = period0.withPeriodType(periodType0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) timeOfDay0, (ReadablePartial) yearMonthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(7, period0.size());
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(7, period0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, period0.size());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      // Undeclared exception!
      try {
        Period period1 = period0.minusWeeks(periodType0.WEEK_INDEX);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = PeriodType.YEAR_INDEX;
      assertEquals(0, int0);
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateMidnight0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-682);
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(8, period0.size());
      assertEquals(1, minutes0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-1893);
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      
      Period period0 = new Period((long) int0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, period0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period((long) int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-1976);
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Days days0 = period0.toStandardDays();
      assertNotNull(days0);
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 23118750;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withHours(int0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-682);
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusSeconds(int0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 9;
      Weeks weeks0 = Weeks.ZERO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      
      Period period1 = period0.withWeeks(int0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 1047;
      Period period0 = new Period((long) int0, (long) int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withSeconds(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-1499);
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusHours(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 122;
      Duration duration0 = new Duration((long) int0, (long) int0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) instant0, periodType0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test
  public void test38()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = (-1499);
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withDays(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 153692453;
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusYears(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.normalizedStandard();
      assertNotNull(period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertEquals(8, period2.size());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = (-1499);
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusMinutes(int0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertNotNull(period0);
      assertEquals(2, period0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 153692453;
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusDays(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = (-647);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusMillis(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test45()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, weeks0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1, period0.size());
      assertEquals(1, weeks0.size());
      assertEquals(4, localTime0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 1047;
      PeriodType periodType0 = null;
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = PeriodType.SECOND_INDEX;
      assertEquals(6, int0);
      
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusMonths(int0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = (-647);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withMinutes(int0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test
  public void test51()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(4, localTime0.size());
      
      int int0 = (-932);
      Period period1 = period0.withMillis(int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals(4, localTime0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test52()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test
  public void test53()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(8, period0.size());
      assertEquals(7, period1.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test
  public void test54()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(7, period0.size());
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 1047;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 20;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Period period0 = new Period((long) int0, (long) PeriodType.SECOND_INDEX, (Chronology) gregorianChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = PeriodType.SECOND_INDEX;
      assertEquals(6, int0);
      
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.toPeriod();
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test
  public void test58()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(4, localTime0.size());
      assertEquals(8, period0.size());
      
      long long0 = 941L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(941L, mutableDateTime0.getMillis());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)mutableDateTime0.toCalendar(locale0);
      assertNotNull(gregorianCalendar0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=941,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(941L, mutableDateTime0.getMillis());
      
      YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields((Calendar) gregorianCalendar0);
      assertNotNull(yearMonthDay0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=941,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(941L, mutableDateTime0.getMillis());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=941,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(941L, mutableDateTime0.getMillis());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(4, localTime0.size());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      
      Period period1 = new Period((ReadableInstant) dateMidnight0, (ReadableDuration) duration0);
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, localTime0.size());
      assertEquals(8, period0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=941,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(941L, mutableDateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }
}
