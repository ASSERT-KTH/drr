/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:30:15 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;




import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;


public class BasePeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      long long0 = (-50L);
      PeriodType periodType0 = PeriodType.years();
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.add((ReadablePeriod) period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-2795);
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(8, period0.size());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      ReadablePeriod readablePeriod0 = null;
      mutablePeriod0.add(readablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      Object object0 = null;
      Period period0 = new Period(object0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 2000;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) period0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-46);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = null;
      mutablePeriod0.mergePeriod((ReadablePeriod) period0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 5269L;
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.addMinutes(int0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       TimeOfDay timeOfDay0 = new TimeOfDay();
//       assertEquals(4, timeOfDay0.size());
//       assertNotNull(timeOfDay0);
//       
//       LocalTime localTime0 = timeOfDay0.toLocalTime();
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(4, localTime0.size());
//       assertNotNull(localTime0);
//       
//       int int0 = (-1115);
//       Months months0 = Months.TWO;
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       PeriodType periodType0 = months0.getPeriodType();
//       assertEquals(1, months0.size());
//       assertEquals(1, periodType0.size());
//       assertEquals("Months", periodType0.getName());
//       assertNotNull(periodType0);
//       
//       Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) timeOfDay0, periodType0);
//       assertEquals(1, months0.size());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(1, periodType0.size());
//       assertEquals("Months", periodType0.getName());
//       assertEquals(1, period0.size());
//       assertEquals(4, localTime0.size());
//       assertNotNull(period0);
//       
//       DurationFieldType durationFieldType0 = DurationFieldType.centuries();
//       assertEquals("centuries", durationFieldType0.toString());
//       assertEquals("centuries", durationFieldType0.getName());
//       assertNotNull(durationFieldType0);
//       
//       MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
//       assertEquals(1, months0.size());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(1, periodType0.size());
//       assertEquals("Months", periodType0.getName());
//       assertEquals(1, period0.size());
//       assertEquals(4, localTime0.size());
//       assertEquals(1, mutablePeriod0.size());
//       assertNotNull(mutablePeriod0);
//       
//       // Undeclared exception!
//       try {
//         mutablePeriod0.add(durationFieldType0, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Period does not support field 'centuries'
//          //
//       }
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       TimeOfDay timeOfDay0 = new TimeOfDay();
//       assertEquals(4, timeOfDay0.size());
//       assertNotNull(timeOfDay0);
//       
//       LocalTime localTime0 = timeOfDay0.toLocalTime();
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(4, localTime0.size());
//       assertNotNull(localTime0);
//       
//       int int0 = (-1115);
//       Months months0 = Months.TWO;
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       PeriodType periodType0 = months0.getPeriodType();
//       assertEquals(1, periodType0.size());
//       assertEquals("Months", periodType0.getName());
//       assertEquals(1, months0.size());
//       assertNotNull(periodType0);
//       
//       Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) timeOfDay0, periodType0);
//       assertEquals(1, periodType0.size());
//       assertEquals("Months", periodType0.getName());
//       assertEquals(1, months0.size());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(1, period0.size());
//       assertEquals(4, localTime0.size());
//       assertNotNull(period0);
//       
//       MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
//       assertEquals(1, periodType0.size());
//       assertEquals("Months", periodType0.getName());
//       assertEquals(1, months0.size());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(1, period0.size());
//       assertEquals(1, mutablePeriod0.size());
//       assertEquals(4, localTime0.size());
//       assertNotNull(mutablePeriod0);
//       
//       mutablePeriod0.addMonths(int0);
//       assertEquals(1, periodType0.size());
//       assertEquals("Months", periodType0.getName());
//       assertEquals(1, months0.size());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(1, period0.size());
//       assertEquals(1, mutablePeriod0.size());
//       assertEquals(4, localTime0.size());
//   }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = months0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals(1, months0.size());
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 5269L;
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      int int0 = 31;
      // Undeclared exception!
      try {
        mutablePeriod0.setMillis(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'millis'
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Object object0 = null;
      Period period0 = new Period(object0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 2000;
      int int1 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int1);
      assertEquals(8, mutablePeriod0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(int1);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertFalse(int0 == int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 806;
      int int1 = 0;
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(int0, int1, int0, int0, int0, int0, int0, int0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) period0);
      assertEquals(8, period0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(8, period0.size());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType0 = mutablePeriod0.getPeriodType();
      assertEquals(8, period0.size());
      assertEquals(1, seconds0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(periodType0);
      
      Period period1 = null;
      try {
        period1 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) partial0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 516;
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = new LocalTime((Object) localDateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localDate0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Period period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(8, period0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(period0);
  }

  @Test
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period(readablePartial0, readablePartial0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Instant instant0 = new Instant((Object) readableInstant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableInstant) instant0, periodType0);
      assertEquals(4, mutablePeriod0.size());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 0L;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test18()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationFrom(readableInstant0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(duration0);
  }

  @Test
  public void test19()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Duration duration0 = weeks0.toStandardDuration();
      assertEquals(1298798109705600000L, duration0.getMillis());
      assertEquals(1, weeks0.size());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) instant0, (ReadableDuration) duration0, periodType0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1298798109705600000L, duration0.getMillis());
      assertEquals(1, weeks0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationTo(readableInstant0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-21);
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period((long) int0, (long) int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      MutableInterval mutableInterval0 = new MutableInterval();
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertNotNull(mutableInterval0);
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period((Object) duration0, periodType0, (Chronology) iSOChronology0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, period0.size());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertNotNull(period0);
  }

  @Test
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) mutableDateTime0, periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, period0.size());
      assertNotNull(period0);
  }
}
