/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:00:45 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;


public class MutablePeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = (-954);
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertNotNull(duration0);
      assertEquals((-954000L), duration0.getMillis());
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals((-954000L), duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(6, mutablePeriod0.size());
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      Duration duration0 = null;
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(6, mutablePeriod0.size());
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 308L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      
      Interval interval0 = new Interval((ReadableInstant) dateTime0, (ReadablePeriod) mutablePeriod0);
      assertNotNull(interval0);
      assertEquals(3, localDate0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392336000308L, interval0.getEndMillis());
      
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(3, localDate0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392336000308L, interval0.getEndMillis());
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 308L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 365L;
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      String string0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((Object) string0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 365L;
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      
      String string0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((Object) string0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      DateMidnight dateMidnight1 = null;
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight1, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = (-1L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.setPeriod(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 365L;
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      
      byte byte0 = (byte)0;
      Duration duration0 = Duration.standardMinutes((long) byte0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(localDate0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals(3, localDate0.size());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals(3, localDate0.size());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) dateTime0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(3, localDate0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(3, localDate0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = PeriodType.WEEK_INDEX;
      assertEquals(2, int0);
      
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setPeriod((long) int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      int int0 = 932;
      mutablePeriod0.setHours(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = PeriodType.WEEK_INDEX;
      assertEquals(2, int0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, (Chronology) iSOChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      int int0 = 932;
      mutablePeriod0.addDays(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = PeriodType.MINUTE_INDEX;
      assertEquals(5, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setValue(int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-954);
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = (-1749L);
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, periodType0, chronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(8, period0.size());
      assertEquals((-1749L), duration0.getMillis());
      
      DateTime dateTime0 = new DateTime(chronology0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, period0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-1749L), duration0.getMillis());
      
      mutablePeriod0.setMinutes(int0);
      assertEquals(8, period0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-1749L), duration0.getMillis());
  }

  @Test
  public void test15()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 932;
      mutablePeriod0.setMonths(int0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      long long0 = 2780L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(2780000L, duration0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2780000L, duration0.getMillis());
      
      mutablePeriod0.clear();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2780000L, duration0.getMillis());
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 1573L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) julianChronology0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      Minutes minutes0 = Minutes.ZERO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Duration duration0 = minutes0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, minutes0.size());
      assertEquals(0L, duration0.getMillis());
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableDuration) duration0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(1, minutes0.size());
      assertEquals(3, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      
      int int0 = 390;
      // Undeclared exception!
      try {
        mutablePeriod0.addSeconds(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      long long0 = 2780L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(2780000L, duration0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2780000L, duration0.getMillis());
      
      int int0 = 1;
      mutablePeriod0.addMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2780000L, duration0.getMillis());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = PeriodType.WEEK_INDEX;
      assertEquals(2, int0);
      
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.addWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = PeriodType.MINUTE_INDEX;
      assertEquals(5, int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setPeriod((long) int0, (long) int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      int int0 = 0;
      mutablePeriod0.setWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTime dateTime0 = new DateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, mutablePeriod0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = PeriodType.WEEK_INDEX;
      assertEquals(2, int0);
      
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.addMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-954);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 77;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) iSOChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = 1573L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) julianChronology0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      Minutes minutes0 = Minutes.ZERO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Duration duration0 = minutes0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, minutes0.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableDuration) duration0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(3, mutablePeriod0.size());
      
      mutablePeriod0.add(long0, (Chronology) julianChronology0);
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(3, mutablePeriod0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      int int0 = (-954);
      mutablePeriod0.set(durationFieldType0, int0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(6, mutablePeriod0.size());
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      int int0 = 512;
      mutablePeriod0.addMillis(int0);
      assertEquals(6, mutablePeriod0.size());
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
  }

  @Test
  public void test30()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      int int0 = 932;
      mutablePeriod0.add((long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-954);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.mergePeriod((ReadablePeriod) mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      int int0 = 932;
      mutablePeriod0.addYears(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test34()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      byte byte0 = (byte)0;
      String string0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((Object) string0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Duration duration0 = Duration.standardMinutes((long) byte0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 883;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateTimeZone dateTimeZone0 = null;
      DateTime dateTime0 = yearMonthDay0.toDateTimeAtMidnight(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
  }

  @Test
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotNull(mutablePeriod1);
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 883;
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setDays(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      int int0 = (-954);
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 512;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test40()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      int int0 = PeriodType.MILLI_INDEX;
      assertEquals(7, int0);
      
      mutablePeriod0.addHours(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test41()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(6, mutablePeriod0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      
      int int0 = 512;
      mutablePeriod0.setYears(int0);
      assertEquals(6, mutablePeriod0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
  }

  @Test
  public void test42()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      String string0 = periodFormatter0.print((ReadablePeriod) mutablePeriod0);
      assertEquals("PT0S", string0);
      assertNotNull(string0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      MutablePeriod mutablePeriod1 = MutablePeriod.parse(string0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotNull(mutablePeriod1);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 841;
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test44()  throws Throwable  {
      long long0 = (-1749L);
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, periodType0, chronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(8, period0.size());
      assertEquals((-1749L), duration0.getMillis());
      
      DateTime dateTime0 = new DateTime(chronology0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-1749L), duration0.getMillis());
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((Object) mutablePeriod0, periodType0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotNull(mutablePeriod1);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-1749L), duration0.getMillis());
      assertEquals(8, mutablePeriod1.size());
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test
  public void test45()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      
      int int0 = 932;
      int int1 = PeriodType.MILLI_INDEX;
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      mutablePeriod0.add(int1, int1, int0, int1, int1, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test46()  throws Throwable  {
      long long0 = 308L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Duration duration0 = Duration.standardDays(long0);
      assertNotNull(duration0);
      assertEquals(26611200000L, duration0.getMillis());
      
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(26611200000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }
}
