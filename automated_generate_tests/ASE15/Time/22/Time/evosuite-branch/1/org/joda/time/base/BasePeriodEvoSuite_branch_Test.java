/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:59:21 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;


public class BasePeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      long long0 = (-3652L);
      Duration duration0 = Duration.standardHours(long0);
      assertNotNull(duration0);
      assertEquals((-13147200000L), duration0.getMillis());
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, readableInstant0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals((-13147200000L), duration0.getMillis());
      
      Period period0 = new Period(readableInstant0, (ReadableDuration) duration0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals((-13147200000L), duration0.getMillis());
      
      // Undeclared exception!
      try {
        mutablePeriod0.add((ReadablePeriod) period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      long long0 = (-3652L);
      Chronology chronology0 = null;
      DateTime dateTime0 = new DateTime(chronology0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Period period0 = new Period(readableInstant0, (ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Duration duration0 = Duration.standardHours(long0);
      assertNotNull(duration0);
      assertEquals((-13147200000L), duration0.getMillis());
      
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, readableInstant0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals((-13147200000L), duration0.getMillis());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      
      mutablePeriod0.add((ReadablePeriod) period0);
      assertEquals((-13147200000L), duration0.getMillis());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
  }

  @Test
  public void test02()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period0 = null;
      mutablePeriod0.add((ReadablePeriod) period0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 2185;
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      mutablePeriod0.mergePeriod((ReadablePeriod) period0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period0 = null;
      mutablePeriod0.mergePeriod((ReadablePeriod) period0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 806;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, years0.size());
      
      DurationFieldType durationFieldType0 = null;
      int int1 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 1000000006L;
      PeriodType periodType0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(4, localDateTime0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, (Chronology) iSOChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(4, localDateTime0.size());
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      int int0 = 5327;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 1000000006L;
      PeriodType periodType0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(4, localDateTime0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, (Chronology) iSOChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(4, localDateTime0.size());
      
      int int0 = 0;
      mutablePeriod0.addSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 1000000006L;
      PeriodType periodType0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(4, localDateTime0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, (Chronology) iSOChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(4, localDateTime0.size());
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      
      int int0 = 0;
      mutablePeriod0.set(durationFieldType0, int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = (-26L);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(4, localTime0.size());
      
      int int0 = (-1694);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertNotNull(durationFieldType0);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weekyears'
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-663);
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, weeks0.size());
      
      Seconds seconds0 = Seconds.MAX_VALUE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Days days0 = seconds0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      
      PeriodType periodType0 = days0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, seconds0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, days0.size());
      
      Period period0 = null;
      try {
        period0 = new Period((Object) mutablePeriod0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 2060;
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.toMutablePeriod();
      assertNotNull(mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-4019L);
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, chronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      
      Hours hours0 = Hours.ONE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      PeriodType periodType0 = hours0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, hours0.size());
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localDateTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) evoSuiteFile0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)dateMidnight0.toCalendar(locale0);
      assertNotNull(gregorianCalendar0);
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields((Calendar) gregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, gregorianCalendar0.isLenient());
      assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("java.util.GregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(3, yearMonthDay0.size());
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) yearMonthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      ReadablePartial readablePartial0 = null;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) monthDay0, readablePartial0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      MonthDay monthDay0 = MonthDay.fromDateFields((Date) mockDate0);
      assertNotNull(monthDay0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      
      Period period0 = new Period((ReadablePartial) monthDay0, (ReadablePartial) monthDay0, periodType0);
      assertNotNull(period0);
      assertEquals(1, period0.size());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(2, monthDay0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-8);
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Object object0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight(object0, (Chronology) gregorianChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) dateMidnight0);
      assertNotNull(duration0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, period0.size());
      assertEquals((-480000L), duration0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 806;
      Period period0 = new Period((long) int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      DurationFieldType durationFieldType0 = null;
      Seconds seconds0 = Seconds.ZERO;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Duration duration0 = seconds0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Period period0 = null;
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) period0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
  }

  @Test
  public void test22()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      int int0 = 0;
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Duration duration0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, readableInstant0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      
      mutablePeriod0.addWeeks(int0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-663);
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      ReadableInstant readableInstant0 = null;
      Duration duration0 = mutablePeriod0.toDurationTo(readableInstant0);
      assertNotNull(duration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-23126264043663L), duration0.getMillis());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-663);
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 2060;
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) mutablePeriod0, (ReadableInstant) dateMidnight0);
      assertNotNull(mutableInterval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), mutableInterval0.getStartMillis());
      assertEquals((-3600000L), mutableInterval0.getEndMillis());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), mutableInterval0.getStartMillis());
      assertEquals((-3600000L), mutableInterval0.getEndMillis());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 4;
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertNotNull(mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      
      mutablePeriod0.setValue(int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }
}
