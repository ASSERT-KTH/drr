/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:00:20 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;


public class BasePeriodEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 21;
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Hours hours0 = Hours.EIGHT;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod1 = hours0.toMutablePeriod();
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(mutablePeriod1);
      
      // Undeclared exception!
      try {
        mutablePeriod0.add((ReadablePeriod) mutablePeriod1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadablePeriod readablePeriod0 = null;
      mutablePeriod0.add(readablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, seconds0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, seconds0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = null;
      mutablePeriod0.mergePeriod((ReadablePeriod) period0);
      assertEquals(1, seconds0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(periodType0);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(1, mutablePeriod1.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(mutablePeriod1);
      
      Hours hours0 = Hours.EIGHT;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = hours0.getFieldType(int0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
      assertNotNull(durationFieldType0);
      
      mutablePeriod1.add(durationFieldType0, int0);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(1, mutablePeriod1.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(periodType0);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod1.size());
      assertNotNull(mutablePeriod1);
      
      Hours hours0 = Hours.EIGHT;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = hours0.getFieldType(int0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertEquals(8, mutablePeriod0.size());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertNotNull(durationFieldType0);
      
      int int1 = 157;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        mutablePeriod1.add(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      Days days0 = Days.SIX;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, days0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) buddhistChronology0);
      assertEquals(1, days0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNull(durationFieldType1);
      
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 236548278;
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0);
      assertEquals(5, mutablePeriod0.size());
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      int int1 = 0;
      mutablePeriod0.setYears(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(5, mutablePeriod0.size());
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 236548278;
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setYears(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-2357);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadableInstant readableInstant0 = null;
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, seconds0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, seconds0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.mergePeriod((ReadablePeriod) period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'millis'
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = new Period((Object) mutablePeriod0);
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-22L);
      String string0 = "4381c9M31";
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      int int0 = 43;
      MonthDay monthDay0 = new MonthDay(long0, (Chronology) islamicChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      LocalDate localDate0 = monthDay0.toLocalDate(int0);
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 305;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Wed Apr 13 22:10:05 GMT 2231", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Wed Apr 13 22:10:05 GMT 2231", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localTime0.size());
      assertEquals("Wed Apr 13 22:10:05 GMT 2231", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       MutablePeriod mutablePeriod0 = new MutablePeriod();
//       assertEquals(8, mutablePeriod0.size());
//       assertNotNull(mutablePeriod0);
//       
//       int int0 = mutablePeriod0.getWeeks();
//       assertEquals(0, int0);
//       assertEquals(8, mutablePeriod0.size());
//       
//       DateTimeZone dateTimeZone0 = null;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(dateTimeZone0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       ISOChronology iSOChronology0 = (ISOChronology)yearMonthDay0.getChronology();
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(iSOChronology0);
//       
//       LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(lenientChronology0);
//       
//       LocalDate localDate0 = new LocalDate((long) int0, (Chronology) lenientChronology0);
//       assertEquals(8, mutablePeriod0.size());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate0);
//       
//       Period period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) yearMonthDay0);
//       assertEquals(8, mutablePeriod0.size());
//       assertEquals(8, period0.size());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(period0);
//   }

  @Test
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      int int1 = 7;
      assertFalse(int1 == int0);
      
      YearMonth yearMonth0 = new YearMonth(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(2, yearMonth0.size());
      assertNotNull(period0);
  }

  @Test
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) timeOfDay0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 36;
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) int0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(8, period0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(period0);
  }

  @Test
  public void test17()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Instant instant0 = dateMidnight0.toInstant();
      assertEquals(1392336000000L, instant0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(instant0);
      
      Period period0 = new Period(readableInstant0, (ReadableInstant) instant0);
      assertEquals(1392336000000L, instant0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test19()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period0 = new Period((long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test20()  throws Throwable  {
      Months months0 = Months.NINE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = 36;
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setHours(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      Object object0 = null;
      int int0 = 236548278;
      Period period0 = new Period(int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals(8, period0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, periodType0, chronology0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test22()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInstant readableInstant0 = null;
      Duration duration0 = mutablePeriod0.toDurationFrom(readableInstant0);
      assertEquals(1, months0.size());
      assertEquals(31536000000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(1, months0.size());
      assertEquals(31536000000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(mutablePeriod1);
  }

  @Test
  public void test23()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = months0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, months0.size());
      assertNotNull(period0);
  }

  @Test
  public void test24()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 17887461;
      mutablePeriod0.addSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 36;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(8, period0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationTo((ReadableInstant) dateMidnight0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Duration duration0 = weeks0.toStandardDuration();
      assertEquals(1, weeks0.size());
      assertEquals(604800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) duration0, periodType0, (Chronology) julianChronology0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals(1, weeks0.size());
      assertEquals(604800000L, duration0.getMillis());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test28()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(1209600000L, duration0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(duration0);
      
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertNotNull(mutableDateTime0);
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) mutableDateTime0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1209600000L, duration0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(0L, instant0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period0);
  }
}
