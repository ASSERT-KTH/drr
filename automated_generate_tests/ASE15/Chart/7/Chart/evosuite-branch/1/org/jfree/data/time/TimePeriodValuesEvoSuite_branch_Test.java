/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:16 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import javax.swing.Action;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimePeriodValuesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = MouseEvent.MOUSE_CLICKED;
      //  // Unstable assertion: assertEquals(500, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("(db!0*5u", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Week week0 = new Week(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals((-12219335998435L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-12219033598435L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(40, week0.getWeek());
      //  // Unstable assertion: assertEquals(1582, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-12219638398434L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(83886L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("(db!0*5u", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      timePeriodValues0.add((TimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertEquals((-12219335998435L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-12219033598435L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(40, week0.getWeek());
      //  // Unstable assertion: assertEquals(1582, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-12219638398434L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(83886L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("(db!0*5u", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
  }

  @Test
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      String string0 = null;
      timePeriodValues0.setRangeDescription(string0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      int int0 = timePeriodValues0.hashCode();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1643569788, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.hashCode();
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(106986337, int0);
  }

  @Test
  public void test03()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      String string0 = null;
      timePeriodValues0.setDomainDescription(string0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      
      int int0 = timePeriodValues0.hashCode();
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-963003820), int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-30);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNotNull(timePeriodValues0);
      
      String string0 = "";
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotNull(timePeriodValues1);
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertNotNull(jScrollPane0);
      
      String string0 = jScrollPane0.getUIClassID();
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertNotNull(string0);
      assertEquals("ScrollPaneUI", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertNotNull(timePeriodValues0);
      
      boolean boolean0 = timePeriodValues0.equals((Object) string0);
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(true, jScrollPane0.isFontSet());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNotNull(timePeriodValues0);
      
      int int0 = (-1103);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) int0);
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotNull(timePeriodValues1);
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = Action.MNEMONIC_KEY;
      assertNotNull(string0);
      assertEquals("MnemonicKey", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("MnemonicKey", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("MnemonicKey", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNotNull(timePeriodValues0);
      
      int int0 = 17;
      // Undeclared exception!
      try {
        timePeriodValues0.delete(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 0
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = MouseEvent.MOUSE_CLICKED;
      //  // Unstable assertion: assertEquals(500, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("(db!0*5u", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Week week0 = new Week(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals((-12219335998435L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-12219033598435L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-12219638398434L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(83886L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1582, week0.getYearValue());
      //  // Unstable assertion: assertEquals(40, week0.getWeek());
      //  // Unstable assertion: assertEquals("(db!0*5u", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      timePeriodValues0.add((TimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertEquals((-12219335998435L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-12219033598435L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-12219638398434L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(83886L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1582, week0.getYearValue());
      //  // Unstable assertion: assertEquals(40, week0.getWeek());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("(db!0*5u", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=500,MONTH=500,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=500,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      int int1 = timePeriodValues0.getMaxStartIndex();
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(0, int1);
      
      timePeriodValues0.delete(int0, int1);
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test09()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(week0);
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMaxEndIndex();
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals((-1), int0);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNotNull(timePeriodValue0);
      
      timePeriodValues0.add(timePeriodValue0);
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      
      timePeriodValues0.add((TimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test
  public void test10()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)simpleDateFormat0.getCalendar();
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106295110142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=48,SECOND=9,MILLISECOND=858,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      
      long long0 = year0.getLastMillisecond((Calendar) gregorianCalendar0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1420070399999,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals(1420070399999L, long0);
      
      timePeriodValues0.add((TimePeriod) week0, (Number) long0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1420070399999,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      timePeriodValues0.add((TimePeriod) year0, (double) long0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1420070399999,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-30);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValue timePeriodValue0 = null;
      // Undeclared exception!
      try {
        timePeriodValues0.add(timePeriodValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = MonthConstants.JULY;
      assertEquals(7, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNotNull(timePeriodValues0);
      
      // Undeclared exception!
      try {
        TimePeriod timePeriod0 = timePeriodValues0.getTimePeriod(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = MouseEvent.MOUSE_CLICKED;
      assertEquals(500, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMinMiddleIndex();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test14()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMinStartIndex();
      //  // Unstable assertion: assertEquals(1392292801565L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391990401566L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392595201565L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertNotNull(jScrollPane0);
      
      String string0 = jScrollPane0.getUIClassID();
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertNotNull(string0);
      assertEquals("ScrollPaneUI", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertNotNull(timePeriodValues0);
      
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, jScrollPane0.isFontSet());
      assertEquals(true, jScrollPane0.isVisible());
      assertEquals(true, jScrollPane0.isEnabled());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollPane0.isCursorSet());
      assertEquals(false, jScrollPane0.isPreferredSizeSet());
      assertEquals(false, jScrollPane0.isValid());
      assertEquals(true, jScrollPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jScrollPane0.getIgnoreRepaint());
      assertEquals(3, jScrollPane0.countComponents());
      assertEquals(3, jScrollPane0.getComponentCount());
      assertEquals(false, jScrollPane0.isMinimumSizeSet());
      assertEquals(true, jScrollPane0.isForegroundSet());
      assertEquals(false, jScrollPane0.isLightweight());
      assertEquals(false, jScrollPane0.isShowing());
      assertEquals(false, jScrollPane0.isDisplayable());
      assertEquals(true, jScrollPane0.isBackgroundSet());
      assertEquals(false, jScrollPane0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollPane0.isFocusCycleRoot());
      assertEquals(false, jScrollPane0.isMaximumSizeSet());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        Number number0 = timePeriodValues0.getValue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = MouseEvent.MOUSE_CLICKED;
      assertEquals(500, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotNull(timePeriodValues1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = DateFormat.DAY_OF_WEEK_FIELD;
      assertEquals(9, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      // Undeclared exception!
      try {
        timePeriodValues0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-30);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotNull(timePeriodValues1);
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = DateFormat.DAY_OF_WEEK_FIELD;
      assertEquals(9, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNotNull(timePeriodValues0);
      
      int int1 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }
}
