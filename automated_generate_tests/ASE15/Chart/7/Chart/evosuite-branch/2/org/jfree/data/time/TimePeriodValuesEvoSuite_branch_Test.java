/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:57 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.ImageConsumer;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimePeriodValuesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      int int0 = timePeriodValues0.hashCode();
      assertEquals(106986337, int0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      
      int int1 = timePeriodValues0.hashCode();
      assertEquals(573579631, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 161;
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNotNull(timePeriodValue0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      timePeriodValues1.add(timePeriodValue0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      timePeriodValues0.add(timePeriodValue0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 123;
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNotNull(timePeriodValue0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      timePeriodValues0.add(timePeriodValue0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      String string0 = "/#40pP)6MiEoAg('Q";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotNull(timePeriodValues1);
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertFalse(boolean0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = ImageConsumer.COMPLETESCANLINES;
      assertEquals(4, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      
      String string0 = null;
      boolean boolean0 = timePeriodValues0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      
      Year year0 = month0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      String string0 = "kt[d!b=Fo)d/?tg";
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) year0, string0, string0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("kt[d!b=Fo)d/?tg", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("kt[d!b=Fo)d/?tg", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("kt[d!b=Fo)d/?tg", timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("kt[d!b=Fo)d/?tg", timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test
  public void test07()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      double double0 = 549.5338486417215;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, double0);
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      int int0 = timePeriodValues0.getMaxStartIndex();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392409799970L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999971L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799970L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999971L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      timePeriodValues0.add((TimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999971L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799970L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999971L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      timePeriodValues0.delete(int0, int0);
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
  }

  @Test
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      
      double double0 = 549.5338486417215;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, double0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      int int0 = timePeriodValues0.getMaxStartIndex();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      System.setCurrentTimeMillis((long) int0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-29L), hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(3599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1799970L, hour0.getMiddleMillisecond());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(86399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(43199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-29L), day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-29L), hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(3599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1799970L, hour0.getMiddleMillisecond());
      
      timePeriodValues0.add((TimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertEquals(86399970L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, day0.getYear());
      //  // Unstable assertion: assertEquals(1, day0.getMonth());
      //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(25569L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(43199970L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-29L), day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-29L), hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(3599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1799970L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = ImageConsumer.COMPLETESCANLINES;
      //  // Unstable assertion: assertEquals(4, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((long) int0, (long) int0);
      //  // Unstable assertion: assertNotNull(simpleTimePeriod0);
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      
      MockDate mockDate0 = (MockDate)simpleTimePeriod0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      
      Hour hour0 = new Hour((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(3599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-29L), hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1799970L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      
      timePeriodValues0.add((TimePeriod) hour0, (double) int0);
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals(3599970L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-29L), hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1799970L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, hour0.getHour());
      //  // Unstable assertion: assertEquals(1970, hour0.getYear());
      //  // Unstable assertion: assertEquals(1, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(613656L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("org.jfree.chart.util.TableOrder", zoneInfo0.getID());
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals((-29L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7775999970L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3887999970L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7881L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1970, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals("org.jfree.chart.util.TableOrder", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(15767999999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1970", year0.toString());
      //  // Unstable assertion: assertEquals(31535999999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, year0.getYear());
      //  // Unstable assertion: assertEquals((-29L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7775999970L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3887999970L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7881L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1970, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals("org.jfree.chart.util.TableOrder", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertNotNull(timePeriodValue0);
      //  // Unstable assertion: assertEquals(15767999999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1970", year0.toString());
      //  // Unstable assertion: assertEquals(31535999999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, year0.getYear());
      //  // Unstable assertion: assertEquals((-29L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7775999970L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3887999970L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7881L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1970, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals("org.jfree.chart.util.TableOrder", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      
      timePeriodValues0.add(timePeriodValue0);
      //  // Unstable assertion: assertEquals(15767999999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1970", year0.toString());
      //  // Unstable assertion: assertEquals(31535999999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(0L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1970, year0.getYear());
      //  // Unstable assertion: assertEquals((-29L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7775999970L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3887999970L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7881L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1970, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      //  // Unstable assertion: assertEquals("org.jfree.chart.util.TableOrder", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getEndMillis());
      //  // Unstable assertion: assertEquals(4L, simpleTimePeriod0.getStartMillis());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test
  public void test10()  throws Throwable  {
      TimePeriodValue timePeriodValue0 = null;
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570881349L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(349L, millisecond0.getMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570881349L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(349L, millisecond0.getMillisecond());
      
      // Undeclared exception!
      try {
        timePeriodValues0.add(timePeriodValue0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      String string0 = "/#40pP)6MiEoAg('Q";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      // Undeclared exception!
      try {
        timePeriodValues0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      
      // Undeclared exception!
      try {
        TimePeriod timePeriod0 = timePeriodValues0.getTimePeriod(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      
      Year year0 = month0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      int int0 = timePeriodValues0.getMaxEndIndex();
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertNotNull(timePeriodValues0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), int0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = ImageConsumer.COMPLETESCANLINES;
      assertEquals(4, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      int int1 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = ImageConsumer.COMPLETESCANLINES;
      assertEquals(4, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      
      // Undeclared exception!
      try {
        Number number0 = timePeriodValues0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      String string0 = null;
      timePeriodValues0.setDomainDescription(string0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      String string0 = "/#40pP)6MiEoAg('Q";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotNull(timePeriodValues1);
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues1.getRangeDescription());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("/#40pP)6MiEoAg('Q", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertNotNull(timePeriodValues0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), int0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
  }

  @Test
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertNotNull(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      double double0 = 549.5338486417215;
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, double0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, int0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotNull(timePeriodValues1);
      assertEquals(false, timePeriodValues1.isEmpty());
      assertEquals(1, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(0, timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValues0.getItemCount());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(false, timePeriodValues0.isEmpty());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
  }

  @Test
  public void test22()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      
      Year year0 = month0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      
      String string0 = "kt[d!b=Fo)d/?tg";
      timePeriodValues0.setRangeDescription(string0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391212799971L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999970L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399970L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("Time", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals("kt[d!b=Fo)d/?tg", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      assertNotNull(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), int0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
  }
}
