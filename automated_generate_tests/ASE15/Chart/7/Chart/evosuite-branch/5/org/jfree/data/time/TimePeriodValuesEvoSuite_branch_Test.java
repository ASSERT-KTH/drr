/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:31:11 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.Event;
import java.awt.Font;
import java.awt.image.ImageObserver;
import java.util.Date;
import javax.accessibility.AccessibleContext;
import javax.swing.JComponent;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;
import javax.swing.text.View;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.junit.runner.RunWith;


public class TimePeriodValuesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = Event.KEY_RELEASE;
      assertEquals(402, int0);
      
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      
      int int1 = timePeriodValues0.hashCode();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(573579631, int1);
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = Event.KEY_RELEASE;
      //  // Unstable assertion: assertEquals(402, int0);
      
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883327L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(327L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) int0);
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883327L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(327L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int1, int1);
      //  // Unstable assertion: assertNotNull(timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertNull(timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      //  // Unstable assertion: assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(timePeriodValues1, timePeriodValues0);
      //  // Unstable assertion: assertNotSame(timePeriodValues0, timePeriodValues1);
      //  // Unstable assertion: assertNull(timePeriodValues1.getDescription());
      //  // Unstable assertion: assertEquals(false, timePeriodValues1.isEmpty());
      //  // Unstable assertion: assertNull(timePeriodValues1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinStartIndex());
      //  // Unstable assertion: assertNull(timePeriodValues1.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues1.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues1.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = TitledBorder.BELOW_BOTTOM;
      assertEquals(6, int0);
      
      String string0 = "orf.jfree.data.time.TimePeriodValues";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertNotNull(timePeriodValues1);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      timePeriodValues0.setRangeDescription(string0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("orf.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(boolean0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("orf.jfree.data.time.TimePeriodValues", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableColumnDescriptionChanged", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertNotNull(timePeriodValues1);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals("accessibleTableColumnDescriptionChanged", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("accessibleTableColumnDescriptionChanged", timePeriodValues1.getRangeDescription());
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(boolean0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals("accessibleTableColumnDescriptionChanged", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("accessibleTableColumnDescriptionChanged", timePeriodValues1.getRangeDescription());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertNotNull(string0);
      assertEquals("ToolTipText", string0);
      
      String string1 = "#`f'XQ1&_Q:Y0Uc'o=";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string1, string1);
      assertNotNull(timePeriodValues0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues0.getDomainDescription());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) string1, string1, string1);
      assertNotNull(timePeriodValues1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(string1, string0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      
      boolean boolean0 = timePeriodValues0.equals((Object) timePeriodValues1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues1.getDomainDescription());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues0.getDomainDescription());
      assertEquals("#`f'XQ1&_Q:Y0Uc'o=", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableColumnDescriptionChanged", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      boolean boolean0 = timePeriodValues0.equals((Object) int0);
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = ScrollPaneConstants.ROW_HEADER;
      assertNotNull(string0);
      assertEquals("ROW_HEADER", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ROW_HEADER", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("ROW_HEADER", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      int int0 = 0;
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(int0, int0);
      assertNotNull(timePeriodValues1);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals("ROW_HEADER", timePeriodValues1.getDomainDescription());
      assertEquals("ROW_HEADER", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ROW_HEADER", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("ROW_HEADER", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      int int1 = timePeriodValues1.getMaxMiddleIndex();
      assertFalse(int0 == int1);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(int1 == int0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertEquals((-1), int1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals("ROW_HEADER", timePeriodValues1.getDomainDescription());
      assertEquals("ROW_HEADER", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ROW_HEADER", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("ROW_HEADER", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int1);
      assertNotNull(fixedMillisecond0);
      assertFalse(int0 == int1);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(int1 == int0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals("ROW_HEADER", timePeriodValues1.getDomainDescription());
      assertEquals("ROW_HEADER", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues1.getItemCount());
      assertEquals(true, timePeriodValues1.isEmpty());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ROW_HEADER", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("ROW_HEADER", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      timePeriodValues1.add((TimePeriod) fixedMillisecond0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(int1 == int0);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(false, timePeriodValues1.isEmpty());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("ROW_HEADER", timePeriodValues1.getDomainDescription());
      assertEquals(0, timePeriodValues1.getMaxEndIndex());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertEquals("ROW_HEADER", timePeriodValues1.getRangeDescription());
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertEquals(1, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ROW_HEADER", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("ROW_HEADER", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      boolean boolean0 = timePeriodValues1.equals((Object) timePeriodValues0);
      assertFalse(int0 == int1);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(boolean0);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(false, timePeriodValues1.isEmpty());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues1.getNotify());
      assertEquals("ROW_HEADER", timePeriodValues1.getDomainDescription());
      assertEquals(0, timePeriodValues1.getMaxEndIndex());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertEquals("ROW_HEADER", timePeriodValues1.getRangeDescription());
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertEquals(1, timePeriodValues1.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ROW_HEADER", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals("ROW_HEADER", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = TitledBorder.BELOW_BOTTOM;
      assertEquals(6, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      
      // Undeclared exception!
      try {
        timePeriodValues0.delete(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("ToolTipText", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      int int0 = View.GoodBreakWeight;
      //  // Unstable assertion: assertEquals(1000, int0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      
      int int1 = timePeriodValues0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1414763590, int1);
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      
      timePeriodValues0.delete(int1, int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = Event.KEY_RELEASE;
      //  // Unstable assertion: assertEquals(402, int0);
      
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883327L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(327L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883327L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(327L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883327L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(327L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Minute minute0 = new Minute((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409287992L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409257993L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409317992L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883327L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(327L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409287992L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409257993L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409317992L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertNull(timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883327L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(327L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = Font.DIALOG;
      assertNotNull(string0);
      assertEquals("Dialog", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      TimePeriodValue timePeriodValue0 = null;
      // Undeclared exception!
      try {
        timePeriodValues0.add(timePeriodValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = ImageObserver.ERROR;
      assertEquals(64, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      
      // Undeclared exception!
      try {
        timePeriodValues0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      
      // Undeclared exception!
      try {
        TimePeriod timePeriod0 = timePeriodValues0.getTimePeriod(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = Event.KEY_RELEASE;
      assertEquals(402, int0);
      
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      
      int int1 = timePeriodValues0.getMaxEndIndex();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(true, timePeriodValues0.getNotify());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableColumnDescriptionChanged", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
      
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), int0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = Event.KEY_RELEASE;
      assertEquals(402, int0);
      
      String string0 = null;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertNull(timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      
      // Undeclared exception!
      try {
        Number number0 = timePeriodValues0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 402, Size: 0
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableColumnDescriptionChanged", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      timePeriodValues0.setDomainDescription(string0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals("accessibleTableColumnDescriptionChanged", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertNotNull(string0);
      assertEquals("ToolTipText", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
      
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(true, timePeriodValues0.isEmpty());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("ToolTipText", string0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertNotNull(timePeriodValues0);
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      
      int int0 = View.GoodBreakWeight;
      //  // Unstable assertion: assertEquals(1000, int0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      timePeriodValues0.add((TimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409281492L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281992L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280993L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMinStartIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      //  // Unstable assertion: assertEquals(0, timePeriodValues0.getMaxEndIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinEndIndex());
      //  // Unstable assertion: assertEquals(true, timePeriodValues0.getNotify());
      //  // Unstable assertion: assertNull(timePeriodValues0.getDescription());
      //  // Unstable assertion: assertEquals(2, timePeriodValues0.getItemCount());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      //  // Unstable assertion: assertEquals(1, timePeriodValues0.getMaxStartIndex());
      //  // Unstable assertion: assertEquals(false, timePeriodValues0.isEmpty());
      //  // Unstable assertion: assertEquals("ToolTipText", timePeriodValues0.getRangeDescription());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = TitledBorder.BELOW_BOTTOM;
      assertEquals(6, int0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) int0);
      assertNotNull(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      
      int int1 = timePeriodValues0.getMaxStartIndex();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(true, timePeriodValues0.getNotify());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(true, timePeriodValues0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getItemCount());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }
}
