/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:30:59 GMT 2014
 */

package org.jfree.chart.renderer;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.Color;




import org.jfree.chart.renderer.GrayPaintScale;
import org.junit.runner.RunWith;


public class GrayPaintScaleEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      GrayPaintScale grayPaintScale1 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale1.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01D);
      assertNotSame(grayPaintScale1, grayPaintScale0);
      assertTrue(grayPaintScale1.equals((Object)grayPaintScale0));
      assertNotNull(grayPaintScale1);
      
      boolean boolean0 = grayPaintScale1.equals((Object) grayPaintScale0);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale1.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01D);
      assertNotSame(grayPaintScale0, grayPaintScale1);
      assertNotSame(grayPaintScale1, grayPaintScale0);
      assertTrue(boolean0);
      assertTrue(grayPaintScale0.equals((Object)grayPaintScale1));
      assertTrue(grayPaintScale1.equals((Object)grayPaintScale0));
  }

  @Test
  public void test1()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      double double0 = 0.0;
      double double1 = (-4720.602143047806);
      GrayPaintScale grayPaintScale1 = new GrayPaintScale(double1, double0);
      assertEquals(0.0, grayPaintScale1.getUpperBound(), 0.01D);
      assertEquals((-4720.602143047806), grayPaintScale1.getLowerBound(), 0.01D);
      assertNotSame(grayPaintScale1, grayPaintScale0);
      assertFalse(grayPaintScale1.equals((Object)grayPaintScale0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(grayPaintScale1);
      
      boolean boolean0 = grayPaintScale0.equals((Object) grayPaintScale1);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(0.0, grayPaintScale1.getUpperBound(), 0.01D);
      assertEquals((-4720.602143047806), grayPaintScale1.getLowerBound(), 0.01D);
      assertNotSame(grayPaintScale0, grayPaintScale1);
      assertNotSame(grayPaintScale1, grayPaintScale0);
      assertFalse(boolean0);
      assertFalse(grayPaintScale0.equals((Object)grayPaintScale1));
      assertFalse(grayPaintScale1.equals((Object)grayPaintScale0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test2()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      double double0 = 0.0;
      boolean boolean0 = grayPaintScale0.equals((Object) double0);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      double double0 = grayPaintScale0.getLowerBound();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = 35.4538978952;
      assertFalse(double1 == double0);
      
      GrayPaintScale grayPaintScale1 = new GrayPaintScale(double0, double1);
      assertEquals(35.4538978952, grayPaintScale1.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotSame(grayPaintScale1, grayPaintScale0);
      assertNotSame(grayPaintScale0, grayPaintScale1);
      assertFalse(double1 == double0);
      assertFalse(grayPaintScale1.equals((Object)grayPaintScale0));
      assertFalse(grayPaintScale0.equals((Object)grayPaintScale1));
      assertFalse(double0 == double1);
      assertNotNull(grayPaintScale1);
      
      boolean boolean0 = grayPaintScale0.equals((Object) grayPaintScale1);
      assertEquals(35.4538978952, grayPaintScale1.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotSame(grayPaintScale1, grayPaintScale0);
      assertNotSame(grayPaintScale0, grayPaintScale1);
      assertFalse(boolean0);
      assertFalse(double1 == double0);
      assertFalse(grayPaintScale1.equals((Object)grayPaintScale0));
      assertFalse(grayPaintScale0.equals((Object)grayPaintScale1));
      assertFalse(double0 == double1);
  }

  @Test
  public void test4()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      double double0 = grayPaintScale0.getLowerBound();
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      GrayPaintScale grayPaintScale1 = null;
      try {
        grayPaintScale1 = new GrayPaintScale(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      GrayPaintScale grayPaintScale1 = (GrayPaintScale)grayPaintScale0.clone();
      assertEquals(1.0, grayPaintScale1.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01D);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotSame(grayPaintScale1, grayPaintScale0);
      assertNotSame(grayPaintScale0, grayPaintScale1);
      assertTrue(grayPaintScale1.equals((Object)grayPaintScale0));
      assertTrue(grayPaintScale0.equals((Object)grayPaintScale1));
      assertNotNull(grayPaintScale1);
  }

  @Test
  public void test6()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      double double0 = 0.0;
      Color color0 = (Color)grayPaintScale0.getPaint(double0);
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertNotNull(color0);
  }

  @Test
  public void test7()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertNotNull(grayPaintScale0);
      
      double double0 = grayPaintScale0.getUpperBound();
      assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01D);
      assertEquals(0.0, grayPaintScale0.getLowerBound(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
  }
}
