/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:12:49 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;



import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.junit.runner.RunWith;


public class ValueMarkerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 2555.92;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(2555.92, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      double double1 = 1129.0;
      ValueMarker valueMarker1 = new ValueMarker(double1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(double1 == double0);
      assertNotNull(valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertNull(valueMarker1.getLabel());
      assertEquals(1129.0, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      
      boolean boolean0 = valueMarker1.equals((Object) valueMarker0);
      assertFalse(double0 == double1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertFalse(double1 == double0);
      assertFalse(boolean0);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotSame(valueMarker0, valueMarker1);
      assertNull(valueMarker1.getLabel());
      assertEquals(1129.0, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(2555.92, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 154.5;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(154.5, valueMarker0.getValue(), 0.01D);
      
      ValueMarker valueMarker1 = new ValueMarker(double0);
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertNotNull(valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(154.5, valueMarker1.getValue(), 0.01D);
      assertNull(valueMarker1.getLabel());
      
      boolean boolean0 = valueMarker1.equals((Object) valueMarker0);
      assertTrue(valueMarker0.equals((Object)valueMarker1));
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertTrue(boolean0);
      assertNotSame(valueMarker0, valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(154.5, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(154.5, valueMarker1.getValue(), 0.01D);
      assertNull(valueMarker1.getLabel());
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 2555.92;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(2555.92, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      LengthAdjustmentType lengthAdjustmentType0 = valueMarker0.getLabelOffsetType();
      assertNotNull(lengthAdjustmentType0);
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertEquals(2555.92, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      boolean boolean0 = valueMarker0.equals((Object) lengthAdjustmentType0);
      assertFalse(boolean0);
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertEquals(2555.92, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 2555.92;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(2555.92, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      double double1 = valueMarker0.getValue();
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(2555.92, double1, 0.01D);
      assertEquals(2555.92, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      int int0 = (-5);
      Color color0 = (Color)defaultPolarItemRenderer0.lookupSeriesPaint(int0);
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.1, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.05, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.1, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.05, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNull(valueMarker0.getLabel());
      assertEquals((-5.0), valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.1, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.05, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      valueMarker0.setValue((double) int0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNull(valueMarker0.getLabel());
      assertEquals((-5.0), valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.1, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.05, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
  }
}
