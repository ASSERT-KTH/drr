/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:06 GMT 2014
 */

package org.jfree.data.general;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.color.ICC_Profile;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.image.DataBuffer;
import java.awt.image.ImageObserver;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.print.attribute.standard.PrinterState;
import javax.swing.Action;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.TransferHandler;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class DatasetUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "m'aC!J|g{3T&MMl1-7";
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, defaultCategoryDataset0.getColumnCount());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(4, defaultCategoryDataset0.getColumnCount());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal((TableXYDataset) timeTableXYDataset0, int0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test
  public void test03()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(tableXYDataset0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      Number[] numberArray1 = new Number[1];
      int int0 = KeyEvent.KEY_LOCATION_NUMPAD;
      assertEquals(4, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(4, numberArray1[0].intValue());
      assertEquals(4, numberArray1[0].byteValue());
      assertEquals(4.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(4L, numberArray1[0].longValue());
      assertEquals(4.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(4, numberArray1[0].shortValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4.0, (double)double0, 0.01D);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
  }

  @Test
  public void test05()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
  }

  @Test
  public void test06()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "Null item not allowed.";
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[9];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = double0;
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "Null item not allowed.";
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01D);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test09()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[5];
      int int0 = ImageObserver.HEIGHT;
      assertEquals(2, int0);
      
      numberArray1[1] = (Number) int0;
      assertNotNull(numberArray1[1]);
      assertEquals(2, numberArray1[1].byteValue());
      assertEquals(2L, numberArray1[1].longValue());
      assertEquals(2.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[1].intValue());
      assertEquals(2, numberArray1[1].shortValue());
      assertEquals(2.0F, numberArray1[1].floatValue(), 0.01F);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(2.0, range0.getLength(), 0.01D);
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test
  public void test10()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[5];
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals((-1.0F), numberArray1[0].floatValue(), 0.01F);
      assertEquals((-1L), numberArray1[0].longValue());
      assertEquals((-1.0), numberArray1[0].doubleValue(), 0.01D);
      assertEquals(-1, numberArray1[0].byteValue());
      assertEquals(-1, numberArray1[0].intValue());
      assertEquals(-1, numberArray1[0].shortValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals((-1.0), range0.getLowerBound(), 0.01D);
      assertEquals((-0.5), range0.getCentralValue(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      String string0 = "m'aC!J|g{3T&MMl1-7";
      int int1 = 181;
      assertFalse(int1 == int0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries(string0, int1, int0);
      assertNotNull(matrixSeries0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(true, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      
      Comparable comparable0 = matrixSeries0.getKey();
      assertEquals("m'aC!J|g{3T&MMl1-7", comparable0);
      assertNotNull(comparable0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string0, comparable0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(true, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparable0);
      assertNotNull(keyToGroupMap0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(string0, comparable0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(true, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      double[][] doubleArray0 = new double[10][1];
      double[] doubleArray1 = new double[10];
      double double0 = (-1.0);
      doubleArray1[0] = double0;
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals((-0.5), range0.getCentralValue(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals((-1.0), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 11;
      String string0 = null;
      double[][] doubleArray0 = new double[10][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) int0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(5.5, range0.getCentralValue(), 0.01D);
      assertEquals(11.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(11.0, range0.getUpperBound(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "-f/Z";
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[3];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(string0);
      assertNotNull(jCheckBoxMenuItem0);
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      
      Action action0 = jCheckBoxMenuItem0.getAction();
      assertNull(action0);
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      
      JMenu jMenu0 = new JMenu(action0);
      assertNotNull(jMenu0);
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      
      Border border0 = null;
      int int0 = 0;
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jMenu0, border0, int0, int0, int0, int0);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      numberArray1[0] = (Number) rectangle0.x;
      assertNotNull(numberArray1[0]);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0L, numberArray1[0].longValue());
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0, numberArray1[0].shortValue());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01D);
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test18()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset((XYDataset) timeTableXYDataset0, (double) int0);
      assertNotNull(xYBarDataset0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertNull(number0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[5][8];
      Number[] numberArray1 = new Number[5];
      int int0 = ComponentEvent.COMPONENT_SHOWN;
      assertEquals(102, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(102.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(102L, numberArray1[0].longValue());
      assertEquals(102, numberArray1[0].intValue());
      assertEquals(102.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(102, numberArray1[0].byteValue());
      assertEquals(102, numberArray1[0].shortValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(5, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(102.0, (double)double0, 0.01D);
      assertEquals(5, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[5][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(5, defaultCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(5, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       int int0 = 304;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)week0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       
//       OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
//       OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) int0, (double) int0, (double) int0, (double) int0, (double) int0);
//       assertNotNull(oHLCDataItem0);
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       
//       oHLCDataItemArray0[0] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[0]);
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       
//       oHLCDataItemArray0[1] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[1]);
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       
//       oHLCDataItemArray0[2] = oHLCDataItemArray0[1];
//       assertNotNull(oHLCDataItemArray0[2]);
//       
//       oHLCDataItemArray0[3] = oHLCDataItemArray0[2];
//       assertNotNull(oHLCDataItemArray0[3]);
//       
//       oHLCDataItemArray0[4] = oHLCDataItemArray0[1];
//       assertNotNull(oHLCDataItemArray0[4]);
//       
//       oHLCDataItemArray0[5] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[5]);
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       
//       DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) int0, oHLCDataItemArray0);
//       assertNotNull(defaultOHLCDataset0);
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//       
//       Double double0 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) defaultOHLCDataset0);
//       assertEquals((-5.2544678400001E13), (double)double0, 0.01D);
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//   }

  @Test
  public void test25()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) timeSeriesCollection0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue((XYDataset) defaultIntervalXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0, (TimeZone) zoneInfo0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(quarter0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-2212963200001L), quarter0.getMiddleMillisecond());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals((-2216937600000L), quarter0.getFirstMillisecond());
      assertEquals((-2208988800001L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      Year year0 = quarter0.getYear();
      assertNotNull(year0);
      assertEquals(1899L, year0.getSerialIndex());
      assertEquals("1899", year0.toString());
      assertEquals((-2240524800000L), year0.getFirstMillisecond());
      assertEquals((-2208988800001L), year0.getLastMillisecond());
      assertEquals((-2224756800001L), year0.getMiddleMillisecond());
      assertEquals(1899, year0.getYear());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals((-2212963200001L), quarter0.getMiddleMillisecond());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals((-2216937600000L), quarter0.getFirstMillisecond());
      assertEquals((-2208988800001L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) year0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1899L, year0.getSerialIndex());
      assertEquals("1899", year0.toString());
      assertEquals((-2240524800000L), year0.getFirstMillisecond());
      assertEquals((-2208988800001L), year0.getLastMillisecond());
      assertEquals((-2224756800001L), year0.getMiddleMillisecond());
      assertEquals(1899, year0.getYear());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals((-2212963200001L), quarter0.getMiddleMillisecond());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals((-2216937600000L), quarter0.getFirstMillisecond());
      assertEquals((-2208988800001L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(1899L, year0.getSerialIndex());
      assertEquals("1899", year0.toString());
      assertEquals((-2240524800000L), year0.getFirstMillisecond());
      assertEquals((-2208988800001L), year0.getLastMillisecond());
      assertEquals((-2224756800001L), year0.getMiddleMillisecond());
      assertEquals(1899, year0.getYear());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals((-2212963200001L), quarter0.getMiddleMillisecond());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals((-2216937600000L), quarter0.getFirstMillisecond());
      assertEquals((-2208988800001L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
  }

  @Test
  public void test29()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[5];
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals((-1.0), numberArray1[0].doubleValue(), 0.01D);
      assertEquals(-1, numberArray1[0].intValue());
      assertEquals((-1L), numberArray1[0].longValue());
      assertEquals(-1, numberArray1[0].byteValue());
      assertEquals((-1.0F), numberArray1[0].floatValue(), 0.01F);
      assertEquals(-1, numberArray1[0].shortValue());
      
      int int1 = TransferHandler.NONE;
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals((-1.0), range0.getLowerBound(), 0.01D);
      assertEquals((-1.0), range0.getCentralValue(), 0.01D);
      assertEquals((-1.0), range0.getUpperBound(), 0.01D);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = false;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int1, int1);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(int1 == int0);
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultIntervalCategoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertFalse(int0 == int1);
      assertEquals(-1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertFalse(int0 == int1);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(-1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, boolean0);
      assertNull(range1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(-1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals((-1.0), range0.getLowerBound(), 0.01D);
      assertEquals((-1.0), range0.getCentralValue(), 0.01D);
      assertEquals((-1.0), range0.getUpperBound(), 0.01D);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       assertTrue(boolean0);
//       
//       int int0 = 0;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       String string0 = "U7&N+";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals("U7&N+", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U7&N+,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       
//       Locale locale0 = JComponent.getDefaultLocale();
//       assertNotNull(locale0);
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_GB", locale0.toString());
//       
//       Year year0 = new Year((Date) mockDate0, (TimeZone) simpleTimeZone0, locale0);
//       assertNotNull(year0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("U7&N+", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U7&N+,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       
//       DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0, (RegularTimePeriod) year0);
//       assertNotNull(dynamicTimeSeriesCollection0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
//       assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
//       assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
//       assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
//       assertEquals("U7&N+", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U7&N+,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       
//       DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
//       assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
//       
//       List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
//       assertNotNull(list0);
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//       
//       Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
//       assertNotNull(range0);
//       assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
//       assertEquals(Double.NaN, range0.getLength(), 0.01D);
//       assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
//       assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
//       
//       Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, boolean0);
//       assertNull(range1);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
//       assertEquals(Double.NaN, range0.getLength(), 0.01D);
//       assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
//       assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
//       assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
//       assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
//       assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
//       assertEquals("U7&N+", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=U7&N+,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//   }

  @Test
  public void test31()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[5];
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals((-1L), numberArray1[0].longValue());
      assertEquals((-1.0), numberArray1[0].doubleValue(), 0.01D);
      assertEquals(-1, numberArray1[0].shortValue());
      assertEquals(-1, numberArray1[0].intValue());
      assertEquals(-1, numberArray1[0].byteValue());
      assertEquals((-1.0F), numberArray1[0].floatValue(), 0.01F);
      
      int int1 = ImageObserver.HEIGHT;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals((-1.0), range0.getCentralValue(), 0.01D);
      assertEquals((-1.0), range0.getUpperBound(), 0.01D);
      assertEquals((-1.0), range0.getLowerBound(), 0.01D);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean0 = false;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int1, int1);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(int1 == int0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultIntervalCategoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertFalse(int0 == int1);
      assertEquals(-1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertFalse(int0 == int1);
      assertEquals(-1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       PrinterState printerState0 = PrinterState.IDLE;
//       assertNotNull(printerState0);
//       
//       String string0 = printerState0.toString();
//       assertEquals("idle", string0);
//       assertNotNull(string0);
//       
//       OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       
//       MockDate mockDate0 = (MockDate)minute0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       
//       double double0 = 6.283185307179586;
//       OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, double0, double0, double0, double0, double0);
//       assertNotNull(oHLCDataItem0);
//       assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       
//       oHLCDataItemArray0[0] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[0]);
//       assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       
//       oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
//       assertNotNull(oHLCDataItemArray0[1]);
//       
//       oHLCDataItemArray0[2] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[2]);
//       assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       
//       oHLCDataItemArray0[3] = oHLCDataItemArray0[1];
//       assertNotNull(oHLCDataItemArray0[3]);
//       
//       oHLCDataItemArray0[4] = oHLCDataItemArray0[1];
//       assertNotNull(oHLCDataItemArray0[4]);
//       
//       oHLCDataItemArray0[5] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[5]);
//       assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       
//       oHLCDataItemArray0[6] = oHLCDataItemArray0[3];
//       assertNotNull(oHLCDataItemArray0[6]);
//       
//       oHLCDataItemArray0[7] = oHLCDataItemArray0[3];
//       assertNotNull(oHLCDataItemArray0[7]);
//       
//       oHLCDataItemArray0[8] = oHLCDataItemArray0[0];
//       assertNotNull(oHLCDataItemArray0[8]);
//       
//       oHLCDataItemArray0[9] = oHLCDataItemArray0[1];
//       assertNotNull(oHLCDataItemArray0[9]);
//       
//       DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) string0, oHLCDataItemArray0);
//       assertNotNull(defaultOHLCDataset0);
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//       
//       KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) double0);
//       assertNotNull(keyToGroupMap0);
//       assertEquals(1, keyToGroupMap0.getGroupCount());
//       
//       List list0 = keyToGroupMap0.getGroups();
//       assertNotNull(list0);
//       assertEquals(1, keyToGroupMap0.getGroupCount());
//       assertEquals(false, list0.isEmpty());
//       assertEquals(1, list0.size());
//       
//       boolean boolean0 = true;
//       Range range0 = DatasetUtilities.iterateToFindDomainBounds((XYDataset) defaultOHLCDataset0, (List) list0, boolean0);
//       assertNotNull(range0);
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//       assertEquals(1, keyToGroupMap0.getGroupCount());
//       assertEquals(1.39240926E12, range0.getLowerBound(), 0.01D);
//       assertEquals(1.39240926E12, range0.getCentralValue(), 0.01D);
//       assertEquals(0.0, range0.getLength(), 0.01D);
//       assertEquals(1.39240926E12, range0.getUpperBound(), 0.01D);
//       assertEquals(false, list0.isEmpty());
//       assertEquals(1, list0.size());
//   }

  @Test
  public void test33()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 40;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(39, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      List<XYDatasetTableModel> list0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = JList.VERTICAL_WRAP;
      assertEquals(1, int0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 01 01:01:00 GMT 1901", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) int0, (double) int0, (double) int0, (double) int0, (double) int0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 01 01:01:00 GMT 1901", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      assertNotNull(oHLCDataItemArray0[0]);
      assertEquals("Fri Feb 01 01:01:00 GMT 1901", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) int0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getLowerBound(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 11;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals(11, year0.getYear());
      assertEquals((-61820236800000L), year0.getFirstMillisecond());
      assertEquals("11", year0.toString());
      assertEquals((-61788700800001L), year0.getLastMillisecond());
      assertEquals(11L, year0.getSerialIndex());
      assertEquals((-61804468800001L), year0.getMiddleMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) year0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(11, year0.getYear());
      assertEquals((-61820236800000L), year0.getFirstMillisecond());
      assertEquals("11", year0.toString());
      assertEquals((-61788700800001L), year0.getLastMillisecond());
      assertEquals(11L, year0.getSerialIndex());
      assertEquals((-61804468800001L), year0.getMiddleMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(11, year0.getYear());
      assertEquals((-61820236800000L), year0.getFirstMillisecond());
      assertEquals("11", year0.toString());
      assertEquals((-61788700800001L), year0.getLastMillisecond());
      assertEquals(11L, year0.getSerialIndex());
      assertEquals((-61804468800001L), year0.getMiddleMillisecond());
  }

  @Test
  public void test37()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, boolean0);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test38()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      Object[][] objectArray0 = new Object[10][6];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(10, list0.size());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(false, list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
  }

  @Test
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) zoneInfo0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("GMT", zoneInfo0.getID());
      
      List list0 = timeSeriesCollection0.getSeries();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("GMT", zoneInfo0.getID());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test40()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      boolean boolean0 = true;
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
  }

  @Test
  public void test41()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>((Collection<?>) list0);
      assertNotNull(linkedList0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "U7&N+";
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[10];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[1][10];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, boolean0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "0sznAJM^vR";
      double[][] doubleArray0 = new double[7][4];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(4, defaultCategoryDataset0.getColumnCount());
      
      int int0 = (-812);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultCategoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(-812, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-812, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(4, defaultCategoryDataset0.getColumnCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, boolean0);
      assertNull(range0);
      assertEquals(-812, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-812, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(4, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test45()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
  }

  @Test
  public void test46()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      int int0 = ImageObserver.HEIGHT;
      assertEquals(2, int0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = false;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultIntervalCategoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds(xYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.equals((Object) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test
  public void test49()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test
  public void test51()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ";km2x6";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = 243;
      MatrixSeries matrixSeries0 = new MatrixSeries(string0, int0, int0);
      assertNotNull(matrixSeries0);
      assertEquals(243, matrixSeries0.getRowCount());
      assertEquals(true, matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(243, matrixSeries0.getColumnsCount());
      assertEquals(59049, matrixSeries0.getItemCount());
      assertEquals(false, matrixSeries0.isEmpty());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(243, matrixSeries0.getRowCount());
      assertEquals(true, matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(243, matrixSeries0.getColumnsCount());
      assertEquals(59049, matrixSeries0.getItemCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, boolean0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(242.0, range0.getLength(), 0.01D);
      assertEquals(242.0, range0.getUpperBound(), 0.01D);
      assertEquals(121.0, range0.getCentralValue(), 0.01D);
      assertEquals(243, matrixSeries0.getRowCount());
      assertEquals(true, matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(243, matrixSeries0.getColumnsCount());
      assertEquals(59049, matrixSeries0.getItemCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test52()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findDomainBounds(xYDataset0, list0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "null3";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, boolean0);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
  }

  @Test
  public void test54()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, boolean0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test
  public void test55()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(xYDataset0);
      assertTrue(boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "X";
      double[][] doubleArray0 = new double[4][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(4, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test57()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      String string0 = "m'aC!J|g{3T&MMl1-7";
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) string0, (double) int0, int0);
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(boolean0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test59()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2.0;
      doubleArray0[0] = double0;
      doubleArray0[6] = doubleArray0[0];
      LineFunction2D lineFunction2D0 = new LineFunction2D(doubleArray0[0], doubleArray0[2]);
      assertNotNull(lineFunction2D0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01D);
      
      int int0 = 52;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) lineFunction2D0, doubleArray0[5], doubleArray0[6], int0, (Comparable) doubleArray0[6]);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01D);
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01D);
      assertEquals(2.0, xYSeries0.getMaxY(), 0.01D);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(52, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2.0, xYSeries0.getMinY(), 0.01D);
  }

  @Test
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2.0;
      doubleArray0[5] = double0;
      int int0 = 0;
      LineFunction2D lineFunction2D0 = new LineFunction2D(doubleArray0[1], doubleArray0[2]);
      assertNotNull(lineFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01D);
      
      // Undeclared exception!
      try {
        XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) lineFunction2D0, doubleArray0[4], doubleArray0[5], int0, (Comparable) doubleArray0[5]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
      }
  }

  @Test
  public void test62()  throws Throwable  {
      Comparable<TimeSeriesCollection> comparable0 = null;
      KeyedValues keyedValues0 = null;
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparable0, keyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
      }
  }

  @Test
  public void test63()  throws Throwable  {
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 2);
      double[][] doubleArray0 = new double[2][5];
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
      }
  }

  @Test
  public void test64()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<DynamicTimeSeriesCollection>) second0;
      assertNotNull(comparableArray0[0]);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      comparableArray0[1] = (Comparable<DynamicTimeSeriesCollection>) second0;
      assertNotNull(comparableArray0[1]);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      double[][] doubleArray0 = new double[2][2];
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
      }
  }

  @Test
  public void test65()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      double[][] doubleArray0 = new double[7][8];
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      int int0 = (-1389);
      String string0 = ";km2x";
      Number[][] numberArray0 = new Number[8][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals((-1389.0F), numberArray1[0].floatValue(), 0.01F);
      assertEquals((-1389L), numberArray1[0].longValue());
      assertEquals((-1389.0), numberArray1[0].doubleValue(), 0.01D);
      assertEquals(-1389, numberArray1[0].intValue());
      assertEquals(-109, numberArray1[0].byteValue());
      assertEquals(-1389, numberArray1[0].shortValue());
      
      numberArray1[1] = (Number) int0;
      assertNotNull(numberArray1[1]);
      assertEquals((-1389.0F), numberArray1[1].floatValue(), 0.01F);
      assertEquals(-1389, numberArray1[1].intValue());
      assertEquals((-1389L), numberArray1[1].longValue());
      assertEquals(-109, numberArray1[1].byteValue());
      assertEquals((-1389.0), numberArray1[1].doubleValue(), 0.01D);
      assertEquals(-1389, numberArray1[1].shortValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      int int1 = DataBuffer.TYPE_BYTE;
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertFalse(int1 == int0);
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(5, defaultPieDataset0.getItemCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int0, (double) int0);
      assertNotNull(defaultPieDataset1);
      assertFalse(int0 == int1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int1 == int0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(5, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try {
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) doubleArray1[5]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
      }
  }

  @Test
  public void test68()  throws Throwable  {
      int int0 = (-1389);
      String string0 = ";km2x";
      Number[][] numberArray0 = new Number[8][5];
      Number[] numberArray1 = new Number[5];
      int int1 = ICC_Profile.CLASS_DISPLAY;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      numberArray1[4] = (Number) int1;
      assertNotNull(numberArray1[4]);
      assertEquals(1, numberArray1[4].intValue());
      assertEquals(1.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(1, numberArray1[4].shortValue());
      assertEquals(1, numberArray1[4].byteValue());
      assertEquals(1L, numberArray1[4].longValue());
      assertEquals(1.0F, numberArray1[4].floatValue(), 0.01F);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      int int2 = DataBuffer.TYPE_BYTE;
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, int2);
      assertNotNull(defaultPieDataset0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, defaultPieDataset0.getItemCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int0, (double) int0);
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(5, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test69()  throws Throwable  {
      int int0 = (-1389);
      String string0 = ";km2x";
      Number[][] numberArray0 = new Number[8][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(-1389, numberArray1[0].intValue());
      assertEquals((-1389L), numberArray1[0].longValue());
      assertEquals(-109, numberArray1[0].byteValue());
      assertEquals((-1389.0F), numberArray1[0].floatValue(), 0.01F);
      assertEquals((-1389.0), numberArray1[0].doubleValue(), 0.01D);
      assertEquals(-1389, numberArray1[0].shortValue());
      
      int int1 = ICC_Profile.CLASS_DISPLAY;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      numberArray0[1] = numberArray0[0];
      assertNotNull(numberArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertFalse(int1 == int0);
      assertEquals(5, defaultPieDataset0.getItemCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int0, (double) int0);
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int0 == int1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(int1 == int0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(5, defaultPieDataset0.getItemCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test70()  throws Throwable  {
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try {
        double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test71()  throws Throwable  {
      long long0 = 4L;
      String string0 = "S4=0";
      double[][] doubleArray0 = new double[3][10];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try {
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test72()  throws Throwable  {
      int int0 = TransferHandler.NONE;
      assertEquals(0, int0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
  }

  @Test
  public void test73()  throws Throwable  {
      double double0 = (-1904.0991);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset((XYDataset) defaultXYDataset0, double0);
      assertNotNull(xYBarDataset0);
      assertEquals((-1904.0991), xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals((-1904.0991), xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test
  public void test74()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test
  public void test75()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test
  public void test76() {}
//   @Test
//   public void test76()  throws Throwable  {
//       int int0 = 304;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals(304, week0.getYearValue());
//       
//       MockDate mockDate0 = (MockDate)week0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals(304, week0.getYearValue());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.CHINA;
//       assertNotNull(locale0);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(quarter0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals((-52550208000000L), quarter0.getFirstMillisecond());
//       assertEquals(1220L, quarter0.getSerialIndex());
//       assertEquals(304, quarter0.getYearValue());
//       assertEquals((-52546233600001L), quarter0.getMiddleMillisecond());
//       assertEquals((-52542259200001L), quarter0.getLastMillisecond());
//       assertEquals(4, quarter0.getQuarter());
//       
//       DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
//       assertNotNull(defaultKeyedValues0);
//       assertEquals(0, defaultKeyedValues0.getItemCount());
//       
//       DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) defaultKeyedValues0);
//       assertNotNull(defaultCategoryDataset0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       assertEquals(0, defaultKeyedValues0.getItemCount());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertEquals((-52550208000000L), quarter0.getFirstMillisecond());
//       assertEquals(1220L, quarter0.getSerialIndex());
//       assertEquals(304, quarter0.getYearValue());
//       assertEquals((-52546233600001L), quarter0.getMiddleMillisecond());
//       assertEquals((-52542259200001L), quarter0.getLastMillisecond());
//       assertEquals(4, quarter0.getQuarter());
//       
//       Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
//       assertNull(range0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Sun Dec 03 23:59:59 GMT 304", mockDate0.toString());
//       assertEquals(0, defaultKeyedValues0.getItemCount());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(16160L, week0.getSerialIndex());
//       assertEquals((-52544980800001L), week0.getMiddleMillisecond());
//       assertEquals((-52545283200000L), week0.getFirstMillisecond());
//       assertEquals(48, week0.getWeek());
//       assertEquals((-52544678400001L), week0.getLastMillisecond());
//       assertEquals(304, week0.getYearValue());
//       assertEquals(0, defaultCategoryDataset0.getColumnCount());
//       assertEquals(0, defaultCategoryDataset0.getRowCount());
//       assertEquals((-52550208000000L), quarter0.getFirstMillisecond());
//       assertEquals(1220L, quarter0.getSerialIndex());
//       assertEquals(304, quarter0.getYearValue());
//       assertEquals((-52546233600001L), quarter0.getMiddleMillisecond());
//       assertEquals((-52542259200001L), quarter0.getLastMillisecond());
//       assertEquals(4, quarter0.getQuarter());
//   }

  @Test
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 187.6670565;
      int int0 = ImageObserver.HEIGHT;
      assertEquals(2, int0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) polynomialFunction2D0, double0, doubleArray0[2], int0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
      }
  }

  @Test
  public void test78()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test79()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
  }
}
