/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:06:09 GMT 2014
 */

package org.jfree.data.general;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.AWTEvent;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.Label;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ComponentEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageObserver;
import java.lang.reflect.Array;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.SwingConstants;



import org.evosuite.runtime.testdata.FileSystemHandling;;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.UnknownKeyException;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;


public class DatasetUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      int int1 = 366;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int1, int1);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(365, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(365, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(int1 == int0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, boolean0);
      assertNotNull(range1);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(365, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01D);
      assertEquals(0.0, range1.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range1.getLength(), 0.01D);
      assertFalse(int1 == int0);
      
      floatArray0[0] = (float) int1;
      dynamicTimeSeriesCollection0.addSeries(floatArray0, int0, (Comparable) int1);
      assertArrayEquals(new float[] {366.0F}, floatArray0, 0.01F);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(365, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(365, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range2.getLength(), 0.01D);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01D);
      assertEquals(0.0, range2.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01D);
      assertFalse(range2.equals((Object)range1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 3;
      String string0 = "SCALE_AREA_TO_1";
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(3, numberArray1[0].shortValue());
      assertEquals(3, numberArray1[0].byteValue());
      assertEquals(3.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(3.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(3, numberArray1[0].intValue());
      assertEquals(3L, numberArray1[0].longValue());
      
      numberArray1[1] = (Number) int0;
      assertNotNull(numberArray1[1]);
      assertEquals(3, numberArray1[1].shortValue());
      assertEquals(3L, numberArray1[1].longValue());
      assertEquals(3.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(3, numberArray1[1].byteValue());
      assertEquals(3.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(3, numberArray1[1].intValue());
      
      numberArray1[2] = (Number) int0;
      assertNotNull(numberArray1[2]);
      assertEquals(3, numberArray1[2].shortValue());
      assertEquals(3, numberArray1[2].byteValue());
      assertEquals(3L, numberArray1[2].longValue());
      assertEquals(3.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(3, numberArray1[2].intValue());
      assertEquals(3.0F, numberArray1[2].floatValue(), 0.01F);
      
      numberArray1[3] = (Number) int0;
      assertNotNull(numberArray1[3]);
      assertEquals(3L, numberArray1[3].longValue());
      assertEquals(3, numberArray1[3].shortValue());
      assertEquals(3, numberArray1[3].byteValue());
      assertEquals(3, numberArray1[3].intValue());
      assertEquals(3.0, numberArray1[3].doubleValue(), 0.01D);
      assertEquals(3.0F, numberArray1[3].floatValue(), 0.01F);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[8];
      assertNotSame(numberArray2, numberArray1);
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) int0;
      assertNotNull(numberArray2[0]);
      assertEquals(3, numberArray2[0].byteValue());
      assertEquals(3, numberArray2[0].shortValue());
      assertEquals(3.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(3.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(3L, numberArray2[0].longValue());
      assertEquals(3, numberArray2[0].intValue());
      
      numberArray2[1] = (Number) int0;
      assertNotNull(numberArray2[1]);
      assertEquals(3L, numberArray2[1].longValue());
      assertEquals(3, numberArray2[1].byteValue());
      assertEquals(3.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(3, numberArray2[1].shortValue());
      assertEquals(3.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(3, numberArray2[1].intValue());
      
      numberArray2[2] = (Number) int0;
      assertNotNull(numberArray2[2]);
      assertEquals(3, numberArray2[2].shortValue());
      assertEquals(3, numberArray2[2].byteValue());
      assertEquals(3.0F, numberArray2[2].floatValue(), 0.01F);
      assertEquals(3.0, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(3, numberArray2[2].intValue());
      assertEquals(3L, numberArray2[2].longValue());
      
      numberArray2[3] = (Number) int0;
      assertNotNull(numberArray2[3]);
      assertEquals(3, numberArray2[3].intValue());
      assertEquals(3.0, numberArray2[3].doubleValue(), 0.01D);
      assertEquals(3, numberArray2[3].shortValue());
      assertEquals(3, numberArray2[3].byteValue());
      assertEquals(3L, numberArray2[3].longValue());
      assertEquals(3.0F, numberArray2[3].floatValue(), 0.01F);
      
      numberArray2[4] = (Number) int0;
      assertNotNull(numberArray2[4]);
      assertEquals(3.0F, numberArray2[4].floatValue(), 0.01F);
      assertEquals(3L, numberArray2[4].longValue());
      assertEquals(3, numberArray2[4].byteValue());
      assertEquals(3, numberArray2[4].shortValue());
      assertEquals(3.0, numberArray2[4].doubleValue(), 0.01D);
      assertEquals(3, numberArray2[4].intValue());
      
      numberArray2[5] = (Number) int0;
      assertNotNull(numberArray2[5]);
      assertEquals(3, numberArray2[5].intValue());
      assertEquals(3.0F, numberArray2[5].floatValue(), 0.01F);
      assertEquals(3L, numberArray2[5].longValue());
      assertEquals(3, numberArray2[5].byteValue());
      assertEquals(3, numberArray2[5].shortValue());
      assertEquals(3.0, numberArray2[5].doubleValue(), 0.01D);
      
      numberArray2[6] = (Number) int0;
      assertNotNull(numberArray2[6]);
      assertEquals(3, numberArray2[6].byteValue());
      assertEquals(3.0F, numberArray2[6].floatValue(), 0.01F);
      assertEquals(3L, numberArray2[6].longValue());
      assertEquals(3, numberArray2[6].intValue());
      assertEquals(3.0, numberArray2[6].doubleValue(), 0.01D);
      assertEquals(3, numberArray2[6].shortValue());
      
      numberArray2[7] = (Number) int0;
      assertNotNull(numberArray2[7]);
      assertEquals(3, numberArray2[7].byteValue());
      assertEquals(3.0F, numberArray2[7].floatValue(), 0.01F);
      assertEquals(3, numberArray2[7].intValue());
      assertEquals(3L, numberArray2[7].longValue());
      assertEquals(3.0, numberArray2[7].doubleValue(), 0.01D);
      assertEquals(3, numberArray2[7].shortValue());
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[5];
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) int0;
      assertNotNull(numberArray3[0]);
      assertEquals(3, numberArray3[0].shortValue());
      assertEquals(3.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(3L, numberArray3[0].longValue());
      assertEquals(3, numberArray3[0].intValue());
      assertEquals(3, numberArray3[0].byteValue());
      assertEquals(3.0, numberArray3[0].doubleValue(), 0.01D);
      
      numberArray3[1] = (Number) int0;
      assertNotNull(numberArray3[1]);
      assertEquals(3L, numberArray3[1].longValue());
      assertEquals(3, numberArray3[1].shortValue());
      assertEquals(3.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(3.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(3, numberArray3[1].intValue());
      assertEquals(3, numberArray3[1].byteValue());
      
      numberArray3[2] = (Number) int0;
      assertNotNull(numberArray3[2]);
      assertEquals(3.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(3, numberArray3[2].byteValue());
      assertEquals(3.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(3L, numberArray3[2].longValue());
      assertEquals(3, numberArray3[2].shortValue());
      assertEquals(3, numberArray3[2].intValue());
      
      numberArray3[3] = (Number) int0;
      assertNotNull(numberArray3[3]);
      assertEquals(3, numberArray3[3].byteValue());
      assertEquals(3.0F, numberArray3[3].floatValue(), 0.01F);
      assertEquals(3L, numberArray3[3].longValue());
      assertEquals(3, numberArray3[3].shortValue());
      assertEquals(3.0, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(3, numberArray3[3].intValue());
      
      numberArray3[4] = (Number) int0;
      assertNotNull(numberArray3[4]);
      assertEquals(3.0, numberArray3[4].doubleValue(), 0.01D);
      assertEquals(3, numberArray3[4].intValue());
      assertEquals(3, numberArray3[4].byteValue());
      assertEquals(3L, numberArray3[4].longValue());
      assertEquals(3.0F, numberArray3[4].floatValue(), 0.01F);
      assertEquals(3, numberArray3[4].shortValue());
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(3.0, (double)double0, 0.01D);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("SCALE_AREA_TO_1", simpleTimeZone0.getID());
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=SCALE_AREA_TO_1,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      String string1 = "Duplicate items in 'columnKeys'.";
      assertNotSame(string1, string0);
      
      Label label0 = null;
      try {
        label0 = new Label(string1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = 181;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try {
        defaultStatisticalCategoryDataset0.removeColumn(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 181, Size: 0
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      XYDataset xYDataset0 = null;
      double[] doubleArray0 = new double[3];
      double double0 = (-2832.718);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      int int0 = 0;
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      assertNotNull(mockDate0);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
      assertNotNull(spreadsheetDate0);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(41640, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2014, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      
      SpreadsheetDate spreadsheetDate1 = (SpreadsheetDate)SerialDate.addMonths(int0, (SerialDate) spreadsheetDate0);
      assertNotNull(spreadsheetDate1);
      assertNotSame(spreadsheetDate1, spreadsheetDate0);
      assertNotSame(spreadsheetDate0, spreadsheetDate1);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, spreadsheetDate1.getYYYY());
      assertEquals(41640, spreadsheetDate1.toSerial());
      assertEquals(4, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1, spreadsheetDate1.getDayOfMonth());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(41640, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2014, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertTrue(spreadsheetDate1.equals((Object)spreadsheetDate0));
      assertTrue(spreadsheetDate0.equals((Object)spreadsheetDate1));
      
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) spreadsheetDate1;
      assertNotNull(comparableArray0[0]);
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, spreadsheetDate1.getYYYY());
      assertEquals(41640, spreadsheetDate1.toSerial());
      assertEquals(4, spreadsheetDate1.getDayOfWeek());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(1, spreadsheetDate1.getDayOfMonth());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(41640, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2014, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      double[] doubleArray2 = new double[10];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = double1;
      doubleArray2[2] = (double) int0;
      double double2 = 2.0;
      doubleArray2[3] = double2;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = double0;
      doubleArray2[6] = double0;
      doubleArray2[7] = (double) int0;
      doubleArray2[8] = double1;
      doubleArray2[9] = double1;
      doubleArray1[2] = doubleArray2;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      XYDataset xYDataset0 = null;
      double[] doubleArray0 = new double[3];
      double double0 = (-2832.718);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      int int0 = 0;
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      assertNotNull(mockDate0);
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
      assertNotNull(spreadsheetDate0);
      assertEquals(2014, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(41640, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      
      SpreadsheetDate spreadsheetDate1 = (SpreadsheetDate)SerialDate.addMonths(int0, (SerialDate) spreadsheetDate0);
      assertNotNull(spreadsheetDate1);
      assertNotSame(spreadsheetDate0, spreadsheetDate1);
      assertNotSame(spreadsheetDate1, spreadsheetDate0);
      assertEquals(2014, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(41640, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2014, spreadsheetDate1.getYYYY());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertEquals(1, spreadsheetDate1.getDayOfMonth());
      assertEquals(4, spreadsheetDate1.getDayOfWeek());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(41640, spreadsheetDate1.toSerial());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertTrue(spreadsheetDate0.equals((Object)spreadsheetDate1));
      assertTrue(spreadsheetDate1.equals((Object)spreadsheetDate0));
      
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) spreadsheetDate1;
      assertNotNull(comparableArray0[0]);
      assertEquals(2014, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(41640, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2014, spreadsheetDate1.getYYYY());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertEquals(1, spreadsheetDate1.getDayOfMonth());
      assertEquals(4, spreadsheetDate1.getDayOfWeek());
      assertNull(spreadsheetDate1.getDescription());
      assertEquals(41640, spreadsheetDate1.toSerial());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      double[] doubleArray2 = new double[10];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = double1;
      doubleArray2[2] = (double) int0;
      double double2 = 2.0;
      doubleArray2[3] = double2;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = double0;
      doubleArray2[6] = double0;
      doubleArray2[7] = (double) int0;
      doubleArray2[8] = double1;
      doubleArray2[9] = double1;
      doubleArray1[2] = doubleArray2;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      String string0 = "Null 'visibleSeriesKeys' argument.3";
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertNotNull(taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[9];
      long long0 = AWTEvent.INPUT_METHOD_EVENT_MASK;
      assertEquals(2048L, long0);
      
      numberArray1[0] = (Number) long0;
      assertNotNull(numberArray1[0]);
      assertEquals(2048, numberArray1[0].shortValue());
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(2048.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(2048.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(2048, numberArray1[0].intValue());
      assertEquals(2048L, numberArray1[0].longValue());
      
      float float0 = Component.TOP_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      numberArray1[1] = (Number) float0;
      assertNotNull(numberArray1[1]);
      assertEquals(0, numberArray1[1].byteValue());
      assertEquals(0, numberArray1[1].intValue());
      assertEquals(0, numberArray1[1].shortValue());
      assertEquals(0L, numberArray1[1].longValue());
      assertEquals(0.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(0.0, numberArray1[1].doubleValue(), 0.01D);
      
      int int0 = SwingConstants.NORTH_EAST;
      assertEquals(2, int0);
      
      numberArray1[2] = (Number) int0;
      assertNotNull(numberArray1[2]);
      assertEquals(2, numberArray1[2].byteValue());
      assertEquals(2.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(2, numberArray1[2].shortValue());
      assertEquals(2L, numberArray1[2].longValue());
      assertEquals(2, numberArray1[2].intValue());
      
      int int1 = SwingConstants.NEXT;
      assertEquals(12, int1);
      assertFalse(int1 == int0);
      
      numberArray1[3] = (Number) int1;
      assertNotNull(numberArray1[3]);
      assertEquals(12.0F, numberArray1[3].floatValue(), 0.01F);
      assertEquals(12L, numberArray1[3].longValue());
      assertEquals(12.0, numberArray1[3].doubleValue(), 0.01D);
      assertEquals(12, numberArray1[3].shortValue());
      assertEquals(12, numberArray1[3].byteValue());
      assertEquals(12, numberArray1[3].intValue());
      
      int int2 = ICC_Profile.icSigProfileSequenceDescTag;
      assertEquals(1886610801, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      numberArray1[4] = (Number) int2;
      assertNotNull(numberArray1[4]);
      assertEquals(25969, numberArray1[4].shortValue());
      assertEquals(1.88661082E9F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(1886610801L, numberArray1[4].longValue());
      assertEquals(113, numberArray1[4].byteValue());
      assertEquals(1.886610801E9, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(1886610801, numberArray1[4].intValue());
      
      int int3 = SwingConstants.NEXT;
      assertEquals(12, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      numberArray1[5] = (Number) int3;
      assertNotNull(numberArray1[5]);
      assertEquals(12.0F, numberArray1[5].floatValue(), 0.01F);
      assertEquals(12, numberArray1[5].shortValue());
      assertEquals(12.0, numberArray1[5].doubleValue(), 0.01D);
      assertEquals(12, numberArray1[5].byteValue());
      assertEquals(12L, numberArray1[5].longValue());
      assertEquals(12, numberArray1[5].intValue());
      
      int int4 = MonthConstants.JANUARY;
      assertEquals(1, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      numberArray1[6] = (Number) int4;
      assertNotNull(numberArray1[6]);
      assertEquals(1.0F, numberArray1[6].floatValue(), 0.01F);
      assertEquals(1, numberArray1[6].byteValue());
      assertEquals(1.0, numberArray1[6].doubleValue(), 0.01D);
      assertEquals(1, numberArray1[6].shortValue());
      assertEquals(1, numberArray1[6].intValue());
      assertEquals(1L, numberArray1[6].longValue());
      
      int int5 = Calendar.ZONE_OFFSET;
      assertEquals(15, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      
      numberArray1[7] = (Number) int5;
      assertNotNull(numberArray1[7]);
      assertEquals(15.0, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(15, numberArray1[7].intValue());
      assertEquals(15, numberArray1[7].shortValue());
      assertEquals(15.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(15, numberArray1[7].byteValue());
      assertEquals(15L, numberArray1[7].longValue());
      
      int int6 = KeyEvent.VK_META;
      assertEquals(157, int6);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      
      numberArray1[8] = (Number) int6;
      assertNotNull(numberArray1[8]);
      assertEquals(157.0F, numberArray1[8].floatValue(), 0.01F);
      assertEquals(157, numberArray1[8].intValue());
      assertEquals(157, numberArray1[8].shortValue());
      assertEquals(157L, numberArray1[8].longValue());
      assertEquals(-99, numberArray1[8].byteValue());
      assertEquals(157.0, numberArray1[8].doubleValue(), 0.01D);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[9];
      assertNotSame(numberArray2, numberArray1);
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) int5;
      assertNotNull(numberArray2[0]);
      assertEquals(15, numberArray2[0].intValue());
      assertEquals(15, numberArray2[0].shortValue());
      assertEquals(15.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(15.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(15L, numberArray2[0].longValue());
      assertEquals(15, numberArray2[0].byteValue());
      
      int int7 = InputEvent.META_DOWN_MASK;
      assertEquals(256, int7);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      
      numberArray2[1] = (Number) int7;
      assertNotNull(numberArray2[1]);
      assertEquals(256, numberArray2[1].shortValue());
      assertEquals(256L, numberArray2[1].longValue());
      assertEquals(0, numberArray2[1].byteValue());
      assertEquals(256.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(256, numberArray2[1].intValue());
      assertEquals(256.0F, numberArray2[1].floatValue(), 0.01F);
      
      numberArray2[2] = (Number) int2;
      assertNotNull(numberArray2[2]);
      assertEquals(1886610801L, numberArray2[2].longValue());
      assertEquals(1886610801, numberArray2[2].intValue());
      assertEquals(113, numberArray2[2].byteValue());
      assertEquals(25969, numberArray2[2].shortValue());
      assertEquals(1.886610801E9, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(1.88661082E9F, numberArray2[2].floatValue(), 0.01F);
      
      numberArray2[3] = (Number) int6;
      assertNotNull(numberArray2[3]);
      assertEquals(157.0F, numberArray2[3].floatValue(), 0.01F);
      assertEquals(157, numberArray2[3].shortValue());
      assertEquals(157, numberArray2[3].intValue());
      assertEquals(-99, numberArray2[3].byteValue());
      assertEquals(157L, numberArray2[3].longValue());
      assertEquals(157.0, numberArray2[3].doubleValue(), 0.01D);
      
      int int8 = ImageObserver.ABORT;
      assertEquals(128, int8);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int7);
      
      numberArray2[4] = (Number) int8;
      assertNotNull(numberArray2[4]);
      assertEquals(128, numberArray2[4].intValue());
      assertEquals(128.0F, numberArray2[4].floatValue(), 0.01F);
      assertEquals(128L, numberArray2[4].longValue());
      assertEquals(-128, numberArray2[4].byteValue());
      assertEquals(128.0, numberArray2[4].doubleValue(), 0.01D);
      assertEquals(128, numberArray2[4].shortValue());
      
      numberArray2[5] = (Number) int0;
      assertNotNull(numberArray2[5]);
      assertEquals(2.0, numberArray2[5].doubleValue(), 0.01D);
      assertEquals(2, numberArray2[5].intValue());
      assertEquals(2, numberArray2[5].byteValue());
      assertEquals(2.0F, numberArray2[5].floatValue(), 0.01F);
      assertEquals(2L, numberArray2[5].longValue());
      assertEquals(2, numberArray2[5].shortValue());
      
      numberArray2[6] = (Number) int4;
      assertNotNull(numberArray2[6]);
      assertEquals(1.0F, numberArray2[6].floatValue(), 0.01F);
      assertEquals(1L, numberArray2[6].longValue());
      assertEquals(1.0, numberArray2[6].doubleValue(), 0.01D);
      assertEquals(1, numberArray2[6].intValue());
      assertEquals(1, numberArray2[6].byteValue());
      assertEquals(1, numberArray2[6].shortValue());
      
      numberArray2[7] = (Number) int1;
      assertNotNull(numberArray2[7]);
      assertEquals(12, numberArray2[7].intValue());
      assertEquals(12, numberArray2[7].shortValue());
      assertEquals(12.0, numberArray2[7].doubleValue(), 0.01D);
      assertEquals(12.0F, numberArray2[7].floatValue(), 0.01F);
      assertEquals(12L, numberArray2[7].longValue());
      assertEquals(12, numberArray2[7].byteValue());
      
      numberArray2[8] = (Number) int4;
      assertNotNull(numberArray2[8]);
      assertEquals(1L, numberArray2[8].longValue());
      assertEquals(1, numberArray2[8].byteValue());
      assertEquals(1, numberArray2[8].intValue());
      assertEquals(1.0, numberArray2[8].doubleValue(), 0.01D);
      assertEquals(1, numberArray2[8].shortValue());
      assertEquals(1.0F, numberArray2[8].floatValue(), 0.01F);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[5];
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) int3;
      assertNotNull(numberArray3[0]);
      assertEquals(12, numberArray3[0].intValue());
      assertEquals(12, numberArray3[0].byteValue());
      assertEquals(12.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(12, numberArray3[0].shortValue());
      assertEquals(12.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(12L, numberArray3[0].longValue());
      
      numberArray3[1] = (Number) float0;
      assertNotNull(numberArray3[1]);
      assertEquals(0, numberArray3[1].byteValue());
      assertEquals(0.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(0, numberArray3[1].shortValue());
      assertEquals(0L, numberArray3[1].longValue());
      assertEquals(0.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(0, numberArray3[1].intValue());
      
      numberArray3[2] = (Number) int6;
      assertNotNull(numberArray3[2]);
      assertEquals(157L, numberArray3[2].longValue());
      assertEquals(157, numberArray3[2].intValue());
      assertEquals(-99, numberArray3[2].byteValue());
      assertEquals(157, numberArray3[2].shortValue());
      assertEquals(157.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(157.0, numberArray3[2].doubleValue(), 0.01D);
      
      int int9 = KeyEvent.VK_MINUS;
      assertEquals(45, int9);
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int0);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      
      numberArray3[3] = (Number) int9;
      assertNotNull(numberArray3[3]);
      assertEquals(45, numberArray3[3].byteValue());
      assertEquals(45, numberArray3[3].shortValue());
      assertEquals(45.0, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(45L, numberArray3[3].longValue());
      assertEquals(45, numberArray3[3].intValue());
      assertEquals(45.0F, numberArray3[3].floatValue(), 0.01F);
      
      numberArray3[4] = (Number) float0;
      assertNotNull(numberArray3[4]);
      assertEquals(0L, numberArray3[4].longValue());
      assertEquals(0, numberArray3[4].shortValue());
      assertEquals(0.0, numberArray3[4].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray3[4].floatValue(), 0.01F);
      assertEquals(0, numberArray3[4].intValue());
      assertEquals(0, numberArray3[4].byteValue());
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection1, (List) list0, boolean0);
      assertNull(range0);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = null;
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(string0, string1, string0, string2);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      Number[] numberArray1 = new Number[1];
      int int0 = ImageObserver.PROPERTIES;
      assertEquals(4, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(4.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(4, numberArray1[0].shortValue());
      assertEquals(4.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(4, numberArray1[0].byteValue());
      assertEquals(4L, numberArray1[0].longValue());
      assertEquals(4, numberArray1[0].intValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[4];
      assertNotSame(numberArray2, numberArray1);
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) int0;
      assertNotNull(numberArray2[0]);
      assertEquals(4.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(4, numberArray2[0].intValue());
      assertEquals(4L, numberArray2[0].longValue());
      assertEquals(4, numberArray2[0].shortValue());
      assertEquals(4, numberArray2[0].byteValue());
      assertEquals(4.0, numberArray2[0].doubleValue(), 0.01D);
      
      numberArray2[1] = (Number) int0;
      assertNotNull(numberArray2[1]);
      assertEquals(4, numberArray2[1].intValue());
      assertEquals(4L, numberArray2[1].longValue());
      assertEquals(4, numberArray2[1].byteValue());
      assertEquals(4, numberArray2[1].shortValue());
      assertEquals(4.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(4.0, numberArray2[1].doubleValue(), 0.01D);
      
      numberArray2[2] = (Number) int0;
      assertNotNull(numberArray2[2]);
      assertEquals(4, numberArray2[2].intValue());
      assertEquals(4, numberArray2[2].byteValue());
      assertEquals(4.0F, numberArray2[2].floatValue(), 0.01F);
      assertEquals(4, numberArray2[2].shortValue());
      assertEquals(4.0, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(4L, numberArray2[2].longValue());
      
      numberArray2[3] = (Number) int0;
      assertNotNull(numberArray2[3]);
      assertEquals(4L, numberArray2[3].longValue());
      assertEquals(4.0, numberArray2[3].doubleValue(), 0.01D);
      assertEquals(4, numberArray2[3].shortValue());
      assertEquals(4.0F, numberArray2[3].floatValue(), 0.01F);
      assertEquals(4, numberArray2[3].byteValue());
      assertEquals(4, numberArray2[3].intValue());
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[2];
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) int0;
      assertNotNull(numberArray3[0]);
      assertEquals(4, numberArray3[0].byteValue());
      assertEquals(4, numberArray3[0].intValue());
      assertEquals(4L, numberArray3[0].longValue());
      assertEquals(4.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(4, numberArray3[0].shortValue());
      assertEquals(4.0F, numberArray3[0].floatValue(), 0.01F);
      
      numberArray3[1] = (Number) int0;
      assertNotNull(numberArray3[1]);
      assertEquals(4.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(4, numberArray3[1].intValue());
      assertEquals(4L, numberArray3[1].longValue());
      assertEquals(4, numberArray3[1].byteValue());
      assertEquals(4, numberArray3[1].shortValue());
      assertEquals(4.0F, numberArray3[1].floatValue(), 0.01F);
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      Number[] numberArray4 = new Number[3];
      assertNotSame(numberArray4, numberArray3);
      assertNotSame(numberArray4, numberArray1);
      assertNotSame(numberArray4, numberArray2);
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) int0;
      assertNotNull(numberArray4[0]);
      assertEquals(4, numberArray4[0].intValue());
      assertEquals(4, numberArray4[0].shortValue());
      assertEquals(4L, numberArray4[0].longValue());
      assertEquals(4.0, numberArray4[0].doubleValue(), 0.01D);
      assertEquals(4.0F, numberArray4[0].floatValue(), 0.01F);
      assertEquals(4, numberArray4[0].byteValue());
      
      numberArray4[1] = (Number) int0;
      assertNotNull(numberArray4[1]);
      assertEquals(4.0, numberArray4[1].doubleValue(), 0.01D);
      assertEquals(4, numberArray4[1].intValue());
      assertEquals(4.0F, numberArray4[1].floatValue(), 0.01F);
      assertEquals(4, numberArray4[1].byteValue());
      assertEquals(4L, numberArray4[1].longValue());
      assertEquals(4, numberArray4[1].shortValue());
      
      numberArray4[2] = (Number) int0;
      assertNotNull(numberArray4[2]);
      assertEquals(4.0, numberArray4[2].doubleValue(), 0.01D);
      assertEquals(4, numberArray4[2].shortValue());
      assertEquals(4L, numberArray4[2].longValue());
      assertEquals(4.0F, numberArray4[2].floatValue(), 0.01F);
      assertEquals(4, numberArray4[2].byteValue());
      assertEquals(4, numberArray4[2].intValue());
      
      numberArray0[3] = numberArray4;
      assertNotNull(numberArray0[3]);
      
      Number[] numberArray5 = new Number[8];
      assertNotSame(numberArray5, numberArray1);
      assertNotSame(numberArray5, numberArray4);
      assertNotSame(numberArray5, numberArray2);
      assertNotSame(numberArray5, numberArray3);
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = (Number) int0;
      assertNotNull(numberArray5[0]);
      assertEquals(4, numberArray5[0].shortValue());
      assertEquals(4.0F, numberArray5[0].floatValue(), 0.01F);
      assertEquals(4.0, numberArray5[0].doubleValue(), 0.01D);
      assertEquals(4L, numberArray5[0].longValue());
      assertEquals(4, numberArray5[0].intValue());
      assertEquals(4, numberArray5[0].byteValue());
      
      numberArray5[1] = (Number) int0;
      assertNotNull(numberArray5[1]);
      assertEquals(4, numberArray5[1].byteValue());
      assertEquals(4, numberArray5[1].intValue());
      assertEquals(4.0F, numberArray5[1].floatValue(), 0.01F);
      assertEquals(4, numberArray5[1].shortValue());
      assertEquals(4L, numberArray5[1].longValue());
      assertEquals(4.0, numberArray5[1].doubleValue(), 0.01D);
      
      numberArray5[2] = (Number) int0;
      assertNotNull(numberArray5[2]);
      assertEquals(4L, numberArray5[2].longValue());
      assertEquals(4, numberArray5[2].shortValue());
      assertEquals(4, numberArray5[2].byteValue());
      assertEquals(4.0, numberArray5[2].doubleValue(), 0.01D);
      assertEquals(4.0F, numberArray5[2].floatValue(), 0.01F);
      assertEquals(4, numberArray5[2].intValue());
      
      numberArray5[3] = (Number) int0;
      assertNotNull(numberArray5[3]);
      assertEquals(4L, numberArray5[3].longValue());
      assertEquals(4.0F, numberArray5[3].floatValue(), 0.01F);
      assertEquals(4.0, numberArray5[3].doubleValue(), 0.01D);
      assertEquals(4, numberArray5[3].shortValue());
      assertEquals(4, numberArray5[3].byteValue());
      assertEquals(4, numberArray5[3].intValue());
      
      numberArray5[4] = (Number) int0;
      assertNotNull(numberArray5[4]);
      assertEquals(4, numberArray5[4].shortValue());
      assertEquals(4L, numberArray5[4].longValue());
      assertEquals(4.0F, numberArray5[4].floatValue(), 0.01F);
      assertEquals(4, numberArray5[4].intValue());
      assertEquals(4.0, numberArray5[4].doubleValue(), 0.01D);
      assertEquals(4, numberArray5[4].byteValue());
      
      numberArray5[5] = (Number) int0;
      assertNotNull(numberArray5[5]);
      assertEquals(4L, numberArray5[5].longValue());
      assertEquals(4, numberArray5[5].shortValue());
      assertEquals(4, numberArray5[5].byteValue());
      assertEquals(4.0F, numberArray5[5].floatValue(), 0.01F);
      assertEquals(4, numberArray5[5].intValue());
      assertEquals(4.0, numberArray5[5].doubleValue(), 0.01D);
      
      numberArray5[6] = (Number) int0;
      assertNotNull(numberArray5[6]);
      assertEquals(4.0F, numberArray5[6].floatValue(), 0.01F);
      assertEquals(4, numberArray5[6].intValue());
      assertEquals(4, numberArray5[6].shortValue());
      assertEquals(4, numberArray5[6].byteValue());
      assertEquals(4L, numberArray5[6].longValue());
      assertEquals(4.0, numberArray5[6].doubleValue(), 0.01D);
      
      numberArray5[7] = (Number) int0;
      assertNotNull(numberArray5[7]);
      assertEquals(4, numberArray5[7].byteValue());
      assertEquals(4.0, numberArray5[7].doubleValue(), 0.01D);
      assertEquals(4, numberArray5[7].intValue());
      assertEquals(4L, numberArray5[7].longValue());
      assertEquals(4, numberArray5[7].shortValue());
      assertEquals(4.0F, numberArray5[7].floatValue(), 0.01F);
      
      numberArray0[4] = numberArray5;
      assertNotNull(numberArray0[4]);
      
      Number[] numberArray6 = new Number[9];
      assertNotSame(numberArray6, numberArray3);
      assertNotSame(numberArray6, numberArray4);
      assertNotSame(numberArray6, numberArray1);
      assertNotSame(numberArray6, numberArray5);
      assertNotSame(numberArray6, numberArray2);
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      numberArray6[0] = (Number) int0;
      assertNotNull(numberArray6[0]);
      assertEquals(4.0, numberArray6[0].doubleValue(), 0.01D);
      assertEquals(4, numberArray6[0].shortValue());
      assertEquals(4, numberArray6[0].byteValue());
      assertEquals(4L, numberArray6[0].longValue());
      assertEquals(4, numberArray6[0].intValue());
      assertEquals(4.0F, numberArray6[0].floatValue(), 0.01F);
      
      numberArray6[1] = (Number) int0;
      assertNotNull(numberArray6[1]);
      assertEquals(4.0, numberArray6[1].doubleValue(), 0.01D);
      assertEquals(4, numberArray6[1].shortValue());
      assertEquals(4, numberArray6[1].byteValue());
      assertEquals(4L, numberArray6[1].longValue());
      assertEquals(4.0F, numberArray6[1].floatValue(), 0.01F);
      assertEquals(4, numberArray6[1].intValue());
      
      numberArray6[2] = (Number) int0;
      assertNotNull(numberArray6[2]);
      assertEquals(4.0, numberArray6[2].doubleValue(), 0.01D);
      assertEquals(4, numberArray6[2].byteValue());
      assertEquals(4.0F, numberArray6[2].floatValue(), 0.01F);
      assertEquals(4, numberArray6[2].intValue());
      assertEquals(4L, numberArray6[2].longValue());
      assertEquals(4, numberArray6[2].shortValue());
      
      numberArray6[3] = (Number) int0;
      assertNotNull(numberArray6[3]);
      assertEquals(4, numberArray6[3].byteValue());
      assertEquals(4.0F, numberArray6[3].floatValue(), 0.01F);
      assertEquals(4, numberArray6[3].shortValue());
      assertEquals(4.0, numberArray6[3].doubleValue(), 0.01D);
      assertEquals(4, numberArray6[3].intValue());
      assertEquals(4L, numberArray6[3].longValue());
      
      numberArray6[4] = (Number) int0;
      assertNotNull(numberArray6[4]);
      assertEquals(4L, numberArray6[4].longValue());
      assertEquals(4.0F, numberArray6[4].floatValue(), 0.01F);
      assertEquals(4.0, numberArray6[4].doubleValue(), 0.01D);
      assertEquals(4, numberArray6[4].byteValue());
      assertEquals(4, numberArray6[4].shortValue());
      assertEquals(4, numberArray6[4].intValue());
      
      numberArray6[5] = (Number) int0;
      assertNotNull(numberArray6[5]);
      assertEquals(4L, numberArray6[5].longValue());
      assertEquals(4, numberArray6[5].byteValue());
      assertEquals(4, numberArray6[5].intValue());
      assertEquals(4, numberArray6[5].shortValue());
      assertEquals(4.0F, numberArray6[5].floatValue(), 0.01F);
      assertEquals(4.0, numberArray6[5].doubleValue(), 0.01D);
      
      numberArray6[6] = (Number) int0;
      assertNotNull(numberArray6[6]);
      assertEquals(4, numberArray6[6].byteValue());
      assertEquals(4.0F, numberArray6[6].floatValue(), 0.01F);
      assertEquals(4.0, numberArray6[6].doubleValue(), 0.01D);
      assertEquals(4, numberArray6[6].intValue());
      assertEquals(4L, numberArray6[6].longValue());
      assertEquals(4, numberArray6[6].shortValue());
      
      int int1 = ImageObserver.ERROR;
      assertEquals(64, int1);
      assertFalse(int1 == int0);
      
      numberArray6[7] = (Number) int1;
      assertNotNull(numberArray6[7]);
      assertEquals(64L, numberArray6[7].longValue());
      assertEquals(64.0, numberArray6[7].doubleValue(), 0.01D);
      assertEquals(64, numberArray6[7].byteValue());
      assertEquals(64, numberArray6[7].shortValue());
      assertEquals(64, numberArray6[7].intValue());
      assertEquals(64.0F, numberArray6[7].floatValue(), 0.01F);
      
      numberArray6[8] = (Number) int0;
      assertNotNull(numberArray6[8]);
      assertEquals(4L, numberArray6[8].longValue());
      assertEquals(4, numberArray6[8].shortValue());
      assertEquals(4, numberArray6[8].byteValue());
      assertEquals(4.0, numberArray6[8].doubleValue(), 0.01D);
      assertEquals(4, numberArray6[8].intValue());
      assertEquals(4.0F, numberArray6[8].floatValue(), 0.01F);
      
      numberArray0[5] = numberArray6;
      assertNotNull(numberArray0[5]);
      
      Number[] numberArray7 = new Number[3];
      assertNotSame(numberArray7, numberArray4);
      assertNotSame(numberArray7, numberArray3);
      assertNotSame(numberArray7, numberArray1);
      assertNotSame(numberArray7, numberArray6);
      assertNotSame(numberArray7, numberArray2);
      assertNotSame(numberArray7, numberArray5);
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray5));
      
      numberArray7[1] = (Number) int0;
      assertNotNull(numberArray7[1]);
      assertEquals(4L, numberArray7[1].longValue());
      assertEquals(4.0, numberArray7[1].doubleValue(), 0.01D);
      assertEquals(4.0F, numberArray7[1].floatValue(), 0.01F);
      assertEquals(4, numberArray7[1].byteValue());
      assertEquals(4, numberArray7[1].shortValue());
      assertEquals(4, numberArray7[1].intValue());
      
      numberArray7[2] = (Number) int1;
      assertNotNull(numberArray7[2]);
      assertEquals(64, numberArray7[2].byteValue());
      assertEquals(64.0F, numberArray7[2].floatValue(), 0.01F);
      assertEquals(64, numberArray7[2].shortValue());
      assertEquals(64, numberArray7[2].intValue());
      assertEquals(64.0, numberArray7[2].doubleValue(), 0.01D);
      assertEquals(64L, numberArray7[2].longValue());
      
      numberArray0[6] = numberArray7;
      assertNotNull(numberArray0[6]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(4.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(4.0, range0.getUpperBound(), 0.01D);
      assertEquals(2.0, range0.getCentralValue(), 0.01D);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "T~rh";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string1 = "9rBm'g,y~*L";
      assertNotSame(string1, string0);
      
      Number[][] numberArray0 = new Number[3][4];
      Number[] numberArray1 = new Number[2];
      int int0 = MouseEvent.BUTTON3;
      assertEquals(3, int0);
      
      Number[] numberArray2 = new Number[2];
      assertNotSame(numberArray2, numberArray1);
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) int0;
      assertNotNull(numberArray2[0]);
      assertEquals(3, numberArray2[0].shortValue());
      assertEquals(3, numberArray2[0].byteValue());
      assertEquals(3, numberArray2[0].intValue());
      assertEquals(3.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(3L, numberArray2[0].longValue());
      assertEquals(3.0, numberArray2[0].doubleValue(), 0.01D);
      
      numberArray2[1] = (Number) int0;
      assertNotNull(numberArray2[1]);
      assertEquals(3.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(3.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(3L, numberArray2[1].longValue());
      assertEquals(3, numberArray2[1].shortValue());
      assertEquals(3, numberArray2[1].intValue());
      assertEquals(3, numberArray2[1].byteValue());
      
      numberArray0[0] = numberArray2;
      assertNotNull(numberArray0[0]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      numberArray0[2] = numberArray2;
      assertNotNull(numberArray0[2]);
      
      long long0 = AWTEvent.MOUSE_EVENT_MASK;
      assertEquals(16L, long0);
      
      numberArray1[1] = (Number) long0;
      assertNotNull(numberArray1[1]);
      assertEquals(16, numberArray1[1].byteValue());
      assertEquals(16L, numberArray1[1].longValue());
      assertEquals(16.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(16, numberArray1[1].shortValue());
      assertEquals(16, numberArray1[1].intValue());
      assertEquals(16.0, numberArray1[1].doubleValue(), 0.01D);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray3 = new Number[7];
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) long0;
      assertNotNull(numberArray3[0]);
      assertEquals(16, numberArray3[0].intValue());
      assertEquals(16L, numberArray3[0].longValue());
      assertEquals(16.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(16, numberArray3[0].shortValue());
      assertEquals(16.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(16, numberArray3[0].byteValue());
      
      numberArray3[1] = (Number) long0;
      assertNotNull(numberArray3[1]);
      assertEquals(16, numberArray3[1].intValue());
      assertEquals(16.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(16.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(16, numberArray3[1].shortValue());
      assertEquals(16, numberArray3[1].byteValue());
      assertEquals(16L, numberArray3[1].longValue());
      
      numberArray3[2] = (Number) int0;
      assertNotNull(numberArray3[2]);
      assertEquals(3, numberArray3[2].byteValue());
      assertEquals(3.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(3.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(3, numberArray3[2].intValue());
      assertEquals(3L, numberArray3[2].longValue());
      assertEquals(3, numberArray3[2].shortValue());
      
      numberArray3[3] = (Number) long0;
      assertNotNull(numberArray3[3]);
      assertEquals(16.0F, numberArray3[3].floatValue(), 0.01F);
      assertEquals(16.0, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(16L, numberArray3[3].longValue());
      assertEquals(16, numberArray3[3].byteValue());
      assertEquals(16, numberArray3[3].shortValue());
      assertEquals(16, numberArray3[3].intValue());
      
      numberArray3[4] = (Number) long0;
      assertNotNull(numberArray3[4]);
      assertEquals(16.0F, numberArray3[4].floatValue(), 0.01F);
      assertEquals(16, numberArray3[4].byteValue());
      assertEquals(16.0, numberArray3[4].doubleValue(), 0.01D);
      assertEquals(16, numberArray3[4].intValue());
      assertEquals(16L, numberArray3[4].longValue());
      assertEquals(16, numberArray3[4].shortValue());
      
      numberArray3[5] = (Number) int0;
      assertNotNull(numberArray3[5]);
      assertEquals(3.0F, numberArray3[5].floatValue(), 0.01F);
      assertEquals(3L, numberArray3[5].longValue());
      assertEquals(3, numberArray3[5].byteValue());
      assertEquals(3, numberArray3[5].shortValue());
      assertEquals(3.0, numberArray3[5].doubleValue(), 0.01D);
      assertEquals(3, numberArray3[5].intValue());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      
      double double0 = DatasetUtilities.calculateStackTotal((TableXYDataset) defaultTableXYDataset0, int0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      
      numberArray3[6] = (Number) long0;
      assertNotNull(numberArray3[6]);
      assertEquals(16L, numberArray3[6].longValue());
      assertEquals(16.0, numberArray3[6].doubleValue(), 0.01D);
      assertEquals(16.0F, numberArray3[6].floatValue(), 0.01F);
      assertEquals(16, numberArray3[6].intValue());
      assertEquals(16, numberArray3[6].byteValue());
      assertEquals(16, numberArray3[6].shortValue());
      
      numberArray0[1] = numberArray3;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray4 = new Number[1];
      assertNotSame(numberArray4, numberArray3);
      assertNotSame(numberArray4, numberArray1);
      assertNotSame(numberArray4, numberArray2);
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) int0;
      assertNotNull(numberArray4[0]);
      assertEquals(3, numberArray4[0].shortValue());
      assertEquals(3, numberArray4[0].intValue());
      assertEquals(3.0, numberArray4[0].doubleValue(), 0.01D);
      assertEquals(3.0F, numberArray4[0].floatValue(), 0.01F);
      assertEquals(3L, numberArray4[0].longValue());
      assertEquals(3, numberArray4[0].byteValue());
      
      numberArray0[2] = numberArray4;
      assertNotNull(numberArray0[2]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string1, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultCategoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Double double1 = (Double)DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertEquals(16.0, (double)double1, 0.01D);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(double1.equals((Object)double0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test08()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) year0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      
      boolean boolean1 = false;
      assertFalse(boolean1 == boolean0);
      
      long long0 = year0.getFirstMillisecond();
      assertEquals(1388534400000L, long0);
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, boolean1);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertFalse(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range1);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      double double0 = 1706.842809485033;
      // Undeclared exception!
      try {
        Range range2 = Range.scale(range1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "R8VpUC\"zeD5U=v^=+Bm";
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[6];
      double double0 = (-1994.442215406422);
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 1209.9489;
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      double double4 = 1455.861;
      doubleArray1[4] = double4;
      double double5 = 0.0;
      doubleArray1[5] = double5;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[2];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double6 = (-1480.0);
      doubleArray2[1] = double6;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[7];
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double3;
      doubleArray3[2] = double3;
      doubleArray3[3] = double5;
      doubleArray3[4] = double3;
      doubleArray3[5] = double4;
      doubleArray3[6] = double5;
      double[] doubleArray4 = new double[6];
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = double6;
      doubleArray4[1] = double2;
      doubleArray4[2] = double6;
      doubleArray4[3] = double2;
      doubleArray4[4] = double1;
      doubleArray4[5] = double6;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[2];
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      double double7 = (-1170.840068957965);
      doubleArray5[0] = double7;
      double double8 = (-3154.7247);
      doubleArray5[1] = double8;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double double9 = (-737.8804518761898);
      doubleArray0[5] = doubleArray0[3];
      assertNotNull(doubleArray0[5]);
      
      doubleArray0[6] = doubleArray1;
      assertNotNull(doubleArray0[6]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "R8VpUC\"zeD5U=v^=+Bm";
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[6];
      double double0 = (-1994.442215406422);
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 1209.9489;
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      double double4 = 1455.861;
      doubleArray1[4] = double4;
      double double5 = 0.0;
      doubleArray1[5] = double5;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[2];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double6 = (-1480.0);
      doubleArray2[1] = double6;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[7];
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double3;
      doubleArray3[2] = double3;
      doubleArray3[3] = double5;
      doubleArray3[4] = double3;
      doubleArray3[5] = double4;
      doubleArray3[6] = double5;
      double[] doubleArray4 = new double[6];
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = double6;
      doubleArray4[1] = double2;
      doubleArray4[2] = double6;
      doubleArray4[3] = double2;
      doubleArray4[4] = double1;
      doubleArray4[5] = double6;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[2];
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      double double7 = (-1170.840068957965);
      doubleArray5[0] = double7;
      double double8 = (-3154.7247);
      doubleArray5[1] = double8;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double double9 = (-737.8804518761898);
      doubleArray0[5] = doubleArray0[3];
      assertNotNull(doubleArray0[5]);
      
      doubleArray0[6] = doubleArray1;
      assertNotNull(doubleArray0[6]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[1] = double0;
      double double1 = 0.0;
      doubleArray0[2] = double1;
      double double2 = 2095.176304343;
      doubleArray0[3] = double2;
      double double3 = 0.0;
      doubleArray0[4] = double3;
      double double4 = (-1244.690192);
      doubleArray0[5] = double4;
      double double5 = (-687.20005045243);
      doubleArray0[6] = double5;
      double double6 = 1524.8;
      doubleArray0[7] = double6;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      
      double double7 = 81.3482;
      int int0 = 1893;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) polynomialFunction2D0, double0, double7, int0, (Comparable) double4);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double7);
      assertFalse(double4 == double5);
      assertFalse(double4 == double6);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double7 == double6);
      assertFalse(double7 == double4);
      assertFalse(double7 == double5);
      assertFalse(double7 == double0);
      assertFalse(double7 == double3);
      assertFalse(double7 == double2);
      assertFalse(double7 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double6);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double7);
      assertFalse(double4 == double5);
      assertFalse(double4 == double6);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double7 == double6);
      assertFalse(double7 == double4);
      assertFalse(double7 == double5);
      assertFalse(double7 == double0);
      assertFalse(double7 == double3);
      assertFalse(double7 == double2);
      assertFalse(double7 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double6);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      boolean boolean0 = false;
      Range range0 = xYSeriesCollection0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(1.7871125748952428E16, range0.getCentralValue(), 0.01D);
      assertEquals(3.5742251497904856E16, range0.getUpperBound(), 0.01D);
      assertEquals(3.5742251497904856E16, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double7);
      assertFalse(double4 == double5);
      assertFalse(double4 == double6);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double7 == double6);
      assertFalse(double7 == double4);
      assertFalse(double7 == double5);
      assertFalse(double7 == double0);
      assertFalse(double7 == double3);
      assertFalse(double7 == double2);
      assertFalse(double7 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double6);
      
      boolean boolean1 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) list0, range0, boolean1);
      assertNull(range1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1.7871125748952428E16, range0.getCentralValue(), 0.01D);
      assertEquals(3.5742251497904856E16, range0.getUpperBound(), 0.01D);
      assertEquals(3.5742251497904856E16, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double7);
      assertFalse(double4 == double5);
      assertFalse(double4 == double6);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double7 == double6);
      assertFalse(double7 == double4);
      assertFalse(double7 == double5);
      assertFalse(double7 == double0);
      assertFalse(double7 == double3);
      assertFalse(double7 == double2);
      assertFalse(double7 == double1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double6);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[1] = double0;
      double double1 = 0.0;
      doubleArray0[2] = double1;
      double double2 = 2095.176304343;
      doubleArray0[3] = double2;
      double double3 = 0.0;
      doubleArray0[4] = double3;
      double double4 = (-1244.690192);
      doubleArray0[5] = double4;
      double double5 = (-687.20005045243);
      doubleArray0[6] = double5;
      double double6 = 1524.8;
      doubleArray0[7] = double6;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      
      double double7 = 81.3482;
      int int0 = 1893;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) polynomialFunction2D0, double0, double7, int0, (Comparable) double4);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(double4 == double1);
      assertFalse(double4 == double6);
      assertFalse(double4 == double7);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double2);
      assertFalse(double7 == double2);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double7 == double4);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double5);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double6);
      assertFalse(double0 == double4);
      assertFalse(double0 == double5);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double6);
      assertFalse(double4 == double7);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double2);
      assertFalse(double7 == double2);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double7 == double4);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double5);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double6);
      assertFalse(double0 == double4);
      assertFalse(double0 == double5);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      boolean boolean0 = false;
      Range range0 = xYSeriesCollection0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(3.5742251497904856E16, range0.getUpperBound(), 0.01D);
      assertEquals(3.5742251497904856E16, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.7871125748952428E16, range0.getCentralValue(), 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double6);
      assertFalse(double4 == double7);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double2);
      assertFalse(double7 == double2);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double7 == double4);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double5);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double6);
      assertFalse(double0 == double4);
      assertFalse(double0 == double5);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      boolean boolean1 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) list0, range0, boolean1);
      assertNull(range1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2095.176304343, 0.0, (-1244.690192), (-687.20005045243), 1524.8}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(3.5742251497904856E16, xYSeries0.getMaxY(), 0.01D);
      assertEquals(81.3482, xYSeries0.getMaxX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1893, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(3.5742251497904856E16, range0.getUpperBound(), 0.01D);
      assertEquals(3.5742251497904856E16, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.7871125748952428E16, range0.getCentralValue(), 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double6);
      assertFalse(double4 == double7);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double2);
      assertFalse(boolean1 == boolean0);
      assertFalse(double7 == double2);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double7 == double4);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double5);
      assertFalse(double0 == double7);
      assertTrue(double0 == double3);
      assertFalse(double0 == double6);
      assertFalse(double0 == double4);
      assertFalse(double0 == double5);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[2];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 1134.205;
      doubleArray1[1] = double1;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[3];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[8];
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double1;
      double double2 = 3064.939157721;
      doubleArray3[1] = double2;
      doubleArray3[2] = double1;
      doubleArray3[3] = double0;
      doubleArray3[4] = double1;
      doubleArray3[5] = double0;
      doubleArray3[6] = double0;
      doubleArray3[7] = double0;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[2];
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = doubleArray1[1];
      doubleArray4[1] = double1;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[5];
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = double2;
      doubleArray5[1] = double1;
      doubleArray5[2] = double2;
      doubleArray5[3] = double2;
      doubleArray5[4] = double2;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double double3 = (-2113.852);
      doubleArray0[5] = doubleArray3;
      assertNotNull(doubleArray0[5]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(4766.246657721, range0.getCentralValue(), 0.01D);
      assertEquals(9532.493315442, range0.getLength(), 0.01D);
      assertEquals(9532.493315442, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) vector0, boolean0);
      assertNull(range1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-123);
      int int1 = 0;
      Week week0 = new Week(int0, int1);
      assertNotNull(week0);
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Year year0 = week0.getYear();
      assertNotNull(year0);
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = (MockDate)week0.getEnd();
      assertNotNull(mockDate0);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = (-1255.00930214);
      double double1 = 0.0;
      double double2 = (-1095.72);
      double double3 = 0.0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, double0, double1, (double) int0, double2, double3);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertTrue(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(int0 == int1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      assertNotNull(oHLCDataItemArray0[0]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      double double4 = 796.449;
      double double5 = 1080.3136360798342;
      double double6 = (-1015.35);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem((Date) mockDate0, double4, double0, double5, (double) int0, double6);
      assertNotNull(oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(double4 == double3);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double6);
      assertFalse(double5 == double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double3);
      assertFalse(double5 == double6);
      assertFalse(double5 == double0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(double6 == double5);
      assertFalse(double6 == double2);
      assertFalse(double6 == double1);
      assertFalse(double6 == double4);
      assertFalse(double6 == double3);
      assertFalse(double6 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double6);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      assertNotNull(oHLCDataItemArray0[1]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      double double7 = (-1.0);
      double double8 = 643.927982;
      double double9 = 2208.7492613266;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem((Date) mockDate0, double5, double7, double8, double9, double9);
      assertNotNull(oHLCDataItem2);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(double9 == double7);
      assertFalse(double9 == double6);
      assertFalse(double9 == double3);
      assertFalse(double9 == double4);
      assertFalse(double9 == double0);
      assertFalse(double9 == double1);
      assertFalse(double9 == double2);
      assertFalse(double9 == double5);
      assertFalse(double9 == double8);
      assertFalse(double7 == double5);
      assertFalse(double7 == double9);
      assertFalse(double7 == double3);
      assertFalse(double7 == double8);
      assertFalse(double7 == double4);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double7 == double2);
      assertFalse(double7 == double6);
      assertFalse(double5 == double4);
      assertFalse(double5 == double9);
      assertFalse(double5 == double8);
      assertFalse(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double3);
      assertFalse(double5 == double6);
      assertFalse(double5 == double0);
      assertFalse(double5 == double7);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(double8 == double0);
      assertFalse(double8 == double3);
      assertFalse(double8 == double2);
      assertFalse(double8 == double6);
      assertFalse(double8 == double1);
      assertFalse(double8 == double7);
      assertFalse(double8 == double4);
      assertFalse(double8 == double5);
      assertFalse(double8 == double9);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      assertNotNull(oHLCDataItemArray0[2]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem((Date) mockDate0, double4, double3, double1, double7, double4);
      assertNotNull(oHLCDataItem3);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(double4 == double9);
      assertFalse(double4 == double3);
      assertFalse(double4 == double8);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double7);
      assertFalse(double4 == double6);
      assertFalse(double7 == double5);
      assertFalse(double7 == double9);
      assertFalse(double7 == double3);
      assertFalse(double7 == double8);
      assertFalse(double7 == double4);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double7 == double2);
      assertFalse(double7 == double6);
      assertFalse(double1 == double4);
      assertTrue(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double7);
      assertFalse(double1 == double6);
      assertFalse(double1 == double8);
      assertFalse(double1 == double5);
      assertFalse(double1 == double9);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(double3 == double5);
      assertFalse(double3 == double7);
      assertFalse(double3 == double0);
      assertFalse(double3 == double6);
      assertFalse(double3 == double4);
      assertFalse(double3 == double8);
      assertTrue(double3 == double1);
      assertFalse(double3 == double9);
      assertFalse(double3 == double2);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      assertNotNull(oHLCDataItemArray0[3]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      double double10 = 0.0;
      double double11 = Double.NEGATIVE_INFINITY;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem((Date) mockDate0, double10, double4, double2, double11, double7);
      assertNotNull(oHLCDataItem4);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(double4 == double9);
      assertFalse(double4 == double3);
      assertFalse(double4 == double8);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double10);
      assertFalse(double4 == double0);
      assertFalse(double4 == double7);
      assertFalse(double4 == double6);
      assertFalse(double4 == double11);
      assertFalse(double7 == double5);
      assertFalse(double7 == double9);
      assertFalse(double7 == double3);
      assertFalse(double7 == double8);
      assertFalse(double7 == double4);
      assertFalse(double7 == double0);
      assertFalse(double7 == double11);
      assertFalse(double7 == double10);
      assertFalse(double7 == double1);
      assertFalse(double7 == double2);
      assertFalse(double7 == double6);
      assertFalse(double10 == double11);
      assertFalse(double10 == double7);
      assertFalse(double10 == double0);
      assertTrue(double10 == double3);
      assertFalse(double10 == double5);
      assertTrue(double10 == double1);
      assertFalse(double10 == double6);
      assertFalse(double10 == double9);
      assertFalse(double10 == double2);
      assertFalse(double10 == double4);
      assertFalse(double10 == double8);
      assertFalse(double2 == double9);
      assertFalse(double2 == double4);
      assertFalse(double2 == double7);
      assertFalse(double2 == double10);
      assertFalse(double2 == double8);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double6);
      assertFalse(double2 == double5);
      assertFalse(double2 == double11);
      assertFalse(int0 == int1);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(double11 == double9);
      assertFalse(double11 == double4);
      assertFalse(double11 == double6);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double5);
      assertFalse(double11 == double8);
      assertFalse(double11 == double10);
      assertFalse(double11 == double0);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      assertNotNull(oHLCDataItemArray0[4]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      double double12 = 2.0;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem((Date) mockDate0, double4, double2, double4, (double) int1, double12);
      assertNotNull(oHLCDataItem5);
      assertNotSame(oHLCDataItem5, oHLCDataItem0);
      assertNotSame(oHLCDataItem5, oHLCDataItem4);
      assertNotSame(oHLCDataItem5, oHLCDataItem3);
      assertNotSame(oHLCDataItem5, oHLCDataItem2);
      assertNotSame(oHLCDataItem5, oHLCDataItem1);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(double4 == double9);
      assertFalse(double4 == double3);
      assertFalse(double4 == double8);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double10);
      assertFalse(double4 == double0);
      assertFalse(double4 == double7);
      assertFalse(double4 == double6);
      assertFalse(double4 == double11);
      assertFalse(double4 == double12);
      assertFalse(double2 == double9);
      assertFalse(double2 == double4);
      assertFalse(double2 == double7);
      assertFalse(double2 == double10);
      assertFalse(double2 == double8);
      assertFalse(double2 == double12);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double6);
      assertFalse(double2 == double5);
      assertFalse(double2 == double11);
      assertFalse(int0 == int1);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(double12 == double9);
      assertFalse(double12 == double5);
      assertFalse(double12 == double1);
      assertFalse(double12 == double11);
      assertFalse(double12 == double6);
      assertFalse(double12 == double0);
      assertFalse(double12 == double2);
      assertFalse(double12 == double7);
      assertFalse(double12 == double10);
      assertFalse(double12 == double8);
      assertFalse(double12 == double4);
      assertFalse(double12 == double3);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      assertNotNull(oHLCDataItemArray0[5]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      double double13 = (-63.07);
      double double14 = Double.POSITIVE_INFINITY;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem((Date) mockDate0, double13, double13, (double) int1, double14, double10);
      assertNotNull(oHLCDataItem6);
      assertNotSame(oHLCDataItem6, oHLCDataItem1);
      assertNotSame(oHLCDataItem6, oHLCDataItem3);
      assertNotSame(oHLCDataItem6, oHLCDataItem2);
      assertNotSame(oHLCDataItem6, oHLCDataItem4);
      assertNotSame(oHLCDataItem6, oHLCDataItem5);
      assertNotSame(oHLCDataItem6, oHLCDataItem0);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(double10 == double11);
      assertFalse(double10 == double7);
      assertTrue(double10 == double1);
      assertFalse(double10 == double14);
      assertFalse(double10 == double6);
      assertFalse(double10 == double2);
      assertFalse(double10 == double13);
      assertFalse(double10 == double4);
      assertFalse(double10 == double8);
      assertFalse(double10 == double0);
      assertTrue(double10 == double3);
      assertFalse(double10 == double5);
      assertFalse(double10 == double9);
      assertFalse(double10 == double12);
      assertFalse(int0 == int1);
      assertFalse(double14 == double12);
      assertFalse(double14 == double4);
      assertFalse(double14 == double6);
      assertFalse(double14 == double9);
      assertFalse(double14 == double11);
      assertFalse(double14 == double13);
      assertFalse(double14 == double5);
      assertFalse(double14 == double0);
      assertFalse(double14 == double8);
      assertFalse(double14 == double7);
      assertFalse(double14 == double3);
      assertFalse(double14 == double2);
      assertFalse(double14 == double10);
      assertFalse(double14 == double1);
      assertFalse(double13 == double7);
      assertFalse(double13 == double14);
      assertFalse(double13 == double1);
      assertFalse(double13 == double0);
      assertFalse(double13 == double3);
      assertFalse(double13 == double4);
      assertFalse(double13 == double10);
      assertFalse(double13 == double9);
      assertFalse(double13 == double6);
      assertFalse(double13 == double2);
      assertFalse(double13 == double12);
      assertFalse(double13 == double8);
      assertFalse(double13 == double5);
      assertFalse(double13 == double11);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      assertNotNull(oHLCDataItemArray0[6]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      double double15 = 0.0;
      double double16 = 0.0;
      double double17 = (-2777.9917);
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem((Date) mockDate0, (double) int1, double15, double16, double0, double17);
      assertNotNull(oHLCDataItem7);
      assertNotSame(oHLCDataItem7, oHLCDataItem6);
      assertNotSame(oHLCDataItem7, oHLCDataItem5);
      assertNotSame(oHLCDataItem7, oHLCDataItem2);
      assertNotSame(oHLCDataItem7, oHLCDataItem0);
      assertNotSame(oHLCDataItem7, oHLCDataItem1);
      assertNotSame(oHLCDataItem7, oHLCDataItem4);
      assertNotSame(oHLCDataItem7, oHLCDataItem3);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertFalse(double17 == double15);
      assertFalse(double17 == double6);
      assertFalse(double17 == double14);
      assertFalse(double17 == double11);
      assertFalse(double17 == double8);
      assertFalse(double17 == double13);
      assertFalse(double17 == double0);
      assertFalse(double17 == double3);
      assertFalse(double17 == double2);
      assertFalse(double17 == double5);
      assertFalse(double17 == double4);
      assertFalse(double17 == double10);
      assertFalse(double17 == double1);
      assertFalse(double17 == double16);
      assertFalse(double17 == double7);
      assertFalse(double17 == double9);
      assertFalse(double17 == double12);
      assertFalse(double15 == double11);
      assertTrue(double15 == double16);
      assertFalse(double15 == double14);
      assertFalse(double15 == double0);
      assertTrue(double15 == double10);
      assertFalse(double15 == double13);
      assertFalse(double15 == double17);
      assertFalse(double15 == double5);
      assertTrue(double15 == double3);
      assertFalse(double15 == double12);
      assertTrue(double15 == double1);
      assertFalse(double15 == double8);
      assertFalse(double15 == double9);
      assertFalse(double15 == double7);
      assertFalse(double15 == double6);
      assertFalse(double15 == double2);
      assertFalse(double15 == double4);
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(double0 == double13);
      assertFalse(double0 == double17);
      assertFalse(double0 == double16);
      assertFalse(double0 == double12);
      assertFalse(double0 == double14);
      assertFalse(double0 == double4);
      assertFalse(double0 == double11);
      assertFalse(double0 == double10);
      assertFalse(double0 == double9);
      assertFalse(double0 == double3);
      assertFalse(double0 == double15);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double6);
      assertFalse(double0 == double7);
      assertFalse(double0 == double8);
      assertFalse(double0 == double5);
      assertFalse(int0 == int1);
      assertFalse(double16 == double14);
      assertTrue(double16 == double1);
      assertFalse(double16 == double4);
      assertFalse(double16 == double13);
      assertFalse(double16 == double2);
      assertFalse(double16 == double7);
      assertTrue(double16 == double15);
      assertFalse(double16 == double12);
      assertFalse(double16 == double9);
      assertFalse(double16 == double0);
      assertFalse(double16 == double17);
      assertFalse(double16 == double5);
      assertTrue(double16 == double3);
      assertFalse(double16 == double6);
      assertTrue(double16 == double10);
      assertFalse(double16 == double8);
      assertFalse(double16 == double11);
      assertFalse(int1 == int0);
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      assertNotNull(oHLCDataItemArray0[7]);
      assertEquals("Sun Aug 19 23:59:59 GMT 4", mockDate0.toString());
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) year0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals((-62242646400000L), week0.getFirstMillisecond());
      assertEquals(0, week0.getYearValue());
      assertEquals((-62242041600001L), week0.getLastMillisecond());
      assertEquals((-123L), week0.getSerialIndex());
      assertEquals(-123, week0.getWeek());
      assertEquals((-62242344000001L), week0.getMiddleMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals((-149.63550000000004), range0.getCentralValue(), 0.01D);
      assertEquals(796.449, range0.getUpperBound(), 0.01D);
      assertEquals((-1095.72), range0.getLowerBound(), 0.01D);
      assertEquals(1892.1689999999999, range0.getLength(), 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test15()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[9];
      int int0 = ComponentEvent.COMPONENT_RESIZED;
      assertEquals(101, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(101, numberArray1[0].intValue());
      assertEquals(101.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(101L, numberArray1[0].longValue());
      assertEquals(101, numberArray1[0].byteValue());
      assertEquals(101.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(101, numberArray1[0].shortValue());
      
      int int1 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      numberArray1[1] = (Number) int1;
      assertNotNull(numberArray1[1]);
      assertEquals(2, numberArray1[1].byteValue());
      assertEquals(2.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(2, numberArray1[1].intValue());
      assertEquals(2L, numberArray1[1].longValue());
      assertEquals(2, numberArray1[1].shortValue());
      
      int int2 = ImageObserver.HEIGHT;
      assertEquals(2, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      numberArray1[2] = (Number) int2;
      assertNotNull(numberArray1[2]);
      assertEquals(2L, numberArray1[2].longValue());
      assertEquals(2.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(2, numberArray1[2].byteValue());
      assertEquals(2, numberArray1[2].intValue());
      assertEquals(2, numberArray1[2].shortValue());
      assertEquals(2.0, numberArray1[2].doubleValue(), 0.01D);
      
      numberArray1[3] = (Number) int0;
      assertNotNull(numberArray1[3]);
      assertEquals(101, numberArray1[3].intValue());
      assertEquals(101L, numberArray1[3].longValue());
      assertEquals(101.0F, numberArray1[3].floatValue(), 0.01F);
      assertEquals(101, numberArray1[3].byteValue());
      assertEquals(101, numberArray1[3].shortValue());
      assertEquals(101.0, numberArray1[3].doubleValue(), 0.01D);
      
      int int3 = KeyEvent.VK_TAB;
      assertEquals(9, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      numberArray1[4] = (Number) int3;
      assertNotNull(numberArray1[4]);
      assertEquals(9L, numberArray1[4].longValue());
      assertEquals(9, numberArray1[4].byteValue());
      assertEquals(9, numberArray1[4].intValue());
      assertEquals(9.0F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(9.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(9, numberArray1[4].shortValue());
      
      int int4 = KeyEvent.VK_OPEN_BRACKET;
      assertEquals(91, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      numberArray1[5] = (Number) int4;
      assertNotNull(numberArray1[5]);
      assertEquals(91L, numberArray1[5].longValue());
      assertEquals(91, numberArray1[5].intValue());
      assertEquals(91.0F, numberArray1[5].floatValue(), 0.01F);
      assertEquals(91, numberArray1[5].shortValue());
      assertEquals(91, numberArray1[5].byteValue());
      assertEquals(91.0, numberArray1[5].doubleValue(), 0.01D);
      
      int int5 = Float.MAX_EXPONENT;
      assertEquals(127, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      
      numberArray1[6] = (Number) int5;
      assertNotNull(numberArray1[6]);
      assertEquals(127.0F, numberArray1[6].floatValue(), 0.01F);
      assertEquals(127.0, numberArray1[6].doubleValue(), 0.01D);
      assertEquals(127, numberArray1[6].intValue());
      assertEquals(127, numberArray1[6].byteValue());
      assertEquals(127, numberArray1[6].shortValue());
      assertEquals(127L, numberArray1[6].longValue());
      
      int int6 = SwingConstants.NORTH_WEST;
      assertEquals(8, int6);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      
      numberArray1[7] = (Number) int6;
      assertNotNull(numberArray1[7]);
      assertEquals(8, numberArray1[7].intValue());
      assertEquals(8, numberArray1[7].byteValue());
      assertEquals(8.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(8L, numberArray1[7].longValue());
      assertEquals(8, numberArray1[7].shortValue());
      assertEquals(8.0, numberArray1[7].doubleValue(), 0.01D);
      
      int int7 = Rectangle2D.OUT_BOTTOM;
      assertEquals(8, int7);
      assertFalse(int7 == int3);
      assertTrue(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      
      numberArray1[8] = (Number) int7;
      assertNotNull(numberArray1[8]);
      assertEquals(8, numberArray1[8].byteValue());
      assertEquals(8.0, numberArray1[8].doubleValue(), 0.01D);
      assertEquals(8.0F, numberArray1[8].floatValue(), 0.01F);
      assertEquals(8, numberArray1[8].intValue());
      assertEquals(8, numberArray1[8].shortValue());
      assertEquals(8L, numberArray1[8].longValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[5];
      assertNotSame(numberArray2, numberArray1);
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) int2;
      assertNotNull(numberArray2[0]);
      assertEquals(2.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(2L, numberArray2[0].longValue());
      assertEquals(2, numberArray2[0].byteValue());
      assertEquals(2.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(2, numberArray2[0].shortValue());
      assertEquals(2, numberArray2[0].intValue());
      
      numberArray2[1] = (Number) int6;
      assertNotNull(numberArray2[1]);
      assertEquals(8.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(8, numberArray2[1].intValue());
      assertEquals(8.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(8, numberArray2[1].shortValue());
      assertEquals(8L, numberArray2[1].longValue());
      assertEquals(8, numberArray2[1].byteValue());
      
      numberArray2[3] = (Number) int5;
      assertNotNull(numberArray2[3]);
      assertEquals(127, numberArray2[3].byteValue());
      assertEquals(127L, numberArray2[3].longValue());
      assertEquals(127, numberArray2[3].shortValue());
      assertEquals(127.0F, numberArray2[3].floatValue(), 0.01F);
      assertEquals(127.0, numberArray2[3].doubleValue(), 0.01D);
      assertEquals(127, numberArray2[3].intValue());
      
      int int8 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int8);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      
      numberArray2[4] = (Number) int8;
      assertNotNull(numberArray2[4]);
      assertEquals(-1, numberArray2[4].intValue());
      assertEquals((-1L), numberArray2[4].longValue());
      assertEquals((-1.0F), numberArray2[4].floatValue(), 0.01F);
      assertEquals(-1, numberArray2[4].byteValue());
      assertEquals((-1.0), numberArray2[4].doubleValue(), 0.01D);
      assertEquals(-1, numberArray2[4].shortValue());
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[3];
      assertNotSame(numberArray3, numberArray2);
      assertNotSame(numberArray3, numberArray1);
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) int5;
      assertNotNull(numberArray3[0]);
      assertEquals(127.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(127L, numberArray3[0].longValue());
      assertEquals(127, numberArray3[0].byteValue());
      assertEquals(127, numberArray3[0].intValue());
      assertEquals(127.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(127, numberArray3[0].shortValue());
      
      numberArray3[1] = (Number) int0;
      assertNotNull(numberArray3[1]);
      assertEquals(101, numberArray3[1].byteValue());
      assertEquals(101, numberArray3[1].intValue());
      assertEquals(101.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(101L, numberArray3[1].longValue());
      assertEquals(101.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(101, numberArray3[1].shortValue());
      
      numberArray3[2] = (Number) int5;
      assertNotNull(numberArray3[2]);
      assertEquals(127.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(127.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(127, numberArray3[2].intValue());
      assertEquals(127, numberArray3[2].shortValue());
      assertEquals(127L, numberArray3[2].longValue());
      assertEquals(127, numberArray3[2].byteValue());
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      Number[] numberArray4 = new Number[4];
      assertNotSame(numberArray4, numberArray3);
      assertNotSame(numberArray4, numberArray2);
      assertNotSame(numberArray4, numberArray1);
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) int0;
      assertNotNull(numberArray4[0]);
      assertEquals(101, numberArray4[0].shortValue());
      assertEquals(101.0, numberArray4[0].doubleValue(), 0.01D);
      assertEquals(101.0F, numberArray4[0].floatValue(), 0.01F);
      assertEquals(101, numberArray4[0].byteValue());
      assertEquals(101, numberArray4[0].intValue());
      assertEquals(101L, numberArray4[0].longValue());
      
      numberArray4[1] = (Number) int2;
      assertNotNull(numberArray4[1]);
      assertEquals(2.0, numberArray4[1].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray4[1].floatValue(), 0.01F);
      assertEquals(2, numberArray4[1].byteValue());
      assertEquals(2, numberArray4[1].shortValue());
      assertEquals(2L, numberArray4[1].longValue());
      assertEquals(2, numberArray4[1].intValue());
      
      numberArray4[2] = (Number) int0;
      assertNotNull(numberArray4[2]);
      assertEquals(101, numberArray4[2].intValue());
      assertEquals(101L, numberArray4[2].longValue());
      assertEquals(101, numberArray4[2].shortValue());
      assertEquals(101.0F, numberArray4[2].floatValue(), 0.01F);
      assertEquals(101, numberArray4[2].byteValue());
      assertEquals(101.0, numberArray4[2].doubleValue(), 0.01D);
      
      numberArray4[3] = (Number) int8;
      assertNotNull(numberArray4[3]);
      assertEquals(-1, numberArray4[3].shortValue());
      assertEquals(-1, numberArray4[3].byteValue());
      assertEquals((-1L), numberArray4[3].longValue());
      assertEquals((-1.0F), numberArray4[3].floatValue(), 0.01F);
      assertEquals(-1, numberArray4[3].intValue());
      assertEquals((-1.0), numberArray4[3].doubleValue(), 0.01D);
      
      numberArray0[3] = numberArray4;
      assertNotNull(numberArray0[3]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "Category 8";
      Number[][] numberArray0 = new Number[10][2];
      Number[] numberArray1 = new Number[8];
      int int0 = SwingConstants.NORTH_WEST;
      assertEquals(8, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(8.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(8, numberArray1[0].byteValue());
      assertEquals(8.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(8, numberArray1[0].intValue());
      assertEquals(8L, numberArray1[0].longValue());
      assertEquals(8, numberArray1[0].shortValue());
      
      long long0 = AWTEvent.INVOCATION_EVENT_MASK;
      assertEquals(16384L, long0);
      
      numberArray1[1] = (Number) long0;
      assertNotNull(numberArray1[1]);
      assertEquals(16384L, numberArray1[1].longValue());
      assertEquals(0, numberArray1[1].byteValue());
      assertEquals(16384, numberArray1[1].intValue());
      assertEquals(16384.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(16384.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(16384, numberArray1[1].shortValue());
      
      int int1 = KeyEvent.VK_CIRCUMFLEX;
      assertEquals(514, int1);
      assertFalse(int1 == int0);
      
      numberArray1[2] = (Number) int1;
      assertNotNull(numberArray1[2]);
      assertEquals(514.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(514.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[2].byteValue());
      assertEquals(514, numberArray1[2].intValue());
      assertEquals(514L, numberArray1[2].longValue());
      assertEquals(514, numberArray1[2].shortValue());
      
      int int2 = KeyEvent.VK_HIRAGANA;
      assertEquals(242, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      numberArray1[3] = (Number) int2;
      assertNotNull(numberArray1[3]);
      assertEquals(242L, numberArray1[3].longValue());
      assertEquals(-14, numberArray1[3].byteValue());
      assertEquals(242, numberArray1[3].intValue());
      assertEquals(242.0F, numberArray1[3].floatValue(), 0.01F);
      assertEquals(242, numberArray1[3].shortValue());
      assertEquals(242.0, numberArray1[3].doubleValue(), 0.01D);
      
      int int3 = ImageObserver.PROPERTIES;
      assertEquals(4, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      numberArray1[4] = (Number) int3;
      assertNotNull(numberArray1[4]);
      assertEquals(4, numberArray1[4].byteValue());
      assertEquals(4, numberArray1[4].shortValue());
      assertEquals(4.0F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(4L, numberArray1[4].longValue());
      assertEquals(4, numberArray1[4].intValue());
      assertEquals(4.0, numberArray1[4].doubleValue(), 0.01D);
      
      int int4 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      numberArray1[5] = (Number) int4;
      assertNotNull(numberArray1[5]);
      assertEquals(0.0F, numberArray1[5].floatValue(), 0.01F);
      assertEquals(0, numberArray1[5].intValue());
      assertEquals(0L, numberArray1[5].longValue());
      assertEquals(0, numberArray1[5].shortValue());
      assertEquals(0, numberArray1[5].byteValue());
      assertEquals(0.0, numberArray1[5].doubleValue(), 0.01D);
      
      int int5 = SwingConstants.NORTH;
      assertEquals(1, int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      
      numberArray1[6] = (Number) int5;
      assertNotNull(numberArray1[6]);
      assertEquals(1L, numberArray1[6].longValue());
      assertEquals(1, numberArray1[6].byteValue());
      assertEquals(1, numberArray1[6].shortValue());
      assertEquals(1, numberArray1[6].intValue());
      assertEquals(1.0F, numberArray1[6].floatValue(), 0.01F);
      assertEquals(1.0, numberArray1[6].doubleValue(), 0.01D);
      
      int int6 = ImageObserver.SOMEBITS;
      assertEquals(8, int6);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      
      numberArray1[7] = (Number) int6;
      assertNotNull(numberArray1[7]);
      assertEquals(8.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(8, numberArray1[7].intValue());
      assertEquals(8, numberArray1[7].byteValue());
      assertEquals(8, numberArray1[7].shortValue());
      assertEquals(8L, numberArray1[7].longValue());
      assertEquals(8.0, numberArray1[7].doubleValue(), 0.01D);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[3];
      assertNotSame(numberArray2, numberArray1);
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      float float0 = Component.TOP_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      numberArray2[0] = (Number) float0;
      assertNotNull(numberArray2[0]);
      assertEquals(0, numberArray2[0].intValue());
      assertEquals(0.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray2[0].shortValue());
      assertEquals(0, numberArray2[0].byteValue());
      assertEquals(0L, numberArray2[0].longValue());
      assertEquals(0.0F, numberArray2[0].floatValue(), 0.01F);
      
      numberArray2[1] = (Number) int4;
      assertNotNull(numberArray2[1]);
      assertEquals(0L, numberArray2[1].longValue());
      assertEquals(0, numberArray2[1].byteValue());
      assertEquals(0.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(0, numberArray2[1].shortValue());
      assertEquals(0.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(0, numberArray2[1].intValue());
      
      numberArray2[2] = (Number) int1;
      assertNotNull(numberArray2[2]);
      assertEquals(514, numberArray2[2].intValue());
      assertEquals(2, numberArray2[2].byteValue());
      assertEquals(514.0, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(514, numberArray2[2].shortValue());
      assertEquals(514L, numberArray2[2].longValue());
      assertEquals(514.0F, numberArray2[2].floatValue(), 0.01F);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[10];
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) int4;
      assertNotNull(numberArray3[0]);
      assertEquals(0, numberArray3[0].byteValue());
      assertEquals(0.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray3[0].intValue());
      assertEquals(0L, numberArray3[0].longValue());
      assertEquals(0.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(0, numberArray3[0].shortValue());
      
      int int7 = ImageObserver.ALLBITS;
      assertEquals(32, int7);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      
      numberArray3[1] = (Number) int7;
      assertNotNull(numberArray3[1]);
      assertEquals(32.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(32, numberArray3[1].intValue());
      assertEquals(32.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(32, numberArray3[1].byteValue());
      assertEquals(32L, numberArray3[1].longValue());
      assertEquals(32, numberArray3[1].shortValue());
      
      float float1 = Component.BOTTOM_ALIGNMENT;
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      
      numberArray3[2] = (Number) float1;
      assertNotNull(numberArray3[2]);
      assertEquals(1, numberArray3[2].shortValue());
      assertEquals(1L, numberArray3[2].longValue());
      assertEquals(1.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(1.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(1, numberArray3[2].intValue());
      assertEquals(1, numberArray3[2].byteValue());
      
      int int8 = SwingConstants.LEFT;
      assertEquals(2, int8);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int0);
      
      numberArray3[3] = (Number) int8;
      assertNotNull(numberArray3[3]);
      assertEquals(2.0F, numberArray3[3].floatValue(), 0.01F);
      assertEquals(2, numberArray3[3].byteValue());
      assertEquals(2L, numberArray3[3].longValue());
      assertEquals(2, numberArray3[3].shortValue());
      assertEquals(2.0, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(2, numberArray3[3].intValue());
      
      numberArray3[4] = (Number) int1;
      assertNotNull(numberArray3[4]);
      assertEquals(514, numberArray3[4].shortValue());
      assertEquals(514L, numberArray3[4].longValue());
      assertEquals(2, numberArray3[4].byteValue());
      assertEquals(514.0, numberArray3[4].doubleValue(), 0.01D);
      assertEquals(514, numberArray3[4].intValue());
      assertEquals(514.0F, numberArray3[4].floatValue(), 0.01F);
      
      numberArray3[5] = (Number) int3;
      assertNotNull(numberArray3[5]);
      assertEquals(4, numberArray3[5].shortValue());
      assertEquals(4.0, numberArray3[5].doubleValue(), 0.01D);
      assertEquals(4, numberArray3[5].byteValue());
      assertEquals(4L, numberArray3[5].longValue());
      assertEquals(4, numberArray3[5].intValue());
      assertEquals(4.0F, numberArray3[5].floatValue(), 0.01F);
      
      numberArray3[6] = (Number) int2;
      assertNotNull(numberArray3[6]);
      assertEquals(242, numberArray3[6].shortValue());
      assertEquals(242.0, numberArray3[6].doubleValue(), 0.01D);
      assertEquals(-14, numberArray3[6].byteValue());
      assertEquals(242L, numberArray3[6].longValue());
      assertEquals(242, numberArray3[6].intValue());
      assertEquals(242.0F, numberArray3[6].floatValue(), 0.01F);
      
      numberArray3[7] = (Number) int4;
      assertNotNull(numberArray3[7]);
      assertEquals(0.0F, numberArray3[7].floatValue(), 0.01F);
      assertEquals(0.0, numberArray3[7].doubleValue(), 0.01D);
      assertEquals(0, numberArray3[7].shortValue());
      assertEquals(0, numberArray3[7].intValue());
      assertEquals(0, numberArray3[7].byteValue());
      assertEquals(0L, numberArray3[7].longValue());
      
      numberArray3[8] = (Number) int1;
      assertNotNull(numberArray3[8]);
      assertEquals(514, numberArray3[8].shortValue());
      assertEquals(514L, numberArray3[8].longValue());
      assertEquals(514.0, numberArray3[8].doubleValue(), 0.01D);
      assertEquals(514.0F, numberArray3[8].floatValue(), 0.01F);
      assertEquals(2, numberArray3[8].byteValue());
      assertEquals(514, numberArray3[8].intValue());
      
      numberArray3[9] = (Number) int0;
      assertNotNull(numberArray3[9]);
      assertEquals(8.0F, numberArray3[9].floatValue(), 0.01F);
      assertEquals(8.0, numberArray3[9].doubleValue(), 0.01D);
      assertEquals(8, numberArray3[9].byteValue());
      assertEquals(8, numberArray3[9].shortValue());
      assertEquals(8, numberArray3[9].intValue());
      assertEquals(8L, numberArray3[9].longValue());
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      Number[] numberArray4 = new Number[5];
      assertNotSame(numberArray4, numberArray3);
      assertNotSame(numberArray4, numberArray2);
      assertNotSame(numberArray4, numberArray1);
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) int2;
      assertNotNull(numberArray4[0]);
      assertEquals(-14, numberArray4[0].byteValue());
      assertEquals(242, numberArray4[0].intValue());
      assertEquals(242L, numberArray4[0].longValue());
      assertEquals(242.0, numberArray4[0].doubleValue(), 0.01D);
      assertEquals(242.0F, numberArray4[0].floatValue(), 0.01F);
      assertEquals(242, numberArray4[0].shortValue());
      
      numberArray4[1] = (Number) int3;
      assertNotNull(numberArray4[1]);
      assertEquals(4, numberArray4[1].byteValue());
      assertEquals(4, numberArray4[1].shortValue());
      assertEquals(4L, numberArray4[1].longValue());
      assertEquals(4.0F, numberArray4[1].floatValue(), 0.01F);
      assertEquals(4.0, numberArray4[1].doubleValue(), 0.01D);
      assertEquals(4, numberArray4[1].intValue());
      
      numberArray4[2] = (Number) int0;
      assertNotNull(numberArray4[2]);
      assertEquals(8, numberArray4[2].shortValue());
      assertEquals(8L, numberArray4[2].longValue());
      assertEquals(8, numberArray4[2].byteValue());
      assertEquals(8.0, numberArray4[2].doubleValue(), 0.01D);
      assertEquals(8.0F, numberArray4[2].floatValue(), 0.01F);
      assertEquals(8, numberArray4[2].intValue());
      
      numberArray4[3] = (Number) int5;
      assertNotNull(numberArray4[3]);
      assertEquals(1.0, numberArray4[3].doubleValue(), 0.01D);
      assertEquals(1, numberArray4[3].intValue());
      assertEquals(1, numberArray4[3].byteValue());
      assertEquals(1L, numberArray4[3].longValue());
      assertEquals(1, numberArray4[3].shortValue());
      assertEquals(1.0F, numberArray4[3].floatValue(), 0.01F);
      
      numberArray4[4] = (Number) int8;
      assertNotNull(numberArray4[4]);
      assertEquals(2, numberArray4[4].byteValue());
      assertEquals(2L, numberArray4[4].longValue());
      assertEquals(2, numberArray4[4].shortValue());
      assertEquals(2, numberArray4[4].intValue());
      assertEquals(2.0, numberArray4[4].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray4[4].floatValue(), 0.01F);
      
      numberArray0[3] = numberArray4;
      assertNotNull(numberArray0[3]);
      
      Number[] numberArray5 = new Number[9];
      assertNotSame(numberArray5, numberArray2);
      assertNotSame(numberArray5, numberArray3);
      assertNotSame(numberArray5, numberArray4);
      assertNotSame(numberArray5, numberArray1);
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      
      numberArray5[0] = (Number) int2;
      assertNotNull(numberArray5[0]);
      assertEquals(242, numberArray5[0].intValue());
      assertEquals(242L, numberArray5[0].longValue());
      assertEquals(242, numberArray5[0].shortValue());
      assertEquals(242.0, numberArray5[0].doubleValue(), 0.01D);
      assertEquals(242.0F, numberArray5[0].floatValue(), 0.01F);
      assertEquals(-14, numberArray5[0].byteValue());
      
      numberArray5[1] = (Number) int4;
      assertNotNull(numberArray5[1]);
      assertEquals(0, numberArray5[1].intValue());
      assertEquals(0, numberArray5[1].byteValue());
      assertEquals(0, numberArray5[1].shortValue());
      assertEquals(0L, numberArray5[1].longValue());
      assertEquals(0.0F, numberArray5[1].floatValue(), 0.01F);
      assertEquals(0.0, numberArray5[1].doubleValue(), 0.01D);
      
      numberArray5[2] = (Number) int8;
      assertNotNull(numberArray5[2]);
      assertEquals(2L, numberArray5[2].longValue());
      assertEquals(2.0, numberArray5[2].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray5[2].floatValue(), 0.01F);
      assertEquals(2, numberArray5[2].byteValue());
      assertEquals(2, numberArray5[2].shortValue());
      assertEquals(2, numberArray5[2].intValue());
      
      numberArray5[3] = (Number) float1;
      assertNotNull(numberArray5[3]);
      assertEquals(1, numberArray5[3].byteValue());
      assertEquals(1.0F, numberArray5[3].floatValue(), 0.01F);
      assertEquals(1.0, numberArray5[3].doubleValue(), 0.01D);
      assertEquals(1, numberArray5[3].intValue());
      assertEquals(1, numberArray5[3].shortValue());
      assertEquals(1L, numberArray5[3].longValue());
      
      numberArray5[4] = (Number) float1;
      assertNotNull(numberArray5[4]);
      assertEquals(1, numberArray5[4].byteValue());
      assertEquals(1, numberArray5[4].intValue());
      assertEquals(1, numberArray5[4].shortValue());
      assertEquals(1L, numberArray5[4].longValue());
      assertEquals(1.0, numberArray5[4].doubleValue(), 0.01D);
      assertEquals(1.0F, numberArray5[4].floatValue(), 0.01F);
      
      numberArray5[5] = (Number) int7;
      assertNotNull(numberArray5[5]);
      assertEquals(32.0, numberArray5[5].doubleValue(), 0.01D);
      assertEquals(32L, numberArray5[5].longValue());
      assertEquals(32.0F, numberArray5[5].floatValue(), 0.01F);
      assertEquals(32, numberArray5[5].byteValue());
      assertEquals(32, numberArray5[5].intValue());
      assertEquals(32, numberArray5[5].shortValue());
      
      numberArray5[6] = (Number) int5;
      assertNotNull(numberArray5[6]);
      assertEquals(1, numberArray5[6].byteValue());
      assertEquals(1L, numberArray5[6].longValue());
      assertEquals(1, numberArray5[6].intValue());
      assertEquals(1.0, numberArray5[6].doubleValue(), 0.01D);
      assertEquals(1, numberArray5[6].shortValue());
      assertEquals(1.0F, numberArray5[6].floatValue(), 0.01F);
      
      numberArray5[7] = (Number) int5;
      assertNotNull(numberArray5[7]);
      assertEquals(1, numberArray5[7].shortValue());
      assertEquals(1.0, numberArray5[7].doubleValue(), 0.01D);
      assertEquals(1, numberArray5[7].byteValue());
      assertEquals(1L, numberArray5[7].longValue());
      assertEquals(1.0F, numberArray5[7].floatValue(), 0.01F);
      assertEquals(1, numberArray5[7].intValue());
      
      int int9 = ImageObserver.SOMEBITS;
      assertEquals(8, int9);
      assertFalse(int9 == int2);
      assertFalse(int9 == int7);
      assertFalse(int9 == int1);
      assertFalse(int9 == int3);
      assertTrue(int9 == int6);
      assertFalse(int9 == int4);
      assertTrue(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      
      numberArray5[8] = (Number) int9;
      assertNotNull(numberArray5[8]);
      assertEquals(8.0F, numberArray5[8].floatValue(), 0.01F);
      assertEquals(8, numberArray5[8].byteValue());
      assertEquals(8, numberArray5[8].intValue());
      assertEquals(8, numberArray5[8].shortValue());
      assertEquals(8L, numberArray5[8].longValue());
      assertEquals(8.0, numberArray5[8].doubleValue(), 0.01D);
      
      numberArray0[4] = numberArray5;
      assertNotNull(numberArray0[4]);
      
      Number[] numberArray6 = new Number[4];
      assertNotSame(numberArray6, numberArray4);
      assertNotSame(numberArray6, numberArray5);
      assertNotSame(numberArray6, numberArray2);
      assertNotSame(numberArray6, numberArray3);
      assertNotSame(numberArray6, numberArray1);
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[0] = (Number) int1;
      assertNotNull(numberArray6[0]);
      assertEquals(514, numberArray6[0].shortValue());
      assertEquals(514.0, numberArray6[0].doubleValue(), 0.01D);
      assertEquals(514.0F, numberArray6[0].floatValue(), 0.01F);
      assertEquals(514, numberArray6[0].intValue());
      assertEquals(514L, numberArray6[0].longValue());
      assertEquals(2, numberArray6[0].byteValue());
      
      numberArray6[1] = (Number) int1;
      assertNotNull(numberArray6[1]);
      assertEquals(514.0F, numberArray6[1].floatValue(), 0.01F);
      assertEquals(514.0, numberArray6[1].doubleValue(), 0.01D);
      assertEquals(514L, numberArray6[1].longValue());
      assertEquals(2, numberArray6[1].byteValue());
      assertEquals(514, numberArray6[1].shortValue());
      assertEquals(514, numberArray6[1].intValue());
      
      numberArray6[2] = (Number) int5;
      assertNotNull(numberArray6[2]);
      assertEquals(1, numberArray6[2].shortValue());
      assertEquals(1L, numberArray6[2].longValue());
      assertEquals(1, numberArray6[2].byteValue());
      assertEquals(1.0, numberArray6[2].doubleValue(), 0.01D);
      assertEquals(1, numberArray6[2].intValue());
      assertEquals(1.0F, numberArray6[2].floatValue(), 0.01F);
      
      int int10 = ImageObserver.PROPERTIES;
      assertEquals(4, int10);
      assertFalse(int10 == int1);
      assertFalse(int10 == int6);
      assertTrue(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      
      numberArray6[3] = (Number) int10;
      assertNotNull(numberArray6[3]);
      assertEquals(4L, numberArray6[3].longValue());
      assertEquals(4, numberArray6[3].byteValue());
      assertEquals(4, numberArray6[3].intValue());
      assertEquals(4, numberArray6[3].shortValue());
      assertEquals(4.0, numberArray6[3].doubleValue(), 0.01D);
      assertEquals(4.0F, numberArray6[3].floatValue(), 0.01F);
      
      numberArray0[5] = numberArray6;
      assertNotNull(numberArray0[5]);
      
      Number[] numberArray7 = new Number[4];
      assertNotSame(numberArray7, numberArray3);
      assertNotSame(numberArray7, numberArray6);
      assertNotSame(numberArray7, numberArray5);
      assertNotSame(numberArray7, numberArray4);
      assertNotSame(numberArray7, numberArray1);
      assertNotSame(numberArray7, numberArray2);
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray2));
      
      numberArray7[0] = (Number) int8;
      assertNotNull(numberArray7[0]);
      assertEquals(2, numberArray7[0].intValue());
      assertEquals(2, numberArray7[0].shortValue());
      assertEquals(2.0F, numberArray7[0].floatValue(), 0.01F);
      assertEquals(2L, numberArray7[0].longValue());
      assertEquals(2, numberArray7[0].byteValue());
      assertEquals(2.0, numberArray7[0].doubleValue(), 0.01D);
      
      numberArray7[1] = (Number) int6;
      assertNotNull(numberArray7[1]);
      assertEquals(8L, numberArray7[1].longValue());
      assertEquals(8, numberArray7[1].byteValue());
      assertEquals(8.0F, numberArray7[1].floatValue(), 0.01F);
      assertEquals(8.0, numberArray7[1].doubleValue(), 0.01D);
      assertEquals(8, numberArray7[1].intValue());
      assertEquals(8, numberArray7[1].shortValue());
      
      numberArray7[2] = (Number) int8;
      assertNotNull(numberArray7[2]);
      assertEquals(2, numberArray7[2].byteValue());
      assertEquals(2.0F, numberArray7[2].floatValue(), 0.01F);
      assertEquals(2, numberArray7[2].shortValue());
      assertEquals(2, numberArray7[2].intValue());
      assertEquals(2.0, numberArray7[2].doubleValue(), 0.01D);
      assertEquals(2L, numberArray7[2].longValue());
      
      numberArray7[3] = (Number) int8;
      assertNotNull(numberArray7[3]);
      assertEquals(2, numberArray7[3].byteValue());
      assertEquals(2, numberArray7[3].shortValue());
      assertEquals(2, numberArray7[3].intValue());
      assertEquals(2.0, numberArray7[3].doubleValue(), 0.01D);
      assertEquals(2L, numberArray7[3].longValue());
      assertEquals(2.0F, numberArray7[3].floatValue(), 0.01F);
      
      numberArray0[6] = numberArray7;
      assertNotNull(numberArray0[6]);
      
      Number[] numberArray8 = new Number[10];
      assertNotSame(numberArray8, numberArray3);
      assertNotSame(numberArray8, numberArray5);
      assertNotSame(numberArray8, numberArray2);
      assertNotSame(numberArray8, numberArray1);
      assertNotSame(numberArray8, numberArray6);
      assertNotSame(numberArray8, numberArray7);
      assertNotSame(numberArray8, numberArray4);
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray2));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray4));
      
      numberArray8[0] = (Number) int10;
      assertNotNull(numberArray8[0]);
      assertEquals(4, numberArray8[0].byteValue());
      assertEquals(4, numberArray8[0].intValue());
      assertEquals(4.0, numberArray8[0].doubleValue(), 0.01D);
      assertEquals(4, numberArray8[0].shortValue());
      assertEquals(4L, numberArray8[0].longValue());
      assertEquals(4.0F, numberArray8[0].floatValue(), 0.01F);
      
      int int11 = ColorSpace.CS_PYCC;
      assertEquals(1002, int11);
      assertFalse(int11 == int0);
      assertFalse(int11 == int9);
      assertFalse(int11 == int1);
      assertFalse(int11 == int8);
      assertFalse(int11 == int10);
      assertFalse(int11 == int2);
      assertFalse(int11 == int5);
      assertFalse(int11 == int4);
      assertFalse(int11 == int3);
      assertFalse(int11 == int6);
      assertFalse(int11 == int7);
      
      numberArray8[1] = (Number) int11;
      assertNotNull(numberArray8[1]);
      assertEquals(-22, numberArray8[1].byteValue());
      assertEquals(1002.0, numberArray8[1].doubleValue(), 0.01D);
      assertEquals(1002.0F, numberArray8[1].floatValue(), 0.01F);
      assertEquals(1002, numberArray8[1].shortValue());
      assertEquals(1002, numberArray8[1].intValue());
      assertEquals(1002L, numberArray8[1].longValue());
      
      numberArray8[2] = (Number) int9;
      assertNotNull(numberArray8[2]);
      assertEquals(8L, numberArray8[2].longValue());
      assertEquals(8, numberArray8[2].shortValue());
      assertEquals(8.0F, numberArray8[2].floatValue(), 0.01F);
      assertEquals(8, numberArray8[2].byteValue());
      assertEquals(8, numberArray8[2].intValue());
      assertEquals(8.0, numberArray8[2].doubleValue(), 0.01D);
      
      numberArray8[3] = (Number) int6;
      assertNotNull(numberArray8[3]);
      assertEquals(8.0, numberArray8[3].doubleValue(), 0.01D);
      assertEquals(8, numberArray8[3].intValue());
      assertEquals(8L, numberArray8[3].longValue());
      assertEquals(8, numberArray8[3].shortValue());
      assertEquals(8.0F, numberArray8[3].floatValue(), 0.01F);
      assertEquals(8, numberArray8[3].byteValue());
      
      numberArray8[4] = (Number) float1;
      assertNotNull(numberArray8[4]);
      assertEquals(1.0, numberArray8[4].doubleValue(), 0.01D);
      assertEquals(1, numberArray8[4].shortValue());
      assertEquals(1, numberArray8[4].intValue());
      assertEquals(1, numberArray8[4].byteValue());
      assertEquals(1.0F, numberArray8[4].floatValue(), 0.01F);
      assertEquals(1L, numberArray8[4].longValue());
      
      long long1 = AWTEvent.WINDOW_EVENT_MASK;
      assertEquals(64L, long1);
      assertFalse(long1 == long0);
      
      numberArray8[5] = (Number) long1;
      assertNotNull(numberArray8[5]);
      assertEquals(64.0, numberArray8[5].doubleValue(), 0.01D);
      assertEquals(64, numberArray8[5].intValue());
      assertEquals(64.0F, numberArray8[5].floatValue(), 0.01F);
      assertEquals(64, numberArray8[5].byteValue());
      assertEquals(64L, numberArray8[5].longValue());
      assertEquals(64, numberArray8[5].shortValue());
      
      numberArray8[6] = (Number) int1;
      assertNotNull(numberArray8[6]);
      assertEquals(514, numberArray8[6].shortValue());
      assertEquals(514.0, numberArray8[6].doubleValue(), 0.01D);
      assertEquals(514, numberArray8[6].intValue());
      assertEquals(2, numberArray8[6].byteValue());
      assertEquals(514L, numberArray8[6].longValue());
      assertEquals(514.0F, numberArray8[6].floatValue(), 0.01F);
      
      numberArray8[7] = (Number) long0;
      assertNotNull(numberArray8[7]);
      assertEquals(16384.0F, numberArray8[7].floatValue(), 0.01F);
      assertEquals(0, numberArray8[7].byteValue());
      assertEquals(16384, numberArray8[7].shortValue());
      assertEquals(16384, numberArray8[7].intValue());
      assertEquals(16384L, numberArray8[7].longValue());
      assertEquals(16384.0, numberArray8[7].doubleValue(), 0.01D);
      
      numberArray8[8] = (Number) int8;
      assertNotNull(numberArray8[8]);
      assertEquals(2.0F, numberArray8[8].floatValue(), 0.01F);
      assertEquals(2L, numberArray8[8].longValue());
      assertEquals(2, numberArray8[8].intValue());
      assertEquals(2, numberArray8[8].byteValue());
      assertEquals(2.0, numberArray8[8].doubleValue(), 0.01D);
      assertEquals(2, numberArray8[8].shortValue());
      
      numberArray8[9] = (Number) int9;
      assertNotNull(numberArray8[9]);
      assertEquals(8, numberArray8[9].byteValue());
      assertEquals(8.0, numberArray8[9].doubleValue(), 0.01D);
      assertEquals(8.0F, numberArray8[9].floatValue(), 0.01F);
      assertEquals(8, numberArray8[9].intValue());
      assertEquals(8L, numberArray8[9].longValue());
      assertEquals(8, numberArray8[9].shortValue());
      
      numberArray0[7] = numberArray8;
      assertNotNull(numberArray0[7]);
      
      Number[] numberArray9 = new Number[9];
      assertNotSame(numberArray9, numberArray6);
      assertNotSame(numberArray9, numberArray2);
      assertNotSame(numberArray9, numberArray1);
      assertNotSame(numberArray9, numberArray4);
      assertNotSame(numberArray9, numberArray7);
      assertNotSame(numberArray9, numberArray8);
      assertNotSame(numberArray9, numberArray5);
      assertNotSame(numberArray9, numberArray3);
      assertFalse(numberArray9.equals((Object)numberArray6));
      assertFalse(numberArray9.equals((Object)numberArray2));
      assertFalse(numberArray9.equals((Object)numberArray1));
      assertFalse(numberArray9.equals((Object)numberArray4));
      assertFalse(numberArray9.equals((Object)numberArray7));
      assertFalse(numberArray9.equals((Object)numberArray8));
      assertFalse(numberArray9.equals((Object)numberArray5));
      assertFalse(numberArray9.equals((Object)numberArray3));
      
      numberArray9[0] = (Number) int5;
      assertNotNull(numberArray9[0]);
      assertEquals(1, numberArray9[0].shortValue());
      assertEquals(1L, numberArray9[0].longValue());
      assertEquals(1, numberArray9[0].byteValue());
      assertEquals(1, numberArray9[0].intValue());
      assertEquals(1.0F, numberArray9[0].floatValue(), 0.01F);
      assertEquals(1.0, numberArray9[0].doubleValue(), 0.01D);
      
      numberArray9[1] = (Number) int1;
      assertNotNull(numberArray9[1]);
      assertEquals(514L, numberArray9[1].longValue());
      assertEquals(514.0F, numberArray9[1].floatValue(), 0.01F);
      assertEquals(514, numberArray9[1].shortValue());
      assertEquals(514.0, numberArray9[1].doubleValue(), 0.01D);
      assertEquals(514, numberArray9[1].intValue());
      assertEquals(2, numberArray9[1].byteValue());
      
      numberArray9[2] = (Number) long1;
      assertNotNull(numberArray9[2]);
      assertEquals(64L, numberArray9[2].longValue());
      assertEquals(64, numberArray9[2].shortValue());
      assertEquals(64.0, numberArray9[2].doubleValue(), 0.01D);
      assertEquals(64.0F, numberArray9[2].floatValue(), 0.01F);
      assertEquals(64, numberArray9[2].byteValue());
      assertEquals(64, numberArray9[2].intValue());
      
      long long2 = AWTEvent.WINDOW_EVENT_MASK;
      assertEquals(64L, long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      numberArray9[3] = (Number) long2;
      assertNotNull(numberArray9[3]);
      assertEquals(64.0F, numberArray9[3].floatValue(), 0.01F);
      assertEquals(64.0, numberArray9[3].doubleValue(), 0.01D);
      assertEquals(64, numberArray9[3].shortValue());
      assertEquals(64, numberArray9[3].intValue());
      assertEquals(64L, numberArray9[3].longValue());
      assertEquals(64, numberArray9[3].byteValue());
      
      numberArray9[4] = (Number) float0;
      assertNotNull(numberArray9[4]);
      assertEquals(0L, numberArray9[4].longValue());
      assertEquals(0, numberArray9[4].byteValue());
      assertEquals(0.0, numberArray9[4].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray9[4].floatValue(), 0.01F);
      assertEquals(0, numberArray9[4].shortValue());
      assertEquals(0, numberArray9[4].intValue());
      
      numberArray9[5] = (Number) int1;
      assertNotNull(numberArray9[5]);
      assertEquals(2, numberArray9[5].byteValue());
      assertEquals(514.0F, numberArray9[5].floatValue(), 0.01F);
      assertEquals(514, numberArray9[5].intValue());
      assertEquals(514, numberArray9[5].shortValue());
      assertEquals(514L, numberArray9[5].longValue());
      assertEquals(514.0, numberArray9[5].doubleValue(), 0.01D);
      
      numberArray9[6] = (Number) int2;
      assertNotNull(numberArray9[6]);
      assertEquals(242L, numberArray9[6].longValue());
      assertEquals(-14, numberArray9[6].byteValue());
      assertEquals(242.0F, numberArray9[6].floatValue(), 0.01F);
      assertEquals(242, numberArray9[6].shortValue());
      assertEquals(242, numberArray9[6].intValue());
      assertEquals(242.0, numberArray9[6].doubleValue(), 0.01D);
      
      numberArray9[7] = (Number) float1;
      assertNotNull(numberArray9[7]);
      assertEquals(1, numberArray9[7].shortValue());
      assertEquals(1L, numberArray9[7].longValue());
      assertEquals(1.0F, numberArray9[7].floatValue(), 0.01F);
      assertEquals(1, numberArray9[7].byteValue());
      assertEquals(1.0, numberArray9[7].doubleValue(), 0.01D);
      assertEquals(1, numberArray9[7].intValue());
      
      numberArray9[8] = (Number) int6;
      assertNotNull(numberArray9[8]);
      assertEquals(8, numberArray9[8].byteValue());
      assertEquals(8L, numberArray9[8].longValue());
      assertEquals(8.0, numberArray9[8].doubleValue(), 0.01D);
      assertEquals(8, numberArray9[8].intValue());
      assertEquals(8.0F, numberArray9[8].floatValue(), 0.01F);
      assertEquals(8, numberArray9[8].shortValue());
      
      numberArray0[8] = numberArray9;
      assertNotNull(numberArray0[8]);
      
      Number[] numberArray10 = new Number[10];
      assertNotSame(numberArray10, numberArray3);
      assertNotSame(numberArray10, numberArray2);
      assertNotSame(numberArray10, numberArray4);
      assertNotSame(numberArray10, numberArray8);
      assertNotSame(numberArray10, numberArray5);
      assertNotSame(numberArray10, numberArray1);
      assertNotSame(numberArray10, numberArray7);
      assertNotSame(numberArray10, numberArray6);
      assertNotSame(numberArray10, numberArray9);
      assertFalse(numberArray10.equals((Object)numberArray3));
      assertFalse(numberArray10.equals((Object)numberArray2));
      assertFalse(numberArray10.equals((Object)numberArray4));
      assertFalse(numberArray10.equals((Object)numberArray8));
      assertFalse(numberArray10.equals((Object)numberArray5));
      assertFalse(numberArray10.equals((Object)numberArray1));
      assertFalse(numberArray10.equals((Object)numberArray7));
      assertFalse(numberArray10.equals((Object)numberArray6));
      assertFalse(numberArray10.equals((Object)numberArray9));
      
      numberArray10[0] = (Number) int9;
      assertNotNull(numberArray10[0]);
      assertEquals(8L, numberArray10[0].longValue());
      assertEquals(8, numberArray10[0].byteValue());
      assertEquals(8.0F, numberArray10[0].floatValue(), 0.01F);
      assertEquals(8, numberArray10[0].intValue());
      assertEquals(8, numberArray10[0].shortValue());
      assertEquals(8.0, numberArray10[0].doubleValue(), 0.01D);
      
      numberArray10[1] = (Number) long2;
      assertNotNull(numberArray10[1]);
      assertEquals(64, numberArray10[1].shortValue());
      assertEquals(64L, numberArray10[1].longValue());
      assertEquals(64, numberArray10[1].byteValue());
      assertEquals(64.0, numberArray10[1].doubleValue(), 0.01D);
      assertEquals(64, numberArray10[1].intValue());
      assertEquals(64.0F, numberArray10[1].floatValue(), 0.01F);
      
      numberArray10[2] = (Number) long1;
      assertNotNull(numberArray10[2]);
      assertEquals(64, numberArray10[2].byteValue());
      assertEquals(64.0, numberArray10[2].doubleValue(), 0.01D);
      assertEquals(64, numberArray10[2].shortValue());
      assertEquals(64L, numberArray10[2].longValue());
      assertEquals(64.0F, numberArray10[2].floatValue(), 0.01F);
      assertEquals(64, numberArray10[2].intValue());
      
      numberArray10[3] = (Number) int0;
      assertNotNull(numberArray10[3]);
      assertEquals(8.0F, numberArray10[3].floatValue(), 0.01F);
      assertEquals(8, numberArray10[3].intValue());
      assertEquals(8L, numberArray10[3].longValue());
      assertEquals(8, numberArray10[3].byteValue());
      assertEquals(8, numberArray10[3].shortValue());
      assertEquals(8.0, numberArray10[3].doubleValue(), 0.01D);
      
      numberArray10[4] = (Number) int4;
      assertNotNull(numberArray10[4]);
      assertEquals(0, numberArray10[4].byteValue());
      assertEquals(0, numberArray10[4].intValue());
      assertEquals(0, numberArray10[4].shortValue());
      assertEquals(0L, numberArray10[4].longValue());
      assertEquals(0.0F, numberArray10[4].floatValue(), 0.01F);
      assertEquals(0.0, numberArray10[4].doubleValue(), 0.01D);
      
      numberArray10[5] = (Number) int8;
      assertNotNull(numberArray10[5]);
      assertEquals(2, numberArray10[5].byteValue());
      assertEquals(2, numberArray10[5].intValue());
      assertEquals(2, numberArray10[5].shortValue());
      assertEquals(2L, numberArray10[5].longValue());
      assertEquals(2.0, numberArray10[5].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray10[5].floatValue(), 0.01F);
      
      numberArray10[6] = (Number) long1;
      assertNotNull(numberArray10[6]);
      assertEquals(64, numberArray10[6].intValue());
      assertEquals(64L, numberArray10[6].longValue());
      assertEquals(64, numberArray10[6].byteValue());
      assertEquals(64.0F, numberArray10[6].floatValue(), 0.01F);
      assertEquals(64, numberArray10[6].shortValue());
      assertEquals(64.0, numberArray10[6].doubleValue(), 0.01D);
      
      numberArray10[7] = (Number) float0;
      assertNotNull(numberArray10[7]);
      assertEquals(0L, numberArray10[7].longValue());
      assertEquals(0, numberArray10[7].byteValue());
      assertEquals(0, numberArray10[7].intValue());
      assertEquals(0.0, numberArray10[7].doubleValue(), 0.01D);
      assertEquals(0, numberArray10[7].shortValue());
      assertEquals(0.0F, numberArray10[7].floatValue(), 0.01F);
      
      numberArray10[8] = (Number) int6;
      assertNotNull(numberArray10[8]);
      assertEquals(8L, numberArray10[8].longValue());
      assertEquals(8, numberArray10[8].byteValue());
      assertEquals(8, numberArray10[8].intValue());
      assertEquals(8, numberArray10[8].shortValue());
      assertEquals(8.0F, numberArray10[8].floatValue(), 0.01F);
      assertEquals(8.0, numberArray10[8].doubleValue(), 0.01D);
      
      numberArray10[9] = (Number) int0;
      assertNotNull(numberArray10[9]);
      assertEquals(8L, numberArray10[9].longValue());
      assertEquals(8.0, numberArray10[9].doubleValue(), 0.01D);
      assertEquals(8, numberArray10[9].byteValue());
      assertEquals(8, numberArray10[9].shortValue());
      assertEquals(8.0F, numberArray10[9].floatValue(), 0.01F);
      assertEquals(8, numberArray10[9].intValue());
      
      numberArray0[9] = numberArray10;
      assertNotNull(numberArray0[9]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultCategoryDataset0, int5, int11);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1002, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertFalse(int5 == int7);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int10);
      assertFalse(int5 == int8);
      assertFalse(int5 == int2);
      assertFalse(int5 == int11);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int9);
      assertFalse(int11 == int0);
      assertFalse(int11 == int9);
      assertFalse(int11 == int1);
      assertFalse(int11 == int8);
      assertFalse(int11 == int10);
      assertFalse(int11 == int2);
      assertFalse(int11 == int5);
      assertFalse(int11 == int4);
      assertFalse(int11 == int3);
      assertFalse(int11 == int6);
      assertFalse(int11 == int7);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1002, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(9261.0, range0.getCentralValue(), 0.01D);
      assertEquals(18522.0, range0.getLength(), 0.01D);
      assertEquals(18522.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertFalse(int5 == int7);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int10);
      assertFalse(int5 == int8);
      assertFalse(int5 == int2);
      assertFalse(int5 == int11);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int6);
      assertFalse(int5 == int9);
      assertFalse(int11 == int0);
      assertFalse(int11 == int9);
      assertFalse(int11 == int1);
      assertFalse(int11 == int8);
      assertFalse(int11 == int10);
      assertFalse(int11 == int2);
      assertFalse(int11 == int5);
      assertFalse(int11 == int4);
      assertFalse(int11 == int3);
      assertFalse(int11 == int6);
      assertFalse(int11 == int7);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) boolean0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, boolean0);
      assertNull(range0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      int int0 = 1;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      
      Double double1 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) defaultTableXYDataset0);
      assertEquals(Double.NaN, (double)double1, 0.01D);
      assertNotSame(double1, double0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertTrue(double1.equals((Object)double0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) boolean0, (double) int0);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) boolean0, (KeyedValues) defaultPieDataset1);
      assertNotNull(defaultCategoryDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      Double double2 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, (double)double2, 0.01D);
      assertNotSame(double2, double1);
      assertNotSame(double2, double0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(double2.equals((Object)double1));
      assertTrue(double2.equals((Object)double0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, boolean0);
      assertNull(range2);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      double double3 = DatasetUtilities.calculatePieDatasetTotal((PieDataset) defaultPieDataset0);
      assertEquals(0.0, double3, 0.01D);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      // Undeclared exception!
      try {
        defaultStatisticalCategoryDataset0.remove((Comparable) boolean0, (Comparable) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (false) not recognised.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      
      int int0 = 0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYTaskDataset0);
      assertNull(number2);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number3 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number3);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertNotNull(taskSeriesCollection1);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      
      TaskSeries taskSeries0 = taskSeriesCollection0.getSeries((Comparable) int0);
      assertNull(taskSeries0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYTaskDataset1);
      assertTrue(boolean0);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
  }

  @Test
  public void test19()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = 0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      assertNull(range0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYTaskDataset0);
      assertNull(number1);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertNotNull(taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertNotNull(xYTaskDataset1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYTaskDataset1);
      assertTrue(boolean0);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "QvY$~S*\"bkmoeUJI";
      int int0 = 447;
      MatrixSeries matrixSeries0 = new MatrixSeries(string0, int0, int0);
      assertNotNull(matrixSeries0);
      assertEquals(447, matrixSeries0.getColumnsCount());
      assertEquals(199809, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(447, matrixSeries0.getRowCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(447, matrixSeries0.getColumnsCount());
      assertEquals(199809, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(447, matrixSeries0.getRowCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      
      matrixSeries0.zeroAll();
      assertEquals(447, matrixSeries0.getColumnsCount());
      assertEquals(199809, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(447, matrixSeries0.getRowCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, boolean0);
      assertNotNull(range0);
      assertEquals(223.0, range0.getCentralValue(), 0.01D);
      assertEquals(446.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(446.0, range0.getUpperBound(), 0.01D);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(447, matrixSeries0.getColumnsCount());
      assertEquals(199809, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(447, matrixSeries0.getRowCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean1);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(447, matrixSeries0.getColumnsCount());
      assertEquals(199809, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(447, matrixSeries0.getRowCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      assertTrue(boolean1 == boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(223.0, range1.getCentralValue(), 0.01D);
      assertEquals(446.0, range1.getLength(), 0.01D);
      assertEquals(0.0, range1.getLowerBound(), 0.01D);
      assertEquals(446.0, range1.getUpperBound(), 0.01D);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(447, matrixSeries0.getColumnsCount());
      assertEquals(199809, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(447, matrixSeries0.getRowCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean2 = false;
      assertTrue(boolean2 == boolean1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) taskSeriesCollection0, boolean2);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertTrue(boolean2 == boolean1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      boolean boolean3 = false;
      assertTrue(boolean3 == boolean1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) list0, range0, boolean0);
      assertNull(range3);
      assertNotSame(range0, range1);
      assertEquals(223.0, range0.getCentralValue(), 0.01D);
      assertEquals(446.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(446.0, range0.getUpperBound(), 0.01D);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(447, matrixSeries0.getColumnsCount());
      assertEquals(199809, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(447, matrixSeries0.getRowCount());
      assertEquals(false, matrixSeries0.isEmpty());
      assertEquals(true, matrixSeries0.getNotify());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(range0.equals((Object)range1));
      assertTrue(boolean0 == boolean1);
      
      int int1 = 47;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean2);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertTrue(boolean2 == boolean1);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, boolean3);
      assertNull(range4);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertTrue(boolean3 == boolean1);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue((XYDataset) xYIntervalSeriesCollection0);
      assertNull(number1);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test21()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      int int0 = SwingConstants.NORTH_EAST;
      assertEquals(2, int0);
      
      String string0 = "Category 8";
      boolean boolean0 = true;
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, (Number) int0, string0, boolean0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int1 = timeTableXYDataset0.getSeriesCount();
      assertEquals(1, int1);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(int1 == int0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertEquals(2.0, (double)double0, 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean1 = timeTableXYDataset0.equals((Object) timeTableXYDataset0);
      assertTrue(boolean1);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(2.0, range0.getLength(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      String string1 = range0.toString();
      assertEquals("Range[0.0,2.0]", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(2.0, range0.getLength(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(string1.equals((Object)string0));
      
      double double1 = (-2.147483648E9);
      Double double2 = (Double)DatasetUtilities.findMinimumDomainValue((XYDataset) timeTableXYDataset0);
      assertEquals(1.39240928132E12, (double)double2, 0.01D);
      assertNotSame(double2, double0);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(double2.equals((Object)double0));
      assertFalse(double2.equals((Object)double1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2.0, range1.getUpperBound(), 0.01D);
      assertEquals(2.0, range1.getCentralValue(), 0.01D);
      assertEquals(2.0, range1.getLowerBound(), 0.01D);
      assertEquals(0.0, range1.getLength(), 0.01D);
      assertFalse(range1.equals((Object)range0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      double double3 = 0.0;
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, double3);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(2.0, range2.getUpperBound(), 0.01D);
      assertEquals(1.0, range2.getCentralValue(), 0.01D);
      assertEquals(2.0, range2.getLength(), 0.01D);
      assertEquals(0.0, range2.getLowerBound(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(double3 == double1);
      
      double double4 = range2.getCentralValue();
      assertEquals(1.0, double4, 0.01D);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(2.0, range2.getUpperBound(), 0.01D);
      assertEquals(1.0, range2.getCentralValue(), 0.01D);
      assertEquals(2.0, range2.getLength(), 0.01D);
      assertEquals(0.0, range2.getLowerBound(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(int1 == int0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) double1, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(int1 == int0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(0.0, range3.getLength(), 0.01D);
      assertEquals(2.0, range3.getLowerBound(), 0.01D);
      assertEquals(2.0, range3.getUpperBound(), 0.01D);
      assertEquals(2.0, range3.getCentralValue(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      
      int int2 = 2381;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) string1);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(string1, string0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(2.0, range0.getLength(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(string1.equals((Object)string0));
      
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      
      boolean boolean2 = false;
      assertFalse(boolean2 == boolean1);
      
      int int3 = timeTableXYDataset0.getItemCount();
      assertEquals(1, int3);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) list0, boolean2);
      assertNull(range4);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = range0.intersects(double1, double1);
      assertFalse(boolean3);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(2.0, range0.getLength(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      
      Range range5 = DatasetUtilities.iterateXYRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range5);
      assertNotSame(range5, range2);
      assertNotSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertEquals(2.0, range5.getCentralValue(), 0.01D);
      assertEquals(2.0, range5.getLowerBound(), 0.01D);
      assertEquals(0.0, range5.getLength(), 0.01D);
      assertEquals(2.0, range5.getUpperBound(), 0.01D);
      assertEquals(1, timeTableXYDataset0.getSeriesCount());
      assertEquals(1, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
  }

  @Test
  public void test22()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      
      int int0 = timeTableXYDataset0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      
      boolean boolean0 = timeTableXYDataset0.equals((Object) timeTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      
      String string0 = range0.toString();
      assertEquals("Range[0.0,0.0]", string0);
      assertNotNull(string0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      
      double double0 = (-2.147483648E9);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = (double) int0;
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      
      doubleArray1[3] = double0;
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector0, boolean0);
      assertNull(range1);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      doubleArray1[4] = double0;
      double double1 = (-961.0462);
      doubleArray1[5] = double1;
      doubleArray1[6] = (double) int0;
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      
      doubleArray1[7] = (double) int0;
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Double double2 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, (double)double2, 0.01D);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(double2.equals((Object)double1));
      assertFalse(double2.equals((Object)double0));
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      double double3 = (-1.0);
      Double double4 = (Double)DatasetUtilities.findMinimumDomainValue((XYDataset) timeTableXYDataset0);
      assertEquals(Double.NaN, (double)double4, 0.01D);
      assertNotSame(double4, double2);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertFalse(double4.equals((Object)double3));
      assertFalse(double4.equals((Object)double0));
      assertFalse(double4.equals((Object)double1));
      assertFalse(double4.equals((Object)double2));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      
      int int1 = 2381;
      assertFalse(int1 == int0);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range2);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(int0 == int1);
      
      double double5 = 139.022262358;
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, double5);
      assertNotNull(range3);
      assertNotSame(range3, range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1.0737416849777377E9), range3.getCentralValue(), 0.01D);
      assertEquals(139.022262358, range3.getUpperBound(), 0.01D);
      assertEquals((-2.1474835089777377E9), range3.getLowerBound(), 0.01D);
      assertEquals(2.147483648E9, range3.getLength(), 0.01D);
      assertFalse(double5 == double1);
      assertFalse(double5 == double0);
      assertFalse(double5 == double3);
      assertFalse(range3.equals((Object)range0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, int1);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int1 == int0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      boolean boolean1 = false;
      assertFalse(boolean1 == boolean0);
      
      int int2 = timeTableXYDataset0.getItemCount();
      assertEquals(0, int2);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) list0, boolean1);
      assertNull(range4);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range0.intersects(double0, double0);
      assertFalse(boolean2);
      assertNotSame(range0, range3);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double3);
      assertFalse(range0.equals((Object)range3));
      
      Range range5 = DatasetUtilities.iterateXYRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range5);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
  }

  @Test
  public void test23()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
      assertNull(range1);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      boolean boolean1 = true;
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, boolean1);
      assertNotNull(range2);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01D);
      assertEquals(0.0, range2.getLength(), 0.01D);
      assertEquals(0.0, range2.getUpperBound(), 0.01D);
      assertEquals(0.0, range2.getCentralValue(), 0.01D);
      
      PieDataset pieDataset0 = null;
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double double0 = 0.0;
      // Undeclared exception!
      try {
        Range range3 = Range.shift(range1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(number1);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      int int0 = 17;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range2);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      List list0 = defaultMultiValueCategoryDataset1.getColumnKeys();
      assertNotNull(list0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = false;
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
      assertNull(range3);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, boolean0);
      assertNull(range4);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Number number2 = DatasetUtilities.findMaximumDomainValue((XYDataset) defaultWindDataset0);
      assertNull(number2);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      PieDataset pieDataset0 = null;
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double double0 = 0.0;
      // Undeclared exception!
      try {
        Range range5 = Range.shift(range3, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(number1);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      List list0 = defaultMultiValueCategoryDataset1.getColumnKeys();
      assertNotNull(list0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
      assertNull(range1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, boolean0);
      assertNull(range2);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset1.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset1.getRowCount());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      double double0 = 0.0;
  }

  @Test
  public void test26()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = null;
      int int0 = (-64);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertNotNull(taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      
      int int1 = 120;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection1, int1, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(-64, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(120, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = slidingGanttCategoryDataset0.getRowCount();
      assertEquals(0, int2);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(-64, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(120, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(-64, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(120, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
      assertNull(range1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(-64, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(120, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try {
        Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double double0 = (-789.8);
      double double1 = 0.0;
      double double2 = (-105.950925076915);
      double double3 = 0.0;
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = double2;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      doubleArray1[1] = double2;
      doubleArray1[2] = double2;
      doubleArray1[4] = double2;
      doubleArray1[5] = double0;
      doubleArray1[6] = double2;
      doubleArray1[7] = double3;
      double double4 = 0.0;
      doubleArray1[8] = double4;
      double double5 = 1.0;
      doubleArray1[9] = double5;
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray2 = new double[1];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[8];
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = double2;
      doubleArray3[1] = double4;
      doubleArray3[2] = double1;
      doubleArray3[3] = double0;
      doubleArray3[5] = doubleArray1[6];
      doubleArray3[6] = double3;
      doubleArray3[7] = double3;
      doubleArray0[4] = doubleArray3;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray4 = new double[5];
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[1] = double1;
      doubleArray4[2] = double4;
      doubleArray4[3] = double4;
      double double6 = 0.8;
      doubleArray4[4] = double6;
      doubleArray0[4] = doubleArray4;
      assertNotNull(doubleArray0[4]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      
      Double double7 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals((-105.950925076915), (double)double7, 0.01D);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(double7.equals((Object)double5));
      assertFalse(double7.equals((Object)double1));
      assertFalse(double7.equals((Object)double6));
      assertTrue(double7.equals((Object)double2));
      assertFalse(double7.equals((Object)double3));
      assertFalse(double7.equals((Object)double4));
      assertFalse(double7.equals((Object)double0));
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = ImageObserver.PROPERTIES;
      assertEquals(4, int0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) int0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) int1;
      assertNotNull(numberArray1[0]);
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0L, numberArray1[0].longValue());
      assertEquals(0, numberArray1[0].shortValue());
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      
      numberArray1[1] = (Number) int1;
      assertNotNull(numberArray1[1]);
      assertEquals(0.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[1].longValue());
      assertEquals(0.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[1].intValue());
      assertEquals(0, numberArray1[1].shortValue());
      assertEquals(0, numberArray1[1].byteValue());
      
      numberArray1[2] = (Number) int1;
      assertNotNull(numberArray1[2]);
      assertEquals(0.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(0, numberArray1[2].intValue());
      assertEquals(0, numberArray1[2].shortValue());
      assertEquals(0L, numberArray1[2].longValue());
      assertEquals(0, numberArray1[2].byteValue());
      
      numberArray1[4] = (Number) int1;
      assertNotNull(numberArray1[4]);
      assertEquals(0, numberArray1[4].byteValue());
      assertEquals(0.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(0L, numberArray1[4].longValue());
      assertEquals(0, numberArray1[4].shortValue());
      assertEquals(0, numberArray1[4].intValue());
      assertEquals(0.0F, numberArray1[4].floatValue(), 0.01F);
      
      numberArray1[6] = (Number) int1;
      assertNotNull(numberArray1[6]);
      assertEquals(0.0F, numberArray1[6].floatValue(), 0.01F);
      assertEquals(0, numberArray1[6].intValue());
      assertEquals(0, numberArray1[6].shortValue());
      assertEquals(0L, numberArray1[6].longValue());
      assertEquals(0.0, numberArray1[6].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[6].byteValue());
      
      numberArray1[7] = (Number) int1;
      assertNotNull(numberArray1[7]);
      assertEquals(0, numberArray1[7].byteValue());
      assertEquals(0L, numberArray1[7].longValue());
      assertEquals(0.0, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[7].intValue());
      assertEquals(0.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(0, numberArray1[7].shortValue());
      
      numberArray0[1] = numberArray1;
      assertNotNull(numberArray0[1]);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, tableOrder0, int1);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) int1, (double) int1, int1);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(int1 == int0);
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      String string0 = "Null 'dataset' argument.";
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = (-2140.56);
      doubleArray1[1] = double1;
      double double2 = (-1873.1);
      doubleArray1[2] = double2;
      double double3 = 1746.917366404584;
      doubleArray1[3] = double3;
      double double4 = 12.99278546931987;
      doubleArray1[5] = double4;
      double double5 = 0.0;
      doubleArray1[5] = double5;
      doubleArray1[6] = doubleArray1[1];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[6];
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = double2;
      doubleArray2[1] = double3;
      doubleArray2[2] = double4;
      double double6 = 4145.0;
      doubleArray2[3] = double6;
      doubleArray2[4] = double1;
      doubleArray2[5] = double0;
      double[] doubleArray3 = new double[1];
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = double6;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      Date date0 = null;
      int int0 = 477;
      String string1 = "SEQTGyF|TjK:myx;-N";
      assertNotSame(string1, string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string1);
      assertNotNull(simpleTimeZone0);
      assertNotSame(string1, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=SEQTGyF|TjK:myx;-N,offset=477,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("SEQTGyF|TjK:myx;-N", simpleTimeZone0.getID());
      assertEquals(477, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertFalse(string1.equals((Object)string0));
      
      Day day0 = null;
      try {
        day0 = new Day(date0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }
}
