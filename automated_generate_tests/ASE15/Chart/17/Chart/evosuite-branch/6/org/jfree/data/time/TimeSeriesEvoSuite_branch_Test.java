/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:43:03 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.event.InputEvent;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("Overwritten values from: ", zoneInfo0.getID());
      
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Overwritten values from: ", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409281000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Overwritten values from: ", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409281000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570881L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Overwritten values from: ", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals((-1893250945), int1);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int1 = timeSeries0.hashCode();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(359697985, int1);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 754;
      String string0 = null;
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDomainDescription());
      
      int int1 = timeSeries0.hashCode();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-957834513), int1);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDomainDescription());
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int0 = 1743;
//       timeSeries0.setMaximumItemCount(int0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(1743, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(boolean0);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1743, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//   }

  @Test
  public void test04()  throws Throwable  {
      String string0 = ")Fg";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(")Fg", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(")Fg", timeSeries1.getDomainDescription());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(")Fg", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(")Fg", timeSeries1.getDomainDescription());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       String string0 = "W1qo-RUzCqD-cQE!c6y";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Second second1 = (Second)second0.previous();
//       assertNotSame(second0, second1);
//       assertNotSame(second1, second0);
//       assertNotNull(second1);
//       assertFalse(second0.equals((Object)second1));
//       assertFalse(second1.equals((Object)second0));
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409280000L, second1.getFirstMillisecond());
//       assertEquals(20, second1.getSecond());
//       assertEquals(1392409280999L, second1.getLastMillisecond());
//       assertEquals(3601570880L, second1.getSerialIndex());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second1, (RegularTimePeriod) second0);
//       assertNotSame(second0, second1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(second1, second0);
//       assertNotNull(timeSeries1);
//       assertFalse(second0.equals((Object)second1));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(second1.equals((Object)second0));
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1392409280000L, second1.getFirstMillisecond());
//       assertEquals(20, second1.getSecond());
//       assertEquals(1392409280999L, second1.getLastMillisecond());
//       assertEquals(3601570880L, second1.getSerialIndex());
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       
//       Hour hour0 = minute0.getHour();
//       assertNotNull(hour0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       long long0 = (-1065L);
//       SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(long0, long0);
//       assertNotNull(simpleTimePeriod0);
//       
//       MockDate mockDate0 = (MockDate)simpleTimePeriod0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(fixedMillisecond1);
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start on or before end.
//          //
//       }
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       int int0 = 130;
//       String string0 = null;
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       Day day0 = minute0.getDay();
//       assertNotNull(day0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       RegularTimePeriod regularTimePeriod0 = null;
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, regularTimePeriod0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 100;
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      String string0 = ",TU3z5D<R8E_c";
      Second second0 = Second.parseSecond(string0);
      assertNull(second0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 130;
      String string0 = null;
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1745;
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int1 = 156;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = ")Fg";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int0 = (-2452);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "/";
      int int0 = (-526);
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("/", timeSeries0.getRangeDescription());
      assertEquals("/", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int1 = (-4193);
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(3601570860L, second0.getSerialIndex());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(60026181L, minute0.getSerialIndex());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) second0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) minute0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotNull(timeSeries2);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertNull(timeSeries2.getDescription());
      assertEquals(true, timeSeries2.getNotify());
      
      timeSeries1.clear();
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "x=c";
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("x=c", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("x=c", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.clear();
      assertEquals("x=c", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("x=c", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test18()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = timeSeries0.getMaximumItemCount();
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) month0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean1 = true;
      timeSeries0.removeAgedItems((long) int0, boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       String string0 = "2";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       boolean boolean0 = timeSeries0.equals((Object) string0);
//       assertFalse(boolean0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       int int1 = 10;
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) second0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       
//       timeSeries1.setMaximumItemAge((long) int1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(int1 == int0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(10L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) second0, (double) int0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(int0 == int1);
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(10L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       
//       timeSeries1.removeAgedItems((long) int0, boolean0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(int0 == int1);
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(10L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//   }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       String string0 = "x=c";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("x=c", timeSeries0.getRangeDescription());
//       assertEquals("x=c", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       int int1 = timeSeries0.getItemCount();
//       assertFalse(int1 == int0);
//       assertEquals(0, int1);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("x=c", timeSeries0.getRangeDescription());
//       assertEquals("x=c", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) second0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       
//       boolean boolean0 = true;
//       timeSeries1.removeAgedItems((long) int1, boolean0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(int1 == int0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("x=c", timeSeries0.getRangeDescription());
//       assertEquals("x=c", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       
//       timeSeries1.removeAgedItems((long) int0, boolean0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//   }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       String string0 = "x=c";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("x=c", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("x=c", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       int int1 = timeSeries0.getItemCount();
//       assertFalse(int1 == int0);
//       assertEquals(0, int1);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("x=c", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("x=c", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int1 == int0);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("x=c", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("x=c", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int0 == int1);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("x=c", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("x=c", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//   }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-25);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       int int0 = timeSeries0.getMaximumItemCount();
//       assertEquals(Integer.MAX_VALUE, int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) month0, (Number) int0, boolean0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//   }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       String string0 = "W1qo-RUzCqD-cQE!c6y";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       
//       timeSeries0.update((RegularTimePeriod) second0, (Number) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//   }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       String string0 = "W1qo-RUzCqD-cQE!c6y";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) second0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // TimeSeries.update(TimePeriod, Number):  period does not exist.
//          //
//       }
//   }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       
//       int int0 = 1743;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Mar 21 20:32:03 GMT 3793", mockDate0.toString());
//       
//       String string0 = "The 'month' argument must be in the range 1 to 12.";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(1743, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=The 'month' argument must be in the range 1 to 12.,offset=1743,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("The 'month' argument must be in the range 1 to 12.", simpleTimeZone0.getID());
//       
//       Month month1 = (Month)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) simpleTimeZone0);
//       assertNotSame(month1, month0);
//       assertNotNull(month1);
//       assertFalse(month1.equals((Object)month0));
//       assertEquals("Thu Mar 21 20:32:03 GMT 3793", mockDate0.toString());
//       assertEquals(1743, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=The 'month' argument must be in the range 1 to 12.,offset=1743,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("The 'month' argument must be in the range 1 to 12.", simpleTimeZone0.getID());
//       assertEquals(3, month1.getMonth());
//       assertEquals(57536179198256L, month1.getLastMillisecond());
//       assertEquals(3793, month1.getYearValue());
//       assertEquals(57533500798257L, month1.getFirstMillisecond());
//       assertEquals(45519L, month1.getSerialIndex());
//       
//       int int1 = InputEvent.SHIFT_MASK;
//       assertFalse(int1 == int0);
//       assertEquals(1, int1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (Number) int1);
//       assertNotSame(month0, month1);
//       assertNotSame(month1, month0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int0 == int1);
//       assertFalse(month0.equals((Object)month1));
//       assertFalse(int1 == int0);
//       assertFalse(month1.equals((Object)month0));
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals("Thu Mar 21 20:32:03 GMT 3793", mockDate0.toString());
//       assertEquals(1743, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=The 'month' argument must be in the range 1 to 12.,offset=1743,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("The 'month' argument must be in the range 1 to 12.", simpleTimeZone0.getID());
//       assertEquals(3, month1.getMonth());
//       assertEquals(57536179198256L, month1.getLastMillisecond());
//       assertEquals(3793, month1.getYearValue());
//       assertEquals(57533500798257L, month1.getFirstMillisecond());
//       assertEquals(45519L, month1.getSerialIndex());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       
//       timeSeries0.add((RegularTimePeriod) month0, (double) int0);
//       assertNotSame(month0, month1);
//       assertFalse(int0 == int1);
//       assertFalse(month0.equals((Object)month1));
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//   }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int0 = 1743;
//       int int1 = InputEvent.SHIFT_MASK;
//       assertFalse(int1 == int0);
//       assertEquals(1, int1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int1);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int1 == int0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) month0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) minute0);
      assertNull(number0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = Calendar.ALL_STYLES;
      assertEquals(0, int0);
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        timeSeries0.delete(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      
      Second second0 = new Second(int0, minute0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570860L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409260999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570860L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409260999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(3601570860L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409260999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) minute0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(3601570860L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409260999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(3601570860L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409260999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(3601570860L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409260999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(3601570860L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409260999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-3);
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(-3, second0.getSecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(-3, second0.getSecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(-3, second0.getSecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) minute0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(-3, second0.getSecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries2);
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertNull(timeSeries2.getDescription());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(-3, second0.getSecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(timeSeries1.getDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(collection0);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(-3, second0.getSecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(timeSeries1.getDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       int int0 = InputEvent.SHIFT_MASK;
//       assertEquals(1, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertNotNull(collection0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       int int0 = timeSeries0.getMaximumItemCount();
//       assertEquals(Integer.MAX_VALUE, int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) month0, (Number) int0, boolean0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) month0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//   }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409260999L, second0.getLastMillisecond());
      assertEquals(3601570860L, second0.getSerialIndex());
      assertEquals(1392409260000L, second0.getFirstMillisecond());
      
      long long0 = (-1411L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       String string0 = "W1qo-RUzCqD-cQE!c6y";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       int int1 = 0;
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int1 == int0);
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("W1qo-RUzCqD-cQE!c6y", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//   }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-3);
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = new Minute((Date) mockDate0);
      assertNotNull(minute0);
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Second second0 = new Second(int0, minute0);
      assertNotNull(second0);
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(-3, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertNotNull(timeSeries0);
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1392409257000L, second0.getFirstMillisecond());
      assertEquals(1392409257999L, second0.getLastMillisecond());
      assertEquals(3601570857L, second0.getSerialIndex());
      assertEquals(-3, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       String string0 = "2";
//       int int0 = (-508);
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       
//       Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) second0);
//       assertEquals((-508.0), (double)double0, 0.01D);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//   }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 59;
      String string0 = "*!ABcF}b$@3\"aI";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries1.getRangeDescription());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "x=c";
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("x=c", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("x=c", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("x=c", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("x=c", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 59;
      String string0 = "*!ABcF}b$@3\"aI";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getDomainDescription());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       int int0 = timeSeries0.getMaximumItemCount();
//       assertEquals(Integer.MAX_VALUE, int0);
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//   }

  @Test
  public void test42()  throws Throwable  {
      String string0 = ")Fg";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.setDomainDescription(string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(")Fg", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "z3&CDw|WpAwGLJ!";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      int int0 = (-4);
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       
//       Class<Integer> class0 = Integer.class;
//       String string0 = "@&hse^'Pm:]mOM<i";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) month0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       Class<Month> class0 = Month.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(boolean0);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//   }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 59;
      String string0 = "*!ABcF}b$@3\"aI";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getDomainDescription());
      
      timeSeries0.setRangeDescription(string0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("*!ABcF}b$@3\"aI", timeSeries0.getDomainDescription());
  }
}
