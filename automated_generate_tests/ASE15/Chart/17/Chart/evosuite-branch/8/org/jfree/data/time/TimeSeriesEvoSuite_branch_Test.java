/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:04:52 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.event.KeyEvent;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.SwingConstants;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      //  // Unstable assertion: assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Year year1 = (Year)year0.previous();
      //  // Unstable assertion: assertNotNull(year1);
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertEquals(2013, year1.getYear());
      //  // Unstable assertion: assertEquals(2013L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1356998400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2013", year1.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries1.addOrUpdate((RegularTimePeriod) year1, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertEquals(2013, year1.getYear());
      //  // Unstable assertion: assertEquals(2013L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1356998400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2013", year1.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-3437894), int1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 3;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Apr 03 03:03:03 GMT 1903", mockDate0.toString());
//       
//       Class<Hour> class0 = Hour.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       
//       String string0 = "xit<:#i`3/[nQJv@";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Hour hour0 = (Hour)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
//       assertNotNull(hour0);
//       assertEquals(1903, hour0.getYear());
//       assertEquals((-2106421200000L), hour0.getFirstMillisecond());
//       assertEquals(3, hour0.getHour());
//       assertEquals(3, hour0.getDayOfMonth());
//       assertEquals((-2106417600001L), hour0.getLastMillisecond());
//       assertEquals(4, hour0.getMonth());
//       assertEquals(28539L, hour0.getSerialIndex());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Apr 03 03:03:03 GMT 1903", mockDate0.toString());
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) hour0, (double) int0, boolean0);
//       assertEquals(1903, hour0.getYear());
//       assertEquals((-2106421200000L), hour0.getFirstMillisecond());
//       assertEquals(3, hour0.getHour());
//       assertEquals(3, hour0.getDayOfMonth());
//       assertEquals((-2106417600001L), hour0.getLastMillisecond());
//       assertEquals(4, hour0.getMonth());
//       assertEquals(28539L, hour0.getSerialIndex());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Apr 03 03:03:03 GMT 1903", mockDate0.toString());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals((-2103445566), int1);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "org.jfree.data.time.RegularTimePeriod";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 400;
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance(int0);
      assertNotNull(spreadsheetDate0);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      assertNotNull(day0);
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(400L, day0.getSerialIndex());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(400L, day0.getSerialIndex());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      String string0 = "clonIe";
      Minute minute0 = Minute.parseMinute(string0);
      assertNull(minute0);
      
      boolean boolean0 = timeSeries0.equals((Object) minute0);
      assertFalse(boolean0);
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(400L, day0.getSerialIndex());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = timeSeries0.hashCode();
      assertEquals(359697985, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       
//       Second second1 = (Second)second0.next();
//       assertNotNull(second1);
//       assertNotSame(second1, second0);
//       assertNotSame(second0, second1);
//       assertEquals(3601570882L, second1.getSerialIndex());
//       assertEquals(1392409282000L, second1.getFirstMillisecond());
//       assertEquals(1392409282999L, second1.getLastMillisecond());
//       assertEquals(22, second1.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertFalse(second1.equals((Object)second0));
//       assertFalse(second0.equals((Object)second1));
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) second1);
//       assertNotNull(timeSeries0);
//       assertNotSame(second1, second0);
//       assertNotSame(second0, second1);
//       assertEquals(3601570882L, second1.getSerialIndex());
//       assertEquals(1392409282000L, second1.getFirstMillisecond());
//       assertEquals(1392409282999L, second1.getLastMillisecond());
//       assertEquals(22, second1.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertFalse(second1.equals((Object)second0));
//       assertFalse(second0.equals((Object)second1));
//       
//       double double0 = 0.0;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second1, double0);
//       assertNull(timeSeriesDataItem0);
//       assertNotSame(second1, second0);
//       assertNotSame(second0, second1);
//       assertEquals(3601570882L, second1.getSerialIndex());
//       assertEquals(1392409282000L, second1.getFirstMillisecond());
//       assertEquals(1392409282999L, second1.getLastMillisecond());
//       assertEquals(22, second1.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertFalse(second1.equals((Object)second0));
//       assertFalse(second0.equals((Object)second1));
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second1);
//       assertNotNull(timeSeries1);
//       assertNotSame(second1, second0);
//       assertNotSame(second0, second1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(3601570882L, second1.getSerialIndex());
//       assertEquals(1392409282000L, second1.getFirstMillisecond());
//       assertEquals(1392409282999L, second1.getLastMillisecond());
//       assertEquals(22, second1.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertFalse(second1.equals((Object)second0));
//       assertFalse(second0.equals((Object)second1));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test07()  throws Throwable  {
      int int0 = (-283);
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      assertNotNull(millisecond0);
      assertEquals(717L, millisecond0.getMillisecond());
      assertEquals(2209161599717L, millisecond0.getSerialIndex());
      assertEquals((-283L), millisecond0.getLastMillisecond());
      assertEquals((-283L), millisecond0.getFirstMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotNull(millisecond1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertEquals(717L, millisecond0.getMillisecond());
      assertEquals(2209161599717L, millisecond0.getSerialIndex());
      assertEquals((-283L), millisecond0.getLastMillisecond());
      assertEquals((-283L), millisecond0.getFirstMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(718L, millisecond1.getMillisecond());
      assertEquals((-282L), millisecond1.getFirstMillisecond());
      assertEquals((-282L), millisecond1.getLastMillisecond());
      assertEquals(2209161599718L, millisecond1.getSerialIndex());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond1, (RegularTimePeriod) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       
//       String string0 = null;
//       Week week0 = Week.parseWeek(string0);
//       assertNull(week0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) week0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       long long0 = (-171L);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertNotNull(fixedMillisecond0);
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertNotNull(quarter0);
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       assertEquals((-1L), quarter0.getLastMillisecond());
//       assertEquals(1969, quarter0.getYearValue());
//       assertEquals(7880L, quarter0.getSerialIndex());
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       String string0 = "Null 'end' argument.";
//       Class<Hour> class0 = Hour.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       assertEquals((-1L), quarter0.getLastMillisecond());
//       assertEquals(1969, quarter0.getYearValue());
//       assertEquals(7880L, quarter0.getSerialIndex());
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Null 'end' argument.", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Null 'end' argument.", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       RegularTimePeriod regularTimePeriod0 = null;
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'start' argument.
//          //
//       }
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
//       assertNotNull(timeSeries0);
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int0 = (-1483);
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start >= 0.
//          //
//       }
//   }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = timeSeries0.hashCode();
      assertEquals(359697985, int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 3;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Apr 03 03:03:03 GMT 1903", mockDate0.toString());
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      String string0 = "xit<:#i`3/[nQJv@";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = (Hour)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals(28539L, hour0.getSerialIndex());
      assertEquals(4, hour0.getMonth());
      assertEquals((-2106417600001L), hour0.getLastMillisecond());
      assertEquals(3, hour0.getDayOfMonth());
      assertEquals((-2106421200000L), hour0.getFirstMillisecond());
      assertEquals(1903, hour0.getYear());
      assertEquals(3, hour0.getHour());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Apr 03 03:03:03 GMT 1903", mockDate0.toString());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) hour0, (double) int0, boolean0);
      assertEquals(28539L, hour0.getSerialIndex());
      assertEquals(4, hour0.getMonth());
      assertEquals((-2106417600001L), hour0.getLastMillisecond());
      assertEquals(3, hour0.getDayOfMonth());
      assertEquals((-2106421200000L), hour0.getFirstMillisecond());
      assertEquals(1903, hour0.getYear());
      assertEquals(3, hour0.getHour());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Apr 03 03:03:03 GMT 1903", mockDate0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(28539L, hour0.getSerialIndex());
      assertEquals(4, hour0.getMonth());
      assertEquals((-2106417600001L), hour0.getLastMillisecond());
      assertEquals(3, hour0.getDayOfMonth());
      assertEquals((-2106421200000L), hour0.getFirstMillisecond());
      assertEquals(1903, hour0.getYear());
      assertEquals(3, hour0.getHour());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Apr 03 03:03:03 GMT 1903", mockDate0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      int int1 = 3716;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int1, int1, int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Jun 06 09:56:00 GMT 1900", mockDate0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int1, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertFalse(int1 == int0);
      
      String string0 = "Hit<:#i`3[nQJv@";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = (Hour)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Wed Jun 06 09:56:00 GMT 1900", mockDate0.toString());
      assertEquals(1900, hour0.getYear());
      assertEquals(9, hour0.getHour());
      assertEquals(6, hour0.getDayOfMonth());
      assertEquals((-2195478000000L), hour0.getFirstMillisecond());
      assertEquals(6, hour0.getMonth());
      assertEquals((-2195474400001L), hour0.getLastMillisecond());
      assertEquals(3801L, hour0.getSerialIndex());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Wed Jun 06 09:56:00 GMT 1900", mockDate0.toString());
      assertEquals(1900, hour0.getYear());
      assertEquals(9, hour0.getHour());
      assertEquals(6, hour0.getDayOfMonth());
      assertEquals((-2195478000000L), hour0.getFirstMillisecond());
      assertEquals(6, hour0.getMonth());
      assertEquals((-2195474400001L), hour0.getLastMillisecond());
      assertEquals(3801L, hour0.getSerialIndex());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertNull(timeSeries2.getDescription());
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries0.clear();
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       long long0 = (-199L);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       //  // Unstable assertion: assertNotNull(fixedMillisecond0);
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       String string0 = "Nul1 '#nd' argument.";
//       Class<Hour> class0 = Hour.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Nul1 '#nd' argument.", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Nul1 '#nd' argument.", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       int int0 = 1254;
//       Minute minute0 = new Minute();
//       //  // Unstable assertion: assertNotNull(minute0);
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       
//       Second second0 = new Second(int0, minute0);
//       //  // Unstable assertion: assertNotNull(second0);
//       //  // Unstable assertion: assertEquals(1392409234999L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570834L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409234000L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(-26, second0.getSecond());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       
//       int int1 = KeyEvent.VK_NUMPAD2;
//       //  // Unstable assertion: assertEquals(98, int1);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int1);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409234999L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(3601570834L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409234000L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(-26, second0.getSecond());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Nul1 '#nd' argument.", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Nul1 '#nd' argument.", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       
//       boolean boolean0 = true;
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals("Nul1 '#nd' argument.", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Nul1 '#nd' argument.", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       //  // Unstable assertion: assertFalse(int0 == int1);
//   }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       long long0 = (-197L);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertNotNull(fixedMillisecond0);
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       boolean boolean0 = true;
//       int int0 = timeSeries0.getIndex((RegularTimePeriod) fixedMillisecond0);
//       assertEquals((-1), int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) long0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//   }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       long long0 = (-171L);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       //  // Unstable assertion: assertNotNull(fixedMillisecond0);
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       String string0 = "Null 'end' argument.";
//       Class<Hour> class0 = Hour.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Null 'end' argument.", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Null 'end' argument.", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       boolean boolean0 = false;
//       int int0 = 1254;
//       Minute minute0 = new Minute();
//       //  // Unstable assertion: assertNotNull(minute0);
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       
//       Second second0 = new Second(int0, minute0);
//       //  // Unstable assertion: assertNotNull(second0);
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(1392409234000L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570834L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409234999L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(-26, second0.getSecond());
//       
//       int int1 = KeyEvent.VK_NUMPAD2;
//       //  // Unstable assertion: assertEquals(98, int1);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int1);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Null 'end' argument.", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Null 'end' argument.", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392409234000L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(3601570834L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409234999L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(-26, second0.getSecond());
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       
//       timeSeries0.removeAgedItems((long) int1, boolean0);
//       //  // Unstable assertion: assertEquals((-1L), quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals((-7948800000L), quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1969, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(7880L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Null 'end' argument.", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Null 'end' argument.", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       //  // Unstable assertion: assertFalse(int1 == int0);
//   }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       long long0 = (-197L);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertNotNull(fixedMillisecond0);
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       boolean boolean0 = true;
//       timeSeries0.removeAgedItems(long0, boolean0);
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       int int0 = timeSeries0.getIndex((RegularTimePeriod) fixedMillisecond0);
//       assertEquals((-1), int0);
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//   }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      int int1 = 3729;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int1, int1, int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Jun 06 23:09:00 GMT 1900", mockDate0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertFalse(int0 == int1);
      
      timeSeries0.setMaximumItemCount(int0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertFalse(int0 == int1);
      
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      assertNotNull(millisecond0);
      assertEquals("Wed Jun 06 23:09:00 GMT 1900", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-2195427060000L), millisecond0.getLastMillisecond());
      assertEquals(13734540000L, millisecond0.getSerialIndex());
      assertEquals((-2195427060000L), millisecond0.getFirstMillisecond());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) int1);
      assertNull(timeSeriesDataItem0);
      assertEquals("Wed Jun 06 23:09:00 GMT 1900", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-2195427060000L), millisecond0.getLastMillisecond());
      assertEquals(13734540000L, millisecond0.getSerialIndex());
      assertEquals((-2195427060000L), millisecond0.getFirstMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-360);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      String string0 = "w";
      Minute minute0 = Minute.parseMinute(string0);
      assertNull(minute0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) int0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       String string0 = "";
//       int int0 = 0;
//       Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       int int1 = SwingConstants.VERTICAL;
//       assertEquals(1, int1);
//       assertFalse(int1 == int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) hour0, (Number) int1);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // TimeSeries.update(TimePeriod, Number):  period does not exist.
//          //
//       }
//   }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      int int1 = 3716;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int1, int1, int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Jun 06 09:56:00 GMT 1900", mockDate0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int1, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(int1 == int0);
      
      String string0 = "Hit<:#i`3[nQJv@";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = (Hour)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals(3801L, hour0.getSerialIndex());
      assertEquals((-2195474400001L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getMonth());
      assertEquals(9, hour0.getHour());
      assertEquals(1900, hour0.getYear());
      assertEquals(6, hour0.getDayOfMonth());
      assertEquals((-2195478000000L), hour0.getFirstMillisecond());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Wed Jun 06 09:56:00 GMT 1900", mockDate0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      timeSeries0.setMaximumItemCount(int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) hour0, (double) int0, boolean0);
      assertEquals(3801L, hour0.getSerialIndex());
      assertEquals((-2195474400001L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getMonth());
      assertEquals(9, hour0.getHour());
      assertEquals(1900, hour0.getYear());
      assertEquals(6, hour0.getDayOfMonth());
      assertEquals((-2195478000000L), hour0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Wed Jun 06 09:56:00 GMT 1900", mockDate0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 400;
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance(int0);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      assertNotNull(day0);
      assertEquals(400L, day0.getSerialIndex());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(400L, day0.getSerialIndex());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0);
      assertEquals(400L, day0.getSerialIndex());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day1 = (Day)day0.next();
      assertNotNull(day1);
      assertNotSame(day0, day1);
      assertNotSame(day1, day0);
      assertEquals(400L, day0.getSerialIndex());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2, day1.getMonth());
      assertEquals(1901, day1.getYear());
      assertEquals(4, day1.getDayOfMonth());
      assertEquals(401L, day1.getSerialIndex());
      assertEquals((-2174515200000L), day1.getFirstMillisecond());
      assertEquals((-2174428800001L), day1.getLastMillisecond());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertFalse(day0.equals((Object)day1));
      assertFalse(day1.equals((Object)day0));
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int0);
      assertNotSame(day0, day1);
      assertNotSame(day1, day0);
      assertEquals(400L, day0.getSerialIndex());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(1901, day0.getYear());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2, day1.getMonth());
      assertEquals(1901, day1.getYear());
      assertEquals(4, day1.getDayOfMonth());
      assertEquals(401L, day1.getSerialIndex());
      assertEquals((-2174515200000L), day1.getFirstMillisecond());
      assertEquals((-2174428800001L), day1.getLastMillisecond());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(day0.equals((Object)day1));
      assertFalse(day1.equals((Object)day0));
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 3690;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int1, int1, int0);
      assertNotNull(mockDate0);
      assertEquals("Tue Jun 05 07:30:00 GMT 1900", mockDate0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int1, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(int1 == int0);
      
      String string0 = "z3K\\;E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = (Hour)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals("Tue Jun 05 07:30:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1900, hour0.getYear());
      assertEquals((-2195568000001L), hour0.getLastMillisecond());
      assertEquals(7, hour0.getHour());
      assertEquals(5, hour0.getDayOfMonth());
      assertEquals(6, hour0.getMonth());
      assertEquals((-2195571600000L), hour0.getFirstMillisecond());
      assertEquals(3775L, hour0.getSerialIndex());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) hour0, (double) int0, boolean0);
      assertEquals("Tue Jun 05 07:30:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1900, hour0.getYear());
      assertEquals((-2195568000001L), hour0.getLastMillisecond());
      assertEquals(7, hour0.getHour());
      assertEquals(5, hour0.getDayOfMonth());
      assertEquals(6, hour0.getMonth());
      assertEquals((-2195571600000L), hour0.getFirstMillisecond());
      assertEquals(3775L, hour0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) hour0, (double) int1, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Tue Jun 05 07:00:00 GMT 1900 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test29() {}
//   @Test
//   public void test29()  throws Throwable  {
//       int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
//       assertEquals(130, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       String string0 = "rH{b~=M89.jZe@wB<4d";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) quarter0);
//       assertNull(number0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//   }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(0, timeSeries2.getItemCount());
      assertNull(timeSeries2.getDescription());
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      
      Collection collection0 = timeSeries2.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotNull(collection0);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(0, timeSeries2.getItemCount());
      assertNull(timeSeries2.getDescription());
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
  }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       int int0 = 0;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNotNull(collection0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 400;
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance(int0);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      assertNotNull(day0);
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1901, day0.getYear());
      assertEquals(400L, day0.getSerialIndex());
      
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1901, day0.getYear());
      assertEquals(400L, day0.getSerialIndex());
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0);
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1901, day0.getYear());
      assertEquals(400L, day0.getSerialIndex());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertNotNull(collection0);
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1901, day0.getYear());
      assertEquals(400L, day0.getSerialIndex());
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(true, timeSeries2.isEmpty());
      assertNull(timeSeries2.getDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      MockDate mockDate0 = new MockDate((long) int0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Quarter quarter0 = new Quarter((Date) mockDate0);
      assertNotNull(quarter0);
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(7775999999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      assertNotNull(timeSeriesDataItem1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(7775999999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
  }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       
//       Class<Object> class0 = Object.class;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getRangeDescription());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-1552657834), int0);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getRangeDescription());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.setMaximumItemAge((long) int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Negative 'periods' argument.
//          //
//       }
//   }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 400;
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance(int0);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      assertNotNull(day0);
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals(1901, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(400L, day0.getSerialIndex());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals(1901, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(400L, day0.getSerialIndex());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals((-2174515200001L), day0.getLastMillisecond());
      assertEquals((-2174601600000L), day0.getFirstMillisecond());
      assertEquals(3, day0.getDayOfMonth());
      assertEquals(1901, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(400L, day0.getSerialIndex());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(400, spreadsheetDate0.toSerial());
      assertEquals(400L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       int int0 = 0;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//   }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "org.jfree.data.time.RegularTimePeriod";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = (-3632);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(359697985, int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) quarter0);
//       assertEquals(359697985, (int)integer0);
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 3;
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      String string0 = "pt@a0la;X-0G";
      timeSeries0.setDomainDescription(string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 130, Size: 0
         //
      }
  }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       double double0 = 0.0;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, double0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
//       assertNotNull(timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test47()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertTrue(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_CIRCUMFLEX;
      assertEquals(130, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      
      String string0 = null;
      timeSeries0.setRangeDescription(string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
  }
}
