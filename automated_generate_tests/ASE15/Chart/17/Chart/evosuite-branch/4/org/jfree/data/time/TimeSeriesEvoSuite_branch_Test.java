/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:21:24 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.GridBagConstraints;
import java.util.Collection;
import java.util.List;
import javax.swing.Action;
import javax.swing.JComponent;



import org.evosuite.runtime.testdata.FileSystemHandling;;

import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-1348);
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      byte byte0 = Character.FINAL_QUOTE_PUNCTUATION;
      //  // Unstable assertion: assertEquals((byte)30, byte0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) week0, (Number) byte0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(1841637485, int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-71);
      String string0 = null;
      Class<Year> class0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      int int1 = timeSeries0.hashCode();
      assertEquals((-957837036), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-1348);
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      boolean boolean0 = timeSeries0.equals((Object) year0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      //  // Unstable assertion: assertEquals(2, int0);
      
      String string0 = "x|pB4ot\\xW\\-Z'$";
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("x|pB4ot\\xW\\-Z'$", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("x|pB4ot\\xW\\-Z'$", timeSeries0.getDomainDescription());
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1396310399998L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      
      Quarter quarter1 = (Quarter)quarter0.next();
      //  // Unstable assertion: assertNotNull(quarter1);
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertEquals(2, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(1396310400000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8058L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404172799999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1396310399998L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-71);
      String string0 = null;
      Class<Year> class0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      int int1 = hour0.getDayOfMonth();
      //  // Unstable assertion: assertEquals(14, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertEquals("ToolTipText", string0);
      assertNotNull(string0);
      
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ToolTipText", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("ToolTipText", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = (-495);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 2132;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals(2132, year0.getYear());
      assertEquals(5143823999999L, year0.getLastMillisecond());
      assertEquals(2132L, year0.getSerialIndex());
      assertEquals(5112201600000L, year0.getFirstMillisecond());
      assertEquals("2132", year0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(2132, year0.getYear());
      assertEquals(5143823999999L, year0.getLastMillisecond());
      assertEquals(2132L, year0.getSerialIndex());
      assertEquals(5112201600000L, year0.getFirstMillisecond());
      assertEquals("2132", year0.toString());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      int int1 = 28;
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-1348);
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) hour0);
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) year0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
  }

  @Test
  public void test14()  throws Throwable  {
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      int int0 = 3432;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 2925;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      timeSeries0.setMaximumItemAge((long) int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = Action.ACCELERATOR_KEY;
      assertEquals("AcceleratorKey", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      int int0 = 803;
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) long0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = SerialDate.NEAREST;
      assertEquals(0, int0);
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.update((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       String string0 = "Year outside valid range.";
//       boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
//       assertFalse(boolean0);
//       
//       Class<Object> class0 = Object.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(954522147, int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // TimeSeries.update(TimePeriod, Number):  period does not exist.
//          //
//       }
//   }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 268;
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance(int0);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(24, spreadsheetDate0.getDayOfMonth());
      assertEquals(268, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(9, spreadsheetDate0.getMonth());
      
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      assertNotNull(day0);
      assertEquals(1900, day0.getYear());
      assertEquals(268L, day0.getSerialIndex());
      assertEquals(24, day0.getDayOfMonth());
      assertEquals(9, day0.getMonth());
      assertEquals((-2186006400000L), day0.getFirstMillisecond());
      assertEquals((-2185920000001L), day0.getLastMillisecond());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(24, spreadsheetDate0.getDayOfMonth());
      assertEquals(268, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(9, spreadsheetDate0.getMonth());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1900, day0.getYear());
      assertEquals(268L, day0.getSerialIndex());
      assertEquals(24, day0.getDayOfMonth());
      assertEquals(9, day0.getMonth());
      assertEquals((-2186006400000L), day0.getFirstMillisecond());
      assertEquals((-2185920000001L), day0.getLastMillisecond());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(24, spreadsheetDate0.getDayOfMonth());
      assertEquals(268, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(9, spreadsheetDate0.getMonth());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1900, day0.getYear());
      assertEquals(268L, day0.getSerialIndex());
      assertEquals(24, day0.getDayOfMonth());
      assertEquals(9, day0.getMonth());
      assertEquals((-2186006400000L), day0.getFirstMillisecond());
      assertEquals((-2185920000001L), day0.getLastMillisecond());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(24, spreadsheetDate0.getDayOfMonth());
      assertEquals(268, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(9, spreadsheetDate0.getMonth());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) long0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      timeSeries0.setMaximumItemAge((long) int0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day1 = (Day)timeSeries0.getNextTimePeriod();
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotSame(day1, day0);
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int0);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotSame(day1, day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotSame(day0, day1);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      
      Day day1 = (Day)timeSeries0.getNextTimePeriod();
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertNotSame(day1, day0);
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int0);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertNotSame(day1, day0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0, boolean0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-1348);
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) year0);
      //  // Unstable assertion: assertNull(number0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test29()  throws Throwable  {
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      int int0 = 837;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      Hour hour0 = null;
      // Undeclared exception!
      try {
        timeSeries0.delete((RegularTimePeriod) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      
      int int1 = hour0.getDayOfMonth();
      //  // Unstable assertion: assertEquals(14, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean0 = false;
      timeSeries1.removeAgedItems((long) int1, boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-1348);
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1346630400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1347235199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106674L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-68, week0.getWeek());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1402876799999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106766L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1402272000000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24, week0.getWeek());
      //  // Unstable assertion: assertEquals(1388534399999L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399998L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "Year outside valid range.";
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Year outside valid range.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Year outside valid range.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      long long0 = (-179L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = (-6);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals(0.0, (double)double0, 0.01D);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999999L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399998L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392407999999L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599998L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = Action.ACCELERATOR_KEY;
      assertEquals("AcceleratorKey", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 2132;
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals("2132", year0.toString());
      assertEquals(5143823999999L, year0.getLastMillisecond());
      assertEquals(5112201600000L, year0.getFirstMillisecond());
      assertEquals(2132L, year0.getSerialIndex());
      assertEquals(2132, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals("2132", year0.toString());
      assertEquals(5143823999999L, year0.getLastMillisecond());
      assertEquals(5112201600000L, year0.getFirstMillisecond());
      assertEquals(2132L, year0.getSerialIndex());
      assertEquals(2132, year0.getYear());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals("2132", year0.toString());
      assertEquals(5143823999999L, year0.getLastMillisecond());
      assertEquals(5112201600000L, year0.getFirstMillisecond());
      assertEquals(2132L, year0.getSerialIndex());
      assertEquals(2132, year0.getYear());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test41()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Year utside valid rnge.";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      double double0 = (-2.1474836594299884E9);
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of java.lang.Object.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-653);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      String string0 = "java.lang.Class";
      timeSeries0.setDomainDescription(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("java.lang.Class", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = GridBagConstraints.FIRST_LINE_END;
      assertEquals(24, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Size: 0
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 110;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertTrue(boolean0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test45()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Year outside valid range.";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription(string0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Year outside valid range.", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }
}
