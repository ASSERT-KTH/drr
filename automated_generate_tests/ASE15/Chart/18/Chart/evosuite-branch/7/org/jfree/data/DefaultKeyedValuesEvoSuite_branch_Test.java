/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:14 GMT 2014
 */

package org.jfree.data;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;




import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.UnknownKeyException;
import org.junit.runner.RunWith;


public class DefaultKeyedValuesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = defaultKeyedValues0.hashCode();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(1, int0);
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      defaultKeyedValues1.insertValue(int1, (Comparable) int1, (double) int1);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(int1 == int0);
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      defaultKeyedValues0.insertValue(int1, (Comparable) int1, (double) int1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(int1 == int0);
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      
      String string0 = Long.toBinaryString((long) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(int0 == int1);
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotNull(string0);
      assertEquals("1", string0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      
      defaultKeyedValues0.addValue((Comparable) string0, (Number) int0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertFalse(int0 == int1);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      
      defaultKeyedValues1.addValue((Comparable) int0, (Number) int0);
      assertEquals(2, defaultKeyedValues1.getItemCount());
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(int0 == int1);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertEquals(2, defaultKeyedValues1.getItemCount());
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(boolean0);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
  }

  @Test
  public void test02()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = (-2981);
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      defaultKeyedValues0.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(boolean0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = (-2981);
      Long long0 = new Long((long) int0);
      assertEquals((-2981L), (long)long0);
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) long0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = (-2981);
      defaultKeyedValues0.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
      
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = 0;
      defaultKeyedValues0.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
      
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = Double.MIN_EXPONENT;
      assertEquals((-1022), int0);
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.removeValue((Comparable) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (-1022) is not recognised.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double double0 = Double.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      defaultKeyedValues0.setValue((Comparable) double0, (Number) double0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      short short0 = (short) (-3);
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3), (short)short1);
      
      defaultKeyedValues0.setValue((Comparable) short1, (double) short0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
      assertTrue(short1.equals((Object)short0));
      
      defaultKeyedValues0.insertValue(int0, (Comparable) short0, (Number) double0);
      assertEquals(2, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test08()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = 0;
      defaultKeyedValues0.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.insertValue(int0, (Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = null;
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) string0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(boolean0);
      
      int int0 = 1361;
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) boolean0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      short short0 = (short) (-3);
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3), (short)short1);
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue((int) short1, (Comparable) short1, (Number) short1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      int int0 = defaultKeyedValues0.hashCode();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(1, int0);
      
      defaultKeyedValues0.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.addValue((Comparable) int0, (double) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Comparable<Float> comparable0 = null;
      double double0 = 3967.5130582136394;
      // Undeclared exception!
      try {
        defaultKeyedValues0.addValue(comparable0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double double0 = Double.MAX_VALUE;
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues0.getValue((Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 1.7976931348623157E308
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      short short0 = (short) (-3);
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3), (short)short1);
      
      defaultKeyedValues0.setValue((Comparable) short1, (double) short0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(short1.equals((Object)short0));
      
      Double double0 = (Double)defaultKeyedValues0.getValue((Comparable) short0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals((-3.0), (double)double0, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Comparable<DefaultKeyedValues> comparable0 = null;
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues0.getValue(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      List list0 = defaultKeyedValues0.getKeys();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(list0);
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      short short0 = (short) (-3);
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-3), (short)short1);
      
      defaultKeyedValues0.setValue((Comparable) short1, (double) short0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(short1.equals((Object)short0));
      
      defaultKeyedValues0.removeValue((Comparable) short0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      int int0 = 0;
      defaultKeyedValues1.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      
      defaultKeyedValues0.insertValue(int0, (Comparable) int0, (double) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertFalse(boolean0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
  }
}
