/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:41 GMT 2014
 */

package org.jfree.data;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;




import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.UnknownKeyException;
import org.junit.runner.RunWith;


public class DefaultKeyedValuesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double double0 = Double.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = 894.008854;
      assertFalse(double1 == double0);
      
      defaultKeyedValues0.addValue((Comparable) double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues0.addValue((Comparable) double0, (Number) double0);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(double0 == double1);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      float float0 = Float.NEGATIVE_INFINITY;
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      Number number0 = null;
      defaultKeyedValues0.addValue((Comparable) float0, number0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) int0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double double0 = Double.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      
      defaultKeyedValues0.addValue((Comparable) double0, (Number) double0);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertFalse(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertFalse(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0, defaultKeyedValues1.getItemCount());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      float float0 = Float.NEGATIVE_INFINITY;
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      defaultKeyedValues0.addValue((Comparable) float0, (Number) float0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      defaultKeyedValues0.sortByValues(sortOrder0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.addValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      defaultKeyedValues0.sortByKeys(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double double0 = Double.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.removeValue((Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The key (Infinity) is not recognised.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 1;
      defaultKeyedValues0.addValue((Comparable) int0, (double) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.setValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.insertValue(int0, (Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test09()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.insertValue(int0, (Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 20;
      Comparable<HashMap<Long, Object>> comparable0 = null;
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) comparable0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-2625);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) int0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'position' out of bounds.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = defaultKeyedValues0.hashCode();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try {
        Number number0 = defaultKeyedValues0.getValue((Comparable) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key not found: 1
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      defaultKeyedValues0.setValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      Comparable comparable0 = defaultKeyedValues0.getKey(int0);
      assertNotNull(comparable0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0, comparable0);
      
      Integer integer0 = (Integer)defaultKeyedValues0.getValue(comparable0);
      assertSame(integer0, comparable0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try {
        int int0 = defaultKeyedValues0.getIndex(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double double0 = Double.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      Comparable<ArrayList<Long>> comparable0 = null;
      // Undeclared exception!
      try {
        defaultKeyedValues0.setValue(comparable0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      List list0 = defaultKeyedValues0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double double0 = Double.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      defaultKeyedValues0.addValue((Comparable) double0, double0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      defaultKeyedValues0.removeValue((Comparable) double0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
  }

  @Test
  public void test18()  throws Throwable  {
      Comparable<Short> comparable0 = null;
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        defaultKeyedValues0.insertValue(int0, (Comparable) comparable0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double double0 = Double.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      defaultKeyedValues0.addValue((Comparable) double0, double0);
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues)defaultKeyedValues0.clone();
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotNull(defaultKeyedValues1);
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      
      boolean boolean0 = defaultKeyedValues0.equals((Object) defaultKeyedValues1);
      assertTrue(defaultKeyedValues1.equals((Object)defaultKeyedValues0));
      assertTrue(defaultKeyedValues0.equals((Object)defaultKeyedValues1));
      assertNotSame(defaultKeyedValues1, defaultKeyedValues0);
      assertNotSame(defaultKeyedValues0, defaultKeyedValues1);
      assertEquals(1, defaultKeyedValues1.getItemCount());
      assertEquals(1, defaultKeyedValues0.getItemCount());
      assertTrue(boolean0);
  }
}
