/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:38:16 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import javax.swing.Icon;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.tree.DefaultTreeCellRenderer;




import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.junit.runner.RunWith;
import sun.swing.ImageIconUIResource;


public class MinMaxCategoryRendererEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      MinMaxCategoryRenderer minMaxCategoryRenderer1 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer1);
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
      assertTrue(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
      
      boolean boolean0 = minMaxCategoryRenderer0.equals((Object) minMaxCategoryRenderer1);
      assertNotSame(minMaxCategoryRenderer0, minMaxCategoryRenderer1);
      assertNotSame(minMaxCategoryRenderer1, minMaxCategoryRenderer0);
      assertTrue(boolean0);
      assertTrue(minMaxCategoryRenderer0.equals((Object)minMaxCategoryRenderer1));
      assertTrue(minMaxCategoryRenderer1.equals((Object)minMaxCategoryRenderer0));
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer1.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer1.getRowCount());
      assertEquals(1, minMaxCategoryRenderer1.getPassCount());
      assertEquals(true, minMaxCategoryRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer1.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer1.getBaseCreateEntities());
  }

  @Test
  public void test01()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      
      CategoryAnnotation categoryAnnotation0 = null;
      boolean boolean0 = minMaxCategoryRenderer0.equals((Object) categoryAnnotation0);
      assertFalse(boolean0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test02()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      
      Icon icon0 = defaultTreeCellRenderer0.getIcon();
      assertNull(icon0);
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setMinIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      
      ImageIconUIResource imageIconUIResource0 = (ImageIconUIResource)defaultTreeCellRenderer0.getClosedIcon();
      assertNotNull(imageIconUIResource0);
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      
      minMaxCategoryRenderer0.setMinIcon((Icon) imageIconUIResource0);
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test
  public void test04()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      Icon icon0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setMaxIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      
      ImageIconUIResource imageIconUIResource0 = (ImageIconUIResource)defaultTreeCellRenderer0.getClosedIcon();
      assertNotNull(imageIconUIResource0);
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      
      minMaxCategoryRenderer0.setMaxIcon((Icon) imageIconUIResource0);
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
  }

  @Test
  public void test06()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      assertNotNull(metalTreeUI0);
      
      Icon icon0 = metalTreeUI0.getExpandedIcon();
      assertNull(icon0);
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setObjectIcon(icon0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'icon' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      
      Icon icon0 = minMaxCategoryRenderer0.getMinIcon();
      assertNotNull(icon0);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      
      minMaxCategoryRenderer0.setObjectIcon(icon0);
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
  }

  @Test
  public void test08()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setGroupStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      
      BasicStroke basicStroke0 = (BasicStroke)minMaxCategoryRenderer0.getBaseStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      
      minMaxCategoryRenderer0.setGroupStroke((Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
  }

  @Test
  public void test10()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.setGroupPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.05, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.1, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      
      Color color0 = (Color)ringPlot0.getNoDataMessagePaint();
      assertNotNull(color0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.05, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.1, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      
      minMaxCategoryRenderer0.setGroupPaint((Paint) color0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.05, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.05, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.1, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
  }

  @Test
  public void test12()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      boolean boolean0 = true;
      minMaxCategoryRenderer0.setDrawLines(boolean0);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      boolean boolean0 = false;
      minMaxCategoryRenderer0.setDrawLines(boolean0);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test
  public void test14()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      
      Color color0 = (Color)minMaxCategoryRenderer0.getGroupPaint();
      assertNotNull(color0);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
  }

  @Test
  public void test15()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      
      Icon icon0 = minMaxCategoryRenderer0.getMaxIcon();
      assertNotNull(icon0);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
  }

  @Test
  public void test16()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      assertNotNull(icon0);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test17()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      
      BasicStroke basicStroke0 = (BasicStroke)minMaxCategoryRenderer0.getGroupStroke();
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test18()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      
      boolean boolean0 = minMaxCategoryRenderer0.isDrawLines();
      assertFalse(boolean0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
  }
}
