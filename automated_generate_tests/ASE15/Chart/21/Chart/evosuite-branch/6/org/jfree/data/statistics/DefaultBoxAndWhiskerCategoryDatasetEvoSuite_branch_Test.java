/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:44:47 GMT 2014
 */

package org.jfree.data.statistics;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.ImageObserver;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.Range;
import org.jfree.data.UnknownKeyException;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Minute;
import org.junit.runner.RunWith;


public class DefaultBoxAndWhiskerCategoryDatasetEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals((Object) defaultBoxAndWhiskerCategoryDataset1);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(boolean0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      List list1 = defaultBoxAndWhiskerCategoryDataset0.getOutliers((Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(list1);
  }

  @Test
  public void test02()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      List list1 = defaultBoxAndWhiskerCategoryDataset0.getOutliers(int0, int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(list1);
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) int0, (Comparable) int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier(int0, int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) int0, (Comparable) int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier(int0, int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test07()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      double double0 = (-2.3866653947902385);
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, double0, double0, (double) int0, (double) int0, double0, double0, double0, (List) list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) double0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      int int1 = 1;
      assertFalse(int1 == int0);
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNull(number0);
  }

  @Test
  public void test08()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) int0, (Comparable) int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test09()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(list0);
      
      double double0 = (-2.3866653947902385);
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, double0, double0, double0, double0, double0, double0, double0, (List) list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) double0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Double double1 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue(int0, int0);
      assertEquals((-2.3866653947902385), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) int0, (Comparable) int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue(int0, int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) int0, (Comparable) int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = ImageObserver.ERROR;
      assertEquals(64, int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = true;
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) boolean0, (Comparable) int0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) boolean0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int1 = 1;
      assertFalse(int1 == int0);
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getQ3Value(int1, int1);
      assertEquals(64, (int)integer0);
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int1));
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) int0, (Comparable) int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getQ1Value(int0, int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = ImageObserver.ERROR;
      assertEquals(64, int0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(list0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = true;
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) boolean0, (Comparable) int0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      int int1 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) boolean0);
      assertFalse(int0 == int1);
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      int int2 = 0;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value(int1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNull(number0);
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = ImageObserver.ERROR;
      assertEquals(64, int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = true;
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) boolean0, (Comparable) int0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) list0, (Comparable) boolean0, (Comparable) boolean0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) boolean0, (Comparable) boolean0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getValue(int0, int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      double double0 = (-2.3866653947902385);
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      double double1 = (-666.1944911);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, double0, double0, double1, double1, double0, double0, double0, (List) list0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double1, (Comparable) double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
      
      int int1 = 1;
      assertFalse(int1 == int0);
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getValue(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(number0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      List<DefaultBoxAndWhiskerCategoryDataset> list0 = null;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) int0, (Comparable) int0);
      assertEquals(0, (int)integer0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = ImageObserver.ERROR;
      assertEquals(64, int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (Number) int0, (List) list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(boxAndWhiskerItem0);
      
      boolean boolean0 = true;
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) boolean0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) boolean0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) int0, (Comparable) int0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(number0);
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      double double0 = (-2.3866653947902385);
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, double0, double0, double0, double0, double0, double0, double0, (List) list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) double0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Double double1 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMeanValue(int0, int0);
      assertEquals((-2.3866653947902385), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      double double0 = (-2.3866653947902385);
      double double1 = (-666.1944911);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, double0, double0, double1, double1, double0, double0, double0, (List) list0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double1, (Comparable) double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(double1, double1, double1, double1, double1, double1, double1, double0, (List) list0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(boxAndWhiskerItem1);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) double1, (Comparable) double1);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(boxAndWhiskerItem1.equals((Object)boxAndWhiskerItem0));
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      double double0 = (-2.3866653947902385);
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      double double1 = (-666.1944911);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, double0, double0, double1, double1, double0, double0, double0, (List) list0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double1, (Comparable) double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) list0, (Comparable) double1, (Comparable) double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = null;
      Object[] objectArray0 = new Object[7];
      int int0 = 87;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, int0);
      assertNotNull(defaultTableModel0);
      
      Vector vector0 = defaultTableModel0.getDataVector();
      assertEquals(87, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(87, vector0.size());
      assertEquals("[[null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null]]", vector0.toString());
      assertNotNull(vector0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number0, number0, number0, (List) vector0);
      assertEquals(87, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(87, vector0.size());
      assertEquals("[[null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null]]", vector0.toString());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(87, vector0.capacity());
      assertEquals(false, vector0.isEmpty());
      assertEquals(87, vector0.size());
      assertEquals("[[null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null]]", vector0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = SwingConstants.HORIZONTAL;
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        Number number0 = defaultBoxAndWhiskerCategoryDataset0.getValue((Comparable) int0, (Comparable) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (0) not recognised.
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = (DefaultBoxAndWhiskerCategoryDataset)defaultBoxAndWhiskerCategoryDataset0.clone();
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset1.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = true;
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeUpperBound(boolean0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      String string0 = Action.DEFAULT;
      assertEquals("Default", string0);
      assertNotNull(string0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex((Comparable) string0);
      assertEquals((-1), int0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      String string0 = "4";
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeLowerBound(boolean0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      //  // Unstable assertion: assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      //  // Unstable assertion: assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      //  // Unstable assertion: assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = 16;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertEquals("Wed May 16 16:16:16 GMT 1917", mockDate0.toString());
      //  // Unstable assertion: assertNotNull(mockDate0);
      
      Minute minute0 = new Minute((Date) mockDate0);
      //  // Unstable assertion: assertEquals("Wed May 16 16:16:16 GMT 1917", mockDate0.toString());
      //  // Unstable assertion: assertEquals(16, minute0.getHourValue());
      //  // Unstable assertion: assertEquals((-1660808641440L), minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9139216L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(16, minute0.getMinute());
      //  // Unstable assertion: assertEquals((-1660808581441L), minute0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(minute0);
      
      int int1 = defaultBoxAndWhiskerCategoryDataset0.getColumnIndex((Comparable) minute0);
      //  // Unstable assertion: assertEquals((-1), int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals("Wed May 16 16:16:16 GMT 1917", mockDate0.toString());
      //  // Unstable assertion: assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      //  // Unstable assertion: assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      //  // Unstable assertion: assertEquals(16, minute0.getHourValue());
      //  // Unstable assertion: assertEquals((-1660808641440L), minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9139216L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(16, minute0.getMinute());
      //  // Unstable assertion: assertEquals((-1660808581441L), minute0.getLastMillisecond());
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertNotNull(range0);
  }

  @Test
  public void test33()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = (-19);
      // Undeclared exception!
      try {
        Comparable comparable0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKey(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = 1159;
      // Undeclared exception!
      try {
        Comparable comparable0 = defaultBoxAndWhiskerCategoryDataset0.getRowKey(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1159, Size: 0
         //
      }
  }
}
