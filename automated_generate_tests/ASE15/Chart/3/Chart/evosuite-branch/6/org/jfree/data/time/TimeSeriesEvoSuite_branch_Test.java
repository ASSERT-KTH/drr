/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:45:21 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.Cursor;
import java.awt.image.ImageObserver;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.text.AbstractDocument;




import org.jfree.data.general.SeriesException;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.MatrixSeries;
import org.junit.runner.RunWith;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       
//       Hour hour1 = (Hour)hour0.previous();
//       assertNotNull(hour1);
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(19, hour1.getHour());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       double double0 = timeSeries0.getMaxY();
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, double0, 0.01D);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour0, hour1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour1, (Number) double0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(19, hour1.getHour());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//   }

  @Test
  public void test01()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Year year1 = (Year)year0.previous();
      assertNotNull(year1);
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      long long0 = 2602L;
      long long1 = year1.getFirstMillisecond();
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1356998400000L, long1);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertFalse(long1 == long0);
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      boolean boolean0 = true;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) long0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2602.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2602.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertFalse(year1.equals((Object)year0));
      assertFalse(long0 == long1);
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      timeSeries0.add((RegularTimePeriod) year0, (Number) long1, boolean0);
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2602.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertFalse(long1 == long0);
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2602.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2602.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year0, year1);
  }

  @Test
  public void test02()  throws Throwable  {
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Year year1 = (Year)year0.previous();
      //  // Unstable assertion: assertNotNull(year1);
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1372766399999L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2013", year1.toString());
      //  // Unstable assertion: assertEquals(1356998400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2013, year1.getYear());
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertNotSame(year1, year0);
      
      long long0 = year1.getFirstMillisecond();
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1372766399999L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2013", year1.toString());
      //  // Unstable assertion: assertEquals(1356998400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2013, year1.getYear());
      //  // Unstable assertion: assertEquals(1356998400000L, long0);
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertNotSame(year1, year0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) year1, (Number) long0);
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1372766399999L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2013", year1.toString());
      //  // Unstable assertion: assertEquals(1356998400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2013, year1.getYear());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertNotSame(year1, year0);
      
      timeSeries0.add((RegularTimePeriod) year0, (Number) long0, boolean0);
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1372766399999L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2013", year1.toString());
      //  // Unstable assertion: assertEquals(1356998400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2013, year1.getYear());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertNotSame(year1, year0);
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals((-82153742), int0);
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      //  // Unstable assertion: assertNotSame(year0, year1);
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2144165425, int0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) int0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertNull(timeSeriesDataItem1);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2.144165425E9, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2.144165425E9, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       boolean boolean0 = true;
//       timeSeries1.add((RegularTimePeriod) hour0, (double) int0, boolean0);
//       assertEquals(2.144165425E9, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2.144165425E9, timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2.144165425E9, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2.144165425E9, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       boolean boolean1 = timeSeries0.equals((Object) timeSeries1);
//       assertEquals(2.144165425E9, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2.144165425E9, timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2.144165425E9, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2.144165425E9, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertFalse(boolean1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(boolean1 == boolean0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//   }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries1);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(".", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(".", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(".", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(".", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertFalse(boolean0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       Number number0 = timeSeries1.getValue((RegularTimePeriod) hour0);
//       assertNull(number0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertFalse(boolean0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       timeSeries1.setRangeDescription(string0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(".", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(".", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertFalse(boolean0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//   }

  @Test
  public void test07()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean0 = timeSeries0.equals((Object) year0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = AbstractDocument.ElementNameAttribute;
      assertNotNull(string0);
      assertEquals("$ename", string0);
      
      long long0 = 0L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertNotNull(fixedMillisecond1);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("$ename", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("$ename", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(".", timeSeries0.getRangeDescription());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       Class<Week> class0 = Week.class;
//       Date date0 = null;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals("java.util.SimpleTimeZone[id=.,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals(".", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       
//       RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) simpleTimeZone0);
//       assertNull(regularTimePeriod0);
//       assertEquals("java.util.SimpleTimeZone[id=.,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals(".", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, regularTimePeriod0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 0;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       
//       RegularTimePeriod regularTimePeriod0 = null;
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) millisecond0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'start' argument.
//          //
//       }
//   }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "r{Z9CqP?}Wp_LIz";
      int int0 = 3;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getRangeDescription());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = Cursor.WAIT_CURSOR;
      assertEquals(3, int0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) int0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Comparable comparable0 = simpleHistogramDataset0.getSeriesKey(int0);
      assertNotNull(comparable0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(3, comparable0);
      
      String string0 = "#Da|iW+";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("#Da|iW+", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("#Da|iW+", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-3294);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-13);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      int int1 = (-1591);
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      
      Year year1 = (Year)year0.previous();
      assertNotNull(year1);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      long long0 = year1.getFirstMillisecond();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, long0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year1, (Number) long0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      timeSeries0.add((RegularTimePeriod) year0, (Number) long0, boolean0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year0, year1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = ")z/auO1";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      double double0 = timeSeries0.getMinY();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01D);
      
      long long0 = (-9223372036854775808L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, boolean0);
      assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = ")z/auO1";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      long long0 = (-9223372036854775808L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(".", timeSeries0.getDomainDescription());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       
//       timeSeries0.clear();
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(".", timeSeries0.getDomainDescription());
//   }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-13);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test20()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      long long0 = year0.getFirstMillisecond();
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, long0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year0, (Number) long0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1.3885344E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1.3885344E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1.3885344E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1.3885344E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test21()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      
      String string0 = ".";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) hour0, string0, string0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(".", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(".", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      double double0 = Double.POSITIVE_INFINITY;
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) hour0, double0, boolean0);
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      timeSeries1.add((RegularTimePeriod) hour0, double0);
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(".", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(".", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals((-1892130733), int0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean1 = timeSeries1.equals((Object) timeSeries0);
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(".", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(".", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      timeSeries0.removeAgedItems((long) int0, boolean1);
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(".", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(".", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      timeSeries1.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(".", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(".", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test
  public void test22()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      long long0 = year0.getFirstMillisecond();
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, long0);
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      
      String string0 = ".";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      double double0 = Double.POSITIVE_INFINITY;
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) hour0, double0, boolean0);
      //  // Unstable assertion: assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392408000000L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599999L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals((-2102318626), int0);
      
      boolean boolean1 = timeSeries0.equals((Object) timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      timeSeries0.removeAgedItems((long) int0, boolean1);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      
      Year year1 = (Year)year0.previous();
      assertNotNull(year1);
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      long long0 = 0L;
      timeSeries0.setMaximumItemAge(long0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year0, year1);
      
      long long1 = year1.getFirstMillisecond();
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1356998400000L, long1);
      assertFalse(long1 == long0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) year1, (Number) long1);
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(long1 == long0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      timeSeries0.add((RegularTimePeriod) year0, (Number) long1, boolean0);
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1.3569984E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(long1 == long0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       int int0 = 0;
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(".", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(".", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//   }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
//       assertNull(number0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       long long0 = 124L;
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) long0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(124.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(124.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       String string0 = ")z/auO1";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       double double0 = timeSeries0.getMinY();
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, double0, 0.01D);
//       
//       long long0 = (-9223372036854775808L);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) double0, boolean0);
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getMiddleMillisecond());
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       
//       int int0 = 16;
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-9.223372036854776E18), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-9.223372036854776E18), timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (double) int0, boolean0);
//       assertEquals(1392409281320L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(16.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-9.223372036854776E18), timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(fixedMillisecond1);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(16.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-9.223372036854776E18), timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(1392409281320L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(16.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-9.223372036854776E18), timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertTrue(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
//       assertTrue(timeSeriesDataItem0.equals((Object)timeSeriesDataItem1));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(timeSeriesDataItem1, timeSeriesDataItem0);
//       assertNotSame(timeSeriesDataItem0, timeSeriesDataItem1);
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
//       assertNull(number0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) hour0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertTrue(timeSeriesDataItem1.equals((Object)timeSeriesDataItem0));
//       assertTrue(timeSeriesDataItem0.equals((Object)timeSeriesDataItem1));
//       assertNotSame(timeSeriesDataItem1, timeSeriesDataItem0);
//       assertNotSame(timeSeriesDataItem0, timeSeriesDataItem1);
//   }

  @Test
  public void test29() {}
//   @Test
//   public void test29()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) int0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       
//       timeSeries0.add(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals(2L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(2L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(2L, fixedMillisecond0.getSerialIndex());
//       assertEquals(2L, fixedMillisecond0.getLastMillisecond());
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
//          //
//       }
//   }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) hour0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'period' argument.
//          //
//       }
//   }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       int int0 = 84;
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       timeSeries1.add((RegularTimePeriod) hour0, (double) int0);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(84.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(84.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
//       assertNotNull(timeSeries2);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(84.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(84.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(84.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(84.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries2.isEmpty());
//       assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       assertEquals(0, timeSeries2.getItemCount());
//       assertEquals(true, timeSeries2.getNotify());
//       assertEquals("Value", timeSeries2.getRangeDescription());
//       assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       assertNull(timeSeries2.getDescription());
//       assertEquals("Time", timeSeries2.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertFalse(timeSeries1.equals((Object)timeSeries2));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries2));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries2.equals((Object)timeSeries1));
//       assertFalse(timeSeries2.equals((Object)timeSeries0));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries1, timeSeries2);
//       assertNotSame(timeSeries0, timeSeries2);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries2, timeSeries1);
//       assertNotSame(timeSeries2, timeSeries0);
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       String string0 = "1zauO&";
//       int int0 = 3;
//       MatrixSeries matrixSeries0 = new MatrixSeries(string0, int0, int0);
//       assertNotNull(matrixSeries0);
//       assertEquals(3, matrixSeries0.getRowCount());
//       assertEquals(true, matrixSeries0.getNotify());
//       assertEquals(9, matrixSeries0.getItemCount());
//       assertEquals(false, matrixSeries0.isEmpty());
//       assertNull(matrixSeries0.getDescription());
//       assertEquals(3, matrixSeries0.getColumnsCount());
//       
//       Comparable comparable0 = matrixSeries0.getKey();
//       assertNotNull(comparable0);
//       assertEquals(3, matrixSeries0.getRowCount());
//       assertEquals(true, matrixSeries0.getNotify());
//       assertEquals(9, matrixSeries0.getItemCount());
//       assertEquals(false, matrixSeries0.isEmpty());
//       assertNull(matrixSeries0.getDescription());
//       assertEquals(3, matrixSeries0.getColumnsCount());
//       assertEquals("1zauO&", comparable0);
//       assertSame(string0, comparable0);
//       
//       TimeSeries timeSeries0 = new TimeSeries(comparable0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(3, matrixSeries0.getRowCount());
//       assertEquals(true, matrixSeries0.getNotify());
//       assertEquals(9, matrixSeries0.getItemCount());
//       assertEquals(false, matrixSeries0.isEmpty());
//       assertNull(matrixSeries0.getDescription());
//       assertEquals(3, matrixSeries0.getColumnsCount());
//       assertSame(string0, comparable0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) int0, boolean0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(3, matrixSeries0.getRowCount());
//       assertEquals(true, matrixSeries0.getNotify());
//       assertEquals(9, matrixSeries0.getItemCount());
//       assertEquals(false, matrixSeries0.isEmpty());
//       assertNull(matrixSeries0.getDescription());
//       assertEquals(3, matrixSeries0.getColumnsCount());
//       assertSame(string0, comparable0);
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(3.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(3.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(3, matrixSeries0.getRowCount());
//       assertEquals(true, matrixSeries0.getNotify());
//       assertEquals(9, matrixSeries0.getItemCount());
//       assertEquals(false, matrixSeries0.isEmpty());
//       assertNull(matrixSeries0.getDescription());
//       assertEquals(3, matrixSeries0.getColumnsCount());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertSame(string0, comparable0);
//       assertNotSame(timeSeries0, timeSeries1);
//   }

  @Test
  public void test33()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      Year year1 = (Year)year0.previous();
      assertNotNull(year1);
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      long long0 = 2602L;
      long long1 = year1.getFirstMillisecond();
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1356998400000L, long1);
      assertFalse(long1 == long0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      boolean boolean0 = true;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) long0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2602.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2602.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertFalse(long0 == long1);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      timeSeries0.add((RegularTimePeriod) year0, (Number) long1, boolean0);
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2602.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertFalse(long1 == long0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) long1);
      assertEquals(1372766399999L, year1.getMiddleMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertEquals(1388534399999L, year1.getLastMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1356998400000L, year1.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2602.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1.3569984E12, timeSeries0.getMaxY(), 0.01D);
      assertFalse(long1 == long0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
//       assertNull(number0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = 0;
//       timeSeries0.update(int0, number0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test
  public void test35()  throws Throwable  {
      String string0 = ")z/auO1";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      long long0 = (-9223372036854775808L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-9223372036854775808L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), fixedMillisecond0.getSerialIndex());
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
      }
  }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       
//       timeSeries0.update((RegularTimePeriod) hour0, (Number) int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertFalse(int1 == int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) int0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertFalse(int0 == int1);
//       
//       timeSeries0.add(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
//       assertNull(number0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       boolean boolean0 = false;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) hour0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       boolean boolean0 = false;
//       Class<TimeSeries> class0 = TimeSeries.class;
//       timeSeries0.timePeriodClass = class0;
//       assertNotNull(timeSeries0.timePeriodClass);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("class org.jfree.data.time.TimeSeries", timeSeries0.timePeriodClass.toString());
//       assertEquals(false, timeSeries0.timePeriodClass.isAnnotation());
//       assertEquals(1, timeSeries0.timePeriodClass.getModifiers());
//       assertEquals(false, timeSeries0.timePeriodClass.isSynthetic());
//       assertEquals(false, timeSeries0.timePeriodClass.isEnum());
//       assertEquals(false, timeSeries0.timePeriodClass.isPrimitive());
//       assertEquals(false, timeSeries0.timePeriodClass.isInterface());
//       assertEquals(false, timeSeries0.timePeriodClass.isArray());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) hour0, (double) int0, boolean0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.TimeSeries.
//          //
//       }
//   }

  @Test
  public void test40()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getFirstMillisecond();
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, long0);
      
      Minute minute0 = second0.getMinute();
      assertNotNull(minute0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      
      String string0 = "Overwritten values from: ";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Overwritten values from: ", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Overwritten values from: ", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) long0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertNull(timeSeriesDataItem1);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1.392409281E12, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Overwritten values from: ", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Overwritten values from: ", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1.392409281E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      
      Day day0 = Day.parseDay(string0);
      assertNull(day0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries1);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(".", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(".", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       boolean boolean0 = false;
//       timeSeries1.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(".", timeSeries1.getDomainDescription());
//       assertEquals(2.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(".", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2.0, timeSeries1.getMaxY(), 0.01D);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
//       assertNotNull(collection0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(".", timeSeries1.getDomainDescription());
//       assertEquals(2.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(".", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2.0, timeSeries1.getMaxY(), 0.01D);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//   }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       
//       String string0 = ".";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNotNull(collection0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       
//       String string0 = "6.";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       double double0 = Double.POSITIVE_INFINITY;
//       timeSeries0.add((RegularTimePeriod) hour0, double0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertNotNull(collection0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.POSITIVE_INFINITY, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//   }

  @Test
  public void test45()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "r{Z9CqP?}Wp_LIz";
      String string1 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string1, string1);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      int int0 = timeSeries0.hashCode();
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals((-957837036), int0);
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge((long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = (-1140);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
//       assertNull(number0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       timeSeries0.add((RegularTimePeriod) hour0, number0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Number number1 = timeSeries0.getValue((RegularTimePeriod) hour0);
//       assertNull(number1);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "r{Z9CqP?}Wp_LIz";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("r{Z9CqP?}Wp_LIz", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = ")z/auO1";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Class class0 = timeSeries0.getTimePeriodClass();
      assertNull(class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test52()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      
      String string0 = "No bin.";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("No bin.", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("No bin.", timeSeries0.getDomainDescription());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotNull(timeSeries1);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("No bin.", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("No bin.", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("No bin.", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("No bin.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = ".";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = ".";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(".", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(".", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription(string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(".", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(".", timeSeries0.getDomainDescription());
  }

  @Test
  public void test55() {}
//   @Test
//   public void test55()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       
//       int int0 = ImageObserver.HEIGHT;
//       assertEquals(2, int0);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(2.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(2.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//   }

  @Test
  public void test56() {}
//   @Test
//   public void test56()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       
//       String string0 = "3.";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("3.", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("3.", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertEquals("3.", timeSeries1.getRangeDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("3.", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("3.", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("3.", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertEquals("3.", timeSeries1.getRangeDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("3.", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("3.", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("3.", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertTrue(boolean0);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//   }
}
